<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一个积分</title>
    <url>/Math/2020-08-29-a-integral/</url>
    <content><![CDATA[<h1 id="题目-amp-解答"><a href="#题目-amp-解答" class="headerlink" title="题目 &amp; 解答"></a>题目 &amp; 解答</h1><p>$ \int_0^1 (x-x^2)^n dx$ (换元$t&#x3D;x-\frac{1}{2}$</p>
<p>$&#x3D; \int_{-\frac{1}{2}}^{\frac{1}{2}} (\frac{1}{4} - x^2)^n dx$ (偶函数</p>
<p>$&#x3D; 2 \int_{0}^{\frac{1}{2}} (\frac{1}{4} - x^2)^n dx $(换元$t&#x3D;2x$</p>
<p>$&#x3D; \frac{1}{4^n}\int_0^1 (1 - x^2)^n dx$(换元$t&#x3D;sin(x)$</p>
<p>$&#x3D; \frac{1}{4^n} \int_0^{\frac{\pi}{2}} (1 - sin(x)^2)^n d(sin(x))$</p>
<p>$&#x3D; \frac{1}{4^n} \int_0^{\frac{\pi}{2}} cos(x)^{2n+1} d x$ (<code>Wallis&#39;_integrals</code></p>
<p>$&#x3D; \frac{1}{4^n} \cdot \frac{2n(2n-2)\cdots 2}{(2n+1)(2n-1)3}$</p>
]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>\integral</tag>
      </tags>
  </entry>
  <entry>
    <title>甜甜圈数学 from 2006</title>
    <url>/Math/2021-12-31-donut/</url>
    <content><![CDATA[<h1 id="本文尽量逐句翻译"><a href="#本文尽量逐句翻译" class="headerlink" title="本文尽量逐句翻译"></a>本文尽量逐句翻译</h1><h2 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h2><p><code>donut.c</code>:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">             k;<span class="type">double</span> <span class="title function_">sin</span><span class="params">()</span></span><br><span class="line">         ,<span class="title function_">cos</span><span class="params">()</span>;main()&#123;<span class="type">float</span> A=</span><br><span class="line">       <span class="number">0</span>,B=<span class="number">0</span>,i,j,z[<span class="number">1760</span>];<span class="type">char</span> b[</span><br><span class="line">     <span class="number">1760</span>];<span class="built_in">printf</span>(<span class="string">&quot;\x1b[2J&quot;</span>);<span class="keyword">for</span>(;;</span><br><span class="line">  )&#123;<span class="built_in">memset</span>(b,<span class="number">32</span>,<span class="number">1760</span>);<span class="built_in">memset</span>(z,<span class="number">0</span>,<span class="number">7040</span>)</span><br><span class="line">  ;<span class="keyword">for</span>(j=<span class="number">0</span>;<span class="number">6.28</span>&gt;j;j+=<span class="number">0.07</span>)<span class="keyword">for</span>(i=<span class="number">0</span>;<span class="number">6.28</span></span><br><span class="line"> &gt;i;i+=<span class="number">0.02</span>)&#123;<span class="type">float</span> c=<span class="built_in">sin</span>(i),d=<span class="built_in">cos</span>(j),e=</span><br><span class="line"> <span class="built_in">sin</span>(A),f=<span class="built_in">sin</span>(j),g=<span class="built_in">cos</span>(A),h=d+<span class="number">2</span>,D=<span class="number">1</span>/(c*</span><br><span class="line"> h*e+f*g+<span class="number">5</span>),l=<span class="built_in">cos</span>      (i),m=<span class="built_in">cos</span>(B),n=s\</span><br><span class="line">in(B),t=c*h*g-f*        e;<span class="type">int</span> x=<span class="number">40</span>+<span class="number">30</span>*D*</span><br><span class="line">(l*h*m-t*n),y=            <span class="number">12</span>+<span class="number">15</span>*D*(l*h*n</span><br><span class="line">+t*m),o=x+<span class="number">80</span>*y,          N=<span class="number">8</span>*((f*e-c*d*g</span><br><span class="line"> )*m-c*d*e-f*g-l        *d*n);<span class="keyword">if</span>(<span class="number">22</span>&gt;y&amp;&amp;</span><br><span class="line"> y&gt;<span class="number">0</span>&amp;&amp;x&gt;<span class="number">0</span>&amp;&amp;<span class="number">80</span>&gt;x&amp;&amp;D&gt;z[o])&#123;z[o]=D;;;b[o]=</span><br><span class="line"> <span class="string">&quot;.,-~:;=!*#$@&quot;</span>[N&gt;<span class="number">0</span>?N:<span class="number">0</span>];&#125;&#125;<span class="comment">/*#****!!-*/</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\x1b[H&quot;</span>);<span class="keyword">for</span>(k=<span class="number">0</span>;<span class="number">1761</span>&gt;k;k++)</span><br><span class="line">   <span class="built_in">putchar</span>(k%<span class="number">80</span>?b[k]:<span class="number">10</span>);A+=<span class="number">0.04</span>;B+=</span><br><span class="line">     <span class="number">0.02</span>;&#125;&#125;<span class="comment">/*****####*******!!=;:~</span></span><br><span class="line"><span class="comment">       ~::==!!!**********!!!==::-</span></span><br><span class="line"><span class="comment">         .,~~;;;========;;;:~-.</span></span><br><span class="line"><span class="comment">             ..,--------,*/</span></span><br></pre></td></tr></table></figure>

<p><code>gcc -o donut donut.c -lm &amp;&amp; ./donut</code></p>
<p>这是作者第一次尝试混淆C代码, 这个版本是相对简单优雅的</p>
<h2 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h2><p><strong>注意</strong> 下面13行,因为我本地的hexo相关工具不能正确工作,为了尽可能展示代码,我在<code>&lt;</code>和<code>.</code>之间加了一个空格,实际上是没有空格的,所以如果从这里拷贝代码,记得去掉多出的空格</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_,x,y,o       ,N;<span class="type">char</span>       b[<span class="number">1840</span>]       ;p(n,c)</span><br><span class="line">&#123;<span class="keyword">for</span>(;n       --;x++)       c==<span class="number">10</span>?y       +=<span class="number">80</span>,x=</span><br><span class="line">o<span class="number">-1</span>:x&gt;=       <span class="number">0</span>?<span class="number">80</span>&gt;x?       c!=<span class="string">&#x27;~&#x27;</span>?       b[y+x]=</span><br><span class="line">c:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>       ;&#125;c(q,l       ,r,o,v)       <span class="type">char</span>*l,</span><br><span class="line">       *r;&#123;<span class="keyword">for</span>       (;q&gt;=<span class="number">0</span>;       )q=(<span class="string">&quot;A&quot;</span>       <span class="string">&quot;YLrZ^&quot;</span></span><br><span class="line">       <span class="string">&quot;w^?EX&quot;</span>           <span class="string">&quot;novne&quot;</span>     <span class="string">&quot;bYV&quot;</span>       <span class="string">&quot;dO&#125;LE&quot;</span></span><br><span class="line">       <span class="string">&quot;&#123;yWlw&quot;</span>      <span class="string">&quot;Jl_Ja|[ur]zovpu&quot;</span>   <span class="string">&quot;&quot;</span>       <span class="string">&quot;i]e|y&quot;</span></span><br><span class="line">       <span class="string">&quot;ao_Be&quot;</span>   <span class="string">&quot;osmIg&#125;r]]r]m|wkZU&#125;&#123;O&#125;&quot;</span>         <span class="string">&quot;xys]]\</span></span><br><span class="line"><span class="string">x|ya|y&quot;</span>        <span class="string">&quot;sm||&#123;uel&#125;|r&#123;yIcsm||ya[&#123;uE&quot;</span>  <span class="string">&quot;&#123;qY\</span></span><br><span class="line"><span class="string">w|gGor&quot;</span>      <span class="string">&quot;VrVWioriI&#125;Qac&#123;&#123;BIY[sXjjsVW]aM&quot;</span>  <span class="string">&quot;T\</span></span><br><span class="line"><span class="string">tXjjss&quot;</span>     <span class="string">&quot;sV_OUkRUlSiorVXp_qOM&gt;E&#123;BadB&quot;</span>[_/<span class="number">6</span>  ]-</span><br><span class="line"><span class="number">62</span>&gt;&gt;_++    %<span class="number">6</span>&amp;<span class="number">1</span>?r[q]:l[q])-o;<span class="keyword">return</span> q;&#125;E(a)&#123;<span class="keyword">for</span> (</span><br><span class="line">       o= x=a,y=<span class="number">0</span>,_=<span class="number">0</span>;<span class="number">1095</span>&gt;_;)a= <span class="string">&quot; &lt; .,`&#x27;/)(\n-&quot;</span>  <span class="string">&quot;\\_~&quot;</span>[</span><br><span class="line">       c  (<span class="number">12</span>,<span class="string">&quot;!%*/&#x27;)#3&quot;</span>  <span class="string">&quot;&quot;</span>     <span class="string">&quot;+-6,8&quot;</span>,<span class="string">&quot;\&quot;(.$&quot;</span> <span class="string">&quot;01245&quot;</span></span><br><span class="line">       <span class="string">&quot; &amp;79&quot;</span>,<span class="number">46</span>)+<span class="number">14</span>],  p(<span class="string">&quot;&quot;</span>       <span class="string">&quot;#$%&amp;&#x27;()0:439 &quot;</span>[ c(<span class="number">10</span></span><br><span class="line">       , <span class="string">&quot;&amp;(*#,./1345&quot;</span> ,<span class="string">&quot;&#x27;)&quot;</span>       <span class="string">&quot;+%-$02\&quot;! &quot;</span>, <span class="number">44</span>)+<span class="number">12</span>]</span><br><span class="line"><span class="number">-34</span>,a);  &#125;main(k)&#123;<span class="type">float</span>     A=<span class="number">0</span>,B= <span class="number">0</span>,i,j,z[<span class="number">1840</span>];</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>  <span class="string">&quot;\x1b[2J&quot;</span>);;;      <span class="keyword">for</span>(;; )&#123;<span class="type">float</span> e=<span class="built_in">sin</span></span><br><span class="line">(A), n=  <span class="built_in">sin</span>(B),g=<span class="built_in">cos</span>(      A),m=  <span class="built_in">cos</span>(B);<span class="keyword">for</span>(k=</span><br><span class="line"><span class="number">0</span>;<span class="number">1840</span>&gt;   k;k++)y=<span class="number">-10</span>-k/    <span class="number">80</span>   ,o=<span class="number">41</span>+(k%<span class="number">80</span><span class="number">-40</span></span><br><span class="line">       )* <span class="number">1.3</span>/y+n,N=A<span class="number">-100.0</span>/y,b[k]=<span class="string">&quot;.#&quot;</span>[o+N&amp;<span class="number">1</span>],  z[k]=<span class="number">0</span>;</span><br><span class="line">       E(  <span class="number">80</span>-(<span class="type">int</span>)(<span class="number">9</span>*B)%<span class="number">250</span>);<span class="keyword">for</span>(j=<span class="number">0</span>;<span class="number">6.28</span>&gt;j;j   +=<span class="number">0.07</span>)</span><br><span class="line">       <span class="keyword">for</span>  (i=<span class="number">0</span>;<span class="number">6.28</span>&gt;i;i+=<span class="number">0.02</span>)&#123;<span class="type">float</span> c=<span class="built_in">sin</span>(    i),  d=</span><br><span class="line">       <span class="built_in">cos</span>(  j),f=<span class="built_in">sin</span>(j),h=d+<span class="number">2</span>,D=<span class="number">15</span>/(c*h*e+f     *g+<span class="number">5</span>),l</span><br><span class="line">=<span class="built_in">cos</span>(i)        ,t=c*h*g-f*e;x=<span class="number">40</span>+<span class="number">2</span>*D*(l*h*  m-t*n</span><br><span class="line">),y=<span class="number">12</span>+       D  *(l*h*n+t*m),o=x+<span class="number">80</span>*y,N  =<span class="number">8</span>*((f*</span><br><span class="line">e-c*d*g       )*m   -c*d*e-f*g-l*d*n)     ;<span class="keyword">if</span>(D&gt;z</span><br><span class="line">[o])z[o       ]=D,b[     o]=<span class="string">&quot; .&quot;</span>          <span class="string">&quot;.,,-+&quot;</span></span><br><span class="line">       <span class="string">&quot;+=#$@&quot;</span>       [N&gt;<span class="number">0</span>?N:       <span class="number">0</span>];;;;&#125;       <span class="built_in">printf</span>(</span><br><span class="line">       <span class="string">&quot;%c[H&quot;</span>,       <span class="number">27</span>);<span class="keyword">for</span>       (k=<span class="number">1</span>;<span class="number">18</span>       *<span class="number">100</span>+<span class="number">41</span></span><br><span class="line">       &gt;k;k++)       <span class="built_in">putchar</span>       (k%<span class="number">80</span>?b       [k]:<span class="number">10</span>)</span><br><span class="line">       ;;;;A+=       <span class="number">0.053</span>;;       B+=<span class="number">0.03</span>       ;;;;;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>同样的编译和运行命令, 这次是有背景, 有弹幕的版本</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>2011 年,有人提起了作者的2006年的作品,有很多请求作者讲解原理的,但过去了5年,作者并不能清晰记得,所以作者打算从零开始,非常详尽的细节,希望能得到相近的结果</p>
<span id="more"></span>

<p>这个内容的核心是利用 帧buffer 和 Z-buffer 来渲染像素(通过ascii渲染低分辨率的图像)</p>
<p>通过固定的角度增量的,来绘制对应的环面(torus), 亮度是从暗到亮对应的<code>ASCII</code>是<code>.,-~:;=!*#$@</code>.(不需要射线追踪</p>
<h3 id="3D物体-到-2D屏幕"><a href="#3D物体-到-2D屏幕" class="headerlink" title="3D物体 到 2D屏幕"></a>3D物体 到 2D屏幕</h3><p><img data-src="https://www.a1k0n.net/img/perspective.png" alt="3D和2D映射"></p>
<p>如图, 当一个人看一个3D 物体时,眼睛和物体连线与屏幕的交点, 就是我们要的投影</p>
<p>把3D物品渲染到2D屏幕上</p>
<p>$(x,y,z)$实际的点投影到 距离眼睛为$z’$的屏幕的$(x’,y’)$上</p>
<p>显然相似三角形</p>
<p>$\frac{y’}{y}&#x3D;\frac{x’}{x}&#x3D;\frac{z’}{z}$</p>
<p>换句话说$(x’,y’) &#x3D; (z’\frac{x}{z},z’\frac{y}{z})$, 左边是要求的,右边是三维空间中已知</p>
<p>其中呢,人到屏幕距离$z’$是常量, 这个常量变化相当于把屏幕推远或拉近,取决于你希望展示多少内容</p>
<hr>
<p>因为物体有深度,所以可能多个点对应到2D屏幕上同一个点,那我们需要一个记录每个我们绘制的点的z坐标,这样可以保证后面的点不会覆盖前面的点</p>
<p>在记录<code>z-buffer</code>同时,我们可以同时增加<code>1/z-buffer</code>.</p>
<ol>
<li><code>1/z</code> 表示无穷远</li>
<li>计算$x’,y’$时,可以直接乘<code>1/z</code>,比除两次代价小(?</li>
</ol>
<p>现在可以开始绘制 甜甜圈了(torus)</p>
<hr>
<p>torus 是一个旋转体, 一个方法是把2D的圆,绕着一个圆外的轴旋转, 下图是个示意的切面</p>
<p><img data-src="https://www.a1k0n.net/img/torusxsec.png" alt="圆绕轴旋转"></p>
<p>先谈圆, 一个半径$R_1$的圆,其圆心在$(R_2,0,0)$</p>
<p>那么圆上的点$(x,y,z) &#x3D; (R_2,0,0) + (R_1 \cos \theta,R_1 \sin \theta,0)$</p>
<p>如果绕y轴旋转, 其y轴不变, 根据旋转矩阵为</p>
<p>$\left( \begin{matrix} R_2 + R_1 \cos \theta, &amp; R_1 \sin \theta, &amp; 0 \end{matrix} \right)<br>\cdot \left( \begin{matrix} \cos \phi &amp; 0 &amp; \sin \phi \\ 0 &amp; 1 &amp; 0 \\ -\sin \phi &amp; 0 &amp; \cos \phi \end{matrix} \right)$</p>
<p>$&#x3D; \left( \begin{matrix} (R_2 + R_1 \cos \theta)\cos \phi, &amp; R_1 \sin \theta, &amp; -(R_2 + R_1 \cos \theta)\sin \phi \end{matrix} \right)$</p>
<p>如果你希望也绕 x轴转$A$,或者 z轴旋转$B$, 只需要多乘上对应的旋转矩阵就完了</p>
<p>$\left( \begin{matrix}<br>1 &amp; 0 &amp; 0 \\<br>0 &amp; \cos A &amp; \sin A \\<br>0 &amp; -\sin A &amp; \cos A \end{matrix} \right)<br>\cdot<br>\left( \begin{matrix}<br>\cos B &amp; \sin B &amp; 0 \\<br>-\sin B &amp; \cos B &amp; 0 \\<br>0 &amp; 0 &amp; 1 \end{matrix} \right)$</p>
<hr>
<p>但对于上面来说, 会发现它其实整个的旋转中心都是原点,而我们上面给出的3D到2D的投影,过原点的是屏幕而不是物品, 不过幸运的是,我们仅需要把物体沿着z轴平移,就可以让它不再在原点上</p>
<p>对此,我们 令$K_1 &#x3D; z’$控制人屏之间的距离,$K_2 &#x3D; $ 人到物体旋转中心的距离,</p>
<p>$(x’,y’) &#x3D; (z’\frac{x}{z},z’\frac{y}{z}) &#x3D; (\frac{K_1 x}{K_2+z},\frac{K_1 y}{K_2+z})$</p>
<p>其中,第二第三个式子中的z并不相同,第二个是描述的距离人的z,而第三个是距离旋转中心的z</p>
<hr>
<p>把上述的矩阵展开</p>
<p>$\left( \begin{matrix} x \\ y \\ z \end{matrix} \right) &#x3D; \left( \begin{matrix} (R_2 + R_1 \cos \theta) (\cos B \cos \phi + \sin A \sin B \sin \phi) - R_1 \cos A \sin B \sin \theta \\ (R_2 + R_1 \cos \theta) (\cos \phi \sin B - \cos B \sin A \sin \phi) + R_1 \cos A \cos B \sin \theta \\  \cos A (R_2 + R_1 \cos \theta) \sin \phi + R_1 \sin A \sin \theta \end{matrix} \right) &#x3D; \left( \begin{matrix} C_x(\cos B \cos \phi + \sin A \sin B \sin \phi) - C_y \cos A \sin B  \\ C_x(\cos \phi \sin B - \cos B \sin A \sin \phi) + C_y \cos A \cos B \\  C_x \cos A \sin \phi + C_y \sin A \end{matrix} \right)$</p>
<p>其中$C_x,C_y$ 表示绕轴旋转前,圆上的点</p>
<p>实际上和最开始代码中的乘法因子完全不同(留给读者展开,原来的代码也交换了A的sin和cos, 高效的旋转90度,所以估计原来推导有些不同,但都能用)</p>
<hr>
<p>现在呢,知道了像素放在哪里,但是还没有阴影的概念, (也有意义,如果把投影全部同色绘制,就可以当影子看</p>
<p>要计算照明, 我们需要知道平面上每一点的法向量</p>
<p>如果知道了法向量,再和光的方向点积,其中光的方向自定义, </p>
<p>接下来就是向量点级的绝对值越大,亮度越大,正负选一面为看不见(根据法向量方向不同)</p>
<p>如何求法向量呢, 首先注意到法向量和平面同时一起旋转的, 那么对于圆上的点的法向量</p>
<p>是 $(\cos \theta,\sin \theta, 0)$</p>
<p>剩下的无非是乘上旋转矩阵了</p>
<p>$\left( \begin{matrix} N_x, &amp; N_y, &amp; N_z \end{matrix} \right) &#x3D; \left( \begin{matrix} \cos \theta, &amp;<br>\sin \theta, &amp; 0 \end{matrix} \right) \cdot \left( \begin{matrix} \cos \phi &amp; 0 &amp; \sin \phi \\ 0 &amp; 1 &amp; 0 \\ -\sin \phi &amp; 0 &amp; \cos \phi \end{matrix} \right) \cdot \left( \begin{matrix} 1 &amp; 0 &amp; 0 \\<br>0 &amp; \cos A &amp; \sin A \\ 0 &amp; -\sin A &amp; \cos A \end{matrix} \right) \cdot \left( \begin{matrix} \cos B &amp; \sin B &amp; 0 \\ -\sin B &amp; \cos B &amp; 0 \\ 0 &amp; 0 &amp; 1 \end{matrix} \right)$</p>
<p>光的方向,这里选择45度夹角的光$(0,1,-1)$ (这里不是单位向量,长度根号2)</p>
<p>$\begin{aligned} L &amp;&#x3D; \left( \begin{matrix} N_x, &amp; N_y, &amp; N_z \end{matrix} \right) \cdot \left( \begin{matrix} 0, &amp; 1, &amp;  -1 \end{matrix} \right) \\  &amp;&#x3D; \cos \phi \cos \theta \sin B - \cos A \cos \theta \sin \phi - \sin A \sin \theta +  \cos B ( \cos A \sin \theta - \cos \theta \sin A \sin \phi) \end{aligned}$</p>
<p>这样我们有了亮度</p>
<p>剩下的就是选择你希望的 $K_1$(眼睛屏幕距离, 缩放大小),$K_2$(眼睛物体距离),$R_1$ 切面圆形半径,$R_2$ 圆形中心到旋转轴距离</p>
<p>对于代码中,选取的是$R_1&#x3D;1,R_2&#x3D;2$</p>
<hr>
<p>综上</p>
<p>$(x,y,z)$ 由 两个半径,枚举旋转体角度,和绕x轴,z轴旋转 得到</p>
<p>$(x,y,z)$ 投影到$(\frac{K_1 x}{K_2+z},\frac{K_1 y}{K_2+z})$</p>
<p>亮度为$L$</p>
<p>我们有了伪代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">float</span> theta_spacing = <span class="number">0.07</span>; <span class="comment">// 旋转体切面的圆上的点弧度旋转</span></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> phi_spacing   = <span class="number">0.02</span>; <span class="comment">// 旋转体绕轴每份旋转弧度</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> R1 = <span class="number">1</span>; <span class="comment">// 旋转体切面圆半径</span></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> R2 = <span class="number">2</span>; <span class="comment">// 旋转体切面圆心和旋转轴距离</span></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> K2 = <span class="number">5</span>; <span class="comment">// 人和旋转体旋转中心的距离</span></span><br><span class="line"><span class="comment">// 基于屏幕大小计算 K1 </span></span><br><span class="line"><span class="comment">// 对于torus的边缘, 也就是距离旋转中心$R1+R2$</span></span><br><span class="line"><span class="comment">// 我们希望它能被展示到屏幕的 3/8,也就是整个展示到屏幕的6/8,上下左右留白1/8</span></span><br><span class="line"><span class="comment">// 根据3D和2D转换关系</span></span><br><span class="line"><span class="comment">// 屏幕宽度*3/8 = K1*(R1+R2)/(K2+0)</span></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> K1 = screen_width*K2*<span class="number">3</span>/(<span class="number">8</span>*(R1+R2));</span><br><span class="line"></span><br><span class="line"><span class="built_in">render_frame</span>(<span class="type">float</span> A, <span class="type">float</span> B) &#123; <span class="comment">// A,B就是上面的旋转角度</span></span><br><span class="line">  <span class="comment">// 预计算 A,B的sin和cos</span></span><br><span class="line">  <span class="type">float</span> cosA = <span class="built_in">cos</span>(A), sinA = <span class="built_in">sin</span>(A);</span><br><span class="line">  <span class="type">float</span> cosB = <span class="built_in">cos</span>(B), sinB = <span class="built_in">sin</span>(B);</span><br><span class="line">  <span class="comment">// 输出字符</span></span><br><span class="line">  <span class="type">char</span> output[<span class="number">0.</span>.screen_width, <span class="number">0.</span>.screen_height] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">  <span class="comment">// 2D屏幕上的点原来在3D物体上的z坐标记录</span></span><br><span class="line">  <span class="type">float</span> zbuffer[<span class="number">0.</span>.screen_width, <span class="number">0.</span>.screen_height] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 且面圆上的点</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">float</span> theta=<span class="number">0</span>; theta &lt; <span class="number">2</span>*pi; theta += theta_spacing) &#123;</span><br><span class="line">    <span class="comment">// 预先计算 theta 的sin和cos</span></span><br><span class="line">    <span class="type">float</span> costheta = <span class="built_in">cos</span>(theta), sintheta = <span class="built_in">sin</span>(theta);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 旋转体 ,上面的圆绕旋转轴旋转phi</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">float</span> phi=<span class="number">0</span>; phi &lt; <span class="number">2</span>*pi; phi += phi_spacing) &#123;</span><br><span class="line">      <span class="comment">// 同样预先计算 phi 的 sin和cos</span></span><br><span class="line">      <span class="type">float</span> cosphi = <span class="built_in">cos</span>(phi), sinphi = <span class="built_in">sin</span>(phi);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 绕y轴旋转前 圆上的点 的 x,y</span></span><br><span class="line">      <span class="type">float</span> circlex = R2 + R1*costheta;</span><br><span class="line">      <span class="type">float</span> circley = R1*sintheta;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 计算出最终的 3D (x,y,z) 坐标, 上面公式是想对于旋转中心,这里z加上K2 表示相对于人的眼睛的</span></span><br><span class="line">      <span class="type">float</span> x = circlex*(cosB*cosphi + sinA*sinB*sinphi)</span><br><span class="line">        - circley*cosA*sinB; </span><br><span class="line">      <span class="type">float</span> y = circlex*(sinB*cosphi - sinA*cosB*sinphi)</span><br><span class="line">        + circley*cosA*cosB;</span><br><span class="line">      <span class="type">float</span> z = K2 + cosA*circlex*sinphi + circley*sinA;</span><br><span class="line">      <span class="type">float</span> ooz = <span class="number">1</span>/z;  <span class="comment">// &quot;one over z&quot;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 计算在屏幕上的x和y,因为是屏幕上原点要移动到 屏幕中心, 至此有了2D上的位置</span></span><br><span class="line">      <span class="type">int</span> xp = (<span class="type">int</span>) (screen_width/<span class="number">2</span> + K1*ooz*x);</span><br><span class="line">      <span class="type">int</span> yp = (<span class="type">int</span>) (screen_height/<span class="number">2</span> - K1*ooz*y);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 计算光照</span></span><br><span class="line">      <span class="type">float</span> L = cosphi*costheta*sinB - cosA*costheta*sinphi -</span><br><span class="line">        sinA*sintheta + cosB*(cosA*sintheta - costheta*sinA*sinphi);</span><br><span class="line">      <span class="comment">// 因为选取的光的模长度sqrt2, 所以光强度[-sqrt2,sqrt2]之间, 小于零的视作在背面直接看不见</span></span><br><span class="line">      <span class="keyword">if</span> (L &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 检查z级别, z越小ooz越大,离人越近,覆盖优先级更高</span></span><br><span class="line">        <span class="keyword">if</span>(ooz &gt; zbuffer[xp,yp]) &#123;</span><br><span class="line">          zbuffer[xp, yp] = ooz;</span><br><span class="line">          <span class="type">int</span> luminance_index = L*<span class="number">8</span>;</span><br><span class="line">          <span class="comment">// luminance_index 现在范围是 0..11 (8*sqrt(2) = 11.3)</span></span><br><span class="line">          <span class="comment">// 因此字符映射如下</span></span><br><span class="line">          output[xp, yp] = <span class="string">&quot;.,-~:;=!*#$@&quot;</span>[luminance_index];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 最后输出output到屏幕即可</span></span><br><span class="line">  <span class="comment">// 在终端里 控制光标到终端的起始,可以重用屏幕输出</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\x1b[H&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; screen_height; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; screen_width; i++) &#123;</span><br><span class="line">      <span class="built_in">putchar</span>(output[i,j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><code>index.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>donut.js<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">async</span>=<span class="string">&quot;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;anim1();&quot;</span>&gt;</span>toggle animation<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">pre</span> <span class="attr">id</span>=<span class="string">&quot;d&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#000; color:#ccc; font-size: 10pt;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;anim2();&quot;</span>&gt;</span>toggle animation<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvasdonut&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;240&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;anim3();&quot;</span>&gt;</span>toggle animation<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvascube&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;240&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>index.js</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">_onload</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> pretag = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> canvastag = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvasdonut&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> canvascube = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvascube&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> tmr1 = <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">let</span> tmr2 = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This is copied, pasted, reformatted, and ported directly from my original</span></span><br><span class="line">  <span class="comment">// donut.c code</span></span><br><span class="line">  <span class="keyword">let</span> asciiframe= (<span class="function">(<span class="params">A,B</span>) =&gt;</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> b=[];</span><br><span class="line">    <span class="keyword">let</span> z=[];</span><br><span class="line">    A += <span class="number">0.07</span>;</span><br><span class="line">    B += <span class="number">0.03</span>;</span><br><span class="line">    <span class="keyword">let</span> cA=<span class="title class_">Math</span>.<span class="title function_">cos</span>(A), sA=<span class="title class_">Math</span>.<span class="title function_">sin</span>(A),</span><br><span class="line">        cB=<span class="title class_">Math</span>.<span class="title function_">cos</span>(B), sB=<span class="title class_">Math</span>.<span class="title function_">sin</span>(B);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> k=<span class="number">0</span>;k&lt;<span class="number">1760</span>;k++) &#123;</span><br><span class="line">      b[k]= k%<span class="number">80</span> == <span class="number">79</span> ? <span class="string">&quot;\n&quot;</span> : <span class="string">&quot; &quot;</span>;</span><br><span class="line">      z[k]= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;<span class="number">6.28</span>;j+=<span class="number">0.07</span>) &#123; <span class="comment">// j &lt;=&gt; theta</span></span><br><span class="line">      <span class="keyword">let</span> ct=<span class="title class_">Math</span>.<span class="title function_">cos</span>(j),st=<span class="title class_">Math</span>.<span class="title function_">sin</span>(j);</span><br><span class="line">      <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6.28</span>;i+=<span class="number">0.02</span>) &#123;   <span class="comment">// i &lt;=&gt; phi</span></span><br><span class="line">        <span class="keyword">let</span> sp=<span class="title class_">Math</span>.<span class="title function_">sin</span>(i),cp=<span class="title class_">Math</span>.<span class="title function_">cos</span>(i),</span><br><span class="line">            h=ct+<span class="number">2</span>, <span class="comment">// R1 + R2*cos(theta)</span></span><br><span class="line">            D=<span class="number">1</span>/(sp*h*sA+st*cA+<span class="number">5</span>), <span class="comment">// this is 1/z</span></span><br><span class="line">            t=sp*h*cA-st*sA; <span class="comment">// this is a clever factoring of some of the terms in x&#x27; and y&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> x=<span class="number">0</span>|(<span class="number">40</span>+<span class="number">30</span>*D*(cp*h*cB-t*sB)),</span><br><span class="line">            y=<span class="number">0</span>|(<span class="number">12</span>+<span class="number">15</span>*D*(cp*h*sB+t*cB)),</span><br><span class="line">            o=x+<span class="number">80</span>*y,</span><br><span class="line">            N=<span class="number">0</span>|(<span class="number">8</span>*((st*sA-sp*ct*cA)*cB-sp*ct*sA-st*cA-cp*ct*sB));</span><br><span class="line">        <span class="keyword">if</span>(y&lt;<span class="number">22</span> &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; x&gt;=<span class="number">0</span> &amp;&amp; x&lt;<span class="number">79</span> &amp;&amp; D&gt;z[o]) &#123;</span><br><span class="line">          z[o]=D;</span><br><span class="line">          b[o]=<span class="string">&quot;.,-~:;=!*#$@&quot;</span>[N&gt;<span class="number">0</span>?<span class="attr">N</span>:<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pretag.<span class="property">innerHTML</span> = b.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;)(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="title class_">Math</span>.<span class="property">PI</span>,<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="title class_">Math</span>.<span class="property">PI</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">anim1</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(tmr1 === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      tmr1 = <span class="built_in">setInterval</span>(asciiframe, <span class="number">50</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(tmr1);</span><br><span class="line">      tmr1 = <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This is a reimplementation according to my math derivation on the page</span></span><br><span class="line">  <span class="keyword">let</span> canvasframe = (<span class="function">(<span class="params">A,B</span>) =&gt;</span> <span class="function">(<span class="params">R1,R2,K1,K2,rA,rB</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> ctx = canvastag.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">    ctx.<span class="property">fillStyle</span>=<span class="string">&#x27;#000&#x27;</span>;</span><br><span class="line">    ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, ctx.<span class="property">canvas</span>.<span class="property">width</span>, ctx.<span class="property">canvas</span>.<span class="property">height</span>);</span><br><span class="line"></span><br><span class="line">    A += rA*(<span class="title class_">Math</span>.<span class="title function_">random</span>()+<span class="number">0.5</span>);</span><br><span class="line">    B += rB*(<span class="title class_">Math</span>.<span class="title function_">random</span>()+<span class="number">0.5</span>);</span><br><span class="line">    <span class="comment">// precompute cosines and sines of A, B, theta, phi, same as before</span></span><br><span class="line">    <span class="keyword">let</span> cA=<span class="title class_">Math</span>.<span class="title function_">cos</span>(A), sA=<span class="title class_">Math</span>.<span class="title function_">sin</span>(A),</span><br><span class="line">        cB=<span class="title class_">Math</span>.<span class="title function_">cos</span>(B), sB=<span class="title class_">Math</span>.<span class="title function_">sin</span>(B);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;<span class="number">6.28</span>;j+=<span class="number">0.3</span>) &#123; <span class="comment">// j &lt;=&gt; theta</span></span><br><span class="line">      <span class="keyword">let</span> ct=<span class="title class_">Math</span>.<span class="title function_">cos</span>(j),st=<span class="title class_">Math</span>.<span class="title function_">sin</span>(j); <span class="comment">// cosine theta, sine theta</span></span><br><span class="line">      <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6.28</span>;i+=<span class="number">0.1</span>) &#123;   <span class="comment">// i &lt;=&gt; phi</span></span><br><span class="line">        <span class="keyword">let</span> sp=<span class="title class_">Math</span>.<span class="title function_">sin</span>(i),cp=<span class="title class_">Math</span>.<span class="title function_">cos</span>(i); <span class="comment">// cosine phi, sine phi</span></span><br><span class="line">        <span class="keyword">let</span> ox = <span class="variable constant_">R2</span> + <span class="variable constant_">R1</span>*ct, <span class="comment">// object x, y = (R2,0,0) + (R1 cos theta, R1 sin theta, 0)</span></span><br><span class="line">            oy = <span class="variable constant_">R1</span>*st;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> x = ox*(cB*cp + sA*sB*sp) - oy*cA*sB; <span class="comment">// final 3D x coordinate</span></span><br><span class="line">        <span class="keyword">let</span> y = ox*(sB*cp - sA*cB*sp) + oy*cA*cB; <span class="comment">// final 3D y</span></span><br><span class="line">        <span class="keyword">let</span> ooz = <span class="number">1</span>/(<span class="variable constant_">K2</span> + cA*ox*sp + sA*oy); <span class="comment">// one over z</span></span><br><span class="line">        <span class="keyword">let</span> xp=(<span class="number">150</span>+<span class="variable constant_">K1</span>*ooz*x); <span class="comment">// x&#x27; = screen space coordinate, translated and scaled to fit our 320x240 canvas element</span></span><br><span class="line">        <span class="keyword">let</span> yp=(<span class="number">120</span>-<span class="variable constant_">K1</span>*ooz*y); <span class="comment">// y&#x27; (it&#x27;s negative here because in our output, positive y goes down but in our 3D space, positive y goes up)</span></span><br><span class="line">        <span class="comment">// luminance, scaled back to 0 to 1</span></span><br><span class="line">        <span class="keyword">let</span> L=<span class="number">0.7</span>*(cp*ct*sB - cA*ct*sp - sA*st + cB*(cA*st - ct*sA*sp));</span><br><span class="line">        <span class="keyword">if</span>(L &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          ctx.<span class="property">fillStyle</span> = <span class="string">`rgba(255,255,255,<span class="subst">$&#123;L&#125;</span>`</span>;</span><br><span class="line">          ctx.<span class="title function_">fillRect</span>(xp, yp, <span class="number">10</span>*L, <span class="number">10</span>*L);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="title class_">Math</span>.<span class="property">PI</span>,<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="title class_">Math</span>.<span class="property">PI</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">anim2</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(tmr2 === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      tmr2 = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> <span class="title function_">canvasframe</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">150</span>,<span class="number">5</span>,<span class="number">0.07</span>,<span class="number">0.03</span>), <span class="number">50</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(tmr2);</span><br><span class="line">      tmr2 = <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Cube</span></span><br><span class="line">  <span class="keyword">let</span> canvasframe2 = (<span class="function">(<span class="params">A,B</span>) =&gt;</span> <span class="function">(<span class="params">W,K1,K2,rA,rB,sX,sY</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> ctx = canvascube.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">    ctx.<span class="property">fillStyle</span>=<span class="string">&#x27;#000&#x27;</span>;</span><br><span class="line">    ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, ctx.<span class="property">canvas</span>.<span class="property">width</span>, ctx.<span class="property">canvas</span>.<span class="property">height</span>);</span><br><span class="line"></span><br><span class="line">    A += rA*(<span class="title class_">Math</span>.<span class="title function_">random</span>()+<span class="number">0.5</span>);</span><br><span class="line">    B += rB*(<span class="title class_">Math</span>.<span class="title function_">random</span>()+<span class="number">0.5</span>);</span><br><span class="line">    <span class="comment">// precompute cosines and sines of A, B, theta, phi, same as before</span></span><br><span class="line">    <span class="keyword">let</span> cA=<span class="title class_">Math</span>.<span class="title function_">cos</span>(A), sA=<span class="title class_">Math</span>.<span class="title function_">sin</span>(A),</span><br><span class="line">        cB=<span class="title class_">Math</span>.<span class="title function_">cos</span>(B), sB=<span class="title class_">Math</span>.<span class="title function_">sin</span>(B);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=-W/<span class="number">2</span>;j&lt;W/<span class="number">2</span>;j+=<span class="number">0.2</span>) &#123; <span class="comment">// j &lt;=&gt; theta</span></span><br><span class="line">      <span class="keyword">for</span>(i=-W/<span class="number">2</span>;i&lt;W/<span class="number">2</span>;i+=<span class="number">0.2</span>) &#123;   <span class="comment">// i &lt;=&gt; phi</span></span><br><span class="line">        <span class="keyword">for</span>(z=-W/<span class="number">2</span>;z&lt;W/<span class="number">2</span>;z+=<span class="number">0.2</span>)&#123; <span class="comment">// (j,i,z)</span></span><br><span class="line">          <span class="keyword">let</span> x = j*cB - z*sA*sB - i*cA*sB; <span class="comment">// final 3D x coordinate</span></span><br><span class="line">          <span class="keyword">let</span> y = j*sB + z*cB*sA + i*cA*cB; <span class="comment">// final 3D y</span></span><br><span class="line">          <span class="keyword">let</span> ooz = <span class="variable constant_">K1</span>/(<span class="variable constant_">K2</span> - z*cA + i*sA); <span class="comment">// one over z</span></span><br><span class="line">          <span class="keyword">let</span> xp=(sX/<span class="number">2</span>+ooz*x); <span class="comment">// x&#x27; = screen space coordinate, translated and scaled to fit our 320x240 canvas element</span></span><br><span class="line">          <span class="keyword">let</span> yp=(sY/<span class="number">2</span>-ooz*y); <span class="comment">// y&#x27; (it&#x27;s negative here because in our output, positive y goes down but in our 3D space, positive y goes up)</span></span><br><span class="line">          <span class="comment">// luminance, scaled back to 0 to 1</span></span><br><span class="line">          <span class="keyword">let</span> L=(y + W/<span class="number">2</span> + (z*cA - i*sA)+W/<span class="number">2</span>)/(<span class="number">2</span>*W);</span><br><span class="line">          <span class="keyword">if</span>(L &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ctx.<span class="property">fillStyle</span> = <span class="string">`rgba(255,255,255,<span class="subst">$&#123;L&#125;</span>`</span>;</span><br><span class="line">            ctx.<span class="title function_">fillRect</span>(xp, yp, <span class="number">10</span>*L, <span class="number">10</span>*L);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="title class_">Math</span>.<span class="property">PI</span>,<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="title class_">Math</span>.<span class="property">PI</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">anim3</span> = (<span class="function">(<span class="params">tmr</span>)=&gt;</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(tmr === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      tmr = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> <span class="title function_">canvasframe2</span>(<span class="number">1</span>,<span class="number">300</span>,<span class="number">5</span>,<span class="number">0.07</span>,<span class="number">0.03</span>,<span class="number">300</span>,<span class="number">240</span>), <span class="number">50</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(tmr);</span><br><span class="line">      tmr = <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">anim1</span>();</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">anim2</span>();</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">anim3</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">document</span>.<span class="property">all</span>)</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">attachEvent</span>(<span class="string">&#x27;onload&#x27;</span>,_onload);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>,_onload,<span class="literal">false</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h2 id="去掉数学库"><a href="#去掉数学库" class="headerlink" title="去掉数学库"></a>去掉数学库</h2><p><a href="https://www.youtube.com/watch?v=DEqXNfs_HhY">Lex Fridman Youtube</a></p>
<p><a href="https://www.youtube.com/watch?v=sW9npZVpiMI">Joma Tech</a></p>
<p>早知道会受到这么多关注,我就会在它上面花更多时间</p>
<p>对于程序中来说,<code>sin</code>,<code>cos</code>这两个函数消耗最大,并且需要<code>-lm</code></p>
<p>既然有旋转公式,那么</p>
<p>$\begin{bmatrix} c’ \\ s’ \end{bmatrix} &#x3D; \begin{bmatrix} \cos \theta &amp; -\sin \theta \\ \sin \theta &amp; \cos \theta \end{bmatrix} \begin{bmatrix} c \\ s \end{bmatrix}$</p>
<p>可以每次旋转一度,来完成转换,而不是计算<code>sin/cos</code>, 我们只需要硬编码<code>sin(2pi/314),cos(2pi/314)</code> 即可</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> c=<span class="number">1</span>, s=<span class="number">0</span>;  <span class="comment">// c for cos, s for sin</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">314</span>; i++) &#123;  <span class="comment">// 314 * .02 ~= 2π</span></span><br><span class="line">  <span class="comment">// (use c, s in code)</span></span><br><span class="line">  <span class="type">float</span> newc = <span class="number">0.9998</span>*c - <span class="number">0.019998666</span>*s;</span><br><span class="line">  s = <span class="number">0.019998666</span>*c + <span class="number">0.9998</span>*s;</span><br><span class="line">  c = newc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然而如果如此做下去,会出现误差累积(不论多少精度),最终导致不是个圆形</p>
<p><img data-src="https://www.a1k0n.net/img/sincos-mag.png" alt="误差累积后"></p>
<p>一个思路是每次单位化结果.但如果直接去根号,那还是需要数学库,这一块可以用牛顿切线,不论是直接处理根号,还是根号分之1, 即使没有牛顿切的知识,二分也是类似的思路,就是手动实现开根</p>
<p>不过这里 作者说只做一步牛顿切,觉得它足够接近1</p>
<h2 id="CORDIC"><a href="#CORDIC" class="headerlink" title="CORDIC"></a>CORDIC</h2><ol>
<li>提取cos</li>
</ol>
<p>$\begin{bmatrix} c’ \\ s’ \end{bmatrix} &#x3D; \frac{1}{\cos \theta}\begin{bmatrix} 1 &amp; -\tan \theta \\ \tan \theta &amp; 1 \end{bmatrix} \begin{bmatrix} c \\ s \end{bmatrix}$</p>
<ol start="2">
<li>cos足够接近1, 我们甚至可以省略它,直接只用tan的部分加上牛顿切</li>
</ol>
<p>其中t 是 tan, 宏编程</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> R(t,x,y) \</span></span><br><span class="line"><span class="meta">  f = x; \</span></span><br><span class="line"><span class="meta">  x -= t*y; \</span></span><br><span class="line"><span class="meta">  y += t*f; \</span></span><br><span class="line"><span class="meta">  f = (3-x*x-y*y)/2; \</span></span><br><span class="line"><span class="meta">  x *= f; \</span></span><br><span class="line"><span class="meta">  y *= f;</span></span><br></pre></td></tr></table></figure>

<h2 id="去掉float"><a href="#去掉float" class="headerlink" title="去掉float"></a>去掉float</h2><p>We can use exactly the same ideas with integer fixed-point arithmetic, and not use any float math whatsoever. I’ve redone all the math with 10-bit precision and produced the following C code which runs well on embedded devices which can do 32-bit multiplications and have ~4k of available RAM:</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>本身上数学难度算不高,但是涉及了不少现有技术的基础,如3D到2D,光照计算,3D物体旋转,ASCII亮度表现法</li>
<li>混乱后的代码看上去更”有趣”,不过博主没有介绍混淆,只介绍了实现,实际上混淆方法多,用就是了.</li>
<li>基于每一步的详细解读,修改内容可以实现正方体,不同光源,的渲染,如上面代码中就有正方体的渲染</li>
</ol>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p><a href="https://www.a1k0n.net/2006/09/15/obfuscated-c-donut.html">原文0 2006</a></p>
<p><a href="https://www.a1k0n.net/2006/09/20/obfuscated-c-donut-2.html">原文1 2006</a></p>
<p><a href="https://www.a1k0n.net/2011/07/20/donut-math.html">原文2 2011</a></p>
<p><a href="https://www.a1k0n.net/2021/01/13/optimizing-donut.html">原文3 2021</a></p>
<p><a href="https://en.wikipedia.org/wiki/Z-buffering">Z-buffering</a></p>
<p><a href="https://en.wikipedia.org/wiki/Torus">环面 torus</a></p>
<p><a href="https://en.wikipedia.org/wiki/Solid_of_revolution">旋转体 solid of revolution</a></p>
<p><a href="https://en.wikipedia.org/wiki/Rotation_matrix">旋转矩阵 rotation matrix</a></p>
<p><a href="http://en.wikipedia.org/wiki/Surface_normal">平面法线 surface normal</a></p>
<p><a href="https://en.wikipedia.org/wiki/CORDIC">CORDIC</a></p>
]]></content>
      <categories>
        <category>解析几何</category>
      </categories>
      <tags>
        <tag>math</tag>
        <tag>甜甜圈</tag>
      </tags>
  </entry>
  <entry>
    <title>立直麻将 麻雀（マージャン）</title>
    <url>/Math/2023-07-23-Japanese_Mahjong/</url>
    <content><![CDATA[<p>有很多细则这里不一定提及(比如十三幺可以抢按杠,比如宝牌), 主要还是常见普适一点的内容</p>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p><del>他立任他立,我当他没立</del></p>
<span id="more"></span>

<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>数字牌: 1-9</p>
<p>风牌: 东南西北,其中(当场的风为场风,自家的风为自风(可以重叠计算),非自风的是客风)</p>
<p>三元牌: 白发中</p>
<p>役牌: 三元牌+场风+自风</p>
<p>幺九牌: 1&#x2F;9+风牌+三元牌</p>
<p>总张数$4 * (3 * 9+4+3) &#x3D; 108$</p>
<hr>
<p>对子: X,X</p>
<p>刻子: X,X,X</p>
<p>杠子(杠子要杠出来发挥”刻子的作用”,下面所有刻子包含杠子的意义): X,X,X,X</p>
<p>顺子,(A为数牌,且三张同色): A,A+1,A+2</p>
<p>面子: 刻子(杠子) or 顺子</p>
<p>雀头: 对子</p>
<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>m万p筒s条</p>
<p>黑数字1-9直接1-9, 红5用数字0表示</p>
<p>字牌<strong>没有</strong>统一表示方式,有的地方用下面对应方式</p>
<table>
<thead>
<tr>
<th>东</th>
<th>南</th>
<th>西</th>
<th>北</th>
<th>白</th>
<th>发</th>
<th>中</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>5</td>
<td>6</td>
<td>7</td>
</tr>
</tbody></table>
<h2 id="胡牌-x2F-和"><a href="#胡牌-x2F-和" class="headerlink" title="胡牌&#x2F;和"></a>胡牌&#x2F;和</h2><p>极端情况: 十三幺: 19m19p19s1234567z + 前面任意一张</p>
<p>偶尔可用: 7个对子</p>
<p>最常见: 4面子+1雀头</p>
<p>其中 至少一番才能胡牌</p>
<p>分为自摸(自己抓起胡牌),荣和(其它家弃掉不要的牌正好可以胡牌)</p>
<p><del>振听: 多玩两把就知道了, 主要就是打了的不能作为荣和牌(但是可以自摸)</del></p>
<hr>
<p>那么听牌(再来一张就胡牌了)时:</p>
<p>两对: 3面子+XX,YY</p>
<p>单骑: 4面子+X</p>
<p>边张: 3面子+1雀头+ (12 or 89)</p>
<p>两面: 3面子+1雀头+ (A,A+1) 且不是(12 or 89)</p>
<p>坎张: 3面子+1雀头+ (A,A+2)</p>
<h3 id="打点"><a href="#打点" class="headerlink" title="打点"></a>打点</h3><h3 id="亲-x2F-子"><a href="#亲-x2F-子" class="headerlink" title="亲&#x2F;子"></a>亲&#x2F;子</h3><p>同样牌情况下自己亲家(庄家(东家))时赚得更多(大约是1.5倍)</p>
<p>自己亲家,子家自摸时,自己大约被扣$\frac{1}{2}$的打点</p>
<hr>
<h4 id="番"><a href="#番" class="headerlink" title="番"></a>番</h4><p>一般来讲 番越大赚越多, 基本分为(子), 30符为例</p>
<table>
<thead>
<tr>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4~5</th>
<th>6~7</th>
<th>8~10</th>
<th>11~12</th>
<th>13+</th>
</tr>
</thead>
<tbody><tr>
<td>1000</td>
<td>2000</td>
<td>3900</td>
<td>7700</td>
<td>12000</td>
<td>16000</td>
<td>24000</td>
<td>32000</td>
</tr>
</tbody></table>
<p>基本上可以看作 1,2,4,8,8,12,12,16,16,16,24,24,32..</p>
<p><del>牌型带来的番 基本游戏内会列出</del></p>
<p>同时多个牌型(两杯口 or 七对子) 按番大的算</p>
<h4 id="符"><a href="#符" class="headerlink" title="符"></a>符</h4><blockquote>
<p>平和: 两面 且 雀头不是役牌</p>
</blockquote>
<p>主要体现在 1-4番(低番)时 增加打点,</p>
<p>&#x3D;固定符(七对子25(降为80%), 平和自摸20(降为65%), 副露且20则变为30(基准))</p>
<p>&#x3D;20(符底)+听牌+雀头+刻&#x2F;杠, 向上整十取值</p>
<ul>
<li>听牌(门清荣和+10, 自摸+2, 边张&#x2F;单骑&#x2F;坎张+2(也就是”唯一”听一张时(实际可能同时听多张 例如1234听1,4)))</li>
<li>雀头: 自风&#x2F;场风&#x2F;三元+2 (也就是本来做三张可以带来役&#x2F;一番的牌)</li>
<li>刻&#x2F;杠: 简单说基础是+2, 幺九是非幺九的2倍, 暗是明的2倍, 杠是刻的4倍, 所以从最小 非幺九明刻+2,到最大 幺九暗杠+32</li>
</ul>
<p>对点数影响(子30%基础(30符的点数) &#x2F;每10符)</p>
<ul>
<li>1番时 大约是450庄&#x2F;350子 每10符</li>
<li>2番时 大约是950庄&#x2F;650子 每10符</li>
<li>3番时 大约是1950庄&#x2F;1250子 每10符</li>
<li>4番时 直接和满贯(40符)很接近</li>
</ul>
<p>而常见的</p>
<ul>
<li>25符 7对子(大约是正常的30符的80%)</li>
<li>平和自摸 20符(大约是正常30符的65%)</li>
<li>平和荣和 30符</li>
<li>30符 副露, $\le 1$刻子</li>
<li>$\ge 40符$ 门清荣和(无平和), (因为首先有+10, 然后如果 +2 都不满足 则一定是荣和,所以至少一个+2满足)</li>
</ul>
<p>子家, 括号里是(其他子家,庄家)的陪点数</p>
<p><img data-src="https://i0.hdslb.com/bfs/article/8caca65d808c161412902cf4577dd0786d8af369.jpg@!web-article-pic.avif" alt="图例"></p>
<p>注意到常见的</p>
<ul>
<li>平和+其它2番 的 荣和 &#x3D;3番 只有3900</li>
<li>平和+自摸+其它2番&#x3D;4番 只有5200</li>
<li>立直+平和+自摸+其它2番 的五番 8000</li>
<li>立直+平和+其它2番 的 荣和, 4番30符 7700</li>
</ul>
<p>而且立直还有可能里宝牌加番</p>
<hr>
<p>综上,在不考虑 其他玩家看到立直可能采取防守&#x2F;可能点炮 的情况下, 把番做大(番高了是阶梯函数)赢得越多</p>
<h2 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h2><p>在不考虑其它情况下, 如何尽快做胡</p>
<h3 id="x向听"><a href="#x向听" class="headerlink" title="x向听"></a>x向听</h3><p>胡牌</p>
<p>最少差1张胡牌 &#x3D; 听牌</p>
<p>最少差x张胡牌 &#x3D; x向听</p>
<p>最多6向听: 因为任意牌, 如果摸存在的6张, 则听七对</p>
<p>显然 每次摸牌x至多减1</p>
<h3 id="有效牌-x2F-补强牌"><a href="#有效牌-x2F-补强牌" class="headerlink" title="有效牌&#x2F;补强牌"></a>有效牌&#x2F;补强牌</h3><p>有效牌: 摸一张后, x变为x-1</p>
<p>补强牌: 摸一张后, x还是x, 但是有效牌数量变多</p>
<h3 id="数字两张"><a href="#数字两张" class="headerlink" title="数字两张"></a>数字两张</h3><p>$23 &gt; 13 &gt; 12$</p>
<p><del>数学上显然</del></p>
<p>不妨设 顺子分数为$x$, 显然概率频次下 $8x &gt; 4x$</p>
<p>而$13 \to (1)34,123$, 这$12 \to 123$</p>
<hr>
<p>$14\to 4$, 都是等23,56, 所以不看作2张,是筋</p>
<hr>
<p>对子</p>
<p>0个对子, $3 * 13&#x2F;108&#x3D;0.36111~&#x3D;\frac{1}{3}$ 概率摸成对子,所以做顺子优先级大于对子(??????)</p>
<p>1个对子, 不提供 有效牌张数</p>
<p>2个对子, 提供4张有效牌(相对高的效率)</p>
<p>3个对子, 提供6张有效牌</p>
<p>4+个对子, 考虑七对子&#x2F;对对和路线</p>
<h3 id="单张"><a href="#单张" class="headerlink" title="单张"></a>单张</h3><p>中数字 &gt; 2,8 &gt; 1,9 &gt; 客风</p>
<p>役牌 虽然也是只能刻子, 但是 本身能带来役的作用, 有时为了胡牌,它的役意义会大于好摸的意义, 特别是有很多坎张和幺九时</p>
<p>当然 如果是 混一色的情况, 客风的优点更高</p>
<hr>
<p>不妨设 两连为$x$, 两坎为$y$, $x&gt;y$</p>
<p>那么概率频次下:</p>
<ul>
<li>中间的数字 &#x3D; 8x+8y</li>
<li>2,8 &#x3D; 8x+4y</li>
<li>1,9 &#x3D; 4x+4y</li>
</ul>
<hr>
<p>听牌时,</p>
<p>单骑听牌: 自由度高, 多个A,A+1,A+2时换单骑有 4+3+3+4 种变成复合形</p>
<h2 id="三张"><a href="#三张" class="headerlink" title="三张"></a>三张</h2><p>两面对 344</p>
<p>坎对 244</p>
<p>边对 112&#x2F;122</p>
<p>两坎 A,A+2,A+4</p>
<hr>
<p>XX, 233, 577</p>
<p>三对降二对, 建议 拆3, 损失的是 两个3的听, 其实就是考虑 打3和打7 对方无法达到的状态, 两个都能达到的状态就个数相等不考虑了</p>
<p>拆3频次: 8(XX, 23, 777)+8(XXX, 23, 77)</p>
<p>拆7频次: 4(XX, 333, 5 7)+4(XXX, 33, 5 7)</p>
<p>延伸, 334567m,677p,12388s, 3m比7p还要强,3对降2对,拆3m</p>
<hr>
<p>A,A+1, 233, 577</p>
<p>两对,维持两对, 打5, 也是同理对比对方不能达到的状态</p>
<hr>
<p>简单总结: 降对拆强对, 2对拆弱搭</p>
<hr>
<p>两坎, A,A+2,A+4</p>
<p>一定程度浪费了一张, 但是因为和1坎比多了4张有效牌,所以价值还是高于1坎, 也高于边两张</p>
<p>注意的是,很可能有 镶嵌式的两坎, 356778 &#x3D; 357(两坎)+678 &#x3D; 3+567+78</p>
<h2 id="四张"><a href="#四张" class="headerlink" title="四张"></a>四张</h2><p>A,A+1,A+2,A+3</p>
<p>3-6,4-7 最强(进张多)!, 例如3-6来说1~8 都是进张</p>
<p>但是 1234~&#x3D;4</p>
<hr>
<p>中膨形 A-1,A,A,A+1</p>
<p>强度也不错, 比上面4连弱一点, 把原来单牌的坎进牌变成两面进牌了</p>
<p>同样 1223~&#x3D;2 甚至比单张还差</p>
<hr>
<p>亚两面 A,A,A+1,A+2, (注意1233不算亚两面)</p>
<p>对子越多, a,a,a,a+1,a+2 (暗刻符合形) 价值越低</p>
<p>对子为0,或1 价值稍微高</p>
<p>原理同上面 3对需要降2对</p>
<p>约等于 单张</p>
<p>好处是,一杯口机会&#x2F;平和机会&#x2F;吃上家的A+1改良为A,A+1</p>
<hr>
<p><strong>注意 上面主要在牌的初期阶段, 在接近听牌时拆掉4张成3连 更有利于进张</strong></p>
<p>所以核心还是  缺搭子 缺好搭子时 很有用,而 区块基本都形成后,还有的话就可以拆了</p>
<hr>
<p>螺丝形</p>
<p>3444</p>
<p>6888</p>
<p>1112</p>
<p>从听牌的角度很好, 4+3+4张</p>
<p>缺少对子时很好用,而不缺对子时 甚至比单张数牌还差, 看作 刻子 + 单张</p>
<p>但例子: 88,6777,白白, 如果白被打出来, 则会碰掉(未来会完成的刻子), 从而可以看成只有一个对子88</p>
<p>一向听的时候一般拆掉,</p>
<hr>
<p>跳张形</p>
<p>1345 &gt; 13 </p>
<p>当可以吃上家时更强, 1在一定程度上加强了, (1)345 &gt; 13, (1)345 &gt; 2</p>
<p>而类似的 3 &gt;(2)456 &gt; 2</p>
<p>最强 3567</p>
<p>(4)678 就相对弱 还是比单张4强一点</p>
<p>(5)789&#x3D;5</p>
<p>核心的分析方式还是 枚举所有有效进张带来变化,</p>
<h2 id="五组理论-普通型"><a href="#五组理论-普通型" class="headerlink" title="五组理论(普通型)"></a>五组理论(普通型)</h2><p>23356m889p279s444z, <code>[23356m][889p]2[79s][444z]</code>, 2组1组1组1组, 打2s</p>
<p>133m5579p12367s33z, 对于5579是1组还是两组从其它组反推,</p>
<p>1278m3458p367s367z, 最多找到4组,搭子不足, 单张数牌 重要性提升</p>
<p>33567m34799p126s3z,<code>[33][567m][34][799p][12]6s3z</code>, 虽然有5组,但是799p和12s都是愚形搭子,而且6是中张,这时候6更需要保留,期待摸到45678中的一张,打3z</p>
<p>当牌型好的时候 单张中间也可以放弃</p>
<p>当牌型差的时候,可以考虑保留中间张,为未来换搭子做准备</p>
<p>甚至6组时,去拆弱搭子</p>
<p>45999m677p3478s44z, <code>[45][999m][677p][34][78s][44z]</code>, 只看进张是打7p,但是始终有6组变5组的问题, 而这样的话到1向听的进张反而更少,所以更建议拆78s</p>
<p>拆12的时候,建议先打2</p>
<hr>
<p>例子</p>
<p>3899m123345p2558s, <code>3[899m][123][345p]2[55]8s</code>, 所以考虑2,8s, 而不是9m, 所以9m当前最大进张,但是等到1向听会变少</p>
<p>46999m677p2479s44z, 很多愚形搭子, 不如打7p更多见机行事机会</p>
<hr>
<p>一向听集中理论, 很多时候 一向听到听牌 比 听牌到胡牌更难, 而且如果有 副露高打点,或者立直, 还有施加压力效果(当前 低分段很多头铁哥 ,他立任他立,我当他没立,和他大任他大)</p>
<hr>
<p>当前进张期望 &#x3D; 可进张牌 &#x2F; 未出现的牌(包括对手未知的手牌)</p>
<p>巡数期望 &#x3D; 1&#x2F;进张期望</p>
<hr>
<p>再谈<code>45999m677p3478s44z</code></p>
<p>4z vs 拆78s</p>
<p>难比较, 可以量化麻将, 下面pystyle</p>
<p>这里999m换成123p,从总期望上打7p更大</p>
<p>而且北风是一种安全牌(是一种续航力)</p>
<p>最长立直在7~10巡左右, 早巡立直其实也倾向完全弃和</p>
<p>先制两面立直,平均有60%的胡牌率</p>
<h2 id="有效牌重复"><a href="#有效牌重复" class="headerlink" title="有效牌重复"></a>有效牌重复</h2><p>1,4</p>
<p>(2)5 还是比1&#x2F;9好</p>
<p>(3)6 就还是比 2&#x2F;8好</p>
<hr>
<p>1245, 拆1不会损失, 甚至 先于 单张数牌先拆</p>
<p>1224&#x2F;1334 都推荐弃1</p>
<p>中张会相对好一些例如3556</p>
<hr>
<p>2356m,34p,建议拆23m, 只有4才有相对好的效果过</p>
<p>2356m,24p,建议拆24p</p>
<p>67m5566p, 建议拆6p</p>
<p>68m5566p, 建议拆8m</p>
<p>68m5577p, 建议拆7p</p>
<p>356的3差,而3567的3好</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p><img data-src="https://tiebapic.baidu.com/forum/pic/item/b65ad6c4b74543a9cc5fe6fc58178a82b9011478.jpg?tbpicau=2023-07-29-05_482fb31942430e387069bf586419990a"></p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p><a href="https://tenhou.net/">天凤</a></p>
<p><a href="https://pystyle.info/apps/mahjong-nanikiru-simulator/">https://pystyle.info/apps/mahjong-nanikiru-simulator/</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>bilibili: 星野Poteto 日麻牌效率 合集</p>
]]></content>
      <categories>
        <category>游戏</category>
        <category>立直麻将</category>
      </categories>
      <tags>
        <tag>游戏</tag>
        <tag>立直麻将</tag>
      </tags>
  </entry>
  <entry>
    <title>求手算出x^3+101=y^2的正整数解</title>
    <url>/Math/2024-08-14-Mordell_equation/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>$x^3+101&#x3D;y^2$ 求手算一组正整数解</p>
<p>这道题目来自2009年初中数学竞赛的一道题</p>
<p><a href="https://zhidao.baidu.com/question/123254978.html">https://zhidao.baidu.com/question/123254978.html</a></p>
<p><a href="https://zhidao.baidu.com/question/114242326.html">https://zhidao.baidu.com/question/114242326.html</a></p>
<hr>
<p><a href="https://www.zhihu.com/question/664003966">https://www.zhihu.com/question/664003966</a></p>
<p><a href="https://math.stackexchange.com/questions/4957099">https://math.stackexchange.com/questions/4957099</a></p>
<h2 id="一些不算成功的尝试"><a href="#一些不算成功的尝试" class="headerlink" title="一些不算成功的尝试"></a>一些不算成功的尝试</h2><p>在场上 有尝试做一些mod,但没有很多，然后以为不会太大，就开始了暴力计算，当然当场是没有做出这个题目</p>
<hr>
<p>当时赛后 问了汀舅，汀舅给的方案是</p>
<p>做了更多的mod,进一步缩小枚举范围，但没有特别如意</p>
<hr>
<p>最近在整理一些东西，突然又看到了这个，自己尝试了一下</p>
<p>通过 $x^3+1 &#x3D; (x+1)(x^2-x+1)&#x3D;(y-10)(y+10)$ 的变形，让我对于2相关的 幂次很感兴趣</p>
<p>比较容易的得到了 $x\equiv 3\pmod{16}, y\equiv 0 \pmod{4}$ 或 $x\equiv -1\pmod{16}, y\equiv 2 \pmod{4}$</p>
<p>这对于知道答案的来说，的确已经可以暴力手动计算了，但对于不知道答案的来说，其实不知道自己会需要枚举多少个</p>
<h2 id="来自math-stackexchange的提速方案"><a href="#来自math-stackexchange的提速方案" class="headerlink" title="来自math.stackexchange的提速方案"></a>来自math.stackexchange的提速方案</h2><p>$x^3+101&#x3D;y^2\pmod 9$</p>
<p>容易得到 $x\equiv 2 \pmod{3}$,  计算量也不大，因为$x$侧只用关心 $\mod 3$, $y$侧考虑$0\to8$</p>
<hr>
<p>然后 考察</p>
<p>$x^3+101&#x3D;y^2\pmod 8$</p>
<p>可以得到 $x\equiv 3\pmod{8}, y\equiv 0 \pmod{4}$ 或 $x\equiv -1\pmod{8}, y\equiv 2 \pmod{4}$</p>
<hr>
<p>两者结合可以得到 </p>
<p>$x\equiv -1 \pmod{24}, y \equiv 2 \pmod{4}$</p>
<p>$x\equiv 11 \pmod{24}, y \equiv 0 \pmod{4}$</p>
<hr>
<p>$x&#x3D;24a-1,y&#x3D;4b+2$ 通过测试$\pmod{16}$可以得到$a$是偶数,$x&#x3D;48c-1$, 再尝试$\pmod{32}$可以得到$x&#x3D;96d-1$</p>
<p>$x&#x3D;24a+11,y&#x3D;4b$ 通过测试$\pmod{16}$可以得到$a$是奇数$x&#x3D;48c+35$ ??TODO</p>
<h2 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h2><p><a href="https://zhuanlan.zhihu.com/p/27159180">知乎 椭圆曲线的一些基础性质 陆zz</a></p>
<p><a href="https://www.zhihu.com/question/491035924">知乎 </a></p>
<p><a href="https://hr.userweb.mwn.de/numb/mordell.html">https://hr.userweb.mwn.de/numb/mordell.html</a></p>
<p><a href="https://math.stackexchange.com/a/4957401/728591">Travis Willse</a> 大佬说  The following routine in Sage 的结果 看来只有 x&#x3D;-1,和x&#x3D;95两个解</p>
<p><a href="https://math.stackexchange.com/a/4958295/728591">Sayan Dutta</a>  大佬说 这是 Mordell’s equation</p>
<p><a href="http://alpha.math.uga.edu/%7Epete/4400MordellEquation.pdf">http://alpha.math.uga.edu/%7Epete/4400MordellEquation.pdf</a></p>
<p><a href="https://kconrad.math.uconn.edu/blurbs/gradnumthy/mordelleqn1.pdf">https://kconrad.math.uconn.edu/blurbs/gradnumthy/mordelleqn1.pdf</a></p>
<p><a href="https://www.math.leidenuniv.nl/%7Eevertsejh//dio2011-diophantine.pdf">https://www.math.leidenuniv.nl/%7Eevertsejh//dio2011-diophantine.pdf</a></p>
]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>Mordell_s_equation</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>韦达跳跃Vieta jumping</title>
    <url>/Math/2025-03-01-Vieta_jumping/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>$a,b \in\mathbb{Z}^+, ab+1|a^2+b^2$</p>
<p>证明$\frac{a^2+b^2}{ab+1}$是平方数</p>
<h2 id="vieta-jumping"><a href="#vieta-jumping" class="headerlink" title="vieta_jumping"></a>vieta_jumping</h2><p>韦达跳跃：韦达定理+无穷递降</p>
<p>若 a&#x3D;b,  $\frac{2a^2}{a^2+1}&#x3D;\frac{2}{1+\frac{1}{a^2}}&#x3D;\frac{2}{1+(0,1]}&#x3D;\frac{2}{(1,2]}&#x3D;[1,2)$ 只有a&#x3D;1</p>
<p>a,b对称，不妨$1\le a &lt; b$</p>
<p>$a^2+b^2&#x3D;k(ab+1)$, 且k不是平方数</p>
<p>$b^2-(ka)b+(a^2-k)&#x3D;0$</p>
<p>即对于任意 解 $(a,b)$</p>
<p>$b_0+b&#x3D;ka,b_0b&#x3D;a^2-k\neq 0$ (因为k不是平方数)</p>
<hr>
<p>$b &gt; a,b_0b&#x3D;a^2-k$ 所以$b_0 &lt; a$</p>
<p>$b_0+b&#x3D;ka$所以$b_0$是整数</p>
<p>$\frac{a^2+b_0^2}{b_0a+1} &#x3D; k &gt;0$,所以$b_0 &gt; 0$</p>
<p>所以$(b_0,a)$ 是通过$(a,b)$得到的$a+b$指标更小的解</p>
<p>这样的结构无法无穷递降，所以不存在解</p>
<hr>
<p>不过我拿到题目的感觉是，就是要证明大的值是不存在，因为如果真的存在还是平方数，那这个结论也太数论了</p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><p>$a,b \in \mathbb{Z}^+, ab|a^2+b^2+1$</p>
<p>证明 $3ab&#x3D;a^2+b^2+1$</p>
<h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>$a^2+b^2+1&#x3D;kab$</p>
<p>$a^2-(kb)a+(b^2+1)&#x3D;0$</p>
<p>若 a&#x3D;b, $2a^2+1&#x3D;ka^2$ 即$1&#x3D;(k-2)a^2$, 只有$k&#x3D;3,a&#x3D;1$</p>
<p>若$a \neq b$设$a&gt;b$</p>
<p>$a_0a&#x3D;b^2+1$所以$a_0 &lt; b$ 且为正</p>
<p>$a_0+a&#x3D;kb$ 所以$a_0$是整数</p>
<p>$(a,b) \to (b,a_0)$ 能构造出$a+b$更小的结果，无法无穷递降</p>
<h2 id="类似思想-但不一定不存在-的结构性"><a href="#类似思想-但不一定不存在-的结构性" class="headerlink" title="类似思想 但不一定不存在 的结构性"></a>类似思想 但不一定不存在 的结构性</h2><p>勾股定理, project euler 笔记里有 多分支的构造</p>
<ul>
<li>pe223 224 <a href="https://yexiaorain.github.io/Blog/pe/223/">https://yexiaorain.github.io/Blog/pe/223/</a></li>
</ul>
<p>pell方程</p>
]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>概率论基础教程</title>
    <url>/Math/A_First_Course_in_Probability/</url>
    <content><![CDATA[<p>前置知识：微积分</p>
<p>9版</p>
<p>isbn 9787111447894</p>
<p>推荐：</p>
<ul>
<li>专业名词出现时有对应英文</li>
<li>有小结</li>
<li>例题, 感觉选得也挺好的</li>
<li>习题 （部分有答案，感觉选题不算紧凑偏题海）</li>
<li>理论习题 (有提示)</li>
<li>自检习题 （部分有答案，感觉选题不算紧凑偏题海）</li>
</ul>
<span id="more"></span>

<h2 id="1-组合分析"><a href="#1-组合分析" class="headerlink" title="1. 组合分析"></a>1. 组合分析</h2><p>计数基本法则:</p>
<ul>
<li>两个试验，一个有m种可能，另一个n种可能，一共有mn种可能</li>
<li>推广多个试验, 每个m_i种可能，一共$\prod m_i$ 种可能</li>
</ul>
<p>排列：</p>
<ul>
<li>n个元素 的排列方式个数是 n!</li>
</ul>
<p>n个元素排列，其中n_i个元素相同</p>
<ul>
<li>那么总方案数$\frac{n!}{\prod n_i!}$</li>
<li>这个退化到两种相同就是binom, 引出组合</li>
</ul>
<p>组合：n个种选出r个，有多少种选法</p>
<ul>
<li>$\binom{n}{m}&#x3D;\frac{n!}{m!(n-m)!}&#x3D;\binom{n}{n-m}$</li>
<li>常用 $\binom{n}{r}&#x3D;\binom{n-1}{r-1}+\binom{n-1}{r}$</li>
<li>另一方面 $(x+y)^n&#x3D;\sum_{i&#x3D;0}^n \binom{n}{i}x^iy^{n-i}$ 所以也称作二项式系数<ul>
<li>推广 多项式系数,n个分成r组，每组n_i个，有多少种分法</li>
<li>$&#x3D;\frac{n!}{\prod n_i!}$</li>
<li>记号 $\binom{n}{n_1,\cdots,n_r}$</li>
<li>多项式定理$(\sum_{r} x_i)^n&#x3D;\sum \binom{n}{n_1,\cdots,n_r} \prod x_i^{n_i}$</li>
</ul>
</li>
</ul>
<p>命题6.1 共有$\binom{n-1}{r-1}$个不同的正整数向量满足$\sum_r x_i &#x3D; n$</p>
<p>命题6.2 共有$\binom{n+r-1}{r-1}$个不同的非负整数向量满足$\sum_r x_i &#x3D; n$</p>
<h2 id="2-概率论公理"><a href="#2-概率论公理" class="headerlink" title="2. 概率论公理"></a>2. 概率论公理</h2><p>sample space 样本空间 （所有可能的结果）</p>
<p>event 事件</p>
<ul>
<li>交 intersection</li>
<li>并 union</li>
<li>互不相容 mutually exclusive</li>
<li>补</li>
<li>运算<ul>
<li>基本的交换率</li>
<li>De Morgan law<ul>
<li>并的补&#x3D; 补的交</li>
<li>交的补 &#x3D; 补的并</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>概率论公理：</p>
<ul>
<li>有人认为 发生频率去定义概率论 会趋于一个值</li>
<li>公理1,$P[E]\in [0,1]$, 任何事件E概率在0到1之间</li>
<li>公理2,$P[S]&#x3D;1$, 必然发生事件 概率为1</li>
<li>公理3,对任一列互不相容的事件 $P(\cup_{i&#x3D;1}^{\infty} E_i)&#x3D;\sum_{i&#x3D;1}^{\infty} P(E_i)$, 任意一列互不相容的事件，至少有一事件发生的概率等于各事件发生的概率之和<ul>
<li>这里的一点是“序列” （在连续型里会讲到）</li>
<li>如果样本空间是不可数集，那么P(E)仅仅针对那些所谓可测的事件进行定义</li>
<li>可以推出 空集事件概率为0</li>
</ul>
</li>
<li>随着试验的不断重复，事件E发生的概率以概率1趋近P(E),第8章强大数定律</li>
<li>常用命题:</li>
<li>$P(E)+P(E^c)&#x3D;1$</li>
<li>$E\subseteq F$则$P(E)\le P(F)$</li>
<li>$P(E\cup F)&#x3D;P(E)+P(F)-P(E\cap F)$ 书上没有交符号，有点看着难受</li>
<li>容斥: $P(所有E_i)&#x3D;\sum (-1)^r P(其中r个并 E_i)$</li>
</ul>
<p>例5i 也出现了 生日重复概率问题，365种可能</p>
<p>例5m 错排问题&#x2F;配对问题 ～e^{-1}</p>
<ul>
<li>核心还是两个技巧<ul>
<li>容斥</li>
<li>$P(&#x3D;N) &#x3D; P(\le N)-P(\le N-1)$</li>
</ul>
</li>
</ul>
<p>例5o, 游程，我看得懂，定义 计算，和概率，但看不懂为啥说 wwwwwwwllll 说明状态在下滑</p>
<hr>
<p>概率：连续集函数</p>
<ul>
<li>递增序列 ,i &lt; j $E_i\subset E_j$</li>
<li>递减序列 ,i &lt; j $E_j\subset E_i$</li>
<li>如果是递增或者递减序列，那么 $\lim_{i\to \infty}P(E_i)&#x3D;P(\lim_{i\to \infty} E_i)$</li>
<li>证明：<ul>
<li>F_n表示属于E_n但不属于E_{n-1}前面并的部分</li>
<li>那么 F_n的并 &#x3D; E_n的并，但是好处是 F_n两两互斥, 互斥的好处就是可以 在P()括号里外穿梭</li>
</ul>
</li>
</ul>
<hr>
<p>悖论:</p>
<ul>
<li>方案1.<ul>
<li>距离1分钟，放入1,2,取出2</li>
<li>距离1&#x2F;2分钟，放入3,4,取出4</li>
<li>距离1&#x2F;4分钟，放入5,6取出6</li>
<li>问 1分钟后 有多少个球</li>
<li>会觉得里面有所有奇数球</li>
</ul>
</li>
<li>方案2.<ul>
<li>距离1分钟，放入1,2取出1</li>
<li>1&#x2F;2 -&gt; 放入3,4 取出2</li>
<li>1&#x2F;4 -&gt; 放入5,6 取出3</li>
<li>会觉得所有球都被取出了吗？</li>
</ul>
</li>
<li>这里 有点测度论的东西？ 可列可数等势，偶数和正整数个数一样多</li>
<li>我们必须认识到上面两种不是悖论 也不违背数学原理</li>
<li>方案3<ul>
<li>还是每次放是一样的，但是取出是 等概率取出一个</li>
<li>对于1号球，$P(E_n)&#x3D;$表示n次操作后1号球还未被取走的概率<ul>
<li>$\prod_n \frac{(k-1)i}{(k-1)i+1}, k&#x3D;2$, k表示每次放进去的个数</li>
<li>$E_n$ 是一个递减事件 （包含关系）<ul>
<li>P(lim E交)&#x3D;$lim_{n\to \infty} P(E_{n})&#x3D;\prod_{i\to \infty} \frac{(k-1)i}{(k-1)i+1}$</li>
<li>$\prod_{i\to infty} (1+\frac{1}{(k-1)i})$</li>
<li>$\ge \prod_{i&#x3D;1}^m (1+\frac{1}{(k-1)i})$ 截断</li>
<li>$\ge \sum_{i&#x3D;1}^m \frac{1}{(k-1)i}$ 展开</li>
<li>$&#x3D;\frac{1}{k-1}\sum_{i&#x3D;1}^m \frac{1}{i}$ 调和级数</li>
</ul>
</li>
</ul>
</li>
<li>类似的 其它球为空的概率 也能得到0</li>
<li>$P(每个为空)\le \sum P(i个为空) &#x3D; 0$</li>
</ul>
</li>
</ul>
<p>另一个 把 概率解释为确信程度</p>
<h2 id="3-条件概率和独立性"><a href="#3-条件概率和独立性" class="headerlink" title="3. 条件概率和独立性"></a>3. 条件概率和独立性</h2><p>如果 P(F) &gt; 0那么</p>
<ul>
<li>$P(E|F)&#x3D;P(E\cap F)&#x2F;P(F)$</li>
<li>推广 乘法规则 $P(E_1\cap E_2\cdots E_n)&#x3D;P(E_1)P(E_2|E_1)\cdots P(E_n|E_1\cap\cdots \cap E_n)$</li>
</ul>
<p>贝叶斯公式</p>
<ul>
<li>$P(E)&#x3D;P(E\cap F)+P(E\cap F^c)$</li>
<li>$&#x3D;P(E|F)P(F)+P(E| F^c)P(F^c)$</li>
<li>$&#x3D;P(E|F)P(F)+P(E| F^c)(1-P(F))$</li>
<li>推广到多个互斥 $F_i$<ul>
<li>$P(E)&#x3D;\sum P(E\cap F_i)&#x3D;\sum P(E|F_i)P(F_i)$</li>
</ul>
</li>
</ul>
<p>事件H优势比: $\frac{P(H)}{P(H^c)}$</p>
<ul>
<li>$\displaystyle \frac{P(H | E)}{P(H^c | E)}&#x3D;\frac{P(H)P(E|H)}{P(H^c)P(E|H^c)}$<ul>
<li>说明 新的 证据E出现后，H的优势比 &#x3D; 原来优势比 * （H成立E发生概率 比上 H不成立 E发生概率）</li>
</ul>
</li>
</ul>
<p>全概率公式 $P(E)&#x3D;\sum_{i&#x3D;1}^n P(E|F_i)P(F_i)$</p>
<p>$F_i$互不相容事件列，且并为全空间 贝叶斯公式</p>
<ul>
<li>$\displaystyle P(F_j|E)&#x3D;\frac{P(E|F_j)P(F_j)}{\sum_{i&#x3D;1}^n P(E|F_i)P(F_i)}$</li>
<li>一种视角 当证据E成立时，这些假设F_j的成立的概率的计算方式</li>
</ul>
<p>独立independent事件：</p>
<ul>
<li>$P(E\cap F)&#x3D;P(E)P(F)$ 独立事件有对称性</li>
</ul>
<p>$P(\cdot | F)$ 是概率</p>
<ul>
<li>也就是 条件概率 满 概率的三条性质 (范围[0,1]， P(S|F)&#x3D;1, 不相容可加)</li>
</ul>
<h2 id="4-随机变量"><a href="#4-随机变量" class="headerlink" title="4. 随机变量"></a>4. 随机变量</h2><p>定义在样本空间上的实值函数成为随机变量（random variable）</p>
<p>这里写法P{事件}</p>
<p>对于随机变量X定义如下 $F(x)&#x3D;P${$X\le x$}, 称为X的累积分布函数（cumulative distribution function）</p>
<ul>
<li>分布函数 为 随机变量小于等于x的概率</li>
</ul>
<p>离散型随机变量</p>
<ul>
<li>最多 可数个 可能值</li>
<li>p(a)&#x3D;P{X&#x3D;a} 称作 概率分布列(probability mass function)</li>
<li>$p(i)&#x3D;c\lambda^i&#x2F;i!$<ul>
<li>利用和为1,可以得到c&#x3D;$e^{-\lambda}$</li>
<li>对于多段的累积分布函数，其连续区间是 <code>[,)</code> 形状的 每个点是右连续的（右极限&#x3D;点值）</li>
</ul>
</li>
</ul>
<hr>
<h3 id="4-3-期望-expectation-x2F-expected-value"><a href="#4-3-期望-expectation-x2F-expected-value" class="headerlink" title="4.3 期望(expectation &#x2F; expected value)"></a>4.3 期望(expectation &#x2F; expected value)</h3><ul>
<li>这块内容，我觉得 普利斯顿那本书的 矩出发的角度很好</li>
<li>$E[X]&#x3D;\sum xp(x)$<ul>
<li>$E[\sum X_i] &#x3D; \sum E(X_i)$ 来自于 求和的 线性性</li>
</ul>
</li>
<li>所有可能值的加权平均</li>
<li>类似于质量分布的重心（center of gravity)这一物理概念</li>
</ul>
<p>命题4.1 $E[g(X)]&#x3D;\sum g(x)p(x)$</p>
<ul>
<li>如果X是一个离散型随机变量，其可能取值为x_i, 概率p(x_i),那么  有上面表达式</li>
<li>证明 可以按照x展开：<ul>
<li>$\sum g(x)p(x) &#x3D; \sum_{j} \sum_{g(x_i)&#x3D;y_j} g(x_i)p(x_i)$ 按照相同g(x_i)值合并</li>
<li>$&#x3D; \sum_{j} \sum_{g(x_i)&#x3D;y_j} y_i p(x_i)$ </li>
<li>$&#x3D; \sum_{j} y_i \sum_{g(x_i)&#x3D;y_j} p(x_i)$ </li>
<li>$&#x3D; \sum_{j} y_i P(g(X)&#x3D;y_i)$ 这是按照 事件 * 加权的 表述方式</li>
</ul>
</li>
</ul>
<h3 id="4-5-方差"><a href="#4-5-方差" class="headerlink" title="4.5 方差"></a>4.5 方差</h3><p>取值对于均值的偏离程度</p>
<ul>
<li>这里的理由是 $E[|X-\mu|]$ 不方便观察, 所以考虑平方，这样看来的确是 二阶中心矩更 “数学上 顺畅感”</li>
<li>$Var(X)&#x3D;E[(X-\mu)^2]&#x3D;E[X^2]-E[X]^2$<ul>
<li>均值类似于重心，而方差类似于惯性矩</li>
<li>标准差(standard deviation) $StDev(X)&#x3D;SD(X)&#x3D;\sqrt{Var(X)}$</li>
</ul>
</li>
</ul>
<h3 id="4-6-常见分布"><a href="#4-6-常见分布" class="headerlink" title="4.6 常见分布"></a>4.6 常见分布</h3><ul>
<li>p成功1-p失败</li>
<li>n次p, 概率(i) &#x3D; $\binom{n}{i}p^i(1-p)^{n-i}$</li>
</ul>
<p>大多服从泊松分布的：</p>
<ul>
<li>一本书里一页或若干页中印刷错误的数量（p小</li>
<li>某地居民活到100岁的人数 （p小</li>
<li>一天中拨错电话号码的次数 （p小</li>
<li>一家便利店里每天卖出狗粮饼干的合数 （p小</li>
<li>某一天进入一个邮局的顾客数</li>
<li>一年中联邦司法系统中空缺位置数</li>
<li>某放射性材料在一个固定时期放射出来的 alpha粒子数</li>
<li>如果 n个事件 p小，独立或者弱相依，事件发生次数 近似于 $\sum p_i$的泊松分布</li>
</ul>
<p>书上这里推$E[X^k]$  不像之前 普林斯顿具体的带入差分方程，而是推 $E[X^k]$和$E[(aY+b)^{k-1}]$的关系 感觉上更妙啊！！！！！！！！！！</p>
<ul>
<li>但始终没提k阶矩</li>
</ul>
<table>
<thead>
<tr>
<th>-</th>
<th>描述</th>
<th>E[X]</th>
<th>Var(X)</th>
<th>P(X&#x3D;i)</th>
</tr>
</thead>
<tbody><tr>
<td>01分布</td>
<td>1次操作 成功(&#x3D;1)p,失败(&#x3D;0)1-p概率</td>
<td>p</td>
<td>p(1-p)</td>
<td>p</td>
</tr>
<tr>
<td>二项式</td>
<td>n次独立的0-1操作</td>
<td>np</td>
<td>np(1-p)</td>
<td>$\binom{n}{i}p^i(1-p)^{n-i}$, 先增后减</td>
</tr>
<tr>
<td>泊松分布</td>
<td>n足够大p足够小，而np保持适当大小&#x3D;$\lambda$ 的二项随机变量</td>
<td>$\lambda$</td>
<td>$\lambda$</td>
<td>$e^{-\lambda}\frac{\lambda^i}{i!}$上面表达式$np&#x3D;\lambda$,然后对n取极限</td>
</tr>
<tr>
<td>几何geometric分布</td>
<td>二项分布直到首次成功</td>
<td>$\frac{1}{p}$</td>
<td>$\frac{1-p}{p^2}$</td>
<td>$p(1-p)^{n-1}$</td>
</tr>
<tr>
<td>负二项negativ binomial分布</td>
<td>持续实验直到累计成功r次</td>
<td>$\frac{r(r-p+1)}{p^2}$</td>
<td>$\frac{r(1-p)}{p^2}$</td>
<td>$\binom{n-1}{r-1}p^r(1-p)^{n-r}$</td>
</tr>
<tr>
<td>超几何hyper geometric分布</td>
<td>N球，m白，N-m黑，无放回取出n个，X表示白球数</td>
<td>$\frac{mn}{N}$</td>
<td>$np(1-p)(1-\frac{n-1}{N-1})$</td>
<td>$\frac{\binom{m}{i}\binom{N-m}{n-i}}{\binom{N}{n}}$ 注意这里超界的二项式系数定义为0</td>
</tr>
<tr>
<td>zipf分布, 来源于黎曼函数$\zeta(s)&#x3D;\sum (\frac{1}{i})^s$ 给定国家的家庭收入的分布</td>
<td></td>
<td></td>
<td></td>
<td>$\frac{C}{k^{a+1}}$</td>
</tr>
</tbody></table>
<hr>
<h3 id="4-10-分布函数性质"><a href="#4-10-分布函数性质" class="headerlink" title="4.10 分布函数性质"></a>4.10 分布函数性质</h3><ul>
<li>非降$a &lt; b, F(a)\le F(b)$</li>
<li>左极限0,右极限1</li>
<li>右连续（这个普利斯顿教材没提到？）<ul>
<li>P {a &lt; X &lt;&#x3D; b} &#x3D; F(b)-F(a),</li>
</ul>
</li>
</ul>
<h2 id="5-连续型随机变量"><a href="#5-连续型随机变量" class="headerlink" title="5. 连续型随机变量"></a>5. 连续型随机变量</h2><p>连续型（continuous）随机变量</p>
<ul>
<li>P{$X\in B$} &#x3D; $\int_B f(x) dx$</li>
<li>f称为概率密度函数 probability density function</li>
<li>单点值概率都为0 （根据微积分知识）</li>
</ul>
<p>期望</p>
<ul>
<li>$E[X] &#x3D; \int_{-\infty}^{\infty} xf(x)dx$</li>
<li>$E[g(X)] &#x3D; \int_{-\infty}^{\infty} g(x)f(x)dx$<ul>
<li>类似离散的证明，证明按照x积分 和 按照g(X)算权重是一样的</li>
</ul>
</li>
</ul>
<h3 id="常见例子"><a href="#常见例子" class="headerlink" title="常见例子"></a>常见例子</h3><h4 id="均匀分布-uniformly-distribution"><a href="#均匀分布-uniformly-distribution" class="headerlink" title="均匀分布 uniformly distribution"></a>均匀分布 uniformly distribution</h4><ul>
<li>f(x)&#x3D;1,0 &lt; x &lt; 1 ，根据微积分知识 这里左右有没有等号都可以</li>
<li>f(x)&#x3D;0 其它</li>
<li>(a,b)上均匀分布 $f(x)&#x3D;\frac{1}{b-a}, a &lt; x &lt; b$ 其它位置概率为0<ul>
<li>累积分布$F(x)&#x3D;\frac{x-a}{b-a},x\in[a,b]$</li>
<li>E[X]&#x3D;(a+b)&#x2F;2</li>
<li>Var(X)&#x3D;(b-a)^2&#x2F;12</li>
</ul>
</li>
</ul>
<h4 id="正态随机变量"><a href="#正态随机变量" class="headerlink" title="正态随机变量"></a>正态随机变量</h4><ul>
<li>$f(x)&#x3D;\frac{1}{\sigma\sqrt{2\pi}}e^{-\frac{(x-\mu)^2}{2\sigma^2}}$</li>
<li>未来中心极限定理会见到<ul>
<li>标准化 $Z&#x3D;\frac{x-\mu}{\sigma}$ 分母是 标准差 不是 方差</li>
</ul>
</li>
<li>$E[X]&#x3D;\mu$</li>
<li>$Var(X)&#x3D;\sigma^2$</li>
<li>哇一张大表</li>
</ul>
<p>1733年槺莫弗 引入的 ，后面高斯天文中位置预测高斯分布</p>
<p>槺莫弗-拉普拉斯极限定理，n次独立重复实验中，每次成功概率为p,记成功的总次数为S_n, 那么对任意a &lt; b有 当$n\to \infty$ 时</p>
<ul>
<li>P{$a\le \frac{S_n-np}{\sqrt{np(1-p)}}\le b$}$\to \Phi(b)-\Phi(a)$</li>
<li>证明见 八章中心极限定理，这是一个特例</li>
<li>从 图像上能 感觉出这个东西</li>
<li>普利斯顿的书上建议的是 &gt;&#x3D;30次可以用 正态分布估算</li>
</ul>
<h4 id="指数随机变量"><a href="#指数随机变量" class="headerlink" title="指数随机变量"></a>指数随机变量</h4><p>$f(x) &#x3D; \lambda e^{-\lambda x}, x\ge 0$</p>
<ul>
<li>通常用来描述某个事件发生的等待时间的分布。</li>
<li>累积分布 $F(x)&#x3D;1-e^{-\lambda x}$ </li>
<li>这里书上同样是计算出 $E[X^k]&#x3D;\frac{n}{\lambda} E[X^{n-1}]$</li>
<li>$E[X]&#x3D;\frac{1}{\lambda}$</li>
<li>$Var(X)&#x3D;\frac{1}{\lambda^2}$</li>
<li>特点：无记忆性<ul>
<li>P{X&gt;s+t|X&gt;t}&#x3D;P{X&gt;s}</li>
<li>任意一个零件的寿命，的分布，对于任意t,剩余寿命同一个新的零件的寿命的分布是一样的</li>
<li>失效率$_t&#x3D;\frac{f(t)}{1-F(t)}$ 危险率函数<ul>
<li>指数函数是唯一失效率为常数的分布，（解微分方程）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Gamma分布"><a href="#Gamma分布" class="headerlink" title="Gamma分布"></a>Gamma分布</h4><ul>
<li>$\displaystyle f(x)&#x3D;\frac{\lambda e^{\lambda x}(\lambda x)^{a-1}}{\Gamma(a)},x\ge 0$</li>
<li>有地方也常称为 n-Erlang分布</li>
<li>看作是某个事件 总共发生n次 的等待时间分布<ul>
<li>P{T_n&lt;&#x3D; t}, 第n个事件发生时刻不超过t</li>
<li>&#x3D;P{N(t) &gt;&#x3D; n}, t时刻内 发生事件个数大于等于n</li>
<li>&#x3D;$\sum_{j&#x3D;n}^{\infty}$ P{$N(t)&#x3D;j$} 对于t时刻内放生次数 进行划分（不相交，并为所有）</li>
<li>&#x3D;$\sum_{j&#x3D;n}^{\infty} \frac{e^{-\lambda t}(\lambda t)^j}{j!}$ , [0,t]时刻内发生事件数 服从参数为$\lambda t$的泊松分布</li>
<li>两边求导 可以得到 f(t)表达式</li>
</ul>
</li>
<li>$\Gamma(a)&#x3D;\int_0^{\infty} e^{-y}y^{a-1}dy$<ul>
<li>$\Gamma(n)&#x3D;(n-1)!$</li>
</ul>
</li>
</ul>
<h4 id="韦布尔分布"><a href="#韦布尔分布" class="headerlink" title="韦布尔分布"></a>韦布尔分布</h4><ul>
<li>最初在解释疲劳数据时提出的</li>
<li>有关生命线性的领域中 应用广泛</li>
<li>当某对象适合“最弱链”模型的时，其寿命就服从 韦布尔分布<ul>
<li>很多部分组成 任何一个部分毁坏 生命就终结，</li>
</ul>
</li>
<li>分布函数 $F(x)&#x3D;1-exp(-(\frac{x-v}{a})^b), x &gt; v$</li>
<li>求导后得到概率密度函数</li>
</ul>
<h4 id="柯西分布"><a href="#柯西分布" class="headerlink" title="柯西分布"></a>柯西分布</h4><p>$f(x)&#x3D;\frac{1}{\pi} \frac{1}{1+(x-\theta)^2}$</p>
<p>例6b</p>
<ul>
<li>(0,1)处 有一束光，夹角服从 -pi&#x2F;2 ~pi&#x2F;2的均匀分布，照到y&#x3D;0也就是x轴上的点的x坐标的X随机变量</li>
<li>$F(x)&#x3D;\frac{1}{2}+\frac{1}{\pi} arctan(x)$</li>
<li>$f(x)&#x3D;\frac{1}{\pi(1+x^2)}$</li>
</ul>
<h4 id="beta-分布"><a href="#beta-分布" class="headerlink" title="beta 分布"></a>beta 分布</h4><p>$f(x)&#x3D;\frac{1}{B(a,b)}x^{a-1}(1-x)^{b-1}, x\in(0,1)$</p>
<ul>
<li>$B(a,b)&#x3D;\int_0^{1}x^{a-1}(1-x)^{b-1}dx$<ul>
<li>$B(a,b)&#x3D;\frac{\Gamma(a)\Gamma(b)}{\Gamma(a+b)}$</li>
</ul>
</li>
<li>对于 一段 [c,d]随机先现象建立模型，<ul>
<li>a&#x3D;b时关于 (c+d)&#x2F;2对称</li>
<li>b&gt;a时 向左侧偏移（取小值可能性更大）</li>
<li>a&gt;b时 右侧偏移 取大值 可能性更大</li>
</ul>
</li>
<li>$E[X]&#x3D;\frac{a}{a+b}$</li>
<li>$Var(X)&#x3D;\frac{ab}{(a+b)^2(a+b+1)}$</li>
</ul>
<h2 id="6-随机变量的联合分布"><a href="#6-随机变量的联合分布" class="headerlink" title="6. 随机变量的联合分布"></a>6. 随机变量的联合分布</h2><p>联合概率分布函数 joint cumulative probability distribution function</p>
<p>F(a,b)&#x3D;P{X&lt;&#x3D;a,Y&lt;&#x3D;b} </p>
<ul>
<li>$F_X(a)&#x3D;F(a,\infty)$ 称作边缘分布 marginal distribution</li>
<li>p(a,b)&#x3D;P{X&#x3D;a,Y&#x3D;b} 联合概率分布列 joint probability mass function</li>
</ul>
<p>联合连续的 jointly continuous </p>
<ul>
<li>存在一个定义于任意实数x和y上的函数f(x,y)满足，任意实数对集合C</li>
<li>P{(X,Y)\in C} &#x3D; $\int\int_{(x,y)\in C} f(x,y) dx dy$</li>
</ul>
<p>联合密度函数 joint probability density function</p>
<ul>
<li>C&#x3D;{X\in A, y \in B}</li>
<li>P{X\in A,Y\in B}&#x3D;$\int_B\int_A f(x,y) dx dy$</li>
<li>$f(x,y)&#x3D;\frac{\partial^2}{\partial a\partial b} F(a,b)$</li>
</ul>
<p>独立的independent,</p>
<ul>
<li>P{$X\in A,Y\in B$}&#x3D;P{$X\in A$} P{$Y\in B$}</li>
<li>$F(a,b)&#x3D;F_X(a)F_Y(b)$</li>
<li>$p(x,y)&#x3D;p_X(x)p_X(y)$</li>
</ul>
<p>独立变量之和</p>
<ul>
<li>$f_{X+Y}(x)&#x3D; f_X与f_Y的卷积 &#x3D; \int f_X(a-y)f(y)dy$</li>
<li>对于累积分布 $F_{X+Y}(x)&#x3D;\int F_X(a-y)f_Y(y)dy$, 注意这里积分部分一个是累积分布一个是概率密度，不如上面的概率密度的那么好看</li>
<li>这要是出现在 上面具体分布之前就好了，每次分布可以讨论</li>
<li>这里 很特点很重要的一个就是正态分布, 多个独立的正态分布的随机变量和 的分布还是正态分布，且满足 期望和方差都是对应的和<ul>
<li>$\sum X_i \sim N(\sum \mu_i,\sum \sigma_i^2)$</li>
</ul>
</li>
<li>泊松分布之和 $\sim 泊松(\sum \lambda_i)$</li>
<li>二项分布之和 $\sim 二项(\sum n_i,p)$</li>
</ul>
<p>例5c t分布, $Z\sim N(0,1), Y\sim \mathcal{X}^2_n$</p>
<ul>
<li>$T&#x3D;\frac{Z}{\sqrt{Y&#x2F;n}}$ 自由度为n的t分布<ul>
<li>卡方分布 $f_Y(y)&#x3D;\frac{e^{-y&#x2F;2}y^{n&#x2F;2-1}}{2^{n&#x2F;2}\Gamma(n&#x2F;2)}$</li>
<li>t分布 $f_T(t)&#x3D;\frac{\Gamma(\frac{n+1}{2})}{\sqrt{\pi n}\Gamma(\frac{n}{2})}(1+\frac{t^2}{n})^{-(n+1)&#x2F;2}$</li>
</ul>
</li>
</ul>
<p>例5d 二元正态分布</p>
<ul>
<li>TODO</li>
</ul>
<hr>
<p>6.6 次序统计量 order statistics</p>
<ul>
<li>X_i 是n个独立同分布, 概率密度函数f(x)</li>
<li>$X_{(i)}$ 是它们排序后的值</li>
<li>$f_{次序统计量联合密度}(x_1,\cdots,x_n)&#x3D;n! \prod f(x_i)$ 其中$x_i$单调</li>
</ul>
<hr>
<p>6.7 随机变量函数的联合分布</p>
<p>$X_1,X_2$是联合连续的随机变量，具有联合密度函数$f_{X_1,X_2}$, $Y_1,Y_2$为$X_1,X_2$的函数，有时我们需要求$Y_1,Y_2$的联合分布</p>
<ul>
<li>具体说 $Y_1&#x3D;g_1(X_1,X_2),Y_2&#x3D;g_2(X_1,X_2)$<ul>
<li><ol>
<li>由方程组 $y_1&#x3D;g_1(x_1,x_2),y_2&#x3D;g_2(x_1,x_2)$ 可以唯一的解出$x_1,x_2$来</li>
</ol>
</li>
<li><ol start="2">
<li>$g_1,g_2$对于一切$(x_1,x_2)$有连续偏导数，J(x1,x2)&#x3D;$\frac{\partial g_1}{\partial x_1}\frac{\partial g_2}{\partial x_2}-\frac{\partial g_1}{\partial x_2}\frac{\partial g_2}{\partial x_1}\neq 0$ 也就是$|\frac{\partial g_i}{\partial x_j}|$的行列式</li>
</ol>
</li>
<li>$f_{Y_1,Y_2}(y_1,y_2)&#x3D;f_{X_1,X_2}(x_1,x_2)|J(x_1,x_2)|^{-1}$<ul>
<li>证明原理 就是 统计累积 相等 从而偏微商相等</li>
</ul>
</li>
<li>对于 n维 到 n维度的转换同理<ul>
<li>$f_{Y_i\cdots}(y_i\cdots)&#x3D;f_{X_i\cdots}(x_i\cdots)|J(x_i\cdots)|^{-1}$</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p>6.8 可交换，交换后 联合累积分布不变</p>
<ul>
<li>对于离散的来说，交换后对称具体点 概率相等</li>
<li>对于单个变量 分布相同</li>
</ul>
<h2 id="7-期望的性质"><a href="#7-期望的性质" class="headerlink" title="7. 期望的性质"></a>7. 期望的性质</h2><ul>
<li>可以看成加权平均<ul>
<li>所以如果 $P(x\in[a,b])&#x3D;1$ 那么 $E[X]\in [a,b]$</li>
</ul>
</li>
</ul>
<p>二元函数:</p>
<ul>
<li>$E[g(X,Y)]&#x3D;\sum_{y}\sum_{x} g(x,y)p(x,y)$</li>
<li>$E[g(X,Y)]&#x3D;\int_{y}\int_{x} g(x,y)f(x,y) dxdy$</li>
</ul>
<p>样本均值 $\bar{X}&#x3D;\sum \frac{X_i}{n}$</p>
<p>boole不等式 P(事件并) &lt;&#x3D; P(事件)的和</p>
<p>二项随机变量的期望 E[X]&#x3D;n个 0-1分布&#x3D;np</p>
<p>负二项分布变量均值，成功概率p,直到r次成功总次数</p>
<ul>
<li>$X&#x3D;\sum X_i$, 其中$X_i$ 表示 从$i-1$次成功以后到i次所需要的次数，都是 1&#x2F;p</li>
<li>所以 $E[X] &#x3D; r&#x2F;p$</li>
</ul>
<p>超几何随机变量的均值，N球，m白，取出n, X&#x3D;白球的个数期望</p>
<ul>
<li>$X_i&#x3D;$ 第i个白球被取出</li>
<li>$X&#x3D;X_1+\cdots+X_m$</li>
<li>$E[X_i]&#x3D;\frac{n}{N}$</li>
<li>$E[X]&#x3D;nm&#x2F;N$</li>
</ul>
<p>配对数： n人n个帽子，拿到自己帽子期望</p>
<ul>
<li>X_i 第i个人拿到自己帽子期望 &#x3D; 1&#x2F;N</li>
<li>$E[X]&#x3D;1$</li>
</ul>
<p>每次获得 1<del>n中一个数，问 1</del>n全部获得至少一次的期望数</p>
<ul>
<li>X_i已经获得i-1个，再获得下一个所需要的 次数, </li>
<li>P{X_i&#x3D;k}&#x3D;$\frac{N-i}{N}(\frac{i}{N})^{k-1}$</li>
<li>$E[X_i]&#x3D;\frac{N}{N-i}$</li>
</ul>
<p>这里好几个例子看似有关联，但实际上的确可以看作独立事件，好神奇</p>
<hr>
<p>7.3 试验序列中 事件发生次数的 矩</p>
<ul>
<li>事件 $A_1,\cdots,A_n$</li>
<li>示性变量 $I_i&#x3D;bool(若A_i发生)$</li>
<li>$X&#x3D;\sum I_i$</li>
<li>$E[X]&#x3D;E[\sum I_i]&#x3D;\sum E[I_i]&#x3D;\sum P(A_i)$</li>
<li>从意义上看 $E[\binom{X}{2}]&#x3D;\sum_{i&lt; j}P(A_i\cap A_j)$ 成对发生的次数</li>
<li>$Var(X)&#x3D;E[X^2]-E[X]^2&#x3D;\sum P(A_i\cap A_j)$</li>
<li>类似的 $E[\binom{X}{k}]&#x3D;\sum_{k个从小到大}P(A_{i_1}\cap\cdots\cap A_{i_k})$ k对发生的次数</li>
<li>这种方法 也可以算k阶矩 $E[X^k]$<ul>
<li>二项随机变量的矩 $E[X(X-1)\cdots(X-k+1)]&#x3D;n(n-1)\cdots(n-k+1)p^k$</li>
<li>超几何随机变量的矩 $E[X(X-1)\cdots(X-k+1)]&#x3D;n(n-1)\cdots(n-k+1)\frac{m(m-1)\cdots (m-k+1)}{N(N-1)\cdots (N-k+1)}$</li>
<li>配对问题中的矩 $E(X(X-1)\cdots(X-k+1)]&#x3D;1$</li>
</ul>
</li>
</ul>
<hr>
<p>命题4.1 X,Y相互独立，那么对于任何函数h,g 有</p>
<ul>
<li>$E[g(X)h(Y)]&#x3D;E[g(X)]E[h(Y)]$</li>
</ul>
<h4 id="协方差"><a href="#协方差" class="headerlink" title="协方差"></a>协方差</h4><ul>
<li>定义：$Cov(X,Y)&#x3D;E[(X-E[X])(Y-E[Y])]$</li>
<li>独立 &#x3D;&gt; 协方差  &#x3D;0</li>
<li>协方差 &#x3D; 0 &#x3D;&gt; 不一定独立</li>
<li>Cov(X,Y)&#x3D;Cov(Y,X) 对称性</li>
<li>Cov(X,X)&#x3D;Var(X) 上面的成对问题</li>
<li>Cov(aX,Y)&#x3D;aCov(X,Y) 变量数量倍数</li>
<li>Cov(\sum X,\sum Y)&#x3D;\sum \sum Cov(X,Y) 线性加</li>
<li>Var(\sum X_i)&#x3D;\sum Var(X_i) + 2 \sum \sum_{i&lt;j} Cov(X_i,X_j)</li>
<li>$Cov(\bar{X},X_i-\bar{X})&#x3D;0$</li>
<li>相关系数 $\rho(X,Y)&#x3D;\frac{Cov(X,Y)}{\sqrt{Var(X)Var(Y)}}$</li>
</ul>
<p>样本均值 $Var(\bar{X})&#x3D;\frac{\sigma^2}{n}$</p>
<p>样本方差$S^2$</p>
<ul>
<li>自由度 n-1</li>
<li>$E[S^2&#x3D;\sum \frac{(X_i-\bar{X})^2}{n-1}]&#x3D;\sigma^2$</li>
<li>$\frac{n-1}S^2&#x2F;\sigma^2 \sim \chi^2_{n-1}$ (通过矩母函数证明)</li>
</ul>
<hr>
<h4 id="条件期望"><a href="#条件期望" class="headerlink" title="条件期望"></a>条件期望</h4><ul>
<li>$E[X|Y&#x3D;y]&#x3D;\sum_x xp_{x|y}(x|y)&#x3D;\sum_x x\frac{p(x,y)}{p_Y(y)}$</li>
<li>$E[X|Y&#x3D;y]&#x3D;\int x p_{x|y}(x|y) dx&#x3D;\int x\frac{p(x,y)}{p_Y(y)} dx$</li>
<li>类似的 条件下的方差定义<ul>
<li>$Var(X|Y&#x3D;y)&#x3D;E[(X-E[X|Y&#x3D;y])^2|Y&#x3D;y]$<ul>
<li>条件方差公式 $Var(X)&#x3D;E[Var(X|Y)]+Var(E[X|Y])$</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>$E[X|Y]$表示随机变量Y的函数，本身是一个随机变量不是值</p>
<ul>
<li>在Y&#x3D;y处的值为 $E[X|Y&#x3D;y]&#x3D;\sum_x xP(X&#x3D;x|Y&#x3D;y)$</li>
</ul>
<p>命题5.1 $E[X]&#x3D;E[E[X|Y]]$</p>
<ul>
<li>$E[X]&#x3D;\sum_y E[X|Y&#x3D;y]P(Y&#x3D;y)$</li>
<li>$E[X]&#x3D;\int E[X|Y&#x3D;y]f_Y(y) dy$</li>
</ul>
<h4 id="条件期望及预测"><a href="#条件期望及预测" class="headerlink" title="条件期望及预测"></a>条件期望及预测</h4><ul>
<li>观测到X,基于X对第二个随机变量进行预测，</li>
<li>预测值 g(X) 希望 最接近Y</li>
<li>$E[(Y-g(X))^2]$ 来度量</li>
<li>要证明的结论 $g(X)&#x3D;E[Y|X]$ 是最优的</li>
</ul>
<p>命题6.1： </p>
<ul>
<li>$E[(Y-g(X))^2]\ge E[(Y-E[Y|X])^2]$</li>
<li>证明 $E[(Y-g(X))^2 | X]&#x3D; E[(Y-E[Y|X]+E[Y|X]-g(X))^2 | X]$</li>
<li>$&#x3D; E[(Y-E[Y|X])^2|X]+E[(E[Y|X]-g(X))^2|X]+2E[(Y-E[Y|X])(E[Y|X]-g(X))|X]$</li>
<li>对于最后一部分 $E[(Y-E[Y|X])(E[Y|X]-g(X))|X]$ <ul>
<li>因为 $E[(E[Y|X]-g(X))|X]&#x3D;(E[Y|X]-g(X))$ </li>
<li>$E[(Y-E[Y|X])(E[Y|X]-g(X))|X]$ </li>
<li>$&#x3D;(E[Y|X]-g(X))E[(Y-E[Y|X])|X]$ </li>
<li>$&#x3D;(E[Y|X]-g(X))(E[Y|X]-E[Y|X])$ </li>
<li>$&#x3D;(E[Y|X]-g(X))\cdot 0$</li>
<li>$&#x3D;0$</li>
</ul>
</li>
</ul>
<hr>
<h4 id="矩母函数-M-t-x3D-E-e-tX"><a href="#矩母函数-M-t-x3D-E-e-tX" class="headerlink" title="矩母函数: $M(t)&#x3D;E[e^{tX}]$"></a>矩母函数: $M(t)&#x3D;E[e^{tX}]$</h4><ul>
<li>$M(t)^{(n)}&#x3D;E[X^ne^{tX}]$ 求导<ul>
<li>$M(0)^{(n)}&#x3D;E[X^n]$ 求导</li>
</ul>
</li>
<li>重要的性质<ul>
<li>随机变量矩母函数 唯一地确定它的分布（普林斯顿 说 有限制 在0点附近邻域可微，否则需要傅里叶分析更）</li>
<li>$M_{\sum X_i}(t)&#x3D;\prod M_{X_i}(t)$ 对于独立的分布的和<ul>
<li>利用矩母函数 容易证明 几个稳定分布：正态，泊松，Gamma 分布</li>
<li>类似的 当给定一个 随机变量X， 想要证明 g(X)满足什么分布，可以用矩母函数作为工具</li>
</ul>
</li>
</ul>
</li>
<li>正态分布$M(t)&#x3D;e^{\mu t +\sigma^2 t^2&#x2F;2}$<ul>
<li>标准正态分布$M(t)&#x3D;e^{t^2&#x2F;2}$</li>
</ul>
</li>
</ul>
<p>P285 有个整理表</p>
<h2 id="8-极限定理"><a href="#8-极限定理" class="headerlink" title="8. 极限定理"></a>8. 极限定理</h2><p>重要的理论结果</p>
<ul>
<li>大数定律：建立 P(事件 与 常数) 与 均值，方差 的 关系<ul>
<li>马尔可夫不等式：a &gt; 0, X 非负, 只用了 均值 $E[X]$<ul>
<li>P(X &gt;&#x3D; a) &lt;&#x3D; $E[X]&#x2F;a$<ul>
<li>证明 $[x &gt;&#x3D; a] &#x3D; I指标函数 &lt;&#x3D; X&#x2F;a$， 两边取期望</li>
</ul>
</li>
</ul>
</li>
<li>切比雪夫不等式：用了 均值 与 方差， 均值方差都有限<ul>
<li>$P(|X-\mu|\ge k)\le \frac{\sigma^2}{k}$</li>
<li>多用了 方差，会更“准确”，但对于一些具体的 实例会看到依然只是个很远的上界，（通常情况下，得到的概率上界与实际概率相差较大</li>
<li>一些科学家 会用这个来说 9?% 的估计 在 多少范围</li>
<li>单边切比雪夫不等式 $P(X \ge a) \le \frac{\sigma^2}{\sigma^2+a^2}$</li>
</ul>
</li>
</ul>
</li>
<li>中心极限定理：足够多独立同分布的 大多数分布 都将收敛于 正态分布<ul>
<li>独立同分布 $P(\frac{\sum X_i - n\mu }{\sigma\sqrt{n}}\le a) \to \frac{1}{\sqrt{2\pi}}\int_{-\infty}^a e^{-x^2&#x2F;2} dx$ 当$x\to \infty$ 这里的a的作用是闭区间，因为这证明用的是0点展开？</li>
<li>相互独立$P(\frac{\sum (X_i - \mu_i) }{\sum \sqrt{\sigma_i^2}}\le a) \to \frac{1}{\sqrt{2\pi}}\int_{-\infty}^a e^{-x^2&#x2F;2} dx$ 当$x\to \infty$ 这里的a的作用是闭区间，因为这证明用的是0点展开？</li>
<li>证明核心 可以 矩母+极限（泰勒展开）</li>
<li>历史注记： 拉普拉斯</li>
</ul>
</li>
</ul>
<hr>
<p>8.4 强 大数定律</p>
<ul>
<li>独立同分布的随机变量序列的均值，以 概率1 收敛到分布的均值</li>
<li>$X_i$独立同分布</li>
<li>以概率1 成立$n\to \infty$时 $\bar{X} \to \mu$, </li>
<li>换句话说，如果我们无法知道内在的概率，而可以做实验，那么实验次数无限大时，实验结果的均值就是其内在不可直接知晓的均值<ul>
<li>注意到用内在概率 定义事件的发生函数，从而 可以实验的 发生函数的期望 趋于 内在概率</li>
</ul>
</li>
</ul>
<hr>
<p>其它 不等式</p>
<ul>
<li>标准正态 切尔诺夫界$Z\sim N(0,1),M(t)&#x3D;e^{t^2&#x2F;2}$<ul>
<li>$P(Z\ge a)\le e^{-ta}e^{t^2&#x2F;2}$</li>
<li>其中$t&#x3D;a$时 达到极小值$P(Z\ge a)\le e^{-a^2&#x2F;2}$</li>
</ul>
</li>
<li>泊松 切尔诺夫界<ul>
<li>$M(t)&#x3D;e^{\lambda(e^t-1)}$</li>
<li>$P(X\ge a)\le e^{\lambda(e^t-1)e^{-at}},t&gt;0$</li>
<li>$e^{t}&#x3D;a&#x2F;\lambda$时达到最小值$P(X\ge a)\le \frac{e^{-\lambda}(e\lambda)^a}{a^a}$</li>
</ul>
</li>
<li>詹森不等式， f(x)凸函数，$E[x]$存在且有限<ul>
<li>$E[f(X)]\ge f(E[X])$, 证明 泰勒展开</li>
</ul>
</li>
</ul>
<h2 id="9-概率论的其他课题"><a href="#9-概率论的其他课题" class="headerlink" title="9. 概率论的其他课题"></a>9. 概率论的其他课题</h2><p>泊松过程</p>
<p>某一事件在任一时刻发生</p>
<ul>
<li>$N(t)$表示在时间段$[0,t]$内发生的事件数</li>
<li>随机变量集合 {N(t),t&gt;&#x3D;0}称为具有强度$\lambda$的泊松过程$(\lambda &gt;0)$<ul>
<li>如果 N(0)&#x3D;0 从0时刻开始</li>
<li>在不相交的时间段内发生的事件数是相互独立的</li>
<li>在给定时间段上发生的事件数的分布只跟该时间段的长度有关，而与时间段位置无关</li>
<li>$P(N(h)&#x3D;1)&#x3D;\lambda h + o(h)$</li>
<li>$P(N(h)\ge 2)&#x3D;o(h)$</li>
</ul>
</li>
<li>是服从 参数为$\lambda t$ 的泊松分布</li>
</ul>
<p>引理 1.1 对于强度$\lambda$的泊松过程</p>
<ul>
<li>$P(N(t)&#x3D;0)&#x3D;e^{-\lambda t}$</li>
<li>$P_0(t+h)&#x3D;P(N(t+h)&#x3D;0)$ 令</li>
<li>$&#x3D;P(N(t)&#x3D;0,N(t+h)-N(t)&#x3D;0)$ 状态分解</li>
<li>$&#x3D;P(N(t)&#x3D;0)P(N(t+h)-N(t)&#x3D;0)$ 利用独立性</li>
<li>$&#x3D;P(N(t)&#x3D;0)P(N(h)&#x3D;0)$ 利用只与长度有关</li>
<li>$&#x3D;P_0(t)P_0(h)$ 变形</li>
<li>$&#x3D;P_0(t)[1-\lambda h + o(h)]$ 利用 性质4 的补</li>
</ul>
<p>即 $\frac{P_0(t+h)-P_0(t)}{h}&#x3D;-\lambda P_0(t)+\frac{o(h)}{h}$</p>
<ul>
<li>令h趋于0, $P_0’(t)&#x3D;-\lambda P_0(t)$, 右边是高阶无穷小 趋于0</li>
<li>微分方程解 &#x3D; $P_0(t)&#x3D;Ke^{-\lambda t}$<ul>
<li>带入特解$P_0(0)&#x3D;P(N(0)&#x3D;0)&#x3D;1$得到$P_0(t)&#x3D;e^{-\lambda t}$</li>
<li>看起来像指数型随机变量 无记忆性</li>
</ul>
</li>
<li>$T_n$ 表示第n-1个事件 到 第n个事件发生的时间间隔<ul>
<li>$P(T_1 &gt; t)&#x3D;P(N(t)&#x3D;0)&#x3D;e^{-\lambda t}$<ul>
<li>也就是 $T_1$具有均值 $1&#x2F;\lambda$ 的指数分布</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>命题 1.1 强度为$\lambda$的泊松过程的时间间隔 $T_i$ 相互独立，且服从均值为$1&#x2F;\lambda$的指数分布</p>
<ul>
<li>$S_n&#x3D;\sum_n T_i$ 具有 参数为$n, \lambda$的Gamma分布<ul>
<li>概率密度函数$f(x)&#x3D;\lambda e^{-\lambda x}\frac{(\lambda x)^{n-1}}{(n-1)!}$</li>
</ul>
</li>
</ul>
<p>定理1.1 对于强度为$\lambda$的泊松过程</p>
<ul>
<li>$P(N(t)&#x3D;n)&#x3D;\frac{e^{-\lambda t}(\lambda t)^n}{n!}$<ul>
<li>&#x3D;P(N(t)&gt;&#x3D;n)-P(N(t)&gt;&#x3D;n+1)</li>
<li>&#x3D;P(S_n &lt;&#x3D; t) - P(S_n &lt;&#x3D; t+1)</li>
<li>&#x3D; 两个概率密度函数积分差</li>
</ul>
</li>
</ul>
<hr>
<p>马尔可夫链：下一个状态只由上一个状态和概率函数决定，对于更早的不关心，很像动态规划，只是概率的</p>
<ul>
<li>$X_i$ 表示i时刻的状态</li>
<li>$P(X_{t+1}&#x3D;j|X_{t}&#x3D;i)&#x3D;P_{ij}$ 表示不论时刻的，当前状态是i,那么下一个状态是j的概率<ul>
<li>$(\sum_j P_{ij})&#x3D;1$</li>
</ul>
</li>
<li>设所有可选状态 是 0~m中的整数</li>
<li>因此 可以有 m * m 的概率转移矩阵</li>
</ul>
<p>命题2.1 查普曼-科尔莫戈罗夫方程</p>
<ul>
<li>$(P^{n})<em>{ij}&#x3D;\sum</em>{k&#x3D;0}^M (P^r)<em>{ik} (P^{n-r})</em>{kj}$</li>
<li>注意 这里书上$P_{ij}^n$, 它并不是 $P_{ij}$的n次方，而是n次移动$P^n$，从$i$到$j$的概率<ul>
<li>$(P^n)<em>{ij}&#x3D;P(X</em>{n+m}&#x3D;j | X_m&#x3D;i)$</li>
</ul>
</li>
</ul>
<p>定理2.1 对于遍历的(?)马尔可夫链，</p>
<ul>
<li>$\pi_j&#x3D;\lim_{n\to \infty} (P^n)_{ij}$ 也就是 无论初始是什么i, 无限大移动后，收敛到只和j有关的数，从线性代数的观点上看，转移矩阵最后会达到一个稳态</li>
<li>存在，并且 是 $\sum \pi_j &#x3D;1, \pi_j&#x3D;\sum_{k&#x3D;0}^M \pi_kP_{kj}$ 的 唯一非负解<ul>
<li>从极限角度看 稳态会有这个结果</li>
<li>但这个方程组，是 M 元，M+1个等式 的线性方程组, 如何唯一非负解？</li>
</ul>
</li>
</ul>
<hr>
<p>惊奇 不确定性，熵</p>
<ul>
<li>S(p 概率)</li>
<li>公理1. S(1)&#x3D;0 一定发生的事件 不会 惊奇</li>
<li>公理2. p &lt; q则S(p) &gt; S(q), 随着概率增大 越来越不惊奇</li>
<li>公理3. S(p) 连续</li>
<li>公理4. S(pq)&#x3D;S(p)+S(q), 这里希望的满足后验概率的转移情况</li>
<li>定理3.1 若S() 满足 公理1~3 则 $S(p)&#x3D;-C\log_2P$<ul>
<li>证明 $S(p^x)&#x3D;xS(p)$ 可&#96;加 &#x3D;&gt; 整数 &#x3D;&gt; 1&#x2F;n 整数倒数 &#x3D;&gt; m&#x2F;n 有理数 &#x3D;&gt; 稠密+连续 所有非负实数</li>
<li>那么希望 $S(p)&#x3D;xS(v)$, 其中v是常数, $p&#x3D;v^x$, $S(p)&#x3D;\log_v p S(v)$<ul>
<li>例如$v&#x3D;1&#x2F;2$ 有$S(p)&#x3D;-S(v)\log_2p$</li>
<li>通常情况 令C&#x3D;1,</li>
</ul>
</li>
</ul>
</li>
<li>观察到随机变量X的值，引起的平均惊奇 $H(X)&#x3D;-\sum_{i&#x3D;1}^n p_i\log p_i$ 也就是 惊奇值的加权平均<ul>
<li>信息论中称作 熵</li>
<li>多变量 联合不确定性 $H(X,Y)&#x3D;-\sum_i\sum_jp(x_i,y_j)\log p(x_i,y_j)$<ul>
<li>$&#x3D;-\sum_i\sum_j p_{Y}(y_j)p(x_i|y_j)[\log p_Y(y_j)+\log p(x_i|y_j)]$</li>
<li>$&#x3D;-\sum_i p_{Y}(y_j)\log p_Y(y_j)\sum_j p(x_i|y_j)-\sum_i p_{Y}(y_j)\sum_j p(x_i|y_j)\log p(x_i|y_j)$</li>
<li>$&#x3D;H(Y)+H_Y(X)$</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>引理3.1 $\ln x \le x-1$ 只有x&#x3D;1时等号成立</p>
<p>定理3.2 $H_Y(X)\le H(X)$, 等号成立条件是$Y,X$相互独立</p>
<ul>
<li>做差</li>
</ul>
<hr>
<p>编码定理与熵</p>
<ul>
<li>编码本身的要求：唯一解码</li>
<li>额外期望：基于概率期望上的尽量短</li>
</ul>
<p>引理4.1 X的可能取值为$x_1,\cdots,x_n$ 为了把它们编成长度为$n_1,\cdots,n_{N}$的0-1序列（不能让其中任何一个序列 是其它序列的前缀）</p>
<ul>
<li>充要条件 $\sum (\frac{1}{2})^{n_i}\le 1$<ul>
<li>长度i的编码个数 $w_i$</li>
<li>$w_1 \le 2$</li>
<li>$w_2 \le 2^2-2w_1$</li>
<li>$w_n \le 2^n-2w_{n-1}-2^2w_{n-2}-\cdots-2^{n-1}w_1$</li>
</ul>
</li>
</ul>
<p>定理4.1 无噪声编码定理</p>
<ul>
<li>X取值 $x_1\cdots x_n$</li>
<li>概率$p(x_i)$</li>
<li>编码为长度$n_i$二进制串</li>
<li>$\sum n_ip(x_i)\ge H(X)&#x3D;-\sum p(x_i)\log p(x_i)$<ul>
<li>分配权重 $2^{-n_i}$,用 $q_i&#x3D;\frac{2^{-n_i}}{\sum_N 2^{-n_j}}$ 表示 这个权重占比</li>
<li>$\sum n_ip(x_i) \ge -\sum p(x_i)\log q_i \ge -\sum p(x_i)\log p(x_i)$</li>
</ul>
</li>
</ul>
<h2 id="10-模拟"><a href="#10-模拟" class="headerlink" title="10. 模拟"></a>10. 模拟</h2><p>用试验的方式 + 强 大数定律 来计算概率 的方式，称作模拟</p>
<p>伪随机数生成器 $X_{n+1}&#x3D;(a X_n+c) \mod m$</p>
<p>$X_n&#x2F;m$ 近似在（0,1）上均匀分布</p>
<p>例1a 产生随机排列</p>
<ul>
<li>初始化<code>a[i]=i</code></li>
<li>执行n次, 第i次 在$[i,n]$ 中 随机一个位置，和<code>a[i]</code>交换</li>
<li>首先 排列的总个数是 n!, 那我们可以把它看成一个神奇的变进制！，上面每次操作都是 选定最高位</li>
</ul>
<p>10.2 模拟连续型随机变量的一般方法</p>
<p>10.2.1 逆变换方法</p>
<ul>
<li>U 是(0,1)上均匀随机变量，F为任意一个连续分布函数</li>
<li>定义随机变量$Y&#x3D;F^{-1}(U)$<ul>
<li>$g_Y(a)&#x3D;P(Y\le a)&#x3D;P(F^{-1}(U)\le a)&#x3D;P(U\le F(a))&#x3D;F(a)$</li>
<li>因此 Y具有分布函数F</li>
</ul>
</li>
<li>指数随机变量<ul>
<li>$F(x)&#x3D;1-e^{-x}$</li>
<li>$F^{-1}(U)&#x3D;-\ln(1-U)$</li>
<li>$&#x3D;-\ln(U_1)$, 因为1-U也是 (0,1)上均匀分布</li>
</ul>
</li>
<li>$\Gamma(n,\lambda)$<ul>
<li>利用Gamma和指数分布之间关系</li>
<li>$&#x3D;\sum_n -\frac{1}{\lambda} \ln U_i$</li>
<li>$&#x3D;-\frac{1}{\lambda} \ln(\prod_n U_i)$</li>
<li>$\chi^2_{2k}\sim \Gamma(k,1&#x2F;2)$</li>
</ul>
</li>
</ul>
<hr>
<p>10.2.2 舍取法</p>
<ul>
<li><p>如果有能模拟密度函数 g(x)的随机变量，首先产生这样一个Y</p>
</li>
<li><p>正比于 f(Y)&#x2F;g(Y)的概率采用Y的值</p>
</li>
<li><p>常数c, $\forall y, \frac{f(y)}{g(y)}\le c$</p>
</li>
<li><p>第一步 模拟有密度g的Y,同时产生U</p>
</li>
<li><p>第二步 若 $U \le f(Y)&#x2F;[cg(Y)]$ 则X&#x3D;Y否则回到第一步</p>
</li>
<li><p>由这个步骤产生的 随机变量 具有密度函数f</p>
</li>
</ul>
<p>证明： N 是次数</p>
<ul>
<li>$P(X \le x)&#x3D;P(Y_N\le x)$</li>
<li>$&#x3D;P(Y\le x| U\le \frac{f(Y)}{cg(Y)})$</li>
<li>$&#x3D;\frac{ P(Y\le x, U\le \frac{f(Y)}{cg(Y)})}{P(U\le \frac{f(Y)}{cg(Y)}))}$ 注意到分母是与x无关的常数 令它为K</li>
<li>分子化成积分形式，注意到 U和Y独立，联合分布$f(y,u)&#x3D;f_Y(y)f_U(u)&#x3D;f_Y(y)&#x3D;g(y)$<ul>
<li>从而 可得表达式</li>
<li>还能得到$cK&#x3D;1$</li>
</ul>
</li>
</ul>
<p>模拟正态分布：</p>
<ol>
<li>Y 模拟 均值为1的指数函数 ，其密度函数 $g(x)&#x3D;e^{-x}$</li>
<li>$f(x)&#x2F;g(x) \le  \sqrt{\frac{2e}{\pi}}&#x3D;c$</li>
<li>所以接受条件为 $U\le e^{-(Y-1)^2&#x2F;2}$</li>
</ol>
<hr>
<p>模拟 离散分布：</p>
<ul>
<li>核心还是 U + 逆变换</li>
</ul>
<hr>
<p>10.4 方差缩减技术</p>
<ul>
<li>$X_1,\cdots,X_n$ 具有给定的联合分布，希望计算$\theta&#x3D;E[g(X_1,\cdots,X_n)]$<ul>
<li>函数g已知</li>
<li>k轮<ul>
<li>每轮 都是模拟n个X,计算出$Y_{1\cdots k}$</li>
<li>$\theta &#x3D; E[\bar{Y}]$</li>
<li>$Var(\bar{Y})&#x3D;  E[(\bar{Y}-\theta)^2]$</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>10.4.1 对偶变量</p>
<ul>
<li>$Var(\frac{Y_1+Y_2}{2})&#x3D;\frac{1}{4}[Var(Y_1)+Var(Y_2)+2Cov(Y_1,Y_2)]&#x3D;\frac{1}{2}Var(Y_1)+\frac{1}{2}Cov(Y_1,Y_2)$</li>
<li>为了方差减小，我们希望负相关而不是独立</li>
<li>先假定$X_1,\cdots,X_n$ 相互独立</li>
<li>那么$X_1^{(2)},\cdots X_n^{(2)}$ 的产生方法用$g(F^{-1}_i(1-U_i),\cdots)$ 的方法产生，因为1-U_i也是均匀分布，而且与U_i负相关</li>
</ul>
<p>10.4.2 利用条件</p>
<ul>
<li>7.5.4 $Var(Y)&#x3D;E[Var(Y|Z)]+Var(E[Y|Z])$</li>
<li>如果存在Z,能计算$E[Y|Z]$ <ul>
<li>那么因为$Var(E[Y|Z]) \le Var(Y), E[Y]&#x3D;E[E[Y|Z]]$ 是更好的估计</li>
<li>也就是，我们能对每个细分场景的内容进行估计</li>
</ul>
</li>
</ul>
<p>10.4.3 控制变量</p>
<ul>
<li>希望模拟来估计$E[g(X_i\cdots)]$, 已知$E[f(X_i\cdots)]&#x3D;\mu$ </li>
<li>对任何常数a， 用$W&#x3D;g(X)+a[f(X)-\mu]$, 分析学中的导数为零来找点的想法</li>
</ul>
<h2 id="碎片"><a href="#碎片" class="headerlink" title="碎片"></a>碎片</h2><p>TODO</p>
<ul>
<li><p>这 1章习题做得我觉得 组合恒等式需要cheatsheet了</p>
</li>
<li><p>我感觉这书的定理讲解比 普林斯顿读本好啊,</p>
<ul>
<li>更值得反复阅读</li>
</ul>
</li>
<li><p>普林斯顿的 矩，差分恒等式不错</p>
</li>
<li><p>联合分布的确该放到具体分布前面讲</p>
</li>
</ul>
]]></content>
      <categories>
        <category>概率论</category>
      </categories>
      <tags>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>高等代数 零 汇总以及其它</title>
    <url>/Math/Advanced_algebra_0/</url>
    <content><![CDATA[<p>ISBN 978-7-302-22518-8</p>
<p>b站: <a href="https://www.bilibili.com/video/BV1jR4y1M78W">https://www.bilibili.com/video/BV1jR4y1M78W</a></p>
<p>b站有个很大的问题，虽然有合集 分p,但是评论区竟然没有 按视频的评论区！？真的有够离谱, 这种评论区对于这种视频真的零作用。</p>
<p>另外一个是 视频课 没有 书上的内容全</p>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul>
<li>II 页的总览图</li>
<li>序 其实就是整个脉络，学完后可以保留序</li>
</ul>
<h2 id="随想"><a href="#随想" class="headerlink" title="随想"></a>随想</h2><p>视频 相对于书的优点是push和动态清晰</p>
<p>书相对于视频的优点是，自我节奏和多页快速来回翻看</p>
<p>书上的脉络差了些，视频和书一起看最好，我觉得一些视频用来连接上下关系的内容，看似口头，实际上完全可以写成文字到书里。</p>
]]></content>
      <categories>
        <category>高等代数</category>
      </categories>
      <tags>
        <tag>高等代数</tag>
      </tags>
  </entry>
  <entry>
    <title>高等代数 一 线性方程组的解法</title>
    <url>/Math/Advanced_algebra_1/</url>
    <content><![CDATA[<h1 id="第1章-线性方程组的解法"><a href="#第1章-线性方程组的解法" class="headerlink" title="第1章 线性方程组的解法"></a>第1章 线性方程组的解法</h1><p>视频 p3~p7</p>
<h2 id="什么是线性代数"><a href="#什么是线性代数" class="headerlink" title="什么是线性代数"></a>什么是线性代数</h2><ol>
<li>数</li>
<li>代数</li>
<li>方程</li>
<li>方程组</li>
<li>系数矩阵</li>
</ol>
<span id="more"></span>

<h2 id="如何解方程组"><a href="#如何解方程组" class="headerlink" title="如何解方程组"></a>如何解方程组</h2><p>在数域中(有理数集,实数集,复数集)系数矩阵, 一行的倍数加减到另一行, 消元成阶梯矩阵(初等变化)</p>
<p>未知量的系数列向量均不为0, 否则意味着该变量不存在</p>
<h2 id="解的组数"><a href="#解的组数" class="headerlink" title="解的组数"></a>解的组数</h2><p>转换成阶梯矩阵后</p>
<ol start="0">
<li>无解: 转换时出现 $0 &#x3D; d(\ne 0)$ (左侧系数矩阵0,右侧非零)</li>
<li>有且只有一个解: 非零行的数目r &#x3D; 未知数的数目n </li>
<li>有无穷多解: 非零行的数目r &lt; 未知数的数目n</li>
</ol>
<h2 id="数域"><a href="#数域" class="headerlink" title="数域"></a>数域</h2><p>定义: 复数集的一个非空子集$K$如果满足</p>
<ol>
<li>$0,1\in K$</li>
<li>$a,b\in K \to a \pm b , ab\in K$</li>
<li>$a,b \in K, b\ne 0 \to \frac{a}{b} \in K$</li>
</ol>
<p>$K$ 是一个<a href="#%E6%95%B0%E5%9F%9F">数域</a></p>
<p>常见: 有理数域(最小的数域),实数域,复数域(最大的数域)</p>
<h2 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR"></a>TLDR</h2><ul>
<li>矩阵: 解线性方程组提出的 m行n列的 系数<ul>
<li>增广矩阵，包含解的部分</li>
<li>方阵: n&#x3D;m</li>
<li>解法: rref(可以用matlabn), 阶梯型 高斯消元法<ul>
<li>性质：同解</li>
<li>初等行变换<ul>
<li>交换两行位置</li>
<li>一行加到另一行上</li>
<li>一行乘上一个非零数</li>
</ul>
</li>
<li>rref 特点<ul>
<li>是阶梯型</li>
<li>主元全1</li>
<li>左下全0</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>解的情况<ul>
<li>无解</li>
<li>一个解</li>
<li>多个解<ul>
<li>这里的r用的是rref非零行的数目 与 列作比较</li>
</ul>
</li>
</ul>
</li>
<li>数域<ul>
<li>这个感觉 拆分得不够细粒度啊</li>
<li>感觉按后面对域的讲解 应该分成元素 和 运算符</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>高等代数</category>
      </categories>
      <tags>
        <tag>高等代数</tag>
        <tag>rref</tag>
      </tags>
  </entry>
  <entry>
    <title>高等代数 十 具有度量的线性空间</title>
    <url>/Math/Advanced_algebra_10/</url>
    <content><![CDATA[<p>视频121-144</p>
<h1 id="具有度量的线性空间"><a href="#具有度量的线性空间" class="headerlink" title="具有度量的线性空间"></a>具有度量的线性空间</h1><p>考虑在线性空间中 增加长度而概念</p>
<span id="more"></span>

<h2 id="10-1-双线性函数"><a href="#10-1-双线性函数" class="headerlink" title="10.1 双线性函数"></a>10.1 双线性函数</h2><p>a,b是向量，内积： $a\cdot b &#x3D; |a||b| cos&lt;a,b&gt;$, ，内积有一 加法乘法 分配，数量乘法，于是在内积之前，引进 双线性函数</p>
<p>定义1. 设V是域F上的一个线性空间V, VxV到F的一个映射f, 如果满足一切的 a1,a2,a,b1,b2,b \in V, k1,k2 \in F 有</p>
<ul>
<li>$f(k_1a_1+k_2a_2,b)&#x3D;k_1f(a_1,b)+k_2(a_2,b)$</li>
<li>$f(a,k_1b_1+k_2b_2)&#x3D;k_1f(a,b_1)+k_2(a,b_2)$</li>
<li>那么成为是V上的双线性函数<ul>
<li>说白了就是，两个入参，都可以“线性”拆开，而之前学的主要是入参只有一个（可以线性拆开），而之前的如果固定一个入参，那么也是线性函数</li>
</ul>
</li>
</ul>
<p>f(a,b)&#x3D;f(按照基展开成$\sum$,按基展开成$\sum$)</p>
<p>$&#x3D;\sum \sum a在基下的每个坐标*b在基下的每个坐标 * f(每个基向量,每个基向量)$</p>
<p>(a的坐标行向量) (n * n 的f(每个基向量，每个基向量)的矩阵) * (b的坐标列向量)，</p>
<p>那么 中间这个矩阵 称作 f在 给定基 下的 “度量矩阵”</p>
<hr>
<p>反过来，对于$A\in M_n(F)$, 那么 可以构造一个$f(a,b)&#x3D;X^TAY$ 就构造出一个双线性函数，（这里和前面不同的是，这里的 基 和 A决定f的，而前面是 f 和 基 决定 A)</p>
<hr>
<p>定理1. f是域F上的n维线性空间V上的双线性函数，基b&#x3D;基a * 矩阵C</p>
<ul>
<li>在基a下的度量矩阵是A</li>
<li>在基b下的度量矩阵为B</li>
<li>B &#x3D; (f(bi,bj)) 矩阵 &#x3D; ( (c的i列 行向量)A(c的j列 列向量)   ) &#x3D; $C^TAC$， C是可逆的 ， rank(A)&#x3D;rank(B)</li>
<li>称 A与B是合同的， 也就是合同意味着同一个双线性函数在不同的基下的度量矩阵<ul>
<li>自反，对称，传递 &#x3D;&gt; 所以合同是一种等价关系</li>
<li>之前 相似：同一个线性变换 在不同的基下是相似的$B&#x3D;S^{-1}AS$</li>
</ul>
</li>
<li>$rank_{matrix}(f)$ 双线性函数的矩阵秩</li>
</ul>
<hr>
<p>定义3</p>
<ul>
<li>左根 $rad_LV&#x3D;$ {$a \in V | f(a,b)&#x3D;0, \forall b\in V$}, 是V的一个子空间</li>
<li>右根 $rad_RV&#x3D;$ {$b \in V | f(a,b)&#x3D;0, \forall a\in V$}, 是V的一个子空间</li>
</ul>
<p>定义4： V上的双线性函数f在V中的左根和右根都是0子空间，则称f是非退化的</p>
<ul>
<li>左右根只有0解，那么 rank(V)&#x3D;n</li>
</ul>
<hr>
<p>对称双线性函数 f(x,y)&#x3D;f(y,x) 显然 矩阵是对称矩阵</p>
<ul>
<li>斜对称,反对称 f(x,y)&#x3D;-f(y,x) skew</li>
</ul>
<p>同样，希望能选择一组好的基，让度量矩阵尽量简单</p>
<hr>
<p>对于 “内积函数”的度量矩阵来说，如果选取了两两垂直的基来说，可以只有主对角线非零</p>
<p>那么如何找两两垂直的基，对于任意找的基a,b，可以b&#x3D;b-(b在a方向的投影)，来到了（mit讲过的投影矩阵，然后写法上还有“点乘”，没有直接的矩阵乘法，这点感觉还是mit更好）</p>
<hr>
<p>定理1. 对称双线性函数f，特征不为2，存在一个基，使得度量矩阵是 对角矩阵</p>
<ul>
<li>f&#x3D;0 零函数是对称</li>
<li>$f\neq 0$ <ul>
<li>若任何f(a,a)&#x3D;0,有 0&#x3D;f(a+b,a+b)&#x3D;f(a,a)+2f(a,b)+f(b,b) 即 f(a,b)&#x3D;0， （这里需要特征不为2）</li>
<li>所以存在$a, f(a,a) \neq 0$, 然后所有和a投影减去，变成子空间子问题，这里其实就是任选基中 完成一个基的等价变换，而剩余的span成的空间 和 a 的直和 &#x3D; 原来空间</li>
</ul>
</li>
</ul>
<p>推论1. 特征不为2 的 域F上的n级对称矩阵A 合同于 一个对角矩阵A</p>
<ul>
<li>合同标准型</li>
</ul>
<p>定理2. f是特征不为2的 反&#x2F;斜对称 矩阵 双线性函数，则V中存在一个基，使得f在此基下的度量矩阵是形如下述的分块对角矩阵</p>
<ul>
<li>多个  <code>[0,1;-1,0]</code>的对角块</li>
</ul>
<p>推论2, 特征不为2的域F上的 斜对称矩阵一定相似于</p>
<hr>
<p>几何空间 内积 a * a &gt;&#x3D; 0, 等号成立当且仅当 a&#x3D;0</p>
<p>定义1. 实数域上的线性空间V上的对称双线性函数f, 对于任意 向量a,有 $f(a,a)\ge 0$, 等号成立当且仅当 a&#x3D;0</p>
<ul>
<li>称f是 正定的</li>
</ul>
<p>命题1. n维实线性空间V上的对称双线性函数f是正定的：</p>
<ul>
<li>当且仅当， f在V的一个基下的 度量矩阵A 满足<ul>
<li>A是对称矩阵，且 任意x, $x^TAx \ge 0$, 等号成立当且仅当x&#x3D;0</li>
</ul>
</li>
</ul>
<p>定义2. n级是对称矩阵A,若满足x!&#x3D;0, $x^TAx &gt;0$ 则A是正定对称矩阵，简称正定矩阵</p>
<p>定义3. 实线性空间V上的一个 正定的对称双线性函数f  称为V上的一个 内积</p>
<p>若是线性空间V,指定了一个内积，则称V是一个  实内积空间</p>
<p>有限维的  实内积空间  成为 欧几里得空间 </p>
<h2 id="10-2-欧几里得空间"><a href="#10-2-欧几里得空间" class="headerlink" title="10.2 欧几里得空间"></a>10.2 欧几里得空间</h2><p>例1. 任给x,y,  $f(x,y)&#x3D;x^Ty&#x3D;x^TIy$</p>
<ul>
<li>也就是在 基$\epsilon_{1\cdots n}$的坐标</li>
<li>是$R^n$上的一个双线性函数</li>
<li>称它为 标准内积</li>
</ul>
<p>设V是实内积空间，</p>
<p>定义4 V中向量a的长度 $|a|&#x3D;\sqrt {f(a,a)}$</p>
<ul>
<li>根据 双线性函数性质,可证 $|ka|&#x3D;|k||a|, k\in R,a\in V$</li>
<li>|a|&#x3D;1称$a$为 单位向量<ul>
<li>$a\neq 0$, 则 $\frac{1}{|a|}a$ 是一个 单位向量</li>
</ul>
</li>
</ul>
<p>几何空间 $a,b$ 的$cos&lt;a,b&gt;&#x3D;\frac{f(a,b)}{|a||b|}$</p>
<p>定理1. Cauchy-（俄文不会写）-Schwarz 不等式）</p>
<ul>
<li>$|f(a,b)|\le |a||b|$, 等号成立 当且仅当 a,b 线性相关<ul>
<li>一个是零向量时,(0,a)时证明</li>
<li>(a,ka)时证明</li>
<li>对于不相关时 0 &lt; f(ta-b,ta-b)&#x3D; 关于t的二次多项式<ul>
<li>说明判别式 &lt; 0 </li>
<li>得到 上面的要证的部分</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>定义5 a,b 不等于0, <code>&lt;a,b&gt;</code> &#x3D; arcos (f(a,b)&#x2F;(|a||b|))</p>
<ul>
<li>夹角 pi&#x2F;2 &lt;&#x3D;&gt; f(a,b)&#x3D;0</li>
</ul>
<p>定义6, f(a,b)&#x3D;0, 称a与b正交</p>
<p>定义7. a与b的距离 d(a,b) &#x3D; |a-b|</p>
<ul>
<li>可以验证 d(a,b)&#x3D;d(b,a)</li>
<li>$d(a,b) \le d(a,c)+d(c,b)$ 三角不等式</li>
</ul>
<p>推论， a，b正交，则 $|a+b|^2&#x3D;|a|^2+|b|^2$ 勾股定理</p>
<ul>
<li>的确在 向量空间里这些证明起来是快了不少</li>
</ul>
<p>命题1. 实内积空间V中，由  两两正交的非零向量 组成的集合S一定是线性无关的</p>
<ul>
<li>证， 任取S的一个有限子集 { $a_1,\cdots,a_n$  }<ul>
<li>$f(a_j,\sum k_ia_i)&#x3D;0$,  可证明 所有系数只能取0</li>
</ul>
</li>
</ul>
<p>n维欧几里得空间中，n个两两正交非零向量 是一个基，称作V的一个正交基</p>
<ul>
<li>再加上单位向量，就是 标准正交基</li>
</ul>
<p>定理1. <code>[a...]</code> 线性无关的向量组</p>
<ul>
<li>然后 就开始 schmidt正交化了，很自然的逐个减去投影</li>
<li>主要的是证明 可线性表出？<ul>
<li>一点点归纳的感觉</li>
</ul>
</li>
</ul>
<p>推论2. 一定有 标准准正交基</p>
<ul>
<li>取基</li>
<li>schmidt 正交化</li>
<li>单位化 所有基向量</li>
</ul>
<p>内积 在给定基 下的度量矩阵，称为 基a_{1..n}的度量矩阵</p>
<hr>
<p>这里的最重要的是  定义度量矩阵，即使不是常见的点积，也有对应的 长度等的定义</p>
<p>性质1. $f(a,b)&#x3D;x^TIy$</p>
<p>性质2. v在 标准基$a_i$ 下的第i各坐标为 $f(v, a_i)$, 这里有了用 标准正交基 和 内积 来反求坐标的下标</p>
<p>定理2. $a_i$ 是n维欧几里得空间的一个标准正交基</p>
<ul>
<li>(b_i) &#x3D; (a_i) P</li>
<li>如果 (b_i) 是一个 标准正交基<ul>
<li>&lt;&#x3D;&gt; P的性质，$P^TP&#x3D;I$,P是正交矩阵</li>
</ul>
</li>
</ul>
<p>性质1，I是正交矩阵</p>
<p>性质2，正交矩阵的乘积还是正交矩阵</p>
<ul>
<li>$(AB)^T(AB)&#x3D;I$</li>
</ul>
<p>性质3. A是正交矩阵，$A^{-1}&#x3D;A^T$是正交矩阵</p>
<p>性质4. 正交矩阵 |A| &#x3D; 1或-1</p>
<h2 id="10-3-正交补，正交投影"><a href="#10-3-正交补，正交投影" class="headerlink" title="10.3 正交补，正交投影"></a>10.3 正交补，正交投影</h2><p>定义2,S是实内积空间的一个非空子集</p>
<ul>
<li>S的正交补 &#x3D; {$a\in V| f(a,b)&#x3D;0, \forall b \in S$}</li>
<li>它 也是 实内积空间</li>
<li>注意 这里 S并不要求S是子空间<ul>
<li>但从感觉上 和 <code>span&lt; S &gt;</code> 就和 之前的直和感觉一样了</li>
</ul>
</li>
</ul>
<p>定理3. 设U是实内积空间V的一个 有限维子空间</p>
<ul>
<li>则 V 能表示成 U  和  U的正交补 的直和</li>
</ul>
<p>正交投影： $P_U(a)&#x3D;a$在空间U的投影， 也就是拆直和时的表示</p>
<p>定理4. a 和 a到U的正交投影，是a到U所有向量的距离是最短的</p>
<p>定义2. a 到 U中最近的向量，称作 a 到 U中最佳逼近元</p>
<p>定义3，设V与V’ 都是 实内积空间， 如果 V,V’之间有双射，且保持 加法，数量乘法，内积</p>
<ul>
<li>那么 是 保距同构（线性同构+内积同构）<ul>
<li>把V的一个标准正交基 映成V’的一个标准正交基</li>
</ul>
</li>
</ul>
<p>定理5. 两个欧几里得空间同构</p>
<ul>
<li>&lt;&#x3D;&gt; 有相同的维数</li>
<li>&lt;&#x3D;&gt; 本质上就是$R^n$</li>
</ul>
<h2 id="10-4-正交变换与对称变换"><a href="#10-4-正交变换与对称变换" class="headerlink" title="10.4 正交变换与对称变换"></a>10.4 正交变换与对称变换</h2><p>定义1. A是实内积空间V上的一个变换</p>
<ul>
<li>如果A是满射，满足：保持内积不变 f(Aa,Ab)&#x3D;f(a,b)</li>
<li>那么A是一个V上的一个  正交变换</li>
</ul>
<p>性质， A是 实内积 空间V上的正交变换</p>
<ul>
<li>|Aa|&#x3D;|a|</li>
<li>&lt; Aa,Ab &gt; &#x3D; &lt; a,b &gt;,</li>
<li>保持 垂直</li>
<li>正交变换 一定是线性变换<ul>
<li>想证明 保持 A(a+b)&#x3D;Aa+Ab, 可以 去证明$|A(a+b)-Aa-Ab|^2&#x3D;0$</li>
<li>类似的 证明 A(ka)&#x3D;kAa</li>
</ul>
</li>
<li>Ker A &#x3D;0 所以是单射，加上满射 所以是双射</li>
<li>内积不变 距离不变</li>
<li>&lt;&#x3D;&gt; 到自身的同构映射，保距的</li>
</ul>
<p>正交变换的乘积还是正交变换</p>
<p>命题3. 对于有限维，保持内积，那么是V上的一个正交变换</p>
<ul>
<li>保持内积 f(Aa,Ab)&#x3D;f(a,b)</li>
</ul>
<p>正交变换</p>
<ul>
<li>把V的标准正交基 映成标准正交基</li>
<li>正交变换 在 标准正交基 下 是 正交矩阵</li>
</ul>
<p>定理2 A是n维欧几里得空间V上的正交变换，则V中存在一个标准正交基，使得A在此基下的矩阵为下属形式 分块对角矩阵</p>
<ul>
<li>小块是 <code>[cos,-sin;sin, cos]</code>, 非小块的对角是 特征值对角</li>
</ul>
<hr>
<p>定义1. A是实内积空间V上的一个变换，如果A对于任意a,b有</p>
<ul>
<li>f(Aa,b)&#x3D;f(a,Ab) 那么称A是一个对称变换</li>
<li>例如 投影变换</li>
</ul>
<p>命题1. 实内积空间上的 对称变换A,一定是线性变换</p>
<p>命题2 n维欧几里得空间V上的一个线性变换是 对称变换</p>
<ul>
<li>A在V的一个标准正交基下的矩阵</li>
<li>$a_{ij}&#x3D;f(A基_j,基_i)$<ul>
<li>如果A是对称变换 f(变换A a,b)&#x3D;f(a,变换A b)</li>
<li>即 $a_{ij}&#x3D;f(基_j,A基i)$</li>
<li>$a_{ij}&#x3D;a_{ji}$ 也就是 在标准正交基下矩阵是对称矩阵</li>
</ul>
</li>
</ul>
<p>命题3. n级实对称矩阵A 的 特征多项式 f(x)的复根都是实数</p>
<ul>
<li>这里老师强调，实数域上的特征值 肯定是实数，而特征多项式的复根（如果有复数根，也不能称作它的复根，因为域的定义是在实数上）都是实数<ul>
<li>很多教材 在域上的描述出现了问题</li>
</ul>
</li>
<li>证明 看成 复域上矩阵 $\lambda a^T\bar{a}&#x3D;(Aa)^T\bar{a}&#x3D;a^TA^T\bar{a}&#x3D;a^TA\bar{a}&#x3D;a^T(A\bar{a})&#x3D;a^T(\bar{\lambda}\bar{a})&#x3D;\bar{\lambda}a^T\bar{a}$</li>
</ul>
<p>命题4. n级实对称矩阵A，不同特征值的特征向量是正交的</p>
<ul>
<li>类似上面，构造$\lambda_0a_0^Ta_1&#x3D;\lambda_1a_0^Ta_1$</li>
<li>这里 其实 就是 点积，mit 上更多是 $a^Tb$, 这里清华的是 f(a,b)</li>
</ul>
<p>命题5. 设A是实内积空间V上的一个对称变换，如果W是A的一个不变子空间，那么W的正交补也一定是A的一个不变子空间</p>
<p>定理1. 设A是n维 欧几里得空间V 上的一个对称变换，则V中存在一个标准正交基，使它是对角矩阵</p>
<ul>
<li>证明 对维数做数学归纳法</li>
<li>找单位特征向量，构成子空间，正交补也是不变子空间<ul>
<li>对正交补 归纳法，出来的 基和特征 都可以和前面的单位特征向量正交，组成标准正交基，也有 特征值构成对角</li>
</ul>
</li>
</ul>
<p>推论1. A是实对称矩阵，存在正交矩阵Q</p>
<ul>
<li>$Q^{-1}AQ&#x3D;$对角矩阵， 此时称 A正交相似于对角矩阵</li>
<li>如何求Q<ul>
<li>求$|\lambda I - A|$的所有不同根（一定是实数）</li>
<li>对于每个特征值，求 $(\lambda_i I-A)X&#x3D;0$的基础解系<ul>
<li>schmidt正交化</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="10-5-酉空间，酉变换，Hermite变换，正规变换"><a href="#10-5-酉空间，酉变换，Hermite变换，正规变换" class="headerlink" title="10.5 酉空间，酉变换，Hermite变换，正规变换"></a>10.5 酉空间，酉变换，Hermite变换，正规变换</h2><p>复内积空间</p>
<p>f(ia,ia)&#x3D;-f(a,a), 这个和正定性矛盾</p>
<p>这里讲的修改看得一头包，感觉还是 f(x,x) &#x3D; |x|</p>
<p>那么如果x&#x3D;a+bi, 则需要 $x^Hx &#x3D; |x|$</p>
<p>这样就更自然 $f(x,y)&#x3D;x^Hy$,验证一下是双线性即可</p>
<p>然后观察矩阵 $A^H&#x3D;A$ ,也就是$\overline{A^T}&#x3D;A$</p>
<p>性质</p>
<ul>
<li>$f(a,b)&#x3D;\overline{f(b,a)}$</li>
<li>第一个变量线性, 但注意乘法 $k\in C$</li>
<li>f(a,a) &gt;&#x3D;0 等号成立当且仅当 a&#x3D;0 （正定性</li>
<li>那么称它是V上的一个内积</li>
</ul>
<p>酉(Unitary)空间 &#x3D; 复 线性空间 + 指定内积</p>
<p>可推出</p>
<ul>
<li>对第二个变量，半线性</li>
<li>加法线性，但乘上k,是提出来$\bar{k}$</li>
<li>$f(a,kb)&#x3D;\bar{k}f(a,b)$ 一个<code>半线性函数</code></li>
</ul>
<hr>
<p>定义</p>
<ul>
<li>长度 &#x3D; sqrt(f(a,b))</li>
<li>定义夹角 cos &#x3D; |f(a,b)|&#x2F;(|a||b|)<ul>
<li>同样 要证明其范围 $\in [0,1]$</li>
<li>一样的思路，先证明线性相关</li>
<li>然后 $0 &lt; f(a+tb,a+tb)&#x3D;|a|^2+\bar{t}f(a,b)+t\overline{f(a,b)}+t\bar{t}|b|^2$</li>
<li>这里不能用 判别式，然后 drop from sky了一个<ul>
<li>$t&#x3D;-\frac{f(a,b)}{|b|^2}$, 其实想法就是 把4项变2项，然后 导出 $|a||b| &gt; |f(a,b)|$</li>
<li>$0 \le &lt;a,b&gt; \le  \pi&#x2F;2$, 在物理里面有的用于 概率 而不是夹角（量子力学中应用小天地）</li>
</ul>
</li>
</ul>
</li>
<li>在酉空间中<ul>
<li>有了三角不等式</li>
<li>勾股定理</li>
<li>距离</li>
</ul>
</li>
</ul>
<p>研究 酉空间结构</p>
<ul>
<li>n维酉空间 的标准正交基，</li>
<li>命题1. 酉空间V中 两两正交的非零向量，组成的集合是 线性无关</li>
<li>定义4. n维 酉空间V中，n个两两正交的非零向量成为V的一个正交基，<ul>
<li>如果都是单位向量 ，则标准正交基</li>
</ul>
</li>
<li>然后像上面提到的特殊的 $f(x,y)&#x3D;y^Hx$ 称它为<code>标准内积</code></li>
</ul>
<p>定理2. n维 酉空间V上一定有标准正交基</p>
<ul>
<li>V中取 基 &#x3D;&gt; schmidt正交化 &#x3D;&gt; 单位化</li>
</ul>
<p>定理3. n维酉空间V的一个组标准正交基(a_i), (b_i)</p>
<ul>
<li>$f(a,b)&#x3D;y^Hx$, 在a,b同个标准正交基下的坐标，对于内积容易计算</li>
<li>(b_i)&#x3D;(a_i) 矩阵P <ul>
<li>那么 $I&#x3D;B^HB&#x3D;(AP)^H(AP)&#x3D;P^HA^HAP&#x3D;P^HP$</li>
</ul>
</li>
<li>说明 两个标准正交基的过度矩阵是 酉矩阵<ul>
<li>酉矩阵 和 单位矩阵区别就是 一个是转置，一个是转置+共轭</li>
</ul>
</li>
</ul>
<p>正交补</p>
<ul>
<li>定理4. U是酉空间中有限维子空间，则V可以分解成U和U的正交补 的直和</li>
<li>有直和拆分，就可以定义正交投影(拆成 两个直和空间的唯一和)，<ul>
<li>然后 性质 到U中的投影距离最短</li>
</ul>
</li>
</ul>
<p>定义6. 酉空间V中的子空间U，a到U中最短的，称作a的最佳逼近元</p>
<ul>
<li>上面 的正交投影 &lt;&#x3D;&gt; 最佳逼近</li>
</ul>
<p>定义7. 设V是复（实）内积空间</p>
<ul>
<li>若V中每一个Cauchy序列 （距离可以定义极限），都在V中有极限，则成V是一个 Hilbert空间 <ul>
<li>完备化（取极限）</li>
</ul>
</li>
</ul>
<p>定理5. V是一个Hilbert空间</p>
<ul>
<li>若U是V的一个闭子空间</li>
<li>则V中任一向量a在U上都有最佳逼近元，从而V&#x3D;U直和 U的正交补<ul>
<li>证明： 见群表示论， 6.9</li>
</ul>
</li>
</ul>
<p>两个有限维酉空间同构 &#x3D;&gt; 保持加法 数量乘法 内积，（线性同构+保距）</p>
<ul>
<li>充要条件： 维数相同</li>
</ul>
<p>定义1. 酉空间V上的一个变换A如果是满射，且满足保持内积，那么称，A是V上的一个酉变换</p>
<p>命题1. 酉空间V上的变换</p>
<ul>
<li>&lt;&#x3D;&gt; A是V到自身的一个同构映射</li>
</ul>
<p>命题2. n维酉空间V上的变换 A</p>
<ul>
<li>若(Aa,Ab)&#x3D;(a,b) 则是V上的一个酉变换</li>
</ul>
<p>命题3. n维酉空间V上的酉变换A的特征值性质：</p>
<ul>
<li>模为1 : $f(a,a)&#x3D;f(Aa,Aa)&#x3D;f(\lambda a,\lambda a)&#x3D;()^H()&#x3D;|\lambda|^2f(a,a)$</li>
</ul>
<p>命题4. A是酉空间V上的一个酉变换，W是A的一个不变子空间，则 W的正交补，也是A的一个不变子空间</p>
<ul>
<li>任取 b \in W正交补，要证明 任意a\in W, f(Ab,a)&#x3D;0, 也就是b经过变换后依然在正交补里<ul>
<li>W中A|W 单射，满射，找原相c。f(Ab,a)&#x3D;f(Ab,Ac)&#x3D;f(b,c)&#x3D;0</li>
</ul>
</li>
</ul>
<p>定理1. A是n维酉空间V上一个有变化内，则V中存在一个标准正交基，使得A在基下的矩阵是对角矩阵</p>
<ul>
<li>对于 维数 归纳法<ul>
<li>特征值 单位向量，子空间，正交补，归纳</li>
</ul>
</li>
</ul>
<p>推论1. n级酉矩阵A</p>
<ul>
<li>$A&#x3D;Q^{H}\Lambda Q$, （酉相似）于对角矩阵, 注意这里是酉相似不是正交相似 $^H$</li>
</ul>
<hr>
<p>Hermite 变换：相当于实内积空间的对称变换</p>
<ul>
<li>一定是线性变换</li>
<li>f(Aa,b)&#x3D;f(a,Ab)<ul>
<li>思路一样，把a,b换成正交基中的向量，从而证明$A^H&#x3D;A$,， （充要的）</li>
<li>此时称A是一个 Hermite矩阵 或 自伴矩阵</li>
</ul>
</li>
</ul>
<p>命题3。 n维酉空间上的 Hermite 变换 的特征值</p>
<p>命题4。类似的，不变子空间的正交补也是不不变子空间</p>
<hr>
<h2 id="10-6-正交空间与辛空间"><a href="#10-6-正交空间与辛空间" class="headerlink" title="10.6 正交空间与辛空间"></a>10.6 正交空间与辛空间</h2><p>物理空间中：</p>
<p>(t,x,y,z)</p>
<ul>
<li>宏观低速 Calieo时空变换 保持内积 $R^4$</li>
<li>接近光速 的 Lorentz 变换 不保持 内积<ul>
<li>新内积 $f(a,b)&#x3D;-c^2t_1t_2+x_1x_2+y_1y_2+z_1z_2$</li>
<li>是一个非退化的 对称双线性函数</li>
<li>称作 Mikowski 空间(俄国数学家)<ul>
<li>$\sigma$是 不同坐标系中的映射</li>
<li>$f(\sigma(a),\sigma(b))&#x3D;f(a,b)$ 保持新的内积</li>
<li>$f(a-b,a-b)$称为 a与b的时空间隔平方</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>定义1. 域F上线性空间V的一个非退化对称化 双线性函数f</p>
<ul>
<li>称为V上的一个内积</li>
<li>没有正定性，没有夹角，有正交性</li>
</ul>
<p>指定了一个内积的域F上的线性空间V 为一个正交空间</p>
<p>辛空间：（反对称）</p>
<h2 id="10-7-正交群，酉群，辛群"><a href="#10-7-正交群，酉群，辛群" class="headerlink" title="10.7 正交群，酉群，辛群"></a>10.7 正交群，酉群，辛群</h2><p>TODO 视频课没有</p>
<h2 id="速览"><a href="#速览" class="headerlink" title="速览"></a>速览</h2><p>有一说一，这课在一些抽象程度上比MIT更抽象化，挺好，但是在符号使用上，MIT的$Q,\Lambda$ 带来的体验更好</p>
<ul>
<li>注意到的是<ul>
<li>这里定义的“内积”和“常用的内积”是不一样的，这里只要求一些关系，而“常用的内积”是 其中一个特例 称作“标准内积”</li>
<li>如果描述有n维，那么意思是“有限维”</li>
</ul>
</li>
<li>双线性函数 f(a,b) &#x3D; a,b都是向量，可以线性拆到f外<ul>
<li>从而 引出 $f(a,b)&#x3D;x^TAy$, </li>
<li>其中x,y是a,b在所选基下的坐标</li>
<li>而A叫做度量矩阵</li>
</ul>
</li>
<li>实线性空间V上的一个 正定的对称双线性函数f  称为V上的一个 内积<ul>
<li>若是线性空间V,指定了一个内积，则称V是一个  实内积空间</li>
<li>有限维的  实内积空间  成为 欧几里得空间 </li>
<li>而 定义了内积f(a,b)，也就基于内积定义了长度，和前面线性空间 相比 多了内积，在研究同构时，会需要内积相等 f(变换A a,变换A b) &#x3D; f(a,b)</li>
</ul>
</li>
<li>正交矩阵:<ul>
<li>$Q^{T}Q&#x3D;I$</li>
<li>a到  a在U的投影 距离最短</li>
<li>正交补： 类似于之前的 直和的补的部分，但原始的不要求是空间，（其实可以span一下）</li>
</ul>
</li>
<li>正交变换<ul>
<li>定义是保持 内积</li>
<li>性质是，变换矩阵 是 正交矩阵，空间效果就是无放缩的旋转</li>
<li>最优基下的表示是 对角分块的 小旋转标准型 <code>[cos,-sin;sin,cos]</code></li>
</ul>
</li>
<li>对称变换<ul>
<li>定义是 f(变换A a,b)&#x3D;f(a,变换A b)</li>
<li>性质是，对应矩阵 是 实对称矩阵</li>
<li>特征多项式的 复解 全是实数</li>
<li>特点是 $A&#x3D;Q^{-1}\Lambda Q$,其中Q是标准正交矩阵</li>
<li>求法 和 之前 对角化类似，只是需要标准正交化</li>
</ul>
</li>
<li>酉空间<ul>
<li>这玩意儿 有啥可视化方法吗？</li>
<li>&#x3D; 复 线性空间 + 指定的 Hermite性 的内积</li>
<li>其核心就是 从实 变 复，然后内积的定义要变一下</li>
<li>然后对应照搬很多前面正交变换相关的内容</li>
<li>酉变换，也就是 复线性空间保距 的变换（某种旋转）</li>
</ul>
</li>
<li>Hermite变换 （相对于 实空间的对称变换）<ul>
<li>类似的定义和性质</li>
<li>特征值 全是实数</li>
<li>$A&#x3D;Q^{H}\Lambda Q$</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>高等代数</category>
      </categories>
      <tags>
        <tag>高等代数</tag>
        <tag>双线性函数</tag>
        <tag>欧几里得空间</tag>
        <tag>正交变换</tag>
        <tag>对称变换</tag>
        <tag>酉空间</tag>
        <tag>酉变换</tag>
        <tag>Hermite变换</tag>
      </tags>
  </entry>
  <entry>
    <title>高等代数 十 具有度量的线性空间</title>
    <url>/Math/Advanced_algebra_11/</url>
    <content><![CDATA[<p>视频 p145 - 151 （最后有一个整个学期回顾）</p>
<h1 id="多重线性代数"><a href="#多重线性代数" class="headerlink" title="多重线性代数"></a>多重线性代数</h1><span id="more"></span>

<h2 id="11-1-多重线性映射"><a href="#11-1-多重线性映射" class="headerlink" title="11.1 多重线性映射"></a>11.1 多重线性映射</h2><p>一个对称双线性函数，一个基下度量矩阵为A</p>
<p>$f(a,b)&#x3D;x^TAy$</p>
<p>$q(a)&#x3D;f(a,a)&#x3D;x^TAx$</p>
<p>$q$上是V上的一个 二次函数</p>
<p>&#x3D;&gt; n元多项式</p>
<hr>
<p>定义1. F是一个域，$x_1,\cdots,x_n$是n个符号，形如下述的表达式</p>
<p>$\sum a_{l_1l_2\cdots l_n}x_1^{l_1}x_2^{l_2}\cdots x_n^{l_i}$, 其中 幂次都是自然数，a是F中元素称为系数</p>
<ul>
<li>有限多系数不为零</li>
<li>相等定义： 系数对应相等</li>
<li>则称 表达式是 域F上的一个n元多项式</li>
<li>$x_1,\cdots,x_n$是n个无关不定元</li>
</ul>
<p>定义加法，乘法</p>
<ul>
<li>可验证，有 单位元 的交换环</li>
<li>n元 多项式环</li>
</ul>
<p>定义2，若每个系数不为的单项式次数都&#x3D;m,则称它为m次齐次多项式</p>
<ul>
<li>所有m次齐次多项式的集合，是域F上的一个线性空间</li>
</ul>
<p>定理1. （n元多项式环的通用性质）设F是一个域，R是一个有单位元的交换环，且域F到R的一个子环R_1（含有R的单位元）有一个同构映射</p>
<ul>
<li>$\sigma$ a到$\tau(a)$, xi -&gt; ti<ul>
<li>保持加法 乘法运算</li>
</ul>
</li>
</ul>
<hr>
<p>这里只关心 n元，二次齐次多项式</p>
<ul>
<li>加上 aij&#x3D;aji的限制， 即对称矩阵</li>
<li>称为n元二次型<ul>
<li>对于给定表达式，二次型矩阵是唯一的</li>
</ul>
</li>
</ul>
<p>$f(x) &#x3D; x^TAx$, 注意输入的x是n维向量</p>
<p>$f(Cx)&#x3D;(Cx)^TA(Cx)$, 于是$x^T(C^TAC)x$, 中间的和A合同</p>
<ul>
<li>如果C可逆，那么意味着 选取不同的x的组合，希望让对称矩阵合同（一定是对称矩阵），形式尽量简单，引出正定性<ul>
<li>这里x用Cx带入，是一种非退化的线性替换（也就是C要可逆）</li>
<li>如果C是正交矩阵，那么叫正交替换</li>
</ul>
</li>
</ul>
<p>定义3 域F上 两个n元二次型，存在一个非退化（降秩）线性替换，使得$x^TAx$变为$x^TBx$. 那么称这两个二次型等价（不相等但等价）</p>
<ul>
<li>也就是A和B合同时</li>
<li>自反，传递性，是一个等价关系，存在等价类<ul>
<li>希望找等价类中最简形式</li>
</ul>
</li>
<li>7.2节， 合同于一个对角矩阵</li>
<li>特征不为2的域F上的n元二次型 一定等价于 $\sum d_ix_i^2$ 只有平方项<ul>
<li>$x^TDx$, D是对角矩阵</li>
</ul>
</li>
<li>最简形称作标准型<ul>
<li>系数不为0的平方项的个数</li>
<li>rank(A)&#x3D;系数不为0的平方项的个数</li>
</ul>
</li>
</ul>
<p>定理2,实数域上的n元二次型 $x^TAx$有一个标准型</p>
<ul>
<li><p>实对称矩阵 &#x3D;&gt; 存在正交矩阵$Q$, $Q^{-1}AQ&#x3D;\Lambda$, 其中$Q^T&#x3D;Q^{-1}$</p>
</li>
<li><p>所以，是对称矩阵 合同于 $\Lambda$</p>
</li>
<li><p>对于每个 x_i可以再变化$\frac{1}{\sqrt{d_i}}x^i$ 可以让系数只有1,-1,0</p>
</li>
<li><p>只有 1,-1,0系数的称作 规范型</p>
</li>
<li><p>更精细的结论：正系数个数 和 负系数个数是固定的</p>
<ul>
<li>规范型是唯一的：惯性定理</li>
<li>证明 前面章节好像证明过，两个规范型 通过过渡矩阵，去想办法一个正一个负，</li>
<li>规范型中：<ul>
<li>正的个数 叫做正惯性指数</li>
<li>负的个数 叫做负惯性指数</li>
<li>正惯性指数-负惯性指数 称作符号差</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>命题1. n元实二次型 $x^TAx$的任一【标准型】中</p>
<ul>
<li>同样 对应 称作 正负惯性指数</li>
</ul>
<p>定理2. 等价的$x^TAx$和$x^TBx$的</p>
<ul>
<li>&lt;&#x3D;&gt; 规范型相同</li>
<li>&lt;&#x3D;&gt; 正负惯性指数 相同，或者 rank相同+正惯性指数相同</li>
</ul>
<p>定理3. 两个n级实对称矩阵 A与B 合同</p>
<ul>
<li>合同规范型 &#x3D; <code>diag &#123;1*,-1 *,0 *&#125;</code></li>
</ul>
<p>这表明，秩，正惯性指数，是 【n级实对称矩阵】在合同关系下的一个组 完全不变量</p>
<hr>
<p>正定二次型：</p>
<p>定义1. n元二次型 $x^TAx$如果 任意$x\neq 0$,$x^TAx &gt;0$</p>
<ul>
<li>正定的 &lt;&#x3D;&gt; 规范型 rank &#x3D; 正惯性指数 &#x3D; n</li>
<li>合同于 I</li>
<li>A的特征值全大于0<ul>
<li>因为 正交相似&#x2F;正交合同 于$\Lambda$</li>
</ul>
</li>
</ul>
<p>类似的</p>
<ul>
<li>定义矩阵的正定矩阵</li>
<li>实二次型是正定的</li>
<li>所有 顺势 主 子式 的 行列式 为正</li>
</ul>
<p>半正定：非负</p>
<p>负定：所有负</p>
<p>半负定：非正</p>
<p>多元函数极值</p>
<h2 id="11-2-线性空间的张量积"><a href="#11-2-线性空间的张量积" class="headerlink" title="11.2 线性空间的张量积"></a>11.2 线性空间的张量积</h2><p>2,3,4都没有视频课</p>
<h2 id="11-3-张量代数"><a href="#11-3-张量代数" class="headerlink" title="11.3 张量代数"></a>11.3 张量代数</h2><h2 id="11-4-外代数"><a href="#11-4-外代数" class="headerlink" title="11.4 外代数"></a>11.4 外代数</h2>]]></content>
      <categories>
        <category>高等代数</category>
      </categories>
      <tags>
        <tag>高等代数</tag>
        <tag>多重线性映射</tag>
        <tag>正惯性指数</tag>
      </tags>
  </entry>
  <entry>
    <title>高等代数 二 行列式</title>
    <url>/Math/Advanced_algebra_2/</url>
    <content><![CDATA[<h1 id="第2章-行列式"><a href="#第2章-行列式" class="headerlink" title="第2章 行列式"></a>第2章 行列式</h1><p>视频 p8~p18</p>
<ol>
<li>希望不做消元探索矩阵性质</li>
<li>考虑2阶矩阵有唯一解充要, 定义行列式代数表达式和符号记法</li>
<li>从2阶拓展到n阶的表达式定义和符号技法(n元排列知识,交换操作与逆序对性质)</li>
<li>相关性质研究(转置,交换,倍数一行, 倍数一行加到另一行上)</li>
</ol>
<h2 id="为什么要行列式"><a href="#为什么要行列式" class="headerlink" title="为什么要行列式"></a>为什么要行列式</h2><p>在没有行列式时, 只有对方程组的系数矩阵消元以后,才知道解的情况, 期望不需要处理矩阵,就能知道相关性质</p>
<span id="more"></span>

<h2 id="n-元排列"><a href="#n-元排列" class="headerlink" title="n 元排列"></a>n 元排列</h2><p>$n$的排列有$n!$个</p>
<p>性质1: 交换相邻元素得到新排列, 会改变<code>逆序对个数</code> 奇偶性</p>
<p>性质2: 交换i和j得到新排列,会改变<code>逆序对个数</code>奇偶性,(相当于多次相邻交换)</p>
<p>性质3: 保持下标和值的对应关系,让值有序而下标不一定有序,那么下标的<code>逆序对个数</code>的奇偶性和变化前的<code>逆序对</code>奇偶性一致S</p>
<p>显然一个数列<code>逆序对个数</code> 的奇偶性只与它内容有关,与交换的具体过程无关</p>
<h2 id="二阶行列式"><a href="#二阶行列式" class="headerlink" title="二阶行列式"></a>二阶行列式</h2><p>考虑$2\cdot 2$矩阵的解的个数</p>
<p>$a_{11}a_{22}-a_{21}a_{12} \ne 0$ 唯一解</p>
<p>$a_{11}a_{22}-a_{21}a_{12} &#x3D; 0$ 无穷多</p>
<p>定义符号$\left |\begin{array}{hls} a_{11} &amp; a_{12} \\ a_{21} &amp; a_{22} \end{array}\right| &#x3D; a_{11}a_{22}-a_{21}a_{12}$</p>
<p>二阶行列式$|A| \ne 0 \Leftrightarrow$   有唯一解</p>
<h2 id="n-阶行列式"><a href="#n-阶行列式" class="headerlink" title="n 阶行列式"></a>n 阶行列式</h2><p>从二阶出发进行思考, 类似的定义n阶, 符号类似用系数表示</p>
<p>对于值的定义: </p>
<ol>
<li>求和的每一项是, 不同行,不同列的元素的乘积</li>
<li>行下标按照顺序, 列下标为全排列</li>
<li>符号为$-1$的<code>列下标逆序对个数</code>的<code>幂次</code></li>
</ol>
<p>即是 $\sum_{j_1j_2\cdots j_n} (-1)^{\tau(j_1j_2\cdots j_n)}\prod_{i&#x3D;1}^n{a_{ij_i}}$ 这才是行列式的定义, 写成 $n\cdot n$的形状只是为了方便书写</p>
<p>$n$阶行列式 称作$n$阶矩阵的行列式</p>
<p>上三角形行列式: 主对角线下方全为$0$ 其值$&#x3D;\prod_{i&#x3D;1}^n a_{ii}$ </p>
<hr>
<p>这里有个后面(克莱姆法则)会解决的问题, 虽然二阶说明了与有唯一解的充要关系, 而这里虽然定义了n阶行列式, 却没有说明和原矩阵之间唯一解的充要关系</p>
<h2 id="行列式性质"><a href="#行列式性质" class="headerlink" title="行列式性质"></a>行列式性质</h2><ol>
<li><p>行列式交换两行, 等于所有被加的元素中的列下标中的两个交换, 因此行列式的两行交换&#x3D;值$\cdot -1$</p>
</li>
<li><p>可以得到$\sum_{i_1i_2\cdots i_n} (-1)^{\tau(i_1i_2\cdots i_n)}\prod_{j&#x3D;1}^na_{i_jj}$</p>
</li>
<li><p>转置:行列互换, 常见的3种写法$A’,A^T,A^t$, 显然行列式值相等$|A|&#x3D;|A^T|$</p>
</li>
<li><p>一行的$k$倍: 考虑代数表达式所有被加的元素都乘了k, 所以显然值也是k倍</p>
</li>
<li><p>一行加另一行上: 考虑代数表达式可以把所有加的括号拆开, 变成两个符号记法之和</p>
</li>
</ol>
<p>$\left |\begin{array}{equation}\cdots &amp; \cdots &amp; \cdots \\ (b_1+c_1) &amp; \cdots &amp; (b_n+c_n) \\ \cdots &amp; \cdots &amp; \cdots \end{array}\right| &#x3D; \left |\begin{array}{equation}\cdots &amp; \cdots &amp; \cdots \\ b_1 &amp; \cdots &amp; b_n \\ \cdots &amp; \cdots &amp; \cdots \end{array}\right| + \left |\begin{array}{equation}\cdots &amp; \cdots &amp; \cdots \\ c_1 &amp; \cdots &amp; c_n \\ \cdots &amp; \cdots &amp; \cdots \end{array}\right|$</p>
<ol start="6">
<li><p>两行成倍数, 考虑分别为$i_0,i_1$ 两行, 那么它的表达式中加法的项 不含符号部分一定有 $\cdots a_{i_0j_{i_0}} a_{i_1j_{i_1}}$ 和 $\cdots a_{i_1j_{i_0}} a_{i_0j_{i_1}}$ , 它们其它项一样,而仅有下标交换, 又有行成倍数, 因此它们绝对值相等而符号相反, 所以行列式的值为$0$, (另一个角度是, 它们可以互换互为相反数则只能是0</p>
</li>
<li><p>一行倍数加到另一行, 根据上面加法和倍数性质, 显然值不变</p>
</li>
<li><p>按一行(列)展开</p>
</li>
</ol>
<p>$&#x3D; a_{11}M_{11}-a_{12}M_{12}+a_{13}M_{13} + \cdots$</p>
<p>去掉行列剩下按照顺序拼接出的叫做<code>余子式</code>$M_{ij}$,带上<code>-1</code>幂次的叫做<code>代数余子式</code>$A_{ij}&#x3D; (-1)^{i+j}M_{ij}$</p>
<p>$&#x3D; a_{11}A_{11}+a_{12}A_{12}+a_{13}M_{13} + \cdots$</p>
<p>证明相等: 显然考虑表达式本来有$-1$的逆序对的幂次, 而移除了$a_{ij}$剩下按原来排列, 那么其内部和之间的逆序对未变化, 都是关于$a_{ij}$相关的, 那么分别是$a_{&lt;i,&gt;j}$和$a_{&gt;i,&lt;j}$ 的个数之和, 设$k &#x3D; a_{&lt;i,&gt;j}$, 那么有$a_{&lt;i,&lt;j} &#x3D; i-1-k$, $a_{&gt;i,&lt;j} &#x3D; j-1-(i-1-k) &#x3D; j-i+k$个, 所以一共$j-i+2k$个, 只考虑奇偶性的话$i+j$的奇偶性,也就有上面的等式, (另一个角度,考虑使用相邻交换把i行和j列分别交换到1行,1列,这样交换了(i-1+j-1)次, 再只需要考虑$a_{11}$的情况即可</p>
<ol start="9">
<li>反过来$i_0\ne i_1$ 时,考虑从代数表达式变成符号记法,带回去会让两行相等, $\sum_{j&#x3D;1}^n a_{i_0j}A_{i_1j} &#x3D;0$</li>
</ol>
<h2 id="克莱姆法则"><a href="#克莱姆法则" class="headerlink" title="克莱姆法则"></a>克莱姆法则</h2><p>n元线性方程组有唯一解的条件</p>
<p>增广矩阵$\to$初等行变换阶梯形, 无解有非零行$(0,\cdots,0,d \ne 0)$, 无穷解非零行数$r &lt; n$,唯一解$r &#x3D; n$</p>
<p>系数矩阵$\to$初等行变换阶梯形</p>
<p>也就对应系数矩阵$\to$初等行变换阶梯形 上三角 有唯一解 (初等变换过程中行列式值不变), 行列式$\ne 0$</p>
<p>同样上面的无解和无穷解都对应行列式$&#x3D; 0$</p>
<p>至此得到了行列式的值与n元线性方程组有唯一解之间的关系</p>
<hr>
<p>推论1: 对于没有常数项的n元齐次n个方程组, 只有0解 $\Leftrightarrow |A|\ne 0$, 有非零解 $|A| &#x3D; 0$</p>
<hr>
<p>取$A$中$k$行$k$列的交叉点按原顺序排,称作$k$阶子式, 对应剩下的是余子式, 根据上面提出$a_{ij}$ 类似的思路,可以考虑先把选定的$k$行$k$列通过相邻交换,换到开头的$k$行$k$列,这样操作次数是, $(i_1-1)+(i_2-2)+\cdots +(i_k-k) + (j_1-1)+(j_2-2)+\cdots +(j_k-k)$, 剩下的就是选定的$k$阶子式子和它的<code>余子式</code>相乘,其<code>余子式</code>乘上$(-1)^(i_1-1)+(i_2-2)+\cdots +(i_k-k) + (j_1-1)+(j_2-2)+\cdots +(j_k-k) &#x3D; (-1)^{\sum_{p&#x3D;1}^k (i_p+j_p)}$则称作代数余子式</p>
<h2 id="laplace定理-指定k行的展开"><a href="#laplace定理-指定k行的展开" class="headerlink" title="laplace定理(指定k行的展开)"></a>laplace定理(指定k行的展开)</h2><p>$|A|&#x3D;$ 任意的指定$k$行后, 所有$k$阶子式和它的代数余子式的乘积之和</p>
<p>上面证明了每一项会怎么变化, 下面证明原行列式的每一项存在且唯一存在于一个乘积之中</p>
<p>其实和一行展开类似, 任何一项对于指定的$k$行来说其列是确定的,则唯一确定了所在的$k$阶子式,证明了每一个都唯一存在于一个</p>
<p>任意两个不同的k阶子式和它的代数余子式的乘积,都是行列式的项,且不会产生相同的加和项</p>
<p>得证</p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>$\left|\begin{array}{d2} A &amp; O \\ C &amp; B \end{array}\right| &#x3D; |A||B|$</p>
<h2 id="行列式在其它地方的应用"><a href="#行列式在其它地方的应用" class="headerlink" title="行列式在其它地方的应用"></a>行列式在其它地方的应用</h2><p>二阶行列式$\left|\begin{array}{d2} a_1 &amp; b_1 \\ a_2 &amp; b_2 \end{array}\right|$ 表示向量$(a_1,a_2)$和$(b_1,b_2)$所构成平行四边形,从$a$到$b$定向面积</p>
<p>三阶行列式, 表示向量$(a_1,a_2,a_3)$,$(b_1,b_2,b_3)$,$(c_1,c_2,c_3)$所构成的平行六面体的定向体积,$a\to b$,c大拇指右手系</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>范德蒙行列式 $&#x3D;\prod_{i&lt;j} (a_j-a_i)$</p>
<hr>
<p>找 f(x,y,z)&#x3D;x3+y3+z3-3xyz 的一次因式?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x y z</span><br><span class="line">z x y</span><br><span class="line">y z x</span><br><span class="line">感觉还是很妙的</span><br></pre></td></tr></table></figure>

<p>这里有三对角行列式的一般情况的 公式推导</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a b</span><br><span class="line">c a b</span><br><span class="line">  c a b</span><br><span class="line">    c a ...</span><br></pre></td></tr></table></figure>

<p>&#96;</p>
<h2 id="思路总结"><a href="#思路总结" class="headerlink" title="思路总结"></a>思路总结</h2><p>有不少是先看看二阶三阶怎么设计,再推广</p>
<p>但看了18.06我认为这么早上行列式并不好啊，感觉第二第三章顺序可以交换</p>
<ul>
<li>排列<ul>
<li>逆序数 &#x3D; 交换次数奇偶性<ul>
<li>归纳法易证，对于n-1成立，那么对于n个数，考虑n 相邻交换一直到最后 的 操作次数 &#x3D; 额外逆序数</li>
</ul>
</li>
</ul>
</li>
<li>定义：<ul>
<li>这上这个公式，虽然 从2阶，3阶 有端倪，但的确不如18.06的三个基础性质得到公式</li>
</ul>
</li>
<li>性质：<ul>
<li>能代数化前置的一个优点是 证明“更暴力，更不直观，更容易”</li>
<li>图2-1</li>
</ul>
</li>
<li>按一列&#x2F;一行展开<ul>
<li>代数余子式： 也就是 展开时看作 aij的系数的部分，</li>
<li>规律化的推导</li>
<li>特殊Vandermonde 范德蒙行列式<ul>
<li>用处:<ul>
<li>f(x)是n-1次多项式,那么 拟合n个不同的输入 和 n个输出，只有唯一解<ul>
<li>找规律与 f(x)&#x3D;a0+a1x+a2x2+a3x3的线性代数</li>
<li>对于 圆的公式相关 也可以转换成线性方程组</li>
</ul>
<p>				</p>
</li>
<li>因为 输入对应了一个范德蒙矩阵det非零，而 f(x)的系数是要求的 向量，输出 是目标向量</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Cramer法则<ul>
<li>解的公式表达形式（虽然实际对于大矩阵，还是高斯消元靠谱）</li>
<li>这里Carmer法则又是先给公式再证明，没有推导，从天而来<ul>
<li>18.06是，展开&#x3D;&gt;代数余子式的逆矩阵&#x3D;&gt; 解&#x3D;逆 * 目标 &#x3D;&gt; 逆展开</li>
</ul>
</li>
</ul>
</li>
<li>Laplace定理<ul>
<li>这个18.06倒是没有，相当于行列式计算的分块切割的性质，而分块的每块还可以不连续</li>
</ul>
</li>
<li>应用小天地<ul>
<li>这里也是fib递推 和  解微分方程，但这里连 特征值都还没讲</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>高等代数</category>
      </categories>
      <tags>
        <tag>高等代数</tag>
        <tag>克莱姆法则</tag>
        <tag>行列式</tag>
      </tags>
  </entry>
  <entry>
    <title>高等代数 四 矩阵的运算</title>
    <url>/Math/Advanced_algebra_4/</url>
    <content><![CDATA[<h1 id="矩阵的运算"><a href="#矩阵的运算" class="headerlink" title="矩阵的运算"></a>矩阵的运算</h1><p>P55-65</p>
<span id="more"></span>

<p>矩阵和 $C&#x3D;A+B, C_{ij}&#x3D;A_{ij}+B_{ij}$</p>
<p>矩阵乘 $C&#x3D;AB, C_{ij}&#x3D;\sum_{k} A_{ik}B_{kj}$</p>
<p>特殊矩阵</p>
<ul>
<li>对角矩阵</li>
<li>基本矩阵: 只有一个元素是1,其它全是0</li>
<li>上&#x2F;下 三角矩阵</li>
<li>初等矩阵：初等变换操作的“操作矩阵”</li>
<li>对称矩阵 $A^T &#x3D; A$</li>
<li>反对称&#x2F;斜对称矩阵 $A^T&#x3D;-A$</li>
</ul>
<p>矩阵乘积</p>
<p>用旋转的矩阵表达 来讲矩阵乘法 同时有了自然的 和差化积 积化和差</p>
<ul>
<li><p><code>[cos,-sin;sin,cos]</code></p>
</li>
<li><p>秩 rank(AB) &lt;&#x3D; min(rank(A),rank(B)), 从表出容易证明，小于存在的例子 [0,1;0,0]</p>
</li>
<li><p>行列式 |AB|&#x3D;|A||B| </p>
<ul>
<li>证明 分块矩阵技术<code>|[A,0;-I,B]|=|A||B|</code></li>
</ul>
</li>
<li><p>Binet-Cauthy</p>
<ul>
<li>$|A_{mn}B_{nm}| &#x3D; 0, m &gt; n$</li>
<li>$|A_{mn}B_{nm}| &#x3D; \sum |A’<em>{m}B’</em>{m}|, m \le n$ 算法比赛用到过，右边是 $A,B$的所有$m$阶子式子相乘（其中 A选的列序号 和 B选的行序号相等）<ul>
<li>依然是分块矩阵技术 $[A,0;-I,B]$ 需要注意和上面不同的是，这里A,B不是方阵</li>
</ul>
</li>
<li>cauchy恒等式, $n\ge 2$时 $\displaystyle (\sum_{i&#x3D;1}^n a_ic_i)(\sum_{i&#x3D;1}^n b_id_i)-(\sum_{i&#x3D;1}^n a_id_i)(\sum_{i&#x3D;1}^n b_ic_i)&#x3D;\sum_{1\le j&lt;k\le n} (a_jb_k-a_kb_j)(c_jd_k-c_kd_j)$</li>
<li>Cauchy-Bunyakovsky 不等式 $\displaystyle (\sum_{i&#x3D;1}^n {a_i^2})(\sum_{i&#x3D;1}^n {b_i^2}) \ge (\sum_{i&#x3D;1}^n {a_ib_i})^2$ , 等号成立当且仅当 a和b线性相关</li>
</ul>
</li>
</ul>
<p>$AA’&#x3D;I,|A|&#x3D;-1$ 证明$|I+A|&#x3D;0$</p>
<p>$|I+A|&#x3D;|AA’+AI|&#x3D;|A(A’+I)|&#x3D;|A||A’+I|&#x3D;(-1)|(A+I)’|&#x3D;(-1)|A+I|$ 得证</p>
<p>例6~例8 全部用的 矩阵的元素是$\sum$, 然后通过拆解成两个矩阵相乘来解</p>
<p>A和B都是n阶矩阵 AB和BA的r阶的所有主子式和相等：（n阶矩阵乘法的非交换性中提取的可交换的量）</p>
<p>例题 4.3.16 对于$A$,如果 存在$m$使得$rank(A^m)&#x3D;rank(A^{m+1})$那么$rank(A^m)&#x3D;rank(A^{m+k})$</p>
<ul>
<li>y属于$A^{m+1}$列空间存在$x$,使得$y&#x3D;A^{m+1}x&#x3D;A(A^{m}x)$, 注意到右侧是$A^m$的列空间中的向量，而$A^{m+1}$的列空间是$A^m$的列空间的子空间，却维度相等，所以两个列空间相等，所以$A^mx$ 也可以用$A^{m+1}z$ 表示, 所以$y&#x3D;A(A^{m+1}z)$, 说明 任何$A^m$的列空间向量都可以在$A^{m+2}$中表出，而$A^{m+2}$的列空间又是它的子空间，所以两个列空间相等，得证</li>
<li>再配上容斥原理 可得 4.4.例12 对于n阶矩阵 $rank(A^n)&#x3D;rank(A^{n+k})$</li>
</ul>
<p>4.4 例13 A&#x3D;LU</p>
<h2 id="可逆矩阵"><a href="#可逆矩阵" class="headerlink" title="可逆矩阵"></a>可逆矩阵</h2><ul>
<li>$A^{-1}A&#x3D;I$</li>
<li>伴随矩阵 $A^{*}A&#x3D;|A|I$</li>
<li>$|A^{-1}|&#x3D;\frac{1}{|A|}A^{*}$</li>
<li>高斯消元法 初等变化 + 增广矩阵 求 逆矩阵</li>
</ul>
<h2 id="4-5-矩阵的分块"><a href="#4-5-矩阵的分块" class="headerlink" title="4.5 矩阵的分块"></a>4.5 矩阵的分块</h2><ul>
<li>分块情况下的运算，这感觉很偏应用吧，能加快运算</li>
<li>另一个用处就是这里很多 秩相关的，行列式相关的，可以用分块来证明</li>
</ul>
<p>Sylvester秩不等式  $A_{sn},B_{nm}$: 有$rank(AB)\ge rank(A)+rank(B)-n$</p>
<ul>
<li>$(I_n,0;0,AB)&#x3D;(B,I_n;0,A)$</li>
</ul>
<p>幂等矩阵 充要: $rank(A)+rank(I-A)&#x3D;n$</p>
<ul>
<li>$A^2&#x3D;A$ 即$A-A^2&#x3D;0$ 即 $(A,0;0,I-A)&#x3D;(A-A^2,0;0,I)$</li>
</ul>
<h2 id="4-6-正交矩阵-欧几里得空间-R-n"><a href="#4-6-正交矩阵-欧几里得空间-R-n" class="headerlink" title="4.6 正交矩阵 欧几里得空间$R^n$"></a>4.6 正交矩阵 欧几里得空间$R^n$</h2><p>这个 视频上没有？我看视频课，矩阵运算p65结束，p66就开始多项式了，而多项式是高代的第七章</p>
<p>实数域上 正交$AA^T&#x3D;I$</p>
<ul>
<li>$A^{-1}&#x3D;A^T$ 也是正交</li>
<li>可逆</li>
<li>$A,B$是正交则$AB$也是正交</li>
<li>$\det A&#x3D; 1,-1$<ul>
<li>$|A|^2&#x3D;|A^TA|&#x3D;|I|$</li>
</ul>
</li>
</ul>
<h2 id="4-7-K-n-到-K-s-的线性映射"><a href="#4-7-K-n-到-K-s-的线性映射" class="headerlink" title="4.7 $K^n$到$K^s$的线性映射"></a>4.7 $K^n$到$K^s$的线性映射</h2><p>这部分在视频课里是第三章中间p45-p54</p>
]]></content>
      <categories>
        <category>高等代数</category>
      </categories>
      <tags>
        <tag>高等代数</tag>
        <tag>矩阵乘法</tag>
        <tag>可逆矩阵</tag>
        <tag>BInet-Cauthy</tag>
        <tag>分块矩阵</tag>
      </tags>
  </entry>
  <entry>
    <title>高等代数 三 n维向量空间$K^n$</title>
    <url>/Math/Advanced_algebra_3/</url>
    <content><![CDATA[<h1 id="n维向量空间-K-n"><a href="#n维向量空间-K-n" class="headerlink" title="n维向量空间$K^n$"></a>n维向量空间$K^n$</h1><p>P19-P55</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p> $K^n:&#x3D;\lbrace (a_1,a_2,\cdots,a_n) | a_i\in K,i&#x3D;1,2,\cdots,n \rbrace$</p>
<p>其中$K$是数域</p>
<p>规定: </p>
<ol>
<li>向量相等:对应位置元素相等</li>
<li>向量相加:对应位置元素相加</li>
<li>数量乘法:所有元素乘上k倍</li>
<li>零向量:所有元素都为0</li>
</ol>
<p>对应映射$f: A\to B$ , $a$ 在$f$下的像$f(a)$, $a$是$f(a)$的一个原像</p>
<p>满射:$f(A) &#x3D; B$ </p>
<p>单射:不同$a$的$f(a)$不同</p>
<p>双射(一一对应): 单射+满射</p>
<p>笛卡尔积: $A\times B &#x3D; ((a_1,b_1),(a_2,b_2),\cdots,(a_n,b_n))$, $A$,$B$等长</p>
<h2 id="线性空间"><a href="#线性空间" class="headerlink" title="线性空间"></a>线性空间</h2><p>线性空间 &#x3D; 4条加法法则+4条数乘法则</p>
<span id="more"></span>

<p>加法</p>
<ol>
<li>加法交换 $\alpha + \beta &#x3D; \beta + \alpha$</li>
<li>加法结合 $(\alpha + \beta ) + \gamma &#x3D; \alpha + (\beta + \gamma)$</li>
<li>零元$\alpha + 0 &#x3D; \alpha$</li>
<li>负元$\alpha + \beta &#x3D; 0$, 互为负元</li>
</ol>
<p>数乘</p>
<ol start="5">
<li>$1\alpha &#x3D; \alpha$</li>
<li>$(kl)\alpha &#x3D; k(l\alpha)$</li>
<li>$(k+l)\alpha &#x3D; k\alpha + l\alpha$</li>
<li>$k(\alpha+\beta) &#x3D; k\alpha + k\beta$</li>
</ol>
<hr>
<p>线性空间例子</p>
<ol>
<li>几何空间, 以O为起点的所有向量</li>
<li>向量空间 是 数域$K$的一个线性空间</li>
<li>$f(\mathbb{R})\to \mathbb{R}$, 数域$X$上的函数$\mathbb{R}^X$, $(f+g)(\mathbb{R}) &#x3D; f(\mathbb{R})+g(\mathbb{R})$, (3对应零函数,4对应负函数)</li>
</ol>
<h2 id="线性空间性质"><a href="#线性空间性质" class="headerlink" title="线性空间性质"></a>线性空间性质</h2><ol>
<li>唯一$0$元(反证法+交换律+加法性质3) 0a &#x3D; 0a+0b &#x3D; 0b + 0a&#x3D; 0b</li>
<li>每个元素唯一负元(反证法) $\beta_0 &#x3D; \beta_0 + \alpha +\beta_1 &#x3D; \beta_1$</li>
<li>$0\alpha &#x3D; 0$ (数乘+结合率+负元) $0\alpha &#x3D; 0\alpha + 0 &#x3D; 0\alpha + (0\alpha + (-0\alpha)) &#x3D; (0\alpha + 0\alpha) + (-0\alpha) &#x3D; 0\alpha + (-0\alpha) &#x3D; 0$</li>
<li>$k0 &#x3D; 0$</li>
<li>$k\alpha &#x3D; 0$, 则$k &#x3D;0$或$\alpha &#x3D; 0$, ($k\ne 0$时,数乘上$k^{-1}$)</li>
<li>$(-1)\alpha &#x3D; -\alpha$, (结合律+负元定义)</li>
</ol>
<h2 id="线性子空间"><a href="#线性子空间" class="headerlink" title="线性子空间"></a>线性子空间</h2><p>$V$是数域$K$上的一个线性空间,$U$是$V$一个非空子集, 也满足线性空间八条法则,则$U$是$V$的子空间, (注意元素的定义要一致</p>
<p>生成的子空间 $W &#x3D; &lt;\alpha_1,\alpha_2,\cdots,\alpha_s&gt;$ , W的元素都是$\sum k_i \alpha_i$ 得到的, 其中$k_i \in K$, 对于可以被表示的, 称作可以被这些向量线性表出</p>
<p>所以原本的n元线性方程组的问题有解变成: 系数的列向量能否线性表出值的列向量? $\beta \in &lt;\alpha_1,\alpha_2,\cdots,\alpha_s&gt;$?</p>
<h2 id="线性相关与线性无关的向量组"><a href="#线性相关与线性无关的向量组" class="headerlink" title="线性相关与线性无关的向量组"></a>线性相关与线性无关的向量组</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>2个向量: 共线(线性相关): $\exists k_1,k_2$不全为零,让$k_1\alpha + k_2\beta &#x3D; 0$, 否则不共线(线性无关)</p>
<p>线性相关: $\exists k_1,k_2,\cdots,k_s$不全为零,让$\sum_{i&#x3D;1}^s k_i\alpha_i &#x3D; 0$, 否则线性无关</p>
<p>线性<strong>相</strong>关 $\Leftrightarrow$ 相应n元齐次线性方程组有非零解 $\Leftrightarrow$ 行列式$&#x3D;0$</p>
<p>线性<strong>无</strong>关 $\Leftrightarrow$ 相应n元齐次线性方程组只有零解 $\Leftrightarrow$ 行列式$\ne 0$</p>
<p>对于单个向量, 定义$0$向量是线性相关, 非零则线性无关</p>
<h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>线性相关 本身不含0向量的话, 至少有一个向量可以由其它向量线性表出</p>
<p>线性无关: 每一个都不能由其它向量线性表出</p>
<p>命题一: $\beta$可以由线性无关的向量组 $&lt;\alpha_1,\cdots,\alpha_s&gt;$线性表出, 则表出方式唯一(充要)</p>
<p>命题二: 线性无关,添加向量后线性相关, 则添加的向量可被线性表出</p>
<p>极大线性无关组: 当前无关任意添加都会线性相关, 换句话说任意都可以被线性表出</p>
<p><code>基</code>: 线性无关,任何向量可以由它线性表出,和极大线性无关组的关系 (见下面注记)</p>
<p>如果两个向量组可以互相线性表出,则称它们等价, 可以相互线性表出的两个向量组 定义为 “等价”关系, “等价”关系有 自反性, 对称性, 传递性(拆开证)</p>
<p>向量组(r个)能由向量组(s个)线性表出(r&gt;s), 则前面一定线性相关, 相当于带入去解r未知数,s个等式的方程组 一定有非零解</p>
<p>m的大小唯一: 因为如果两个个数不同(m&gt;n)的极大线性无关组,因为可以互相表出, 反过来就是考虑一个m元齐次n个的方程组 是否有非零解? 因为m&gt;n则必有非零解,所以大的个数的不可能是极大线性无关组, 所以所有极大线性无关组的个数两两相等</p>
<p>$&lt;\alpha_1,\cdots,\alpha_s&gt;$ 的任意一个极大线性无关组的个数唯一决定,称作向量组的秩(<code>rank</code>, r只含0的规定为0)</p>
<p>等价 的两个向量组 <code>rank</code>相等: 因为分别取它们的极大线性无关组+线性表出传递性</p>
<p>等价 线性无关的两个向量组 <code>rank</code>相等</p>
<p>空间(集合)与向量组的关系</p>
<p>有限子集线性相关 定义为 其向量组 线性相关</p>
<p>无限子集线性相关 定义为 有一个有限子集 线性相关</p>
<p>空集定义是 线性无关</p>
<p>存在性: 一定存在(教材)</p>
<p>V有一个基是有限子集,则V是有限维的, <code>基</code>的个数叫做<code>维数</code> $dimV$, 只含$0$的线性空间维数为0</p>
<p>V有一个基是无限子集,则V是无限维的</p>
<p>坐标: 列向量 在基中的唯一表出的系数</p>
<p>例子: 三维空间中三个不共面的向量是一个基, 平面是二维的(过定点O的平面), 直线是1维的 (过定点O的直线)</p>
<p>$K^n$ 的标准基$(1,0,\cdots)^T,(0,1,\cdots)^T,\cdots,(0,0,\cdots,1)^T$</p>
<p>$K^n$的$n$个线性无关的向量组都是它的基,(因为任加一个,从个数上一定线性相关,则任加的可以被线性表出)</p>
<p>$dim(V)&#x3D;n$ 则空间$V$中任意$n$个线性无关的一定是基(任意增加,n+1个显然线性相关)</p>
<p>A线性表出B: $rank(B) \le rank(A)$</p>
<hr>
<p>矩阵&#x3D;&gt; 列向量组 &#x3D;&gt; 列秩 &#x3D; dim(列空间) </p>
<p>矩阵&#x3D;&gt; 行向量组 &#x3D;&gt; 行秩 &#x3D; dim(行空间) &#x3D;&gt; 转化阶梯矩阵</p>
<p>线性无关的向量组做延伸组依然线性无关, 先考虑阶梯形矩阵(取主元所在列 得到 线性无关) rank(列向量) &#x3D; 主元个数 &#x3D; rank(行向量)</p>
<p>定理2 初等行变换不改变矩阵行rank</p>
<ol>
<li>交换显然</li>
<li>行倍加到另一行, 变后的可以用原来的行线性表出, 原的也可以用现在的线性表出, 所以两个等价, rank 相等</li>
<li>某行乘倍数, 同样 也是变前后相互可以表出, 所以等价,所以rank相等</li>
</ol>
<p>定理3 矩阵的初等行变换不改变列rank</p>
<p>考虑 方程组 随着初等行变换, 和原方程组同解, 因此 变化前后 的有非零解和无非零解 和 变化后一致 所以 不改变列rank(既然rank与极大线性无关组有关,而极大线性无关组与运算得到0元有关, 同解保证了 原来能得到表达式, 在新的里才能得到0元, (因为非0元不能通过初等行变化变为0元))</p>
<p>综上 对于一般矩阵 初等行变换 行列rank 不变 成为阶梯形矩阵, 行rank &#x3D; 列 rank</p>
<p>定理4 因此也有矩阵的rank &#x3D; 矩阵的转置的rank</p>
<p>定理5 A的rank &#x3D; A的不为0的子式的最高阶数(找线性无关rank行得到子矩阵,再找线性无关rank列 构成的rank x rank 的线性无关, 那么变化阶梯形 行列式不变 最终不为0,说明存在,不为0的rank乘rank的A的子式)</p>
<p>矩阵的初等行&#x2F;列变换 不改变矩阵的秩</p>
<hr>
<p>空间 的 交并 与 空间基的集合的交并 并不等价</p>
<h2 id="子空间"><a href="#子空间" class="headerlink" title="子空间"></a>子空间</h2><p>直和 : V的子空间$V_1,V_2$ 如果$V_1+V_2$中的每个向量$\alpha&#x3D;\alpha_1+\alpha_2,\alpha_1\in V_1,\alpha_2\in V_2$ 表法唯一，那么称作直和, 充要条件$V_1 交 V_2 &#x3D; 0向量$</p>
<ul>
<li>0的表法也唯一, 说明 两个空间之间无线性相关的向量</li>
<li>所以 两个的基的 代数和为0的解 只有零解,  所以所有基线性无关，所以 dim(V1+V2)&#x3D;dim(V1)+dim(V2)-dim(V1 交 V2)</li>
</ul>
<h2 id="线性映射"><a href="#线性映射" class="headerlink" title="线性映射"></a>线性映射</h2><p>对应书的4.7</p>
<p>穿插了一点 集合知识</p>
<ul>
<li>定义域</li>
<li>陪域 (值域包含于陪域，值域中的元素是 定义域元素经过变化得到所有值的集合，陪域并不保证元素都有定义域的来源)</li>
<li>值域 $\mathrm{Im} f$</li>
<li>满射：值域&#x3D;陪域</li>
<li>单射 不同元素的象不同</li>
<li>双射 （一一对应<ul>
<li>可逆映射</li>
</ul>
</li>
<li>核 Ker sigma: $\alpha \in K^n | \sigma(\alpha)&#x3D;0$</li>
<li>同构映射$\sigma: V\to V’$ 那么$V$与$V’$同构, 这里也感觉不够精确，括号里的运算是$V$中的,而外部的运算是$V’$中的，应该区分这个加和乘?<ul>
<li>$\sigma(x+y)&#x3D;\sigma(x)+\sigma(y)$ 保持加法</li>
<li>$\sigma(kx)&#x3D;k\sigma(x)$ 保持乘法</li>
<li>性质 $V$的基 通过$\sigma$ 映射到$V’$也是基</li>
<li>两个有限维的线性空间同构，则 dim相等，也就是极大线性无关组个数相同，也就是唯一表出相同</li>
</ul>
</li>
</ul>
<p>映射结合律</p>
<ul>
<li>fgh(x)&#x3D;f(gh(x))&#x3D;fg(h(x))</li>
</ul>
<p>TODO 三十一 ~ 三十六</p>
<h2 id="注记"><a href="#注记" class="headerlink" title="注记"></a>注记</h2><p>向量组里是秩rank, 空间集合集合里是维数dim, $dim&lt;\alpha_1,\cdots,\alpha_s&gt; &#x3D; rank\lbrace \alpha_1,\cdots,\alpha_s \rbrace$, 都是研究极大线性无关组(内线性无关,未被选的若加入都可表示(线性相关)), 注意的是并不是按照V的个数, 比如 (x,x,y) 看起来3维, 但基(对于空间无序)只有2个,所以是2维</p>
<p>向量组是有序有限的, 而空间是由基础的一系列向量做加法和数乘构成的集合</p>
<p>这里的特殊条件就是 只含$0$向量的时候有些需要特殊定义(规定),</p>
<p>例如 $\emptyset$是只含0向量的一个极大线性无关集, 规定为它是{0}的基</p>
<p>这里过程也是很多从2个到多个, 从特殊的阶梯形到一般矩阵</p>
<h3 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR"></a>TLDR</h3><p>先4条加法，4条乘法 定义线性空间</p>
<ul>
<li>然后 矩阵的列向量 运算 与 n维度空间基 做一一对应，把研究 列向量组合 变为研究n维空间的基，把求解与属于空间 唯一表示做关联</li>
</ul>
<p>线性相关</p>
<ul>
<li>线性组合&#x2F;可表示 &lt;-&gt; 属于生成空间</li>
</ul>
<p>秩</p>
<ul>
<li>极大线性无关组<ul>
<li>向量组 &#x3D;等价&#x3D; 极大无关线性组</li>
<li>个数称为秩</li>
</ul>
</li>
<li>表出的性质 </li>
<li>向量空间，子空间的基与维数</li>
<li>向量组的rank &#x3D; 生成空间的最大线性无关组<ul>
<li>初等变换<ul>
<li>可表示原理 不改变行rank</li>
<li>同解原理 不改变列rank</li>
<li>所以初等变化成阶梯形 行rank 列rank未改变，又都是主元个数</li>
</ul>
</li>
<li>满秩 &lt;&#x3D;&gt; det \neq 0</li>
<li>有解 解空间和解，这里 丘老师 是通过秩 与 增广矩阵秩 来研究解的存在性 个数，而mit18.06 是通过 先nullspace,再所有解&#x3D; 特解+nullspace来完成的</li>
</ul>
</li>
<li>视频比 书多了很多章的 子空间相关的</li>
</ul>
]]></content>
      <categories>
        <category>高等代数</category>
      </categories>
      <tags>
        <tag>高等代数</tag>
        <tag>向量空间</tag>
        <tag>线性空间</tag>
        <tag>矩阵的秩</tag>
      </tags>
  </entry>
  <entry>
    <title>高等代数 五 矩阵的相抵与相似</title>
    <url>/Math/Advanced_algebra_5/</url>
    <content><![CDATA[<h1 id="矩阵的相抵与相似"><a href="#矩阵的相抵与相似" class="headerlink" title="矩阵的相抵与相似"></a>矩阵的相抵与相似</h1><p>没有视频课？？？</p>
<hr>
<p>希望把矩阵分类</p>
<p>定义1, S非空集合, $W$是$S\times S$的一个子集,叫做二元关系, $(a,b)\in W$,那么称它们有该二元关系$aWb,a\sim b$</p>
<p>定义2, 等价关系</p>
<ul>
<li>$a\sim a$ 反身性</li>
<li>$a\sim b\rightarrow b\sim a$ 对成性</li>
<li>$a\sim b,b\sim c\rightarrow a\sim c$ 传递性</li>
</ul>
<p>定义3, $\sim$是等价关系$\bar{a}$表示等价类</p>
<p>$a,b\in S$</p>
<ul>
<li>$\bar{a}&#x3D;\bar{b}$或$\bar{a}\cap\bar{b}&#x3D;\emptyset$</li>
</ul>
<p>定义4, $S&#x3D;\cup S_i,S_i\cap S_j&#x3D; \emptyset$ 则是$S$ 的一个划分$\pi(S)$</p>
<p>所有等价类组成划分</p>
<p>定义5, $\sim$是$S$ 上的一个等价关系, 有所有等价类组成的集合称为$S$对于关系$\sim$的商集, 记作$S&#x2F;\sim$</p>
<p>例子,</p>
<ul>
<li>实数集R,二元关系 $a\sim b, a-b\in Z$, 再附加 $\sigma : R&#x2F;Z \to [0,1)$</li>
<li>实数集R, 二元关系$a\sim b,\lfloor a\rfloor &#x3D; \lfloor b \rfloor$</li>
<li>平面点集$\pi$, $p_1\sim p_2, x_1-x_2\in Z 且 y_1-y_2\in Z$</li>
</ul>
<h2 id="矩阵的相抵"><a href="#矩阵的相抵" class="headerlink" title="矩阵的相抵"></a>矩阵的相抵</h2><p>数域K上$A_{sn},B_{sn}$</p>
<p>如果A经过一系列初等变化 变成 矩阵B,那么A与B相抵</p>
<ul>
<li>存在可逆矩阵P,Q, 使得$PAQ&#x3D;B$</li>
</ul>
<p>定理1 设r&#x3D;rank(A),则A相抵于 $[I_r,0;0,0]$ 相抵标准形</p>
<p>定理2 A,B形状相同，那么rank(A)&#x3D;rank(B) &lt;-&gt; 相抵</p>
<h2 id="5-3-广义逆矩阵"><a href="#5-3-广义逆矩阵" class="headerlink" title="5.3 广义逆矩阵"></a>5.3 广义逆矩阵</h2><p>Ax&#x3D;b</p>
<ul>
<li>如果A可逆，唯一解</li>
<li>如果不可逆，且有解 如何找到这个“表达”<ul>
<li>希望找到 $AXA&#x3D;A$ 说实在的还是 神奇中有些自然，自然中有些神奇</li>
<li>$A_{sn}&#x3D;P_s[I_r,0;0,0]Q_n$, 其中$P,Q$是可逆的</li>
<li>$X&#x3D;Q^{-1}[I_r,B;C,D]P^{-1}$, 其中B,C,D是 任意的 （这里B,C,D的观感的确没有SVD好，但是从这个角度上给出了 多个广义的逆</li>
</ul>
</li>
<li>记作$A^{-}$</li>
</ul>
<p>$Ax&#x3D;b$ 有解的充要条件是$b&#x3D;AA^{-}b$</p>
<p>通解为$A^{-}\beta$: 说人话就是i任意一个解$x$可以找到对应$A^{-}$使得 $x&#x3D;A^{-}\beta$</p>
<ul>
<li>同样按照上面 拆A,的方式去凑</li>
<li>这样看来又比SVD的好，因为SVD的视角是唯一的</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 0 1</span><br><span class="line">0 1 1</span><br><span class="line">0 0 0</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A=[1,0,1;0,1,1;0,0,0];</span><br><span class="line">[U,S,V]=svd(A);</span><br><span class="line">W=[1/sqrt(3),0,0;0,1,0;0,0,0];</span><br><span class="line">RA=V*W*U&#x27;; </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">U:</span><br><span class="line">1/sqrt(2)  -1/sqrt(2)</span><br><span class="line">1/sqrt(2)   1/sqrt(2)</span><br><span class="line">                      1</span><br><span class="line">  </span><br><span class="line">S:</span><br><span class="line">sqrt(3)</span><br><span class="line">        1</span><br><span class="line">           0</span><br><span class="line">           </span><br><span class="line">V:</span><br><span class="line">1/sqrt(6)  -1/sqrt(2) -1/sqrt(3)</span><br><span class="line">1/sqrt(6)   1/sqrt(2) -1/sqrt(3)</span><br><span class="line">2/sqrt(6)   0          1/sqrt(2)</span><br><span class="line"></span><br><span class="line">这里 A= U*S*V&#x27;</span><br><span class="line"></span><br><span class="line">发现 A*RA = [1,0,0;0,1,0;0,0,0] 但是RA*A并不如此好看， 不过这样 是满足了这里的 A*RA*A = A (容易证明)</span><br></pre></td></tr></table></figure>

<p>这里的P,Q没有个一个具体的实践方案，主要讨论其存在性和可表示性，而svd切实的提出了 通过$AA^T$和$A^TA$的特征向量组成的单位正交基矩阵</p>
<hr>
<p>$Ax&#x3D;0$的通解为 $x&#x3D;(I_n-A^{-}A)Z$, Z是$K^n$中任意向量 (可证明充要性)</p>
<p>因此$Ax&#x3D;b$的通解还可以写做 $x&#x3D;A^{-}b+(I_n-A^{-}A)Z$</p>
<h3 id="Penrose-方程组"><a href="#Penrose-方程组" class="headerlink" title="Penrose 方程组"></a>Penrose 方程组</h3><p>定义 Morre-Penrose 广义逆 满足</p>
<ul>
<li>$AXA&#x3D;A$</li>
<li>$XAX&#x3D;X$</li>
<li>$(AX)^H&#x3D;AX$</li>
<li>$(XA)^H&#x3D;XA$</li>
</ul>
<p>定理5: 复数域上 非零矩阵，Penrose方程组总是有唯一解（这就是SVD的那个解吧）？</p>
<p>$A&#x3D;BC$,其中B和C分别是 列满秩和行满秩的矩阵</p>
<p>则唯一解是 $X&#x3D;C^H(CC^H)^{-1}(B^HB)^{-1}B^H$, 不是这然后就带入证明了？？？这突兀感觉太强了。TODO 如何drop from sky的</p>
<p>你看SVD的理论基础 矩阵Ax如果x属于行向量空间那么输出和列向量空间一一对应且满足线性关系，所以才有了 (A * (行向量空间的基+nullspace的基))&#x3D;(列空间基+nullspace(A^T)的基) * 对角Sigma的想法，就感觉上更自然，这里直接甩我一个表达式，然后证明 是解又唯一真的怪</p>
<h2 id="5-4-矩阵的相似"><a href="#5-4-矩阵的相似" class="headerlink" title="5.4 矩阵的相似"></a>5.4 矩阵的相似</h2><p>好好好，先讲相似后讲特征值是吧！？！？</p>
<p>定义还是 $A&#x3D;QBQ^{-1}$</p>
<ul>
<li>行列式相等</li>
<li>同时可逆或不可逆（由上）</li>
<li>相等的rank</li>
</ul>
<p>trace(AB)&#x3D;trace(BA) ： 证明：展开对角项 （这里其实 需要保证A和B^T的形状相同）</p>
<ul>
<li>相似有 trace相等, trace(A)&#x3D;trace(QBQ^{-1})&#x3D;trace(Q^{-1}QB)&#x3D;trace(B)</li>
</ul>
<p>可对角化: n个线性无关的列向量, $Q^{-1}AQ&#x3D;\Lambda$，写了特征值形式，但没提到特征值</p>
<h3 id="5-5-特征值与特征向量"><a href="#5-5-特征值与特征向量" class="headerlink" title="5.5 特征值与特征向量"></a>5.5 特征值与特征向量</h3><ul>
<li>定义与等价命题</li>
<li>特征多项式的根 对应特征值(注意不是充要 比如 <code>[1,1;0,1]</code>和<code>[1,0;0,1]</code>)&#96;<ul>
<li>相似矩阵特征多项式相同 $|A-xI|&#x3D;|QBQ^{-1}-xQQ^{-1}|&#x3D;|Q||B-xI||Q^{-1}|$</li>
</ul>
</li>
<li>对于“重复特征值”<ul>
<li>对应的特征向量 维度 叫做 几何重数</li>
<li>对于 特征多项式根的重数 叫做 代数重数<ul>
<li>几何重数 &lt;&#x3D; 代数重数:  证明: 维数选基 &#x3D;&gt; 类似对角化 &#x3D;&gt; 特征多项式 &#x3D;&gt; 幂次不少于</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="5-6-可对角化条件"><a href="#5-6-可对角化条件" class="headerlink" title="5.6 可对角化条件"></a>5.6 可对角化条件</h2><ul>
<li>n个线性无关的特征向量<ul>
<li>不同特征值对应的 特征子空间维数 和为n</li>
</ul>
</li>
<li>不同特征值 的特征向量 两两线性无关<ul>
<li>不同特征值 的特征向量 任意个线性无关</li>
<li>n个不同特征值 一定可以对角化</li>
</ul>
</li>
<li>定理5： 全部复根属于数域K,且每个特征值的几何重数&#x3D;代数重数</li>
</ul>
<p>幂等矩阵</p>
<ul>
<li>一定可以对角化:<ul>
<li>特征值0和1 : $(\lambda-\lambda^2)b&#x3D;0$</li>
<li>0特征值 对应解空间 rank(A)&#x3D;n-r</li>
<li>根据4.5章节通过分块证明了 幂等矩阵充要 rank(A)+rank(I-A)&#x3D;n<ul>
<li>所以1的特征值 对应 n-rank(I-A)&#x3D;r个特征向量</li>
</ul>
</li>
<li>相似trace不变 ，所以trace &#x3D; trace(对角化后) &#x3D; 特征向量1的个数 &#x3D; rank(A)</li>
</ul>
</li>
</ul>
<p>例3. $\sum_i^s A_i&#x3D;I$, 且$A_i$全为幂等矩阵，那么$\sum_{i&#x3D;1}^s rank(A_i)&#x3D;n$</p>
<ul>
<li>n&#x3D;trace(I)&#x3D;trace(sum ai)&#x3D;sum trace(ai) &#x3D; sum rank(ai)</li>
</ul>
<p>例4, 不为零矩阵的幂零矩阵不能对角化</p>
<ul>
<li>幂零矩阵特征值 只有0<ul>
<li>0 &#x3D; det 0 &#x3D; det A^l &#x3D; (det a)^l<ul>
<li>det a &#x3D; 0, 所以0是特征值</li>
<li>$\lambda^lb&#x3D;A^lb&#x3D;0b&#x3D;0$ 只有0</li>
</ul>
</li>
<li>0对应特征空间维数 &lt; n</li>
</ul>
</li>
</ul>
<h2 id="5-7-实对称矩阵的对角化"><a href="#5-7-实对称矩阵的对角化" class="headerlink" title="5.7 实对称矩阵的对角化"></a>5.7 实对称矩阵的对角化</h2><p>$x^2+4y^2+z^2-4xy-8xz-4yz&#x3D;1$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(x,y,z) (1  -2 -4) (x)</span><br><span class="line">        (-2  4 -2) (y)</span><br><span class="line">        (-4 -2  1) (z)                  </span><br></pre></td></tr></table></figure>

<p>$a^TAa$的形式</p>
<p>希望把$A$对角化 $a^TQ^{-1}\Lambda Qa$ 这样反过去$Qa$对应新的$x,y,z$ 变来只有平方项的表达</p>
<p>实对称矩阵</p>
<ul>
<li>每个特征值都是实数</li>
<li>不同特征值 的特征向量正交</li>
<li>一定 正交相似于 对角矩阵<ul>
<li>归纳法+分块</li>
</ul>
</li>
</ul>
<p>正交相似于对角矩阵一定是对称矩阵</p>
<ul>
<li>$A^T&#x3D;(Q\Lambda Q^{-1})^T&#x3D;(Q^{-1})^TB^TQ^{T}&#x3D;QBQ^{-1}&#x3D;A$</li>
</ul>
<p>两个实对称 正交相似 充要条件 它们相似, 从而有了传递性</p>
<ul>
<li>额外的 两个矩阵正交相似 则有相同的 特征方程，这两个矩阵可以不是实对称</li>
</ul>
<p>实对称矩阵+幂零矩阵&#x3D;&gt; A&#x3D;0, 证明: 因为可以相似对角化</p>
<p>$A^TA$ 的特征值都是非负实数</p>
<p>实矩阵A正交相似于 上三角矩阵 充要条件 A的特征多项式在复数域中的根都是实数</p>
<ul>
<li>必要性：正交相似 于B 所以A,B特征多项式相同，所以特征值为B的对角线的值</li>
<li>充分性：归纳法+分块</li>
</ul>
<p>A的特征多项式在复数域中的根都是实数，且$AA’&#x3D;A’A$那么A是对称矩阵</p>
<ul>
<li>因为都是实数， 所以A正交相似于一个上三角矩阵 <ul>
<li>带入得$Q^{-1}UQ (Q^{-1}UQ)^T&#x3D;(Q^{-1}UQ)^TQ^{-1}UQ$, 其中$U$是上三角实(?)矩阵</li>
<li>即 $Q^{-1}UU^TQ&#x3D;Q^{-1}U^TUQ$</li>
<li>即 $UU^T&#x3D;U^TU$<ul>
<li>考虑 结果的对角线上的两边相等，可推出$U$是对角矩阵<ul>
<li>所以$A$是 对称矩阵</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>任意复矩阵一定相似于一个上三角矩阵</p>
<ul>
<li>类似的： 归纳法+分块</li>
</ul>
<p>$A&#x3D;-A^T$ 则 特征多项式在复数域的根为 0 或 纯虚数</p>
<ul>
<li>特征值+共轭 &#x3D;&gt; $(\lambda+\bar{\lambda})\alpha^T\bar{\alpha}&#x3D;0$</li>
</ul>
]]></content>
      <categories>
        <category>高等代数</category>
      </categories>
      <tags>
        <tag>高等代数</tag>
        <tag>矩阵相抵</tag>
        <tag>矩阵相似</tag>
        <tag>广义逆矩阵</tag>
        <tag>Penrose方程组</tag>
        <tag>特征值</tag>
        <tag>特征向量</tag>
        <tag>可对角化</tag>
        <tag>实对称矩阵</tag>
      </tags>
  </entry>
  <entry>
    <title>高等代数 七 多项式环</title>
    <url>/Math/Advanced_algebra_7/</url>
    <content><![CDATA[<p>视频066-085</p>
<h1 id="多项式环"><a href="#多项式环" class="headerlink" title="多项式环"></a>多项式环</h1><p>半群, 集合G,运算$\oplus$， 例如: 正整数 与 加法</p>
<ul>
<li>封闭性: $\forall a,b \in G, a\oplus b\in G$</li>
<li>结合律: $\forall a,b,c, (a\oplus b)\oplus c &#x3D; a\oplus (b \oplus c)$</li>
</ul>
<p>幺半群： 半群+幺元: 零元（幺元）: $\forall a, 0\oplus a &#x3D; a &#x3D; a\oplus 0$ </p>
<ul>
<li>例如所有非负整数 与 加法</li>
</ul>
<p>群: 幺半群 + 逆元, $\forall a, \exists b, a\oplus b&#x3D;0&#x3D;b\oplus a$ </p>
<ul>
<li>有了逆元可以 用语法糖定义减法，</li>
<li>例如所有整数与加法，<ul>
<li>注意的是 加法是有交换律的</li>
</ul>
</li>
<li>这里一个例子是 排列， S_3 &#x3D; { (123),(132),(213),(231),(312),(321) }, 其中 $ijk$ 表示把第1个放到i，第2各放到j,第3各放到k<ul>
<li>$(a_1a_2a_3)\oplus (b_1b_2b_3) &#x3D; (a_{b_1}a_{b_2}a_{b_3})$</li>
<li>封闭性显然 因为每次取出1,2,3放回也是3个位置</li>
<li>幺元 (123)</li>
<li>逆元 $(a_1a_2a_3)$的逆元$B[a_1]&#x3D;1,B[a_2]&#x3D;2,B[a_3]&#x3D;3$</li>
<li>不满足交换律</li>
<li>$(a&#x3D;(132))\oplus(213) &#x3D; (a_2a_1a_3) &#x3D;(312)$</li>
<li>$(a&#x3D;(213))\oplus(132) &#x3D; (a_1a_3a_2) &#x3D;(231)$</li>
</ul>
</li>
</ul>
<p>交换群(阿贝尔群): 群+交换律, $\forall a,b, a\oplus b&#x3D;b\oplus a$ </p>
<ul>
<li>例如所有整数与加法</li>
</ul>
<p>环，集合G,运算$\oplus,\otimes$, 例如整数环 与 加法 乘法</p>
<ul>
<li>$&lt;G,\oplus&gt;$ 是交换群</li>
<li>分配率(特殊！不是群相关的性质) $\forall a,b,c, a\otimes(b\oplus c)&#x3D;(a\otimes b)\oplus (a\otimes c)$</li>
<li>$&lt;G,\otimes&gt;$ 是幺半群</li>
</ul>
<p>域, 集合G,运算$\oplus,\otimes$ 没有整数域，因为整数的幺元是1, 比如2在整数中没有逆元，有理数域</p>
<ul>
<li>$&lt;G,\oplus&gt;$ 是交换群</li>
<li>分配率(同上)</li>
<li>$&lt;G,\otimes&gt;$ 是交换群， 除去$&lt;G,\oplus&gt;$的零元 均有$\otimes$ 逆元<ul>
<li>于是可以用语法糖定义除法</li>
</ul>
</li>
</ul>
<p>&lt;–more–&gt;</p>
<h2 id="一元-多项式"><a href="#一元-多项式" class="headerlink" title="一元 多项式"></a>一元 多项式</h2><p>$\sum_{i&#x3D;0}^n a_ix^i$</p>
<p>系数$a_0\cdots,a_{n}\in K$数域$K$</p>
<ul>
<li>表法唯一<ul>
<li>如果如此形式的表达式 相等，当且仅当它们有完全相同的项（除去系数为0的项)</li>
<li>称作 数域K的一个一元多项式</li>
</ul>
</li>
<li>系数全为0的多项式称作 零多项式 记作 0</li>
<li>deg f(x) &#x3D; 最高系数非零对应的次数， 零次多项式 不含 零多项式 &#x3D; K中的非零元<ul>
<li>deg非零常数 &#x3D; 0</li>
<li>$deg 0 &#x3D; -\infty$</li>
</ul>
</li>
<li>K[x]&#x3D;{一元多项式}<ul>
<li>加法 同次数系数对应相加, 满足交换律，结合律，有零元，有逆元</li>
<li>乘法 系数卷积形式，</li>
<li>数量乘法， 所有系数乘上k</li>
<li>因为满足 线性法则，所以对于 加法和数量乘法 成为数域K上一个先行空间<ul>
<li>基 : {1,x,x^2,x^3…} 线性唯一表出所有， 一个无限维的线性空间</li>
<li>那么它的任意有限子集 也线性无关</li>
</ul>
</li>
<li>K[x] 中乘法 满足律 交换律，对加法有分配率<ul>
<li>deg(f(x)) + g(x)) &lt;&#x3D; max(deg(f(x)),deg(g(x)))<ul>
<li>两个次数不等式 取等</li>
<li>次数相等时可能相等 可能 更小（抵消掉）</li>
</ul>
</li>
<li>deg(f(x)g(x)) &#x3D; deg(f(x))+deg(g(x)), 这个 也是把 deg 0 设为-infty的好处而不是-1<ul>
<li>推论 f(x)!&#x3D;0 g(x)!&#x3D;0 则 f(x)g(x)!&#x3D;0</li>
<li>推论 f(x)g(x)&#x3D;0 则 f(x)&#x3D;0或g(x)&#x3D;0</li>
</ul>
</li>
</ul>
</li>
<li>类似的 整数, n阶矩阵(没有乘法的交换律), 偶数（没有单位元）<ul>
<li>抽象出环的概念<ul>
<li>2个代数运算 +, * 满足<ul>
<li>加法<ul>
<li>运算封闭</li>
<li>结合律 (a+b)+c&#x3D;a+(b+c)</li>
<li>交换律 a+b&#x3D;b+a</li>
<li>零元: 0+a&#x3D;a+0&#x3D;a</li>
<li>逆元: 对于a存在b, a+b&#x3D;b+a&#x3D;0</li>
</ul>
</li>
<li>乘法<ul>
<li>运算封闭</li>
<li>结合律 ab&#x3D;ba</li>
<li>对于加法的分配<ul>
<li>a(b+c)&#x3D;ab+ac</li>
<li>(b+c)a&#x3D;ba+ca</li>
</ul>
</li>
</ul>
</li>
<li>则称作环</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="一元多项式环的概念和性质"><a href="#一元多项式环的概念和性质" class="headerlink" title="一元多项式环的概念和性质"></a>一元多项式环的概念和性质</h2><p>R是一个环</p>
<p>减法： 不过是加法和逆元的一个 语法糖？</p>
<ul>
<li>交换环：如果乘法满足交换律</li>
<li>单位元(乘法的零元，不一定有例如素数环，偶数环): R中有一个元素e, 对于a\inR,  ea&#x3D;ae&#x3D;a</li>
<li>对于a\in R,如果存在非零b,使得 ab&#x3D;0, 则a是一个左零因子<ul>
<li>ba&#x3D;0 右零因子，（通称零因子），例如 矩阵中的 <code>[0,1;0,0]</code>， 这是乘法中的定义</li>
<li>零元（加法的零元） 是零因子<ul>
<li>0&#x3D;0a+(-0a)&#x3D;(0+0)a+(-0a)&#x3D;0a+0a+(-0a)&#x3D;0a+0&#x3D;0a</li>
</ul>
</li>
</ul>
</li>
<li>子环：<ul>
<li>环R中一个非空子集R1,如果对于R的 加法 乘法运算 也成为一个环，则称作子环<ul>
<li>也就是 保持运算规则，但集合是子集合，那么 环&lt;子集合,加,乘&gt;是 环&lt;集合,加,乘&gt;的 子环</li>
</ul>
</li>
<li>充要条件 a,b\in R1, 可推出 a+(-b) \in R1, ab\in R1 <ul>
<li>方便验证是不是环</li>
<li>K[给定n阶矩阵] ，是有单位元I的交换环</li>
</ul>
</li>
</ul>
</li>
<li>k和kI 双射 保持 加法 乘法<ul>
<li>也就是 元素双射，然后运算有对应的运算（注意！集合不同 加法&#x2F;乘法一定不同，集合相同，加法乘法也可以不同）</li>
<li>称作 同构映射<ul>
<li>例如 i 与-i映射，i与2i映射</li>
<li>如果 环R和环R‘有一个同构映射 $\sigma$ 且R有单位元e，则sigma(e)是R’的单位元</li>
<li>同构映射的用处 是 例如 简单的运算研究其延伸规则时， 对应的抽象复杂也同样的效果，例如 多项式 $(x+3)^2&#x3D;x^2+6x+9$,那么 <code>K[A]</code>和多项式 同构的话, $(A+3I)^2&#x3D;A^2+6A+9I$, 整个都是在“证明 这种带入的数学合法性”<ul>
<li>类似的，如果两个 域 同构，那么一个域的子域，按照同样的“同构映射” 能得到另一个域的 子域，并且和前一个子域是“同构映射”</li>
<li>所以这种玩意使用的时候，一个很重要的是延伸结论时 其抽象的最小依赖是什么，例如 矩阵运算对于乘法没有交换律，所以如果延伸结论有用到交换律，那么对应的映射不一定成立，</li>
<li>再更不数学一点，就是平时打比方举例的感觉，而现实中很多时候 并不足够的同构</li>
</ul>
</li>
<li>注意 其中的x, k[A]的A，在研究结构的时候都是不具体运算的，要保持其相关内容“基”的性质</li>
<li>扩环<ul>
<li>$\sigma: K[x]\to R$</li>
<li>$f_{K[x]}(x)&#x3D;\sum_{i&#x3D;0}^n a_ix^i \to f_R(t) \sum_{i&#x3D;0}^n \tau(a_i)t^i$</li>
<li>感觉7的定理1的 证明有点多于，感觉从 “同构的” 角度讲，把 集合，运算 全部都能看成参数，那么参数对应了 就能证明了？</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="7-2-整除关系，带余除法"><a href="#7-2-整除关系，带余除法" class="headerlink" title="7.2 整除关系，带余除法"></a>7.2 整除关系，带余除法</h2><ul>
<li>$K[x]$ 整除:<ul>
<li>整除符号 还是 左 | 右 表示 <code>右=左*?</code></li>
<li>注意 这是多项式 中的整除<ul>
<li>f(x) | g(x) 且 g(x) | f(x) 那么相伴，并不是相等<ul>
<li>例如 2 | 1 且  1 | 2 在多项式中的“整除”定义上是对的</li>
<li>说明两个 多项式deg相等，成数量倍数关系</li>
</ul>
</li>
</ul>
</li>
<li>f(x)可以表示成 $f(x)&#x3D;g(x)h(x)$ 那么 g(x)能整除f(x)<ul>
<li>特殊的 任何 零多项式 能整除 零多项式<ul>
<li>0&#x3D;0f(x)</li>
</ul>
</li>
<li>$\mathrm{deg} g(x) \le \mathrm{deg} f(x)$</li>
</ul>
</li>
<li>g(x) | f_i(x) 则 g(x) | \sum ui(x)fi(x)</li>
</ul>
</li>
<li>也可以定义带余除法了<ul>
<li>f(x)&#x3D;h(x)g(x)+r(x), g(x) !&#x3D;0, deg r(x) &lt; deg g(x),</li>
<li>整除 关系不会随着 域扩大而改变<ul>
<li>因为h，r 属于小的域 也就属于更大的域, 两个表法唯一，扩域 不会产生多射</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>书上7.2 多 整数环 和 整环R上的矩阵</p>
<p>来到整数环 a&#x3D;qb+r, 0&lt;&#x3D;r&lt;|b|, 给定整数a,b , 存在唯一一对整数 (q,r)</p>
<ul>
<li>这玩意能和 多项式映射吗？</li>
</ul>
<hr>
<p>未来章节9.8会用到</p>
<p>定义3 R是整环，由R中sn个元素排成s行n列的一张表，称为R上的一个$s\times n$矩阵</p>
<ul>
<li>可以定义 R上矩阵的 加法&#x2F;纯量乘法（矩阵乘以R中的元素）&#x2F;乘法 这3种运算</li>
<li>可以定义3种初等 行列变换（这里稍微注意的是，乘的时候乘可逆元，而 跨行乘加的时候可以h(lambda) ）</li>
<li>可以类似的定义行列式</li>
<li>可以定义可逆矩阵概念，注意 可逆矩阵 的充要是 |A|为R中可逆元</li>
</ul>
<p>定义4, A是整环R上一个非零矩阵，如果A有一个r阶子式不为0,而所有r+1阶子式（如果有的话）权威0,那么称作A的秩为r.零矩阵秩规定为0</p>
<ul>
<li>如果 $A(\lambda)$ 能够经过一系列初等变换变成$B(\lambda)$ ，那么称 他们相抵</li>
</ul>
<p>定理3 任意一个非零n级$\lambda-$矩阵一定相抵于对角$\lambda-$矩阵, diag {$d_1(\lambda),d_2(\lambda),\cdots,d_n(\lambda)$}</p>
<ul>
<li>其中 $d_i(\lambda)|d_{i+1}(\lambda)$</li>
<li>且对于非零的$d_i(\lambda)$其最高次系数为1，</li>
<li>称作相抵标准形</li>
</ul>
<p>证明：归纳法</p>
<p>n&#x3D;1 时，只需 乘上 首相系数的逆元</p>
<p>对于n&gt;1,</p>
<ul>
<li>若 第一行，第一列全为0,则 归纳成立</li>
<li>否则 至少一个不为0,可以交换使得 $a_{11} \neq 0$</li>
<li>令 S&#x3D;{$G(\lambda) | G(\lambda)与 A(\lambda)相抵，且g_{11}(\lambda)\neq 0$}<ul>
<li>在S中取$B(\lambda)$,其中$deg b_{11}(\lambda)\le deg g_{11}(\lambda),\forall g_{11}(\lambda)\neq 0$ 也就是 S中的所有矩阵中 1行1列多项式的deg最小的那个，且$b_{11}$最高次系数为1</li>
<li>希望能证明，这样的$b_{11}(\lambda)$ 整除第一行第一列所有元素<ul>
<li>什么工具呢，带余除法，如果不是倍数，那么可以用带余除法得到更小deg的 $\lambda$表达式，再交换就行，和上面找最小deg的矛盾</li>
<li>那么一旦能整除，则可以初等变换，让第一行 第一列除了它全为0,剩下的就可以归纳变换了</li>
<li>而归纳变换以后 得到的是 diag {b11 , … 归纳的对角，} &#x3D; diag{b11,d2,d3,….}</li>
<li>如果 b11 不是 d2的因数<ul>
<li>对于左上角2x2的区域可以 <code>[b11,0;0,d2]=&gt;[b11,d2;0,d2]=&gt; [b11,剩余r;0,d2]</code> 还是带余除法，这样又能得到更小的矛盾</li>
<li>所以 b11是d2的因数</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>定理4. 把上面的定理3是 lambda多项式环，换成整数环，所以对于一般的矩阵相抵于一个 对角整数矩阵，且有对角约数关系</p>
<h2 id="7-3-最大公因式"><a href="#7-3-最大公因式" class="headerlink" title="7.3 最大公因式"></a>7.3 最大公因式</h2><p> 公因式</p>
<ul>
<li>c(x) | f(x), c(x) | g(x)</li>
<li>最大公因式 任意c(x) | d(x) ,且 d(x)是公因式<ul>
<li>关于0的：<ul>
<li>f(x) | 0</li>
<li>0 | 0</li>
</ul>
</li>
<li>存在性: 辗转相除法 证明 f和g的公因式 和 r与r的公因式 一样<ul>
<li>同时得到 能表示成 u(x)f(x)+v(x)g(x)&#x3D;d(x)</li>
</ul>
</li>
<li>性质 首个系数&#x3D;1的最大公因式 唯一， deg 唯一</li>
<li>互素：(f(x),g(x))的最大首一公因式 &#x3D; 1<ul>
<li>同时得到 能表示成 u(x)f(x)+v(x)g(x)&#x3D;1 充要</li>
<li>互素性 同样不随着数域扩大而改变</li>
</ul>
</li>
<li>f(x) | g(x)h(x), (f(x),g(x)) 则 f(x) | h(x) 这里证明了很多 数论里面会证明的东西，所以如果有一个东西能建立 多项式 和 整数之间的 同构关系就好了，</li>
</ul>
</li>
</ul>
<p>四、最大公因式应用之一： lambda-矩阵的行列式因子</p>
<p>定义6 设A(lambda)是一个sxn lambda-矩阵 ，对于A(lambda)的所有k阶子式的首一最大公因式D_k(lambda)称为A(lambda)的k阶行列式因子</p>
<p>定理6,相抵的lambda-矩阵，它们的秩相等， 并且各阶行列式因子也对应相等</p>
<ul>
<li>A-&gt; j行+&#x3D;k * i行 得到 B<ul>
<li>那么B中 不含j行的行列式不变</li>
<li>B中含有j行 那么行列式 &#x3D; 原来的B + 原来的j行替换成h(lambda) * i行<ul>
<li>如果包含i行，那么 行列式不变</li>
<li>如果不包含i行，那么是 （原来的+ h(lambda) * 原来的替换成i行)<ul>
<li>注意到 gcd(原来的B，原来的替换成i行) &#x3D; gcd(原来的B+h(lambda) * 原来的替换成i行，原来的替换成i行) 所以 总的gcd不变</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>定理7. n级 lambda-矩阵 A(lambda)的相抵标准型是唯一的</p>
<p>定义7：相抵标准型主对角线上 非零元 称为 A(lambda)的不变因子</p>
<p>定理8 两个矩阵相抵，充要条件，有相同的不变因子，或者有相同的各阶行列式因子</p>
<h2 id="7-4-不可约多项式"><a href="#7-4-不可约多项式" class="headerlink" title="7.4 不可约多项式"></a>7.4 不可约多项式</h2><p>注： 这玩意儿的性质像整数里的素数</p>
<p>不可约定义：f(x)只有K中非零数，和f(x)的相伴元（非零数系数倍数的）是它的因式</p>
<ul>
<li>还是 想不出一个映射，能 完成 整数和多项式之间的映射，感觉好难受啊，处处都很像 但想不出一个映射<ul>
<li>一个点是 像整数加法中 1+1&#x3D;2 ，变到了乘法的两个不同元</li>
<li>而 在多项式中 (x+x&#x3D;2x) 是一个相伴多项式，并没有变成乘法的两个不同元，所以似乎没法同构？</li>
</ul>
</li>
</ul>
<p>$p(x)\in K[x]$ 中一个次数大于0的多项式，以下等价</p>
<ul>
<li>$p(x)$是不可约多项式</li>
<li>$\forall f(x)\in K[x]$有$p(x)|f(x)$或$(p(x),f(x))&#x3D;1$</li>
<li>在$K[x]$中，从$p(x)|f(x)g(x)$可推出 $p(x)|f(x)$或$p(x)|g(x)$</li>
</ul>
<p>推论：</p>
<ul>
<li>p(x)|f(x),且p(x)不可约 那么p(x)|f(x)中的某个因式</li>
<li>K[x] 中 一次多项式不可约</li>
</ul>
<p>教材上这里 定义2,定理3,定理4 也就是 数论中整数的对应的一些命题</p>
<p>唯一因式分解定理(这个也是和整数的 唯一分解很像)</p>
<ul>
<li>$f(x)&#x3D;p_1(x)p_2(x)\cdots p_s(x)&#x3D;q_1(x)q_2(x)\cdots q_s(x)$ 的表示,s固定，适当排列后$p_i(x)\sim q_i(x)$</li>
<li>归纳法：<ul>
<li>如果$f(x)&#x3D;g(x)h(x)$ 可分解，则f可分解</li>
<li>如果f&#x3D;prod p &#x3D; prod q,考虑p的最后一个，一定有q中是它的倍数，而q不可分解，所以p是 对应的q的倍数，两个相伴，两边同时去掉p,q剩余根据归纳唯一分解，也有s唯一</li>
</ul>
</li>
</ul>
<p>综上：</p>
<ul>
<li>带余除法</li>
<li>最大公因式</li>
<li>互素</li>
<li>不可约多项式</li>
<li>唯一因式分解定理</li>
</ul>
<h2 id="7-5-重因式"><a href="#7-5-重因式" class="headerlink" title="7.5 重因式"></a>7.5 重因式</h2><p>$p^k(x) | f(x),p^{k+1}(x) \not{|} f(x),k &gt; 1$, k重多项式</p>
<p>定义2 <code>K[x]</code>中多项式 的一阶导数: $f’(x)&#x3D;\sum_{i&#x3D;1}^n  ia_ix^{i-1}$</p>
<ul>
<li>分配率 (f+g)’&#x3D;f’+g’</li>
<li>数乘 (cf)’&#x3D;c(f’)</li>
<li>乘法 (fg)’&#x3D;f’g+fg’</li>
<li>整幂次复合运算 $(f^m(x))’&#x3D;mf^{m-1}(x)f’(x)$</li>
</ul>
<p>定理1:</p>
<ul>
<li>p(x)是f(x)的k重因式，那么p(x)是f’(x)的k-1重因式</li>
</ul>
<p>推论:</p>
<ul>
<li>p(x)是f(x)的重(&gt;1)因式,当且仅当 p(x) | (f(x),f’(x))</li>
<li>(f(x),f’(x)) \neq 1 &lt;&#x3D;&gt; f(x)有重因式 </li>
<li>f(x)\in K[x] 有无有重因式，不会随着数域扩大而改变</li>
</ul>
<h2 id="7-6-多项式的根，复数域上的不可约多项式"><a href="#7-6-多项式的根，复数域上的不可约多项式" class="headerlink" title="7.6 多项式的根，复数域上的不可约多项式"></a>7.6 多项式的根，复数域上的不可约多项式</h2><p>定理一</p>
<ul>
<li>$f(x)&#x3D;h(x)(x-a)+f(a)$, 也就是f(x)除以x-a的余项是f(a)</li>
<li>x-a|f(x) &lt;&#x3D;&gt; f(a)&#x3D;0</li>
</ul>
<p>定义1：K是数域，R是一个有单位元的交换环，且R可看成K的一个扩环，$f(x)\in K[x]$, 如果有$c\in R$使得$f(c)&#x3D;0$那么称c是在R中的一个根</p>
<ul>
<li>f(x)在实数域，和复数域中的根分别称为 复根和实根</li>
<li>$f(x)\in Q[x]$ 则 称作有理根</li>
</ul>
<p>定理2（Bezout定理） <code>K[x]</code>中,x-a是f(x)的一次因式 当且仅当 a是f(x)在K中的一个根</p>
<ul>
<li>对应 重因式的定义重根</li>
<li>注意的是 这里的假设是 $f(x)&#x3D;k \prod_{i&#x3D;1\to s} (x_i-c_i)^ri * \prod_{j&#x3D;s+1\to t} p_j(x)^rj$ 也就是分解成<ul>
<li>系数k</li>
<li>首一的一次因式的重幂次写法</li>
<li>首一的大于一次的不可分解因式的幂次写法</li>
</ul>
</li>
</ul>
<p>定理3. K[x]中n次 多项式 f(x)在K中之多有n个根</p>
<p>定理4：$f(x),g(x)\in K[x]$ 次数不超过n,如果有n+1各不同的 $c_{1\to n+1}$使得$f(c_i)&#x3D;g(c_i)$ 则两个相等</p>
<ul>
<li>考虑差 有n+1重根，所以差只能是0</li>
<li>这里， 可以把 多项式 映射到 一元多项式函数，其定义域是K<ul>
<li>这是从$K[x]$到 $K_{pol}$的一个映射</li>
</ul>
</li>
<li>函数的加法 和 乘法 有对应的映射</li>
<li>多项式 是表达式， 函数是映射，现在是把 （表达式）映射到（映射）</li>
</ul>
<p>定理5：数域K上的两个多项式f(x)与g(x)如果不相等，那么它们的诱导的多项式函数f,g也不相等</p>
<ul>
<li>函数如果相等，有无穷多元素a,使得 f(a)&#x3D;g(a) 根据上面的，两个多项式相等</li>
</ul>
<p>定义2, 设R和R‘是两个换，如果存在 R到R’的一个双射$\sigma$，保持加法和乘法运算，</p>
<p>$\sigma(a+<em>R b)&#x3D;\sigma(a)+</em>{R’}\sigma(b)$</p>
<p>$\sigma(a*<em>R b)&#x3D;\sigma(a)*</em>{R’}\sigma(b)$</p>
<p>那么是一个同构映射，换是同构的 $R\simeq R’$, 上面有$K[x]\simeq K_{pol}$</p>
<p>可以用 函数值f(a)&#x3D;0来研究 不可约多项式</p>
<hr>
<p>研究复数域多项式中不可约多项式有哪些</p>
<p>$f(x)&#x3D;\sum_{i&#x3D;0}^n a_ix^i \in C[x], \mathrm{deg} f(x)&#x3D;n &gt; 0$</p>
<p>若$f(x)$无复数根,$\forall z\in C,f(z)\neq 0$,$\Phi(z)&#x3D;\frac{1}{f(z)}$的定义域为$C$</p>
<ul>
<li>$\Phi(x)$ 在复平面上 每个点都有导数(在每个点解析)，在复平面上 “解析”</li>
</ul>
<p>$z&#x3D;r(\cos\theta+i\sin\theta)$</p>
<p>$z^n&#x3D;r^n(\cos n\theta+i\sin n\theta)$</p>
<p>$|z|\to +\infty$时</p>
<p>$f(z)&#x3D;|\sum_{i&#x3D;0}^n a_iz^i|$</p>
<p>$\ge |a_nz^n|-|\sum_{i&#x3D;0}^n a_iz^i|$ 三角定理</p>
<p>$\ge |a_n||z|^n-(\sum_{i&#x3D;0}^n |a_i||z|^i)$</p>
<p>$\lim_{|z|\to +\infty}\Phi(z) &#x3D;\frac{\frac{1}{|z|^n}}{a_n+…}\to 0$ 高数的证明过程 就是去钦定一个max,把小的部分消掉</p>
<p>存在$r &gt; 0,M_1 &gt;0$使得$|z|&gt;r$有$|\Phi(z)|\le M_1$ 从而有界闭集 $|z|\le r$中 有上界</p>
<p>根据 复变函数Liouvill定理？？？？？？: 在复平面C上解析且有界的函数必为常值函数，所以$\Phi(z)&#x3D;b$, 所以f(x)必有复根</p>
<p>Liouville定理 <a href="https://zhuanlan.zhihu.com/p/393074166">https://zhuanlan.zhihu.com/p/393074166</a></p>
<p>定理6：代数基本定理：每一个次数大于0的复系数多项式至少一个复根</p>
<ul>
<li><code>C[x]</code>中不可约多项式只有一次多项式</li>
<li>n次有n个根</li>
</ul>
<p>定理7：复系数多项式唯一因式分解定理</p>
<ul>
<li>$f(x)&#x3D;k\prod (x-c_i)^l_i$</li>
</ul>
<h2 id="7-7-实数域上的不可与多项式，实系数多项式的实根"><a href="#7-7-实数域上的不可与多项式，实系数多项式的实根" class="headerlink" title="7.7 实数域上的不可与多项式，实系数多项式的实根"></a>7.7 实数域上的不可与多项式，实系数多项式的实根</h2><p>$f(x)&#x3D;\sum_{i&#x3D;0}^na_ix^i\in\mathbb{R}[x]$</p>
<p>如果有复根c,则c的共轭也是根</p>
<ul>
<li>$f(c)&#x3D;0$说明复部为0,$f(\bar{c})&#x3D;\bar{f(c)}&#x3D;\bar{0}&#x3D;0$</li>
</ul>
<p>不可约多项式:</p>
<ul>
<li>1次多项式</li>
<li>判别式小于0的二次多项式 &#x3D;&gt; 有复根</li>
</ul>
<p>任取R上一个不可约多项式$p(x)$</p>
<ul>
<li>如果有实根c &#x3D;&gt; x-c 和p(x)相伴</li>
<li>如果有复根c &#x3D;&gt; $(x-c)(x-\bar{c}) |p(x)$<ul>
<li>共轭成对出现</li>
<li>而$(x-(a+bi))(x-(a-bi))&#x3D;x^2-2ax+a^2-b^2$<ul>
<li>所以p(x)和这个相伴</li>
</ul>
</li>
</ul>
</li>
<li>从而 实系数多项式的唯一因式分解定理<ul>
<li>f(x) &#x3D; k \prod 一次式 \prod 判别式小于0的二次式</li>
</ul>
</li>
</ul>
<h2 id="7-8-有理数域上的不可约多项式"><a href="#7-8-有理数域上的不可约多项式" class="headerlink" title="7.8 有理数域上的不可约多项式"></a>7.8 有理数域上的不可约多项式</h2><p>$f(x)\in Q[x]$</p>
<p>考虑乘上 分母的倍数 可以变成整系数多项式</p>
<p>定义1. 如果一个非零整系数多项式g(x)如果各项系数 因数只有 $\pm 1$, 那么称作本原多项式</p>
<ul>
<li>唯一性</li>
</ul>
<p>研究 相伴的本原多项式</p>
<p>性质2：高斯(Gauss)引理, 本原多项式的乘积是本原多项式</p>
<ul>
<li>一个p能整除 fg的所有系数，但是不能整除f,g的所有系数，考虑 (f的最小不能整除p的) 和 (g最小不能整除p的) 对应的位置，可得矛盾</li>
</ul>
<p>性质3：一个本原多项式可约，当且仅当能分解成两个次数较低本原多项式的乘积</p>
<ul>
<li>f&#x3D;gh &#x3D;&gt; f&#x3D;g本原 * h本原 * 常数逆操作 &#x3D; (g本原 * h本原) * 常数逆操作， 因此常数逆操作只能是$\pm 1$</li>
</ul>
<p>性质4： 本原多项式唯一分解</p>
<hr>
<p>整系数多项式的有理根：</p>
<p>$f(x)&#x3D;\sum_{i&#x3D;0}^n a_ix^i$ 是一个整系数多项式</p>
<p>定理1: 如果$\frac{q}{p}$是一个有理根，$(p,q)&#x3D;1$,那么$p|a_n,q|a_0$</p>
<ul>
<li>本原化更好, &#x3D;&gt;(px-q)是 本原因式</li>
</ul>
<hr>
<p>整系数多项式在Q上不可约的判别法</p>
<p>二次，三次 在Q上不可约 当且仅当它没有有理根（因为如果能分解 至少会分解出一个一次的因式 同时还是本原多项式）</p>
<p>四次及以上，如果没有有理根可能有2次及以上的因式</p>
<p>如果$f(x)&#x3D;(\sum_{i&#x3D;0}^m b_ix^i)(\sum_{j&#x3D;0}^t c_jx^j)$， 且存在一个素数p能整除$f(x)$除了最高次的所有系数</p>
<ul>
<li>从而 类似上面的拆解，如果 考虑最大$i$, $p| b_{0..i}$,从而$p | a_{i+1}$推出 $p|b_{i+1}c_0$,从而$p|c_0$</li>
</ul>
<p>定理2： Eisenstein判别法</p>
<ul>
<li>存在素数p 整除除去最高次的所有系数</li>
<li>$p^2 \not{|} a_0$</li>
<li>那么它不可约，（注意 第一条性质导致有些本原多项式无法用这个办法判断例如 $x^2+2x+3,x^2+5x+6$）<ul>
<li>一个办法是 考虑 g(x)&#x3D;f(x+b), b通常取1&#x2F;-1</li>
</ul>
</li>
<li>这个结论能推出存在任意次数的本原多项式<ul>
<li>$x^n+2x^{n-1\to 0}$</li>
<li>$x^n+p$</li>
</ul>
</li>
</ul>
<p>定理3：颠倒一下0次和n次</p>
<ul>
<li>$p^2\not{|} a_n$</li>
<li>$p\not{|} a_0$</li>
<li>$p | a_{1\cdots n}$</li>
<li>很好证明 $x^nf(1&#x2F;x)$</li>
</ul>
<h2 id="7-9-多元多项式环"><a href="#7-9-多元多项式环" class="headerlink" title="7.9 多元多项式环"></a>7.9 多元多项式环</h2><p>似乎视频课上没有这个</p>
<p>n圆多项式概念 </p>
<p>圆: $x^2+y^2-r^2&#x3D;0$</p>
<p>球: $x^2+y^2+z^2-r^2&#x3D;0$</p>
<p>$\sum_{i_1,\cdots,i_n} a_{i_1,\cdots,i_n} \prod_{j&#x3D;1}^n x_{j}^{i_j}$ 也就是下标区分x,下标对应的幂次 区分项，每个项有具体的系数</p>
<p>deg 单项式 &#x3D; $\sum_{i_j}$, deg 0 &#x3D; -infty</p>
<p>deg f &#x3D; 最大的 $\max_{deg 单项式}$</p>
<p>一个排序法是按照 幂次的有序数组的字典序</p>
<p>加法&#x2F;乘法： 经典的定义</p>
<p>定理1：f,g首项的乘积 &#x3D; 乘积fg的首项， 因为按字典序从大到小排列， 从幂次依次评断可用归纳+反证法易得</p>
<ul>
<li>所以非零多项式的乘积一定是非零多项式</li>
<li>因此fg&#x3D;0，那么f&#x3D;0或g&#x3D;0</li>
</ul>
<p>定义2：m次齐次多项式，每个系数不为零的多项式的单项式次数都是m次的</p>
<ul>
<li>m次齐次多项式 * n次齐次多项式 &#x3D; m+n 次齐次多项式 (m+n)</li>
<li>任意m次 多项式 可以唯一拆分成，$\sum_{i&#x3D;0}^m (i次多项式)$</li>
</ul>
<p>deg (d + g) &lt;&#x3D; max (deg(f),deg(g))</p>
<p>deg (fg) &#x3D;deg g + deg g</p>
<p>定理3, K是一个数域，R是一个有单位元的交换环，并且R可以看成一个ieK的一个扩环（即R有一个子环R1与K同构，且R的单位元是R1的单位元，K到R1的同构映射记作$\tau$</p>
<ul>
<li>还是 系数同构 和 x的关系的同构，同时映射了运算以及 元素，</li>
</ul>
<p>n元多项式函数： 从多项式 到 多项式函数 的映射</p>
<p>定理4： 非零多元多项式的诱导函数一定不是零函数</p>
<ul>
<li>按次数归纳法+拆分法可证</li>
</ul>
<p>定理5： 两个n元多项式相等， 当且仅当他们的诱导函数相等 </p>
<ul>
<li>人话一点 其实和前面1元多项式一样的</li>
<li>n元多项式相等的定义是 对应系数相等</li>
<li>而函数相等的定义是，任意输入 输出相等</li>
<li>所以证明这两个充要关系就好了</li>
</ul>
<p>五. 1964年H.Hironaka引进了n元多项式的出发算法。1965年，b. Buchbergerr引进了项目、序概念</p>
<p>定义3. 整除： 同样的类似定义 f&#x3D;gh如果有表示法，那么g能整除f</p>
<ul>
<li>相伴：有系数倍关系，类似的</li>
<li>但是没有带余除法，所以没有辗转相除法，可以有最大公因式的定义，和互素的定义</li>
<li>不可约多项式，只有非零数和相伴元是它的因式<ul>
<li>当且仅当不可分解成两个次数较低的多项式乘积</li>
</ul>
</li>
<li>唯一因式分解定理<ul>
<li>f&#x3D;系数 \prod 首1因式：标准分解式</li>
<li>由此 如果有办法分解，那么就能快速得到最大公因式，但是没有“容易实践的分解办法”</li>
</ul>
</li>
</ul>
<h2 id="7-10-对称多项式"><a href="#7-10-对称多项式" class="headerlink" title="7.10 对称多项式"></a>7.10 对称多项式</h2><p>$f(x_1,x_2,x_3)&#x3D;x_1^3+x_2^3+x_3^3+x_1^2x_2+x_1^2x_3+x_2^2x_3+x_1x_2^2+x_1x_3^2+x_2x_3^2$</p>
<p>这就是中学学的 齐次轮换，不过这里连齐次好像没有强求</p>
<p>$n$元对称多项式: 对于x的任意排列有$f(x_1,\cdots,x_n)&#x3D;f(x_{p_1},\cdots,x_{p_n})$， 则称为n元对称多项式</p>
<p>$\sigma_1(x_1,\cdots,x_n)&#x3D;\sum_{i&#x3D;1}^n x_i$ 因为出现一个其它都要出现</p>
<p>$\sigma_2(x_1,\cdots,x_n)&#x3D;\sum_{i&#x3D;1}^n \sum_{j&#x3D;i+1}^n x_ix_j$, 这里没有平方项</p>
<p>$\sigma_k(x_1,\cdots,x_n)&#x3D;\sum \prod_{j&#x3D;1,t_{j}&lt;t_{j+1}}^k x_{t_j}$ 类似的</p>
<p>$\sigma_n(x_1,\cdots,x_n)&#x3D;\prod_{i&#x3D;1}^n x_i$</p>
<p>上面称作初等对称多项式</p>
<hr>
<p>对称多项式 对加法乘法封闭</p>
<p>对称多项式 是$K[x_1,\cdots,x_n]$ 的一个子环</p>
<p>$f_i$是初等对称多项式，g是任意多项式</p>
<ul>
<li>那么$g(f_1,\cdots,f_n)$是对称多项式，即 初等对称多项式的的多项式 仍是 对称多项式<ul>
<li>易证：带入不同顺序时，注意到g的输入没有变</li>
</ul>
</li>
<li>$g(\sigma_1,\cdots,\sigma_n)$ 也是对称多项式</li>
</ul>
<p>定理1： 对称多项式基本定理，任意一个n元对称多项式f,存在唯一g,使得$f&#x3D;g(\sigma_1,\cdots,\sigma_n)$</p>
<ul>
<li>那么考虑f的首项，因为f对称，所以一定有对称的 幂次非严格单调递减的存在，所以首项的幂次一定也非严格单调递减</li>
<li>那么 如果首项为 $k \prod_{i&#x3D;1}^n a_i^{l_i}$<ul>
<li>那么 $\Phi&#x3D;k\prod_{i&#x3D;1}^n \sigma_i^{l_i-l_{i+1}}$ 的首项和 这个相等,其中$l_{n+1}&#x3D;0$</li>
<li>显然 它是对称的，显然它的每个单项的系数在f中相等，因此 $f-\Phi$ 剩下的不包含这个轮换项 且同样是对称，那么这个下降???是有限次数的，所以总可以<ul>
<li>这里下降的评判是用 首相的有序幂次 的字典序评判的<ul>
<li>这里也体现了 规定顺序的一种用途</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>唯一性：<ul>
<li>反证法: 如果有两种表示$g_1,g_2$，那么$g&#x3D;g_1-g_2$的差多项式不是零多项式，但是这个非零多项式带入 $\sigma_i$以后是零多项式，要证明这个为假<ul>
<li>那么 既然不是零多项式 存在一组输出$b_1\cdots b_n$使得导出函数 的值$g(b_1,\cdots,b_n)\neq 0$</li>
<li>那么 剩下就是想构造出$c_{1\to n}$使得$b_i&#x3D;\sigma_i(c_{1\to n})$</li>
<li>Vieta 韦达公式 $\Phi(x)&#x3D;\sum_{i&#x3D;0}^n (-1)^{n-i}b_ix^i$，根据前面的复数域多项式的定理，有n个复数根，而且满足上面的形状。</li>
<li>从而 g直接带入b不为0,但是能找到n个c，直接先把g带入f,再从f带入又等于0 矛盾</li>
</ul>
</li>
</ul>
</li>
<li>数域K上一元多项式的判别式<ul>
<li>对称多项式基本定理 一个应用：研究数域K上的一元多项式 在 复数域中有无重根</li>
<li>$f(x)&#x3D;\sum_{i&#x3D;0}^n a_ix^i, a_n&#x3D;1$ 首1,一元 多项式 有n个复数根<ul>
<li>如果有重根，&lt;&#x3D;&gt;  $\prod (c_i-c_j)^2 &#x3D;0$ 这里加平方是为了对称性</li>
<li>而这个是对称多项式，有唯一的 g 可以表示，找到g以后,那么 $\prod(c_i-c_j)^2 &#x3D; g(-a_{n-1},a_{n-2},\cdots,(-1)^na_0)$ 可以作为重根存在的判别式！ 命题3</li>
<li>&#x3D; |纵范德蒙矩阵| |横范德蒙矩阵|</li>
<li>&#x3D; <code>|[matrix]|</code>, $matrix_{i\in [1,n],j\in[1,n]}&#x3D;\sum_{k&#x3D;1}^n c_k^{i-1+j-1}$<ul>
<li>令 $s_k &#x3D; \sum_{i&#x3D;1}^n x_i^k$</li>
<li>&#x3D;  $matrix_{i\in [1,n],j\in[1,n]}&#x3D;s_{i+j-2}$</li>
<li>注意到 $s_k$ 也是对称的，可以表示出，所以如果能得到n个s的表达式，那么矩阵的det就是 g了</li>
<li>牛顿 Newton 公式<ul>
<li>$k\in [1,n]$时 有$s_k-\sigma_1s_{k-1}+\sigma_2s_{k-2}\cdots+(-1)^{k-1}\sigma_{k-1}s_1+(-1)^kk\sigma_k&#x3D;0$</li>
<li>$k &gt; n$时有$s_k-\sigma_1s_{k-1}+\sigma_2s_{k-2}\cdots+(-1)^{k-1}\sigma_{k-n+1}s_1+(-1)^n\sigma_{n}s_{k-n}&#x3D;0$</li>
<li>这个我好像还专门写过 不这么系统的单独的文章</li>
<li>证明: <ul>
<li>考虑n+1元多项式 $f(x_1,\cdots,x_n,x)&#x3D;\prod (x-x_i)$</li>
<li>展开 $x^n-\sigma_1 x^{n-1}+\cdots+(-1)^n\sigma_n$</li>
<li>把x用$x_{1\to n}$带入</li>
<li>$x_i^n-\sigma_1 x_i^{n-1}+\cdots+(-1)^n\sigma_n &#x3D; 0$</li>
<li>$n\ge k$时 满足上面的式子<ul>
<li>乘上$x_i^{k-n}$</li>
<li>$x_i^k-\sigma_1 x_i^{k-1}+\cdots+(-1)^n\sigma_nx_i^{k-n} &#x3D; 0$</li>
<li>所有n各表达式相加</li>
<li>$s_k-\sigma_1 s_{k-1}+\cdots+(-1)^n\sigma_n s_{k-n} &#x3D; 0$</li>
</ul>
</li>
<li>$n &lt; k$时<ul>
<li>这又开始先猜想后证明了+归纳法了</li>
<li>这里核心是不定元个数 下降 与 零多项式，通过x_n&#x3D;0来带入并就能完成 这个转换</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>有了牛顿公式，可以用递推计算出所有s的关于sigma的表达式了，也就是g的表达式，从而 再计算det就有了 重根判别式</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p>例子: 以 开篇的$f(x_1,x_2,x_3)&#x3D;x_1^3+x_2^3+x_3^3+x_1^2x_2+x_1^2x_3+x_2^2x_3+x_1x_2^2+x_1x_3^2+x_2x_3^2$<br>来举例</p>
<p>$x_1^3$是首项 对应$1\cdot x_1^3x_2^0x_3^0$ 那么需要$\Phi_1&#x3D;1\cdot \sigma_{1}^{3}&#x3D;(x_1+x_2+x_3)^3&#x3D;(\sum_{i&#x3D;1}^3x_i^3)+3(\sum_{i\in [1,3],j\in [1,3],i\neq j}x_i^2x_j)+3!(\prod_{i&#x3D;1}^3x_i)$</p>
<p>$f-\Phi_1&#x3D;-2(\sum_{i\in[1,3],j\in[1,3],i\neq j}x_i^2x_j^2)-3!(\prod_{i&#x3D;1}^3x_i)$</p>
<p>接下来的首项是$-2x_1^2x_2^1 &#x3D; (-2)x_1^2x_2^1x_3^0$</p>
<p>所以需要$\Phi_2&#x3D;(-2) \sigma_1^{2-1}\sigma_2^{1-0}&#x3D;(-2)(x_1+x_2+x_3)(x_1x_2+x_2x_3+x_3x_1)$</p>
<p>$&#x3D;-2(\sum_{i\in[1,3],j\in[1,3],i\neq j}x_i^2x_j^2)-6(\prod_{i&#x3D;1}^3x_i)$</p>
<p>$f-\Phi_2&#x3D;0$</p>
<p>所以 $f&#x3D;\Phi_1+\Phi_2&#x3D;\sigma_1^3+(-2)\sigma_1\sigma_2$</p>
<p>所以$g(x_1,x_2,x_3)&#x3D;x_1^3-2x_1x_2$</p>
<h2 id="7-11-结式"><a href="#7-11-结式" class="headerlink" title="7.11 结式"></a>7.11 结式</h2><p>上面讨论的一元n次多项式的 重根判别式 D(f)，首先要求出复根 幂和，再计算行列式，运算量大</p>
<p>f有重根，当且仅当f(x)在<code>C[x]</code>有重因式, 不随数域扩大而改变，因此当且仅当<code>K[x]</code>中有重因式</p>
<p>当且仅当在<code>K[x]</code>中有重因式 当且仅当 f(x)与f’(x) 不互素，于是 辗转相除法 求(f(x),f’(x))</p>
<p>D(f)&#x3D;0 当且仅当 $(f(x),f’(x)) \neq 1$</p>
<p>$f(x),g(x)$ 分别是 $K[x]$中两个非零n次,m次多项式</p>
<p>若 f,g有公共复根</p>
<p>$f(x)&#x3D;f_1(x)d(x),g(x)&#x3D;g_1(x)d(x),\mathrm{deg} d(x) &gt; 0$ 其中$f_1,g_1$分别可以写成n-1次,m-1次表达式</p>
<p>$f(x)&#x3D;\sum_{i&#x3D;0}^n a_{n-i}x^i$</p>
<p>$g(x)&#x3D;\sum_{i&#x3D;0}^m b_{m-i}x^i$</p>
<p>$f_1(x)&#x3D;\sum_{i&#x3D;0}^{n-1} c_{n-1-i}x^i$</p>
<p>$g_1(x)&#x3D;\sum_{i&#x3D;0}^{m-1} d_{m-1-i}x^i$</p>
<p>把$f_1(x)g(x) &#x3D; f(x)g_1(x)$ 左右展开，对应系数相等 构成 n+m 个方程</p>
<p>也就是 m+n元齐次线性方程组有非零解$(d_0,d_1,\cdots,d_{m-1},-c_0,-c_1,\cdots,-c_{n-1})$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ m 列     ][n 列      ]</span><br><span class="line">a0          b0</span><br><span class="line">a1 a0       b1 b0</span><br><span class="line">a2 a1 a0    b2 b1 b0    * d0    = 0</span><br><span class="line">                          d1</span><br><span class="line">                          ...</span><br><span class="line">                          -c0</span><br><span class="line">                          -c1</span><br><span class="line">                          ...</span><br><span class="line">						  </span><br><span class="line"></span><br><span class="line">有非零解，说明左边 (m+n)*(m+n) 的矩阵 不可逆，行列式为0</span><br><span class="line">左边的形状就是</span><br><span class="line">f的系数构成列，每次移一个列偏移1位，所以长度u是n+1,最大偏移次是m-1，所以一共m+n行，</span><br><span class="line">然后就是g的系数构成列向量，同样每次移动偏移一位，所以长度m+1,最大偏移n-1,所以同样一共m+n行</span><br></pre></td></tr></table></figure>

<p>结式 <code>Res(f,g) = |f的系数向量构成列 m次偏移，g系数的向量构成列 n次偏移|</code></p>
<p>如果 有公共复根，那么 Res(f,g) &#x3D; 0(必要条件)</p>
<p>那么如果 Res(f,g)&#x3D;0,则 有非零解， 能找到$f_1,g_1$</p>
<ul>
<li>若 $a_0,b_0$ 不全为0, 不妨设 $a_0\neq 0$, 也就是 f不含(x-0), 那么 $f(x) | f_1(x)g(x)$<ul>
<li>若 (f,g)&#x3D;1,则， $f | f_1$ 根据deg大小矛盾</li>
</ul>
</li>
</ul>
<p>deg f &gt; 0 ,deg g &gt; 0</p>
<ul>
<li>Reg(f,g)&#x3D;0 的充要条件 &lt;&#x3D;&gt; $a_0&#x3D;b_0&#x3D;0$ 或 f(x),g(x)有公共复根, （注意a_0,b_0是最高次的系数，不是最低次的系数）</li>
</ul>
<p>用处</p>
<ul>
<li>判别 f,g是否有公共复根的新方法，真的比辗转相除好吗？虽然 根据行列式变化 其中蕴含的辗转相除吗？</li>
<li>求f(x,y),g(x,y) 上的公共零点<ul>
<li>按照x的幂次展开，y相关的表达式变成系数</li>
<li>如果 $f(x_0,y_0)&#x3D;0&#x3D;g(x_0,y_0)$ , 那么 $x_0$ 是复系数多项式 $f(x,y_0),g(x,y_0)$的一个公共根<ul>
<li>$Res(f(x,y_0),g(x,y_0))&#x3D;0$</li>
</ul>
</li>
<li>所以算法为 Res_x(f,g)的表达式 只有y</li>
<li>求 所有y复根</li>
<li>对于每个复根 带入 $(f(x,y_0),g(x,y_0))$用辗转相除 求关于x公因式 ，再求x的复根，可以得到所有零点</li>
</ul>
</li>
</ul>
<p>P115~119 TODO</p>
<p>定理2：$f,g,a_0\neq 0,b_0\neq 0$, 设f的n个复根为$c_1,\cdots c_n$,g的m个复根为$d_1,\cdots,d_m$</p>
<p>则 $Res(f,g)&#x3D;a_0^m\prod_{i&#x3D;1}^n g(c_i)$</p>
<p>$&#x3D;(-1)^{mn}b_0^n\prod_{j&#x3D;1}^m f(d_j)$</p>
<p>定理3: $D(f)&#x3D;(-1)^{\frac{n(n-1)}{2}}a_0^{-1}Res(f,f’)$</p>
<h2 id="7-12-域与域上的一元多项式环"><a href="#7-12-域与域上的一元多项式环" class="headerlink" title="7.12 域与域上的一元多项式环"></a>7.12 域与域上的一元多项式环</h2><p>在 f不能整除g时，引入$\frac{f(x)}{g(x)}$记作分式，</p>
<p>可以看成 有序多项式对 (f(x),g(x)), 是 <code>K[x],K[x]</code>中的元素</p>
<p>定义相似 $(f_1,g_1)\sim (f_2,g_2)$ &lt;&#x3D;&gt; $f_1g_2&#x3D;g_1f_2$</p>
<ul>
<li>具有反身性 （自己和自己相似）</li>
<li>具有对称性 （sim左右交换依然保持 bool值）</li>
<li>传递性  (x sim y, y sim z) &#x3D;&gt; x sim z</li>
<li>等价类 记作 $\frac{f}{g}$<ul>
<li>所有等价类组成集合记作 K(x), 圆括号，称作 $K[x]\times K[x]$对于等价关系$\sim$的商集</li>
</ul>
</li>
<li>加法定义 $\frac{f_1}{g_1}+\frac{f_2}{g_2}&#x3D;\frac{f_1g_2+g_1f_2}{g_1g_2}$, </li>
<li>乘法定义 $\frac{f_1}{g_1}\cdot \frac{f_2}{g_2}&#x3D;\frac{f_1f_2}{g_1g_2}$</li>
<li>上面运算 结果不受 等价类中代表元选取影响，最终结果对于不同代表元的选择是同一个等价类</li>
<li>$\frac{0}{1}$记作0元</li>
<li>$\frac{f}{g}$的加法逆元$\frac{-f}{g}$  记作$-\frac{f}{g}$ (这个时候就会发现 如果是 (f,g)表示法，要么就需要定义外部加法，要么就是内部变成（-f,g）)， 类似可以定义减法</li>
<li>$\frac{1}{1}$ 是乘法0元，也就是单位元</li>
<li>K(x)是有单位元的交换环</li>
<li>非零元$\frac{f}{g}$的乘法逆元$\frac{g}{f}$ 也记作$(\frac{f}{g})^{-1}$, 类似可以定义除法</li>
</ul>
<p>定义1.一个有单位元$1(\neq 0)$的交换环F,如果它的每个非零元都可逆，那么称F是一个域</p>
<ul>
<li>例如K(x)是一个域，称作数域K上的 一元 分式域， 或一元有理函数域<ul>
<li>其元素称作 一元分式 或一元有理函数，f分子，g分母</li>
</ul>
</li>
</ul>
<p>分式的次数 &#x3D; deg f - deg g</p>
<p>如果分子坟墓互素，那么成为 既约分式</p>
<p>数域的元素是数，而一元分式的元素是分式</p>
<p>命题1. 域F中没有非平凡的零因子，从而域一定是整环</p>
<ul>
<li>如果有 $a,b \neq 0, ab&#x3D;0$ 那么  $b&#x3D;a^{-1}(ab)&#x3D;a^{-1}0&#x3D;0$  矛盾</li>
</ul>
<hr>
<p>mod p 剩余类域 与 mod m 剩余类环</p>
<p>Z 中定义二元关系 $\sim$, $a\sim b$&lt;&#x3D;&gt; a与b被7整除余数相同 &lt;&#x3D;&gt; 7 | a-b</p>
<p>有 若 $a\equiv b\pmod{7},c\equiv d\pmod{7}$ 则$a+c\equiv b+d\pmod{7}, ac\equiv bd\pmod{7}$</p>
<p>有mod 7下的等价类 剩余类，记作$Z_7$或 $Z&#x2F;(7)$</p>
<ul>
<li>有单位元的交换环<ul>
<li>每个非零元有乘法逆元 所以是 域， 且是有限域</li>
</ul>
</li>
</ul>
<p>对于 m,类似的定义，但是m不是质数时，例如 m&#x3D;4, 那么有 $2 * 2 &#x3D; 0$ 非平凡零因子，不是域</p>
<p>若 p是素数$Z_p$是域, 只需要证明每个非零元可逆, 这里没有用费马小定理，而是 $gcd(p,a) &#x3D; 1$,所以$up+va&#x3D;1$, 即 $va\equiv 1 \pmod{p}$</p>
<p>若 是合数那么 $m&#x3D;m_1m_2$ 都是它的非平凡零因子</p>
<p>这里也是给出了 矩阵 <code>[0,1;0,0]</code>这种零因子 以外的一种零因子</p>
<hr>
<p>域 F 中，  $n * 单位元I, n &gt; 0$ 表示n个单位元相加</p>
<ul>
<li>情况1, 均不为0</li>
<li>情况2, 存在n使得$n 单位元I &#x3D; 0$, 取最小的n, 若n是合数,<ul>
<li>$0 &#x3D; nI&#x3D;n_1(n_2I)&#x3D;n_1(I(n_2I))&#x3D;(n_1I)(n_2I)$ ，因为最小的n， 所以$n_1I,n_2I$都是非平凡零元， 所以不是域，所以n不能是合数</li>
</ul>
</li>
</ul>
<p>定理2, $nI\neq 0$ 或者存在素数$p &gt; 0$ 使得$pI&#x3D;0, lI\neq 0, 0 &lt; l &lt; p$</p>
<p>定义2.</p>
<ul>
<li>$nI\neq 0$ 特征 为 0</li>
<li>$pI&#x3D;0,lI\neq 0,0 &lt; l &lt; p$ 特征 为 $p$</li>
<li>记作 char F, charactor的前缀,应该是</li>
</ul>
<p>性质</p>
<ul>
<li>char 数域  &#x3D;0</li>
<li>char Z_p &#x3D; p</li>
<li>有限域 的特征一定是素数， 否则 e,2e,3e,…. 全都不等 有无穷多元素 矛盾</li>
<li>$Z_p(x)$ mod p的一元分式域 首先是无穷域，但是同样有特征$p$</li>
</ul>
<p>命题3： 设域F的特征为素数p,则 $nI&#x3D;0$ &lt;&#x3D;&gt; p|n</p>
<ul>
<li>这个更深刻，意味着更多的“特征” 唯一性</li>
<li>$pI &#x3D; 0 &#x3D; wI$ &#x3D;&gt; $(w-kp)I &#x3D; 0$, &#x3D;&gt; $(w \mod p) I &#x3D; 0$, 所以w只能是倍数</li>
</ul>
<p>命题4: p为特征， $\forall A \in F, A\neq 0$ 那么 $n A &#x3D; 0$ &lt;&#x3D;&gt; $p | n$  </p>
<ul>
<li>想法还是 把n变成 非“个数”而是元素，所以 $0&#x3D;nA&#x3D;n(IA)&#x3D;(nI)A$, &lt;&#x3D;&gt; $nI&#x3D;0$</li>
</ul>
<hr>
<p>四、域F上的一元多项式环</p>
<p>有限域 上有些和无限域不同的性质</p>
<p>例如 $Z_3[x]$ 中 $f(x)&#x3D;x^3+2x^2+2$ 和$g(x)&#x3D;2x^2+x+2$ 的多项式不同</p>
<p>但是 诱导函数 $f(0)&#x3D;2&#x3D;g(0),f(1)&#x3D;2&#x3D;g(1),f(2)&#x3D;0&#x3D;g(2)$ 相同， 这个反例也说明了前面 为什么要区分 多项式，和多项式函数</p>
<ul>
<li>这里相同的一个原因可以是 $x(x-1)(x-2)$ 在 $Z_3$上恒为0，$&#x3D;x^3-3x^2+2x$</li>
</ul>
<p>若 $g(x)$是$f(x)$的k重因式, 那么$g(x)$是$f’(x)$的k-1重因式，f(x)的特征为p</p>
<ul>
<li>书上这里 素数和函数 混用p真的大便一样</li>
<li>若 $p | k$ 或 $g’(x)&#x3D; 0$ 则 $g(x) | (kg’(x)&#x3D;0)$ 则 $g(x)$是$f’(x)$的至少$k$重因式，(因为$f(x)&#x3D;g(x)^kh(x)$, $f’(x)&#x3D;kg’(x)g(x)^{k-1}h(x)+g(x)^kh’(x)$, 第一项为0)</li>
<li>若$p\not{|}k$ 且$g’(x)\neq 0$则 $g(x) \not{|} kg’(x)$ 这里还没有 更复杂的等价化简，只是 直接的多项式，所以有幂次更小但非零一定不是倍数， 从而是$f’(x)$的k-1次重因式（同上展开）</li>
<li>这两种情况，f有 $k&gt;1$的重因式，都有$(f(x),f’(x))\neq 1$</li>
</ul>
<p>命题5：整系数多项式$f(x)&#x3D;\sum_{i&#x3D;0}^n a_ix^i$, p是素数, $p\not{|}a_n$. f对应的 $Z_p$上的不可约，那么f在$Q$上不可约</p>
<ul>
<li>注意这里只是必要条件， 因为如果可约，那么可约展开的首项依然满足 首项系数不是p的倍数，所以有表达式</li>
<li>所以 这是一种判断“不可约”的方法</li>
</ul>
<hr>
<p>五、中国剩余定理</p>
<p>整数环 与 数域K 上的 <code>K[x]</code> 结构很相似</p>
<p>同余方程组 $x\equiv b_i \pmod{m_i}$, 其中$(m_i,m_j)&#x3D;1,i\neq j$</p>
<p>那么 $Z$中必定有解， 且任意两个解$c,d$满足$c\equiv d\pmod{\prod m_i}$</p>
<p>证明：</p>
<p>如果有多个解，解之间关系好证明，直接作差，是所有$m_i$倍数，所以可证</p>
<p>两两互素 $(m_i,\prod_{j\neq i} m_j)&#x3D;1$</p>
<p>即 $um_i+v_i\prod_{j\neq i}m_j &#x3D; 1$</p>
<p>$v_i\prod_{j\neq i}m_j\equiv 1 \pmod{m_i}$</p>
<p>$v_i\prod_{j\neq i}m_j\equiv 0 \pmod{m_k},k\neq i$</p>
<p>看起来就像正交基一样</p>
<p>$c&#x3D;\sum_{i} b_i(v_i\prod_{j\neq i}m_j)$</p>
<hr>
<p>应用小天地，序列密码，m序列</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>核心内容</p>
<ul>
<li>一元多项式<ul>
<li>很多和 质数 乘法相关的相似的性质</li>
<li>其中引出 不可约多项式</li>
<li>对于 可约多项式的因式拆解，特别提到了重因式</li>
<li>因式分解<ul>
<li>复数域，然后利用 Liouville定理 模有界定理 <a href="https://zhuanlan.zhihu.com/p/393074166">https://zhuanlan.zhihu.com/p/393074166</a> 得到 <code>C[x]</code> 的不可约多项式 只能是1次，和代数基本定理 n次有n各根</li>
<li>有了必有复根以后，反过来研究实数域上的不可约多项式</li>
<li>只有 1次，判别式小于0的2次式</li>
<li>有理数环上 化成整系数，说实话没有特别漂亮的结论，只是延伸了一些前面同样成立的结论，多了一个Eisenstein判别法</li>
</ul>
</li>
<li>注意到 一元多元 都在证明 $a * b&#x3D;0$ 那么$a&#x3D;0$或$b&#x3D;0$这个 在初中高中以前感觉显然，但自从有了矩阵的 非零 幂零矩阵的例子，这个玩意的确有证明的必要</li>
</ul>
</li>
<li>然后来到多元多项式环，没有特别深的结论，主要是沿用前面的一些定义看哪些同样在这成立 （感觉这章可以后移<ul>
<li>研究对称多项式， 其核心是可以由 初等对称多项式$\sigma_i$来表示</li>
<li>引出 一元多项式 新的 重根判别法，以及牛顿公式</li>
</ul>
</li>
<li>结式<ul>
<li>主要是 判断f,g是否有非1因式的</li>
<li>看着 花里胡哨的，感觉核心还是辗转相除法 的行列式表达，或者说 辗转相除需要一些智力，结式需要一些暴力。我觉得本质问题还是没有更早的把 多项式以 系数向量的形式写出来，还在写x,所以感觉上有转换，其实挺自然</li>
<li>然后 对于多元也可以按元展开</li>
</ul>
</li>
<li>分式<ul>
<li>多项式分式定义和性质</li>
<li>“特征”，和有限域&#x2F;无限域 里的 特征的性质<ul>
<li>$Z_p$</li>
</ul>
</li>
<li>再次研究 在这种域里的 多项式之间的因式</li>
</ul>
</li>
<li>总结<ul>
<li>核心还是 研究很多和整数 类似的，不可约，因式，两个f,g的因式的各种性质。只是对象 变为了 不同域（复数域，实属域，有理域，$Z_p$）</li>
<li>对于单个 的拆分，一个是 eisenstein 判别一些特殊的Q，$Z_p$上能反过去判断Q的不可约</li>
</ul>
</li>
<li>这里面有几次出现一个叫做 “（xx性质）不随数域扩大而改变 感觉很迷惑”<ul>
<li>似乎是 【给定数域甲，性质乙】</li>
<li>意味着 数域甲的运算定义导致的 包含关系的性质保证了 性质乙用到的相关元素 都在甲中</li>
<li>那么 所有 甲 映射 出的 甲’ 是 丙的一个子域，那么丙中的甲‘的 关于乙的性质不变</li>
<li>这里的关键点是 甲是固定的，且甲一般是看作最小的（实际上不一定是最小的），所以只考虑比甲大的</li>
<li>所以 在这个情况下 甲 和 甲’ 的这个关系是双射的 所以 也就是充要的</li>
</ul>
</li>
<li>说一点 非常讨厌书里 把 幂次和系数下标反着写的 表达方法, 虽然上面笔记保持和书上一致</li>
</ul>
]]></content>
      <categories>
        <category>高等代数</category>
      </categories>
      <tags>
        <tag>高等代数</tag>
        <tag>多项式环</tag>
        <tag>结式</tag>
      </tags>
  </entry>
  <entry>
    <title>高等代数 六 二次型 矩阵的合同</title>
    <url>/Math/Advanced_algebra_6/</url>
    <content><![CDATA[<h1 id="二次型，矩阵的合同"><a href="#二次型，矩阵的合同" class="headerlink" title="二次型，矩阵的合同"></a>二次型，矩阵的合同</h1><p>把$f(x_1,\cdots,x_n)&#x3D;\sum_{i&#x3D;1}^n\sum_{j&#x3D;1}^n a_{ij}x_ix_j$ 表示成对称矩阵A, 其中$a_{ij} &#x3D; a_{ji}$</p>
<p>则称A是二次型矩阵, 显然它唯一，非对角的系数是</p>
<p>$f()&#x3D;x^TAx$</p>
<p>若 $x&#x3D;Cy$,且$C$可逆，那么陈果一个非退化线性替换，（简单说可以换回来一一对应</p>
<p>$f()&#x3D;(Cy)^TA(Cy)&#x3D;y^T(C^TAC)y$</p>
<p>定义2. $x^TAx$和$y^TBy$ 如果能通过$x&#x3D;Cy$得到，其中$C$是可逆的，那么这两个二次型等价,</p>
<ul>
<li>&#x3D;&gt; $A$和$B$合同 </li>
<li>标准型 转化成$\Lambda$ 特征值对角阵 $&#x3D;\sum_{i&#x3D;1}^n \lambda_iy_i^2$<ul>
<li>这里实际上就是 多元二次表达式的配方，因为 最初的变换 行变换对应消行，列变换对应新增变量（配变量），而这里是一种行列空间同步变化的过程</li>
<li>标准型 中 rank &#x3D; 非零特征值个数</li>
</ul>
</li>
</ul>
<h2 id="6-2-实二次型的规范型"><a href="#6-2-实二次型的规范型" class="headerlink" title="6.2 实二次型的规范型"></a>6.2 实二次型的规范型</h2><p>注意到上面的$C$ 只需要可逆，也就意味着，如果在变换为$\Lambda$以后，再做单个位置的倍数变换也是“合法”的，所以标准型不唯一</p>
<p>rank 因为全是初等变换所以不变，所以非零个数不变</p>
<p>规范型：</p>
<ul>
<li>全部变为|系数|&#x3D;1的平方项<ul>
<li>前面+1,中间-1,后面0</li>
<li>规范型</li>
</ul>
</li>
<li>规范型唯一 也就是 +，-，0的个数固定<ul>
<li>如果表示成<ul>
<li>$z_1^2+\cdots +z_q^2-z_{q+1}^2-\cdots-z_r^2$</li>
<li>$y_1^2+\cdots +y_p^2-y_{p+1}^2-\cdots-y_r^2$</li>
<li>$z&#x3D;Qy$</li>
<li>若 $p &gt; q$<ul>
<li>考虑 $Q_{q\times r}y&#x3D;z_{q}$ <ul>
<li>让$y$的$y_{\ge p+1} &#x3D; 0$,而前面不全为0</li>
<li>让 $z_{\le q} &#x3D; 0$ 注意到 rank($Q_{q\times r}$)&#x3D;q, 一定存在非零解</li>
<li>从而 z的表示不大于0,  而y的表示大于0, 因此矛盾, 所以表示法唯一</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>+号个数：正惯性指数<ul>
<li>是二次型等价： 规范型相同<ul>
<li>rank相同 且 正惯性指数相同</li>
<li>对应的矩阵合同</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="6-3-正定二次型与正定矩阵"><a href="#6-3-正定二次型与正定矩阵" class="headerlink" title="6.3 正定二次型与正定矩阵"></a>6.3 正定二次型与正定矩阵</h2><p>任意非零向量$x$有$x^TAx &gt;0$</p>
<ul>
<li>正惯性指数&#x3D;n</li>
<li>用处 MIT18.06 有讲，求极小值 不会是局部最小值</li>
<li>与正定矩阵合同的实对称矩阵是正定矩阵</li>
<li>正定的行列式大于0<ul>
<li>应为是在A两侧乘上可逆的C^T和C，它们行列式相同所以符号不变</li>
</ul>
</li>
<li>所有顺序主子式全大于0<ul>
<li>最常用的判别方式</li>
<li>$x^TAx &gt; 0$ 让 x后半取零同样 &#x3D;&gt; 容易得顺序主子式 都是正定的 &#x3D;&gt; 顺序主子式大于0， 必要</li>
<li>充分性：归纳法(n-1阶是正定的) + 分块矩阵 <code>[A,a;a^T,v0]=&gt;[I,b;b^T,v1]=&gt;[I,0;0^T,v2]</code></li>
</ul>
</li>
<li>半正定<ul>
<li>$\ge 0$</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>高等代数</category>
      </categories>
      <tags>
        <tag>高等代数</tag>
        <tag>二次型</tag>
        <tag>矩阵的合同</tag>
        <tag>正定矩阵</tag>
      </tags>
  </entry>
  <entry>
    <title>高等代数 八 线性空间</title>
    <url>/Math/Advanced_algebra_8/</url>
    <content><![CDATA[<p>视频 42-54 </p>
<h1 id="线性空间"><a href="#线性空间" class="headerlink" title="线性空间"></a>线性空间</h1><p>上来就是我非常讨厌的表达式 $A(\alpha+\beta)&#x3D;A(\alpha)+A(\beta)$</p>
<p>$A:V\to V’$</p>
<p>$\alpha,\beta \in V$</p>
<p>一个我更喜欢的是 $A(\alpha+<em>{V}\beta)&#x3D;A(\alpha)+</em>{V’}A(\beta)$</p>
<ul>
<li>即使这样，也不够完全，因为$V$和$V’$ 里都可以 按你需要定义 加法, 也就是对于$V$你可以定义多种加法</li>
<li>一个我更喜欢的是 $A(\alpha+<em>{S_1}\beta)&#x3D;A(\alpha)+</em>{S_2}A(\beta)$  这样强调两个加法的不同，是两个线性空间中具体的加法</li>
<li>或者 $A(\alpha+\beta)&#x3D;A(\alpha)\oplus A(\beta)$  也是强调两个加法的不同</li>
<li>$A(k \cdot_{S_1}\alpha)&#x3D;k\cdot_{S_2} A(\alpha), k\in F$</li>
</ul>
<p>那么有加，数量乘法 映射，那么这是一个线性映射</p>
<h2 id="8-1-域F上线性空间的基与维数"><a href="#8-1-域F上线性空间的基与维数" class="headerlink" title="8.1 域F上线性空间的基与维数"></a>8.1 域F上线性空间的基与维数</h2><p>定义1. 非空集合V, 加法运算:$V\times V\to V$ 的一个映射， 域F, 乘法运算$F\times V\to V$的一个映射</p>
<ul>
<li>加法结合</li>
<li>加法零元， 称作零元素</li>
<li>加法逆元</li>
<li>加法交换</li>
<li>$(1_F) a &#x3D; a$, </li>
<li>$(k_Fl_F) a &#x3D;k_F(l_F a)$, </li>
<li>$(k_F+<em>Fl_F) a &#x3D;(k_Fa)+</em>{V}(l_F a)$, </li>
<li>$k_F(a+<em>{V}b) &#x3D;(k_Fa)+</em>{V}(k_F b)$, </li>
<li>称作线性空间</li>
</ul>
<p>例如： </p>
<ul>
<li>几何空间中以原点为起点的所有向量组成的集合</li>
<li>域F上 所有n元有序组组成的集合$F^n$</li>
<li>矩阵 $M_{s n}(K)$</li>
<li>一元多项式 $K[x]$</li>
<li>复数域 a+bi &#x3D; (a,b)</li>
</ul>
<p>性质:</p>
<ul>
<li>唯一零元 $0_1&#x3D;0_1+0_2&#x3D;0_2$</li>
<li>逆元唯一 $(-a)_1&#x3D;(-a)_1+(a+(-a)_2)&#x3D;((-a)_1+a)+(-a)_2&#x3D;(-a)_2$</li>
<li>$0_Fa&#x3D;0_V$ , $0_V&#x3D;(0_Fa)+_V(-(0_Fa))&#x3D;(0_F+_F0_F)a+_V(-(0_Fa))&#x3D;(0_Fa)+_V(0_Fa)+_V(-(0_Fa))&#x3D;(0_Fa)+_V((0_Fa)+_V(-(0_Fa)))&#x3D;(0_Fa)+_V0_V&#x3D;0_Fa$</li>
<li>$k_F0_V&#x3D;0_V$, 类似的</li>
<li>$k_Fa_V&#x3D;0_V$ 则$k_F&#x3D;0_F$或$a_V&#x3D;0_V$,  证明核心在$k$属于域$F$，要么有零元 要么有逆元</li>
<li>$(-1)_Fa_V&#x3D;-(a_V)$, F域中单位元的逆元 乘 V中的元 能得到V中对应的逆元，也就是证明 前面表示 $+a_V &#x3D;0$</li>
</ul>
<hr>
<p>线性组合 $\sum k_ia_i,k\in K,a\in V$</p>
<p>向量组 选中的$a_i$</p>
<p>线性表出: $b&#x3D;\sum k_ia_i$</p>
<p>线性无关: $\sum k_ia_i&#x3D;0 \to k_i&#x3D;0$, 任意一个不能被其它的线性表出</p>
<p>命题1. 组线性相关：任意一个部分线性相关，则整体线性相关</p>
<p>命题2. 包含0线性相关</p>
<p>命题3, &lt;&#x3D;&gt; 存在一个可以被其他线性表出</p>
<p>命题4，b 被W表出，(表法唯一 &lt;&#x3D;&gt; W线性无关)</p>
<p>命题5, W线性无关， <code>b可被W线性表出 &lt;=&gt; [...W,b]线性相关</code></p>
<p>定义3：一个极大线性无关组，线性无关 且 加入任何其它会导致线性相关</p>
<ul>
<li>这里“极” 很准确，因为这时候还没有“最”的概念，认为是一种局部的极值</li>
</ul>
<p>定义4：等价，向量组X,Y，X能表出Y所有，Y能表出X所有</p>
<ul>
<li>任意两个极大线性无关组 等价</li>
<li>传递性</li>
</ul>
<p>引理1. 如果X由Y线性表出，且X中向量个数r &gt; Y中向量个数s，那么X线性相关</p>
<ul>
<li>也就是求$c$使得 $\sum_i c_ix_i&#x3D;0$ 把每个x_i展开成$Y$的线性表出</li>
<li>所以是求 r列,s行 的null space, 一定不是零空间，所以 一定有非零解，所以X线性相关</li>
</ul>
<p>推论1. (r个向量线性无关向量组X)由(s个向量的向量组Y) 线性表出，那么 $r\le s$， 也证明了rank的上限</p>
<ul>
<li>引理1的逆否命题</li>
</ul>
<p>推论2， 等价的线性无关向量组所含向量个数相等</p>
<ul>
<li>定义4+推论1 显然</li>
</ul>
<p>推论3： 一个向量组（不要求线性无关）的任意两个极大线性无关所含向量的个数相等</p>
<ul>
<li>等价 传递性 极大A &lt;&#x3D;&gt; 本身 &lt;&#x3D;&gt; 极大B</li>
</ul>
<p>定义5, 向量组 &#x3D;&gt; 极大线性无关组的个数 记作 rank</p>
<p>命题6, X中 线性无关 &lt;&#x3D;&gt; rank &#x3D; 向量个数</p>
<ul>
<li>&#x3D;&gt; 本身是一个 极大线性无关组</li>
<li>&lt;&#x3D; rank&#x3D;个数 只能取所有，注意这里始终是取向量还没谈论空间</li>
</ul>
<p>命题7： X由Y线性表出, $rank(X) \le rank(Y)$</p>
<ul>
<li>X的任意极大线性无关 能被 Y的任意极大线性无关 表出</li>
<li>根据推论1</li>
</ul>
<p>命题8：等价向量组，rank相等</p>
<ul>
<li>根据表出关系 A 极大 &lt;&#x3D;&gt; A &lt;&#x3D;&gt; b &lt;&#x3D;&gt; B极大</li>
</ul>
<hr>
<p>基与维数</p>
<p>定义6： V是域F上线性空间，V中向量集S</p>
<ul>
<li>S线性无关</li>
<li>V中每个可以由S线性表出</li>
</ul>
<p>S是一个基</p>
<p>集合S + 偏序( $S\times S\to$ true&#x2F;false&#x2F;undefined 无环 )</p>
<ul>
<li>偏序<ul>
<li>自反 $A\le A$</li>
<li>无环</li>
</ul>
</li>
<li>链：子集，且两两有偏序关系</li>
<li>极大元素: A, 集合中没有比A大的$A \le B \in S \to B&#x3D;A$，可能一个可能多个可能没有</li>
<li>上界， 任意$x \in U \subset S, x \le B\in S$,那么B是U的一个上界</li>
<li>Zorn引理： 一个偏序集，每条链 都有上界，那么S有极大元素</li>
</ul>
<p>定理1. 任意线性空间V都有一个基</p>
<ul>
<li>V中任意多个 线性无关的向量构成集合，形成拓扑图上的每个点</li>
<li>偏序关系 定义是 集合的包含关系</li>
<li>每条链都有上界怎么证明？？？ 无穷维的呢？<ul>
<li>不懂</li>
</ul>
</li>
</ul>
<p>定义7. 线性空间 根据其基的个数 ，称它是 有限维&#x2F;无限维</p>
<p>定理2. 有限维线性空间，任意两个基的向量个数相等</p>
<ul>
<li>引理1</li>
</ul>
<p>推论4，无限维 任意一个基都还有无穷多向量</p>
<p>定义8. 有限维 个数称作维数记作 $dim V$, 无限维 dim V &#x3D; infty</p>
<p>命题9. n维线性空间, 任意n+1各向量都线性相关</p>
<p>命题10. n维 线性空间，任意n个线性无关向量 都是 基</p>
<p>命题11. 可以表示V中任意向量的线性无关组是基</p>
<p>命题12. 任意一个线性无关向量组可以扩充为一个基</p>
<ul>
<li>因为如果 个数少，必定有不可表出的可以加入，否则 个数少 和 基 相互表出 &#x3D;&gt; 个数相等</li>
</ul>
<hr>
<p>四 基变换和坐标变换</p>
<p>$基A * 矩阵A &#x3D; 基B$ ， 当且仅当 矩阵A可逆</p>
<p>可逆 &#x3D;&gt; 基可以相互表出 &#x3D;&gt; rank(A)&#x3D;rank(B)</p>
<p>都是基 &lt;&#x3D;&gt; 可以相互表出 &#x3D;&gt; 表出过程就是求逆</p>
<p>结论：</p>
<ul>
<li>基 * 可逆矩阵 得到另一个基</li>
<li>两个基之间可以通过可逆矩阵转换</li>
</ul>
<h2 id="8-2-子空间及其交与和，子空间的直和"><a href="#8-2-子空间及其交与和，子空间的直和" class="headerlink" title="8.2 子空间及其交与和，子空间的直和"></a>8.2 子空间及其交与和，子空间的直和</h2><p>保持域F不变(!!)，在域F上，线性子空间： 子空间 且 保持同样的加法和乘法</p>
<p>定理1：子集+加法乘法封闭 &lt;&#x3D;&gt; 子空间</p>
<p>有限维度V的子空间U, dim U &lt;&#x3D; dim V</p>
<ul>
<li>张成span 空间，W是 向量组的张成空间</li>
<li>取等号当且仅当 U &#x3D; V</li>
<li>dim(span(向量组)) &#x3D; rank(向量组)</li>
</ul>
<hr>
<p>子空间交与和</p>
<p>交: $V_1,V_2$是$V$的子空间，那么牠们的交也是子空间, 核心是封闭性的证明，因为对于$V_1,V_2$来说 属于它们的向量，保持加法乘法不变，在其运算规则中 总是唯一的得到V中的结果，那么其实问题只有 能否保证这个结果在V中了</p>
<p>并：并不是子空间</p>
<p>而我们希望有一个类似于并的运算能保持 依然是V的子空间</p>
<p>和: $V_1+V_2$不是 空间的并，而是 $V_1,V_2$ 的基 的集合 的生成空间, 它也是包含$V_1\cup V_2$的最小子空间</p>
<p>命题1.</p>
<ul>
<li>$(V_1\cap V_2)+(V_1\cap V_3) \subseteq V_1\cap (V_2+V_3)$</li>
<li>$V_1+(V_2\cap V_3)\subseteq (V_1+ V_2)\cap(V_1+ V_3)$</li>
</ul>
<p>命题2. 和 是 基的并集关系</p>
<p>定理4. 子空间维数公式</p>
<p>$dim V_1+dim V_2 &#x3D; dim(V_1+V_2)+dim(V_1\cap V_2)$ ,注意括号中的+是和</p>
<p>推论 1, $dim V_1 + dim V_2 &#x3D; dim (V_1+V_2) &lt;&#x3D;&gt; V_1\cap V_2 &#x3D; 0$</p>
<hr>
<p>子空间直和， 也就是针对两个交集只有0向量的子空间 （注意空间交集不是空）</p>
<p>定义1. 如果$V_1+V_2$唯一表示称 两个分别来自两个子空间的 向量和，那么成为直和, $V_1\oplus V_2$</p>
<p>定理5. 以下命题等价</p>
<ul>
<li>$V_1+V_2$是直和</li>
<li>$V_1+V_2$中零向量表法唯一</li>
<li>$V_1\cap V_2 &#x3D; 0$</li>
</ul>
<p>定理6. 如果是有限维子空间</p>
<ul>
<li>$V_1+V_2$是直和</li>
<li>dim(V_1+V_2)&#x3D;dim V_1+dim V_2</li>
<li>(V_1的一个基) 与 ($V_2$的一个基) 合起来是$V_1+V_2$的一个基</li>
</ul>
<p>定义 补空间：直和 &#x3D; V</p>
<p>命题3. 设V是域F上n维线性空间，则V的每一个子空间U都有补空间</p>
<ul>
<li>扩充的部分形成 补空间</li>
</ul>
<p>定理7.  无限维度子空间</p>
<ul>
<li>$V_1+V_2$是直和</li>
<li>(V_1的一个基) 与 ($V_2$的一个基) 合起来是$V_1+V_2$的一个基</li>
</ul>
<p>命题4. 无限维子空间 有补空间</p>
<p>定义2. 多个子空间的连续直和： 任意两个子空间交为0</p>
<p>定理8. 多个子空间命题等价</p>
<ul>
<li>$V_1+V_2+\cdots+V_s$是直和</li>
<li>零向量表法唯一</li>
<li>$V_i\cap (\sum_{j\neq i}V_j) &#x3D; 0$</li>
</ul>
<p>定理9. 有限维子空间，等价命题</p>
<ul>
<li>直和</li>
<li>$dim(和) &#x3D; \sum dim$</li>
<li>分别的基合起来 是和的基</li>
</ul>
<h2 id="8-3-域F上线性空间的同构"><a href="#8-3-域F上线性空间的同构" class="headerlink" title="8.3 域F上线性空间的同构"></a>8.3 域F上线性空间的同构</h2><p>同构映射, $V,V’$都是域F上的线性空间，存在双射$\sigma: V \to V’$, 且保持 加法和乘法的映射</p>
<p>$\sigma(a+<em>{V}b)&#x3D;\sigma(a)+</em>{V’}\sigma(b)$</p>
<p>$\sigma(k\cdot_{V}a)&#x3D;k\cdot_{V’}\sigma(a)$</p>
<p>性质1. $\sigma(0)$是$V’$的零元素</p>
<p>性质2. $\sigma(-a)&#x3D;-\sigma(a)$ 加法逆元映射</p>
<p>性质3. $\sigma(\sum {k_i}a_i)&#x3D;\sum {k_i} \sigma(a_i)$</p>
<p>性质4. 向量组$X$线性相关，当且仅当 $\sigma(X)$线性相关，证明:也就是线性和 只有0解</p>
<p>性质5. 基 &#x3D;&gt; $\sigma$ 是基，证明：一来线性相关性（表出性（和 与 数量积））</p>
<p>定理1. 有限维 线性空间同构 &lt;&#x3D;&gt; 维数相等</p>
<ul>
<li>&#x3D;&gt; 上面结构 可证</li>
<li>&lt;&#x3D; 钦定映射</li>
</ul>
<p>命题1. V的子空间U &#x3D;&gt; $\sigma(U)$ 也是$V’$的子空间，如果有限维，子空间维数相等</p>
<hr>
<p>有限域的元素个数</p>
<p>$F$是有限域，设 特征为$p$, 单位元为$I$, 取 $F_p&#x3D;$ { $0,I,2I,\cdots, (p-1)I$ }</p>
<p>$F_p$ 对于减法 乘法封闭（之前推的充要条件），是F的一个子环（这里的运算的映射$F$和$F_p$也是一致的哦）</p>
<p>$F$ 看成$F_p$域上的线性空间，加法是 域$F$的加法, 纯量乘法是 $F_p$中元素 与 $F$中元素的乘法，</p>
<ul>
<li>??? 总可以看成吗，这里的感觉是F上有一些不可合并的元，那么每个不与其它合并的元的系数一定可以提取成$F_p$中的, 所以每个不能合成的 看作线性空间的一个维度</li>
</ul>
<p>因为有限 $F$作为 域$F_p$ 上的线性空间一定有限维的, 若$n$维, $F$和$F_p^n$ 同构, 有双射，个数相等，$F$的 元素个数 $p^n$</p>
<p>$F_p^n &#x3D;$ { $(a_1,a_2,\cdots,a_n)|a_i\in F_p$}</p>
<p>定理2 F是任一有限域，F的元素是一个素数p的幂次，其中p是域F的特征</p>
<ul>
<li>&#x3D;&gt; 按照上述构造 $p^n$ 一定存在，任意两个$p^n$ 有限域 都是同构的, 或者记作 $GF(p^n)$ ，或者$F_{p^n}$ 称作 Galois fields</li>
</ul>
<hr>
<p>三 外直和</p>
<p>$U,W$是域F上 任意两个线性空间，笛卡儿积</p>
<p>$U\times W&#x3D;${$(a,b)|a\in U,b\in W$}</p>
<p>可以规定 加法运算和 纯量乘法运算</p>
<p>一种 拼接 连接的感觉， 可以证明满足线性空间性质，称作外直和 记作\dot{+} $\dot{+}$</p>
<p>$dim(U\dot{+}W)&#x3D;n+m&#x3D;dim U + dim W$</p>
<p>是一种小的线性空间 构造大的线性空间的一种方法</p>
<ul>
<li>考虑 (a,0) 和 (b,0) 是 (a,b)的子空间，所以 $U\dot{+}W$是 $U\dot{+}0_W$和$0_U\dot{+}W$的直和</li>
<li>其实 容易看出 U 和 (a,0)是同构</li>
<li>W 和 (0,b)是同构</li>
</ul>
<h2 id="8-4-商空间"><a href="#8-4-商空间" class="headerlink" title="8.4 商空间"></a>8.4 商空间</h2><p>$V&#x2F;\sim$, 也就是 按照$\sim$定义等价，把$V$划分成多个等价类</p>
<p>一个等价类 &#x3D; 代表元 + (0的等价类)</p>
<p>陪集 $\bar{a}&#x3D;a+W$</p>
<p>也可以记作 $V&#x2F;W$ V对于子空间W的商集, 每个等价类 {$a+W | a \in V$}</p>
<p>加法 和 纯量乘法</p>
<p>(a+W)+(b+W) &#x3D; (a+b)+W</p>
<p>k(a+W) &#x3D; ka + W</p>
<p>0+W是零元</p>
<p>构成线性空间，是V对于W的商空间， 也是线性空间</p>
<p>其中 $V&#x2F;W$的元素不是$V$的向量，而是一个等价类</p>
<p>dim V&#x2F;W &#x3D; dim V - dim W</p>
<ul>
<li>W中取基，扩充成V的基</li>
<li>[w基，非w基]<ul>
<li>V&#x2F;W的元素 a+W &#x3D; (a在V中 按照扩充基展开的加法)+W<ul>
<li>&#x3D; 新加法的拆分 sum ki (基i + W)<ul>
<li>其中 (属于W的基 + W) &#x3D; 0 + W</li>
</ul>
</li>
<li>&#x3D; sum ki (非w基i + W) 证明了任意可以由  (非w基+W) 表示</li>
<li>只需要再证明 这些 线性无关</li>
<li>即 sum li (非w基i + W) &#x3D; W 的li只有0解，（注意这里W就是零元）</li>
<li>即 (sum li 非w基i ) + W &#x3D; W</li>
<li>那么有 (sum li w基i) 能表示 W中的任意，包括 (sum li 非w基i)</li>
<li>而 注意到 (sum li w基i) - (sum li 非w基i) &#x3D; 0 只有零解，所以 证明了 上面只有零解，所以线性无关</li>
<li>综上，可表示任意，又线性无关，所以是基，rank &#x3D; 个数 &#x3D; dim V - dim W</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p>余维数</p>
<p>V是无限维，W是子空间 也是无限维度</p>
<p>定义1. W是域F上线性空间V的一个子空间，如果 V&#x2F;W是有限维的, 那么称作W在V中的余维数，记作 记作$codim_V W$</p>
<hr>
<p>标准映射</p>
<p>V 到 V&#x2F;W 有一个很自然的映射</p>
<p>$a\to a + W$</p>
<p>称作标准映射，典范映射 canonical mapping, 显然 满射，W不是零子空间时，它不是单射</p>
<p>这种映射，有加法和纯量乘法对应，只是对应 因为不是单射，所以不是同构</p>
<ul>
<li>但有一个用处，如果 $V&#x2F;W$中 几个$a+W$是线性无关，反过来 对应的几个$a$是线性无关</li>
</ul>
<p>命题1. 域F上线性空间V的任一子空间W都有补空间</p>
<ul>
<li>V&#x2F;W 的一个基为 S’<ul>
<li>S’ 是按照标准映射的逆映射 到V中的S，S也是线性无关的</li>
<li>令U是由S生成的子空间<ul>
<li>那么S是U的一个基</li>
</ul>
</li>
<li>下面证明 U是W在V中的补空间</li>
<li>在 商集 中 任意 a+W 可被 S’ 表出，表出 的非W的部分记作b, a+W&#x3D;b+W (在商集中相等，在V中不一定相等)<ul>
<li>$a-b \in W, b \in U$</li>
<li>存在 $c\in W, a-b&#x3D;c$</li>
<li>$a&#x3D;b+c$, 也就是 a 可以被 U 与 W中的表示</li>
<li>分割线</li>
<li>b \in W 交U,<ul>
<li>属于W: b+W&#x3D;W</li>
<li>属于U: b可以被 S表出</li>
<li>W&#x3D;b+W&#x3D;(sum 系数 * 基)+W&#x3D;sum 系数(基+W)，只有零解，所以交为空</li>
</ul>
</li>
<li>所以是补空间 （U+W &#x3D; V, U交W&#x3D;0）</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>核心:</p>
<ul>
<li>基和维数： 线性空间V中每个元素，能用V中“有限多个向量” 唯一的表出</li>
<li>子空间，子空间直和</li>
<li>商集：把等价类看成一个元素</li>
<li>线性空间同构:线性空间之间关系的角度  </li>
<li>然后研究  空间中 两个子空间 交，加，（正交时 的加&#x3D;&gt; 直和），维度性质，V减去一个子空间性质<ul>
<li>这块核心的研究是基于 <code>基向量</code> 与 <code>表出</code>，围绕这两个，再保持 <code>加</code> 和 <code>乘</code> 的运算</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>高等代数</category>
      </categories>
      <tags>
        <tag>高等代数</tag>
        <tag>线性空间</tag>
        <tag>直和</tag>
        <tag>线性空间同构</tag>
        <tag>商空间</tag>
      </tags>
  </entry>
  <entry>
    <title>高等代数 九 线性空间</title>
    <url>/Math/Advanced_algebra_9/</url>
    <content><![CDATA[<p>视频 86-120</p>
<h1 id="线性映射"><a href="#线性映射" class="headerlink" title="线性映射"></a>线性映射</h1><ol>
<li>研究 线性映射的运算： 线性映射作为映射，可以做乘法运算，乘积仍是线性映射，还可以定义线性映射的加法和纯法</li>
<li>研究 线 线性映射的整体结构： 线性映射的运算，域F上 V到V’的所有线性映射组成的集合，记作Hom(V,V’), 对于线性映射的加法和纯量乘法，成为域F上的一个线性空间，V上所有线性变换组成的集合Hom(V,V) （自身到自身） 即是域F上的线性空间，又是一个有单位元的环</li>
<li>研究线性映射的 核 与 象， V到V’的线性映射A的核 Ker A是一V的一个子空间，A的象Im A是V’的一个子空间. 线性映射A的核Ker A可以用来研究线性空间V的结构</li>
<li>研究线性映射和线性变换的矩阵表示。</li>
<li>V上的线性函数以及V的对偶空间V’ (他是V上所有线性函数组成的线性空间)</li>
</ol>
<span id="more"></span>

<h2 id="9-1-线性映射及其运算"><a href="#9-1-线性映射及其运算" class="headerlink" title="9.1 线性映射及其运算"></a>9.1 线性映射及其运算</h2><p>两个线性空间。元素映射，加法映射（保持加法），乘法映射（保持乘法）。 则是线性映射</p>
<p>V到自身的 线性映射。 通常称为V上的线性变换。</p>
<p>线性空间V-&gt;域F, 称为V上的线性函数</p>
<p>例如</p>
<ul>
<li>区间(a,b)上，所有 一次 可微函数 集合，构成线性空间，其求导过程 是一个线性空间，其导函数集合 也是一个线性空间 （这里的映射是双射）</li>
<li>区间<code>[a,b]</code>上 所有 连续函数组成集合，构成线性空间，做定积分 是一个到R的映射，也是线性映射，（这里可能不同函数的 定积分值相同，不是单射，但也是线性映射，这里展示列一种降维的例子）</li>
<li>过原点 的3维向量集合 到一个过原点给定平面的投影向量，同样是一个带有降维的线性映射</li>
<li>矩阵 $A_{s\times n}$, A: $F^n\to F^s, a \to Aa$ 线性代数里常见的矩阵乘法，这个例子中 如果s &gt; n, 将不是满射，</li>
<li>零映射，把V中任意向量都映射到 V’中零向量</li>
<li>恒等变化 V 所有向量映射到自身 ， 记作$I$</li>
<li>标准映射 V -&gt; V&#x2F;W， 是一个线性映射</li>
<li>线性空间之间的一个 同构映射</li>
</ul>
<hr>
<p>线性映射的存在性，投影</p>
<p>定理1. V和V’ 都是域F上的线性空间，V有限维度，V中取基S,V’任意n个向量$t_i$, 下面映射是一个线性映射</p>
<ul>
<li>A: V-&gt; V’</li>
<li>a 的按S表出的 $\sum {k_i}s_i \to \sum k_it_i$</li>
<li>这个其实就是说V中的按S的 坐标，在V’中 按照t_i的坐标，首先这始终是线性映射，置于映射结果 就看t_i的 线性有关性了</li>
</ul>
<p>定理2. V是域F上的一个线性空间，U和W是V的两个子空间，且U和W关于V互补</p>
<ul>
<li>任取 V中向量a,唯一表示成两个子空间向量和, a&#x3D;a_1+a_2,那么a_1,a_2分别称作在子空间中的投影</li>
<li>投影是幂等变换</li>
</ul>
<p>定义2：如果线性变化A 满足$A^2 &#x3D; A$那么称作幂等变换</p>
<p>定义3：两个线性变换 A,B 如果 AB&#x3D;BA&#x3D;0 那么成A,B是正交的</p>
<ul>
<li>(上面 V到W的投影$P_W$)和(V到U的投影$P_V$)是 正交的<ul>
<li>也就是 投影到W 再投影到U 一定投影到零</li>
</ul>
</li>
</ul>
<hr>
<p>三，线性映射的运算和线性映射的整体结构</p>
<p>V和V’都是域F上的线性空间，</p>
<ul>
<li>所有线性映射组成的集合记作$Hom(V,V’)$</li>
<li>所以线性变换组成的集合记作Hom(V,V)</li>
</ul>
<p>$A\in Hom(V,U)， B\in Hom(U,W)$ 那么 $BA\in Hom(V,W)$ 非常显然不满足交换律</p>
<p>若 $A\in Hom(V,V’)$ 且可逆，那么是一个同构映射， $A^{-1} \in Hom(V’,V)$</p>
<p>定义，线性映射之家你的加法和乘法:</p>
<p>$A,B\in Hom(V,V’)$</p>
<p>$(A+<em>{定义}B)a&#x3D;Aa+</em>{V’}Ba$</p>
<p>$(k\cdot_{定义}A)a&#x3D;k\cdot_{V’}(Aa)$</p>
<p>能够验证 线性映射 满足 线性空间8条法则，因此$Hom$是性空间。 这里我们得到一种 映射的集合 是线性空间</p>
<p>线性映射的乘法有左右分配率，但是没有交换律</p>
<p>特别的 $Hom(V,V)$ 对于加法和乘法构成 一个有单位元 的环</p>
<p>定义4. 一个非空集合A，如果有加法、乘法运算，以及域F与A的纯量乘法运算，并且A对于加法和纯量乘法成为域F上的一个线性空间，A对于加法和乘法成为一个有单位元的环，A的乘法与 纯量乘法满足 $k(ab)&#x3D;(ka)b&#x3D;a(k)b, k\in F,ab\in A$</p>
<ul>
<li>那么称A是域F上的一个代数，线性空间维数A 称作 代数A的维数</li>
<li>简短说:<ul>
<li>A自身 环</li>
<li><code>[F,A]</code> 构成 线性空间</li>
<li>$k(ab)&#x3D;(ka)b&#x3D;a(k)b, k\in F,ab\in A$</li>
<li>其实 这里 A自身环 和 &lt;F,A&gt; 的线性空间 两个中的加法 是同样的</li>
</ul>
</li>
</ul>
<p>$Hom(V,V)$ 是域F上的一个代数</p>
<p>矩阵 $M_n(F)$ 对于矩阵的加法、乘法与纯量乘法，成为域F上的一个代数</p>
<p>Hom(V,V’) 中 定义 减法 $A-B &#x3D; A+(-B)$</p>
<p>Hom(V,V)中 定义 <code>正整数</code> 指数幂: $A^n&#x3D;$ n个A做乘法</p>
<p>这里定义的幂次全是整数</p>
<p>可逆时 $A^{-m}\to (A^{-1})^m$</p>
<p>$A^m\cdot A^n &#x3D; A^{m+n}$</p>
<p>$(A^m)^n &#x3D; A^{mn}$</p>
<p>$f(x)\in F[x]$ 多项式，带入$A$, 显然$f(A)\in Hom(V,V)$, 称作f(A)的一个多项式，</p>
<p>$f(A)g(A)&#x3D;g(A)f(A)$, 注意这里要两边一样</p>
<p>所以多项式组成集合记作$F[A]$, $F[A]$对于减法乘法都封闭，所以是一个环,</p>
<ul>
<li>$F[A]$ 是 Hom(V,V)的子环</li>
<li>$F[A]$是交换环</li>
<li>$I\in F[A]$</li>
<li>$F[A]$中所有数乘变换 组成的集合 是 $F[A]$的一个子环，且域F与这个子环之间有一个双射，且保持 加法乘法运算, 因此$F[A]$可以看成$F$的一个扩环</li>
<li>f(x)中 可以用$F[A]$中元素带入</li>
</ul>
<p>例如 线性空间V的两个互补子空间U,W的投影 $P_U,P_W$</p>
<ul>
<li>自身幂等</li>
<li>$P_{U},P_{W}$正交</li>
<li>$(P_{U}+P_{W})a &#x3D; a$ 所以$P_{U}+P_{W}&#x3D;I$</li>
</ul>
<p>那么逆命题呢?</p>
<ul>
<li>在线性空间V上 $A+B&#x3D;I, AB&#x3D;0,A^2&#x3D;A,B^2&#x3D;B$ 那么A,B能否看作两个子空间的投影呢</li>
<li>直接反过来，U&#x3D;Im A, V&#x3D; Im B<ul>
<li>加，纯量乘封闭 U,V 都是子空间</li>
<li>任意 V中可表示两个的和， 所以 U+V (子空间的和运算) &#x3D;V，接下来只需要证明交只有零向量</li>
<li>任意 属于交的 a&#x3D;Ax&#x3D;By 两种表示法<ul>
<li>a&#x3D;Ax&#x3D;AAx&#x3D;Aa&#x3D;A(By)&#x3D;(AB)y&#x3D;0</li>
</ul>
</li>
<li>至此 U,V是两个互补线性子空间</li>
<li>还需要证明 A,B就分别是他们的投影 即$P_U &#x3D; A$<ul>
<li>那么根据定理2(互补， 表示成 子空间向量和，分量的映射，那么就是投影)</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>命题2.</p>
<ul>
<li>A,B 是V上正交幂等变换, A+B&#x3D;I. 则$V&#x3D;Im A \oplus Im B$ 这里是直和</li>
</ul>
<h2 id="9-2-线性映射的核与象"><a href="#9-2-线性映射的核与象" class="headerlink" title="9.2  线性映射的核与象"></a>9.2  线性映射的核与象</h2><p>定义1. 核 A:V-&gt;V’ ，那么ker A &#x3D; V中 映射到V’的零向量的所有向量</p>
<p>ker A &#x3D; { $a\in V | Aa&#x3D;0$ } </p>
<p>$Im A &#x3D; AV$</p>
<p>命题1. ker A是V的一个子空间, Im A是 V’的一个子空间</p>
<ul>
<li>因为加法乘法不变，所以只需要证明封闭性即可</li>
<li>同样 A是线性映射，保证了 Im A的 加法乘法的运算性质，只需要证明封闭</li>
</ul>
<p>命题2 A是V-&gt; V’,</p>
<ol>
<li>是单射 当且仅当 Ker A &#x3D; 0, <ol>
<li>&#x3D;&gt; 因为0始终属于Ker A</li>
<li>&lt;&#x3D; 任意两个Aa&#x3D;Ab相等 那么差A(a-b)&#x3D;0反过来在a-b \in ker 0中，而ker 0只有0,所以 a&#x3D;b</li>
</ol>
</li>
<li>满射当且仅当 Im A &#x3D; V’， 就是定义</li>
</ol>
<p>定理1， A:V-&gt;V’,  那么 V&#x2F;Ker A 和 Im A同构</p>
<ul>
<li>$\sigma: a+Ker A \to Aa$<ul>
<li>是映射(同样输入唯一输出) a+kerA&#x3D;b+kerA &lt;&#x3D;&gt; a-b \in ker A ,&#x3D;&gt; A(a-b)&#x3D;0 &lt;&#x3D;&gt; Aa&#x3D;Ab 且是单射，满射，双射（单射 双射 线性映射不要求，但是同构要求）</li>
<li>再 容易证明 保持 加法和乘法，所以 同构映射</li>
</ul>
</li>
</ul>
<p>定理2. 设V和V’都是F上的线性空间,V是有限维，摄A是一个线性映射，Ker A和Im A都是有限维度 且 dim Ker A + dim Im A &#x3D; dim V</p>
<ul>
<li>由上 dim(Im A) &#x3D; dim(V&#x2F;Ker A) &#x3D; dim(V) - dim(Ker A)</li>
</ul>
<p>定理3. 有限维线性空间,A:V-&gt;V’ 线性映射</p>
<ul>
<li>A是单射</li>
<li>&lt;&#x3D;&gt; Ker A &#x3D; 0</li>
<li>&lt;&#x3D;&gt; dim(Im A)&#x3D;dim (V) &#x3D; dim(V’)</li>
<li>&lt;&#x3D;&gt; ImA&#x3D;V’</li>
<li>&lt;&#x3D;&gt;A是满射</li>
</ul>
<p>推论1. A: V-&gt;V 线性变换： 单射&lt;&#x3D;&gt; 满射</p>
<p>根据这个，可以有矩阵乘法 维数的一种证明</p>
<p>$A_{s\times n}:F^n\to F^s$</p>
<p>Ker A 等于 AX&#x3D;0 的解空间</p>
<p>ImA 等于A的列空间</p>
<p>$dim Ker A  + dim Im A &#x3D; dim F^n$ 这在MIT 课用 矩阵解和图画展示了</p>
<p>dim (null space) + rank A &#x3D; n(列数)</p>
<hr>
<p>注意！对于线性变化，虽然 维数 和 等于 dim(kerA)+dim(ImA)&#x3D;dim V, 但是 两个空间 的 和 并不一定等于，其实显然，本来ker A是V中的，但是Im V是转换过的, 这两个 没啥关系，相当于 按照 ker A的规则压缩，压缩后的和之前的 就不相关的感觉更自然</p>
<ul>
<li>比如 $K[x]<em>n$ 求导D, $Im D &#x3D; K[x]</em>{n-1}, Ker D &#x3D; K$ 显然 $K[x]_{n-1}+K\neq K[x]_n$</li>
</ul>
<p>命题3. A是线性空间V上的线性变换，如果是V上的幂等变换$A^2&#x3D;A$， 那么 $V&#x3D;Im A \oplus Ker A$</p>
<ul>
<li>比上面多一个幂等</li>
<li>上面已经证明了 维数 ImA 和KerA的和是V,那么只需要证明 它们是互补（任何V中可表示，之间交为0）</li>
</ul>
<p>推论2, V中互补的U,W. $U&#x3D; Im P_U, W&#x3D;Ker P_U$,</p>
<ul>
<li>前半之前证明过了，后半根据命题3</li>
</ul>
<p>定义. A:V-&gt;V’ 余核 Coker A &#x3D; V’&#x2F;Im A</p>
<p>命题4. A:V-&gt;V’ （线性空间之间的线性映射), 那么 满射 &lt;&#x3D;&gt; Coker A &#x3D; 0</p>
<ul>
<li>满射</li>
<li>&lt;&#x3D;&gt; ImA&#x3D;V’</li>
<li>&lt;&#x3D;&gt; V’&#x2F;Im A&#x3D;0</li>
</ul>
<h2 id="9-3-线性映射和线性变换的矩阵表示"><a href="#9-3-线性映射和线性变换的矩阵表示" class="headerlink" title="9.3 线性映射和线性变换的矩阵表示"></a>9.3 线性映射和线性变换的矩阵表示</h2><p>A:V-&gt;V’, $F^n\to F^s$</p>
<p>在V中 任意x&#x3D;$\sum k_ia_i$ 用V的基a唯一表示</p>
<p>而对于V中的基的每个向量，经过变化$Aa_i &#x3D; \sum l_{ij} a’_j$ 在V’中，被V’的的基a’ 唯一表示</p>
<p>直接关注基的变换 $(Aa_1,\cdots,Aa_n) &#x3D; (a’_1,\cdots,a’_s) (l 矩阵)$</p>
<p>那么 要表示x,就是两边同时右乘上 k的列向量 A x &#x3D; (A V基) * k列 &#x3D; V’基 * l及转换矩阵 * k列</p>
<p>对于 线性变换(V-&gt;V):</p>
<ul>
<li>(A V基) &#x3D; V基(两边选择一样的基) * l及转换矩阵</li>
<li>所以 把线性变换 对应 一个 右乘$L_A$矩阵</li>
<li>变换A V基 &#x3D; V基 * 矩阵A</li>
</ul>
<p>若 A 是幂等变换，根据 命题3, $V&#x3D;Im A \oplus Ker A$</p>
<ul>
<li>基a(Im A)+基b(Ker A) 是V的一个基</li>
<li>Aa&#x3D;a</li>
<li>Ab&#x3D;0</li>
<li>所以 如果选择基 &#x3D; <code>[...基a,...基b]</code></li>
<li>那么 矩阵A &#x3D; <code>对角矩阵[I_rank(a),...0]</code></li>
</ul>
<p>命题1. rank(变换A) &#x3D; rank(V中选择基 的一个 矩阵A)</p>
<ul>
<li>rank(变换A) &#x3D; dim(Im A) &#x3D; rank(A)</li>
</ul>
<hr>
<p>Hom(V,V’) 与$M_{s\times n}(F)$的关系,  Hom(V,V) 与$M_{n}(F)$的关系</p>
<p>定理1. (选V基)-&gt;(选V’基): 线性映射A 与 对应的变换矩阵A 是同构的</p>
<ul>
<li>Hom(V,V’) 同构于 $M_{s\times b}(F)$, 注意的是这里 两边基先选定，而基的选定并不要求 标准，就已经有了同构</li>
<li>dim (Hom(V,V’)) &#x3D; sn &#x3D; (dim V)(dim V’)</li>
</ul>
<p>特殊的V’ 取V</p>
<p>变换: (变换A变换B)a&#x3D;变换A(变换B a)&#x3D;变换A (a 矩阵B)&#x3D;(变换A a) 矩阵B &#x3D; a 变换A 矩阵B</p>
<p>定义1. M,M’都是域F上的代数，双射$\sigma$ 是 线性空间的同构映射，又是环的同构映射，那么称作代数的同构映射</p>
<ul>
<li>这里其实再次强调了， 同构不只是元素的映射 还有运算的保持</li>
</ul>
<p>定理2. $线性变换A\to 矩阵A$ 是 Hom(V,V) 到 M_n(F)的一个同构映射</p>
<p>变换可逆</p>
<ul>
<li>&lt;&#x3D;&gt;  存在变换B, 变换A变换B&#x3D;变换B变换A&#x3D;变换I</li>
<li>&lt;&#x3D;&gt; 存在矩阵B, 矩阵A矩阵B&#x3D;矩阵B矩阵A&#x3D;矩阵I</li>
<li>&lt;&#x3D;&gt; 矩阵可逆</li>
</ul>
<p>类似的 变换的幂等 与 矩阵的幂等 也是冲要的</p>
<hr>
<p>向量在线性映射下 象的坐标</p>
<ul>
<li>(变换A)a&#x3D;变换A((基)X)&#x3D;(变换A 基)X&#x3D;基(矩阵A)X</li>
<li>所以对于 同样的基的选择，(A_基)X是新的坐标,….. 这里 矩阵A是与基的选择是有关的！！！！，所以在书写上应该把 选定基作为一个很前置的很固定的条件</li>
</ul>
<p>对于线性映射 A:V-&gt;V’ 来说，a的 新坐标 $&#x3D; 矩阵A_{基V\to 基V’}X$</p>
<hr>
<p>不同基下 矩阵之间的关系</p>
<p>基1 变换A_1, 基2 变换A_2</p>
<p>$A_2&#x3D;S^{-1}A_1S$</p>
<p>已知</p>
<p>变换A 基1 &#x3D; 基1 * 矩阵A_1</p>
<p>变换A 基2 &#x3D; 基2 * 矩阵A_2</p>
<p>基2 &#x3D; 基1 * 矩阵S</p>
<p>那么有 </p>
<p>$变换A 基2 &#x3D; 变换A (基1 * 矩阵S) &#x3D; (变换A 基1) * 矩阵S &#x3D; (基1 矩阵A) * 矩阵S &#x3D; ((基2 * S^{-1})A)S &#x3D; 基2 (S^{-1}AS)$</p>
<p>表明 同一个线性变换， 不同的基下的矩阵之间的相似的！！！！！</p>
<p>相似的矩阵的 det,rank,trace迹 是相等，叫做线性变换的 det,rank,trace</p>
<ul>
<li>5章证明过 利用 trace(AB)&#x3D;trace(BA) 核心结论</li>
<li>这是一个找相似矩阵的最简单形式的好理由</li>
</ul>
<h2 id="9-4-线性变换的特征值，特征向量，线性变换和对角化的条件"><a href="#9-4-线性变换的特征值，特征向量，线性变换和对角化的条件" class="headerlink" title="9.4 线性变换的特征值，特征向量，线性变换和对角化的条件"></a>9.4 线性变换的特征值，特征向量，线性变换和对角化的条件</h2><p>希望找到 对角矩阵D</p>
<p>变换A 基 &#x3D; 基 * 对角矩阵</p>
<hr>
<p>一、线性变换 的特征值和特征向量</p>
<p>$(变换A) 非零向量a &#x3D; \lambda a, \lambda\in F$</p>
<p>特征值$\lambda$和对应特征向量$a$</p>
<p>作用就是把这个特征向量压缩&#x2F;拉伸 倍数</p>
<p>变换A的特征值 &lt;&#x3D;&gt; 矩阵A的特征值</p>
<p>特征向量 是 属于 特征值的一个特征向量： 变换A &lt;&#x3D;&gt; 矩阵A</p>
<hr>
<p>二、线性变换可对角化的充要条件</p>
<p>如果V中存在一个基，使得线性变换A在这个基下的矩阵是对角矩阵，那么称A可对角化</p>
<p>定理1. 域F上n维线性空间V上的线性变换A可对角化，当且仅当A有n个线性无关的特征向量， 此时在 基下的矩阵为 特征值的对应位置的对角矩阵， 称作A的标准形</p>
<p>推论1. V上的线性变化A可对角化，当且仅当V中存在由A的特征向量组成的一个基</p>
<p>特征子空间： 对于特征值$\lambda_0$, 所有该特征值对应的特征向量构成的空间, 记作$V_{\lambda_0}$</p>
<p>$a\in V_{\lambda_0}$&lt;&#x3D;&gt; 变换$Aa&#x3D;\lambda_0a$ &lt;&#x3D;&gt; $(\lambda_0I-变换A)a&#x3D;0$ &lt;&#x3D;&gt; $a\in Ker(\lambda_0I-变换A)$</p>
<p>也就是 特征值 的 特征子空间 是 线性变换$\lambda_0I-A$的核, 所以 度 &#x3D; n-解空间</p>
<p>所以 $dim(V_{\lambda_0})&#x3D;n-rank(\lambda_0I-A)$</p>
<p>推论2, 可对角化 当且仅当 属于不同特征值 的特征子空间的维数直和等于n</p>
<p>推论3. 可对角化，当且仅当 V&#x3D;特征子空间的直和</p>
<h2 id="9-5-线性变换的不变子空间-Hamilton-Cayley-定理"><a href="#9-5-线性变换的不变子空间-Hamilton-Cayley-定理" class="headerlink" title="9.5 线性变换的不变子空间, Hamilton-Cayley 定理"></a>9.5 线性变换的不变子空间, Hamilton-Cayley 定理</h2><p>定义1. 设V是域F上的线性空间, A是V上的一个线性变换，V的子空间W如果具有下述性质：“对于任意 $a\in W$ 都有$变换A a\in W$，那么称W是A的不变子空间, A-子空间</p>
<ul>
<li>零子空间0 是 平凡的不变子空间</li>
</ul>
<p>命题1. 变换A的核 与 象，变换A的特征子空间都是 A-子空间</p>
<ul>
<li>核：因为 这个空间里所有的运算结果都是0向量，而零向量的确属于核</li>
<li>象：因为 $F^n$中任意向量 经过变换都得到象，而象是$F^n$的子空间，变换后依然是象</li>
<li>特征子空间: 对于一个给定的特征子空间，根据定义，每个向量 在这个空间中都是 $\lambda$ 倍的长度变换，</li>
</ul>
<p>命题2. A,B都是V上的线性变换，如果A,B可交换，那么Ker B,Im B, B的特征子空间 都是A-子空间</p>
<ul>
<li>这里只是 充分: 可交换 &#x3D;&gt; Ker B, Im B, B特征子空间，是 A-子空间</li>
<li>$a\in ker B \to Aa\in ker B$: 变换B(变换A a) &#x3D; 变换A (变换B a) &#x3D; 变换A 0 &#x3D; 0</li>
<li>$a\in Im B\to Aa\in Im B$: 存在b,使得a&#x3D;Bb, Aa&#x3D;ABb&#x3D;BAb</li>
<li>$a\in V_{\lambda}\to Aa\in V_{\lambda}$ : $Ba&#x3D;\lambda a$, $BAa&#x3D;ABa&#x3D;A\lambda a&#x3D;\lambda Aa$</li>
</ul>
<p>推论1, $f(x) \in F[x]$ 则 $Ker f(A),Im f(A),f(A)$的特征子空间 都是 A-子空间， 因为$f(A)$和A可交换</p>
<p>命题3. 不变子空间的 和 与 交 仍是 A的不变子空间</p>
<p>命题4. 单个非零向量 的生成空间 是A-子空间，当且仅当 是A的一个特征向量</p>
<ul>
<li>特征向量 &#x3D;&gt; 显然能构成</li>
<li>如果能构成 &#x3D;&gt; 满足特征向量定义</li>
</ul>
<p>命题5. 由向量组 a1,a2… 生成空间W是A-子空间，当且仅当$Aa_i \in W$</p>
<ul>
<li>是A-子空间 &#x3D;&gt;  定义需要属于</li>
<li>如果全部属于 &#x3D;&gt; 任何一个空间中向量 可被aI线性表示，也就拆分表示再合并，可以被 Aai线性表示</li>
</ul>
<hr>
<p>总而言之，如果W是V上线性变换A的不变子空间</p>
<ul>
<li>那么可以诱导出子空间W上的线性变换 A|W<ul>
<li>定义 $a\in W, (A|W)a&#x3D;Aa$</li>
</ul>
</li>
<li>又可以诱导出 商空间 V&#x2F;W上的线性变换<ul>
<li>定义 $V&#x2F;W\to V&#x2F;W$<ul>
<li>$a+W\to Aa+W$</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p>二、 不变子空间 研究 线性变换的矩阵表示</p>
<p>A是线性变换 且 A不可对角化， 寻求A的最简形式</p>
<p>定理1. A是域F上n维线性空间V上的一个线性变换，A在V的一个基下的矩阵为分块对角矩阵 当且仅当V能分解成A的   非平凡  不变子空间的直和</p>
<p>定理2. 设V是域F上的线性空间，A是线性变换, $K[x]$中 f(x)&#x3D;f1(x)f2(x),且(f1(x),f2(x))&#x3D;1 则</p>
<ul>
<li>Ker f(A)&#x3D;ker f1(A) 直和 Ker f2(A)</li>
<li>显然 带入 变换A, Ker fi(A) 是 Ker f(A)的子集，因为 f(A)a&#x3D;任意 * fi(A) a&#x3D;任意 * 0 &#x3D; 0</li>
<li>又多项式 无公因式 u(x)f1(x)+v(x)f2(x)&#x3D;1<ul>
<li>u1(A)f1(A)+u2(A)f2(A)&#x3D;I</li>
<li>取 a \in ker f(A)</li>
<li>a&#x3D;Ia&#x3D;u1(A)f1(A)a+u2(A)f2(A)a<ul>
<li>前面 这个 左乘f2(A)有  f2(A) u1(A)f1(A)a &#x3D; u1(A) f(A)a&#x3D;u1(A) 0 &#x3D; 0, 说明 属于ker f2(A)</li>
<li>后面 同理 属于 ker f1(A)</li>
</ul>
</li>
<li>这里说明了kerf(A)中的任意 a 可以表示成 ker f1(A)和ker f2(A)中的两个向量之和，这里证明了 “和”</li>
<li>那么还需要证明 唯一表示 或者 交只有0向量</li>
<li>取 a \in ker f1(A)交 ker f2(A)</li>
<li>a&#x3D;Ia&#x3D;u1(A)f1(A)a+u2(A)f2(A)a&#x3D;0, 说明只有0向量</li>
</ul>
</li>
</ul>
<p>定理3. 把定理2推广到更多子空间的直和，f(x)&#x3D;\prod fi(x), 且 (fi(x),fj(x))&#x3D;1,i \neq j两两互素</p>
<ul>
<li>那么 ker f(A)&#x3D; 直和 ker fi(A)</li>
<li>证明: 归纳法</li>
</ul>
<hr>
<p>三、线性变换和矩阵的零化多项式，Hamilton-Cayley定理</p>
<p>定义2, F上的一元多项式使得 f(A)&#x3D;0, 那么称 f(x)是A的一个零化多项式， A是线性变换</p>
<p>令 n &#x3D; dim V, 则$dim(Hom(V,V))&#x3D;n^2$ 从而</p>
<ul>
<li>$I,A,A^2,\cdots,A^{n^2}$ 一定线性相关<ul>
<li>不妨令 $A^0&#x3D;I$</li>
<li>存在不全为零的$k_i$使得 $\sum_{i&#x3D;0}^{n^2} {k_i} A^i&#x3D;0$</li>
<li>令 $f(x)&#x3D;\sum_{i&#x3D;0}^{n^2} k_ix^i$ ，则$f(A)&#x3D;0$是一个 非零多项式 的 零化多项式</li>
</ul>
</li>
</ul>
<p>定义3. F[x]中的多项式使得 f(A)&#x3D;0, 那么称 f(x)是A的一个零化多项式，A是矩阵</p>
<ul>
<li>和定义2不同的是这里是矩阵</li>
<li>矩阵总是能找到 一个线性变换 和 线性变换选的基<ul>
<li>线性变换 表达式 &lt;&#x3D;&gt; 矩阵表达式构成映射</li>
</ul>
</li>
</ul>
<p>伴随矩阵 $A^<em>A&#x3D;AA^</em>&#x3D;|A|I$</p>
<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[2x^3+x^2+1,x^2-3;</span><br><span class="line">x^3-1,2x+5] 按幂次拆分</span><br><span class="line"></span><br><span class="line">= x^3[2,0;1,0]+x^2[1,1;0,0]+x[0,0;0,2]+[1,-3;-1,5]</span><br></pre></td></tr></table></figure>

<hr>
<p>Hamilton-Cayley定理： A是域F上的n级矩阵，A的特征多项式 是A的零化多项式</p>
<ul>
<li>特征多项式 的来源是 特征值定义+行列式</li>
<li>零化多项式是 指 把A带入多项式 结果会是零矩阵</li>
</ul>
<p>证明:</p>
<ul>
<li>设$B(\lambda)$ 是 $\lambda I-A$ 的伴随矩阵</li>
<li>$B(\lambda)(\lambda I -A) &#x3D; |\lambda I-A|I&#x3D;f(\lambda)I$<ul>
<li>因为$B(\lambda)$ 是$\lambda I-A$ 的代数余子式，所以$B(\lambda)$最高次 不超过$\lambda^{n-1}$</li>
<li>$&#x3D;(\sum_{i&#x3D;0}^{n-1} \lambda^i B_i)(\lambda I-A)$</li>
<li>$&#x3D;\lambda^n B_{n-1}-B_0A + \sum_{i&#x3D;1}^{n-1}(\lambda^i (B_{i-1}-B_iA))$</li>
</ul>
</li>
<li>右侧$f(\lambda)I&#x3D;(\sum_{i&#x3D;0}^n a_i\lambda^i)I$</li>
<li>系数对应相等<ul>
<li>得到很多 $B_{i-1}-B_iA&#x3D;a_{i-1}I$</li>
<li>配幂次得到 $B_{i-1}A^{i-1}-B_iA^n&#x3D;a_{i-1}A^{i-1}$</li>
<li>全部相加 左侧&#x3D;$0$, 右侧&#x3D;$f(A)$ 也就是 把$A$带入$f(\lambda)$</li>
</ul>
</li>
</ul>
<p>所以 $f(\lambda)&#x3D;\prod f_i(\lambda)^{r_i}$, 其中$f_i$是两两不等 首一 不可约多项式</p>
<ul>
<li>则 $V &#x3D; Ker f(A) &#x3D;\oplus_i Ker(f_i(A)^{r_i})$ 所有的变换的核的直和</li>
<li>更特别的 如果$f(\lambda)&#x3D;\prod (\lambda-\lambda_i)^r_i$<ul>
<li>则 $V&#x3D;\oplus_i Ker((A-\lambda_i I)^{r_i})$<ul>
<li>其中每一核 称为A的根子空间</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="9-6-线性变换和矩阵的最小多项式"><a href="#9-6-线性变换和矩阵的最小多项式" class="headerlink" title="9.6 线性变换和矩阵的最小多项式"></a>9.6 线性变换和矩阵的最小多项式</h2><p>V是域F上的n维线性空间</p>
<p>A是V上的一个线性变换，找一个合适的基使得A在此基下的矩阵具有最简单的形式</p>
<p>第一步9.5 找A的一个非零的零化多项式</p>
<ul>
<li>f(\lambda) 分解成 两两不等 不可约多项式 方幂的乘积，<ul>
<li>则V能分解成A的不变子空间的直和</li>
<li>每个不变子空间取一个基，合起来成为V的一个基</li>
<li>A在这个基下的矩阵是分块对角矩阵</li>
</ul>
</li>
</ul>
<p>第二步，每个不变子空间中取依托各合适的基，使得A在这个不变子空间上的限制在此基下的矩阵具有最简单形式</p>
<hr>
<p>一、最小多项式的定义和性质</p>
<p>定义1. 线性变换A, A的所有非零的零化多项式中，次数最低的首相系数为1的多项式 成为A的最小多项式</p>
<p>命题1. 唯一的</p>
<ul>
<li>证明 首先 如果两个都是最小多项式 那么如果次数不同，那么次数大的肯定不是</li>
<li>那么 如果有两个次数相同的 但是不等的最小多项式， 那么它们的差 一定是更小次数的零化多项式</li>
</ul>
<p>命题2. 任意零化多项式 是 最小多项式的倍数</p>
<ul>
<li>多项式带余除法，如果有余那么 这个余多项式 是幂次更小的零化多项式</li>
</ul>
<p>命题3. 最小多项式 和 特征多项式 的根的集合 相同（根的重数幂次不一定相同）</p>
<ul>
<li>显然 最小多项式 | 特征多项式， 所以最小多项式的根是特征多项式的根</li>
<li>反之 若存在特征值 不是最小多项式根，选一个对应特征向量a,那么有 0&#x3D;(零化多项式)&#x3D;m(A)a&#x3D;(特征值替换)&#x3D;m(lambda) a, 因此是一个根</li>
</ul>
<p>命题4. A是域F上的n级矩阵，域E包含F,则A的最小多项式m(lambda),与A的特征多项式 f(lambda)在E中有相同的根</p>
<ul>
<li>取一对特征向量a和特征值lambda: 0&#x3D;m(A)a&#x3D;(展开)a&#x3D;m(lambda)a, 所以m(lambda)&#x3D;0</li>
</ul>
<p>命题5. 域F上最小多项式为 m(lambda), 域E包含F,那么仍然为m(lambda)</p>
<ul>
<li>首先 m(lambda)一定是 E上的零化多项式，那么最小多项式只可能是它的因式，而这个因式在F上会同样为零化多项式</li>
</ul>
<hr>
<p>二、 几类特殊线性变换或矩阵的最小多项式</p>
<p>A是幂零指数为l的幂零变换 &lt;&#x3D;&gt; $\lambda^l$是A的一个零化多项式，而当$r &lt; l$时，$\lambda^r$不是零化多项式&lt;&#x3D;&gt;  A的最小多项式是 $\lambda^l$</p>
<p>A幂等变换 &lt;&#x3D;&gt; $\lambda^2-\lambda$ 是一个零化多项式，最小多项式为$\lambda,\lambda^2-\lambda,\lambda -1$中的一个</p>
<p>A是对合变换 &lt;&#x3D;&gt; $\lambda^2-1$是一个零化多项式， 最小多项式同理</p>
<p>A是周期为m的周期变换, &lt;&#x3D;&gt; $\lambda^m-1$是零化多项式，$\lambda^{&lt;m}-1$不是零化多项式, &lt;&#x3D;&gt; 同理是 前面的因式，不是后面的因式</p>
<p>定义2:</p>
<ul>
<li>Jordan块，对角是a,对角右移1位全是1,</li>
<li>例如 <code>[a,1,0;0,a,1;0,0,a]</code></li>
</ul>
<p>命题6： 主对角元为a的r级Jordan块，最小多项式等于它的特征多项式 $f(\lambda)&#x3D;(\lambda-a)^r$</p>
<ul>
<li>$J_r(a)-aI&#x3D;J_r(0)$有$J_r(0)^r&#x3D;0,J_r(0)^{&lt;r}\neq 0$</li>
</ul>
<p>定理1. V是线性变换，如果V能分解成A的一些非平凡不变子空间直和 $V&#x3D;W_1\oplus W_2\oplus \cdots\oplus W_s$</p>
<ul>
<li>$m(\lambda)&#x3D;$ 每个子空间 最小多项式的最小公倍式</li>
<li>推论4,如果A能写成对角分块矩阵，那么每个对角的块的 最小多项式就可以作为m_i用到上面去</li>
</ul>
<hr>
<p>三、用最小多项式研究线性变换的矩阵表示</p>
<p>定理2： 线性变换可对角化 &lt;&#x3D;&gt; 当且仅当 A的最小多项式m(lambda)在F[\lambda] 能分解成“不同”一次因式的成绩</p>
<ul>
<li>9.4推论3 V能表示成不同特征子空间的直和<ul>
<li>$V_{\lambda_i}&#x3D;Ker(A-\lambda_i I)$</li>
<li>因为 $V_{\lambda_i}$ 是A的不变子空间（其中任何向量 经过变换后还属于它）</li>
<li>那么 根据上面 <code>(A|V)a=Aa</code>, 其中A|V表示 在子空间的同样&#x2F;诱导出的变换A</li>
<li>任意$a\in V_{\lambda_i}$（诱导A-$\lambda_i$ 诱导I ）a&#x3D;(A-$\lambda_i$I)a&#x3D;0,从而 $\lambda-\lambda_i$ 是诱导变换A的零化多项式，，所以得到m</li>
<li>充分性，不同特征子空间的lambda不相同，所以多项式互素</li>
</ul>
</li>
</ul>
<p>推论5 n级矩阵A可对角化，当且仅当A的最小多项式，在F[lambda]中能分解成不同的一次因式的成绩</p>
<p>命题7</p>
<ul>
<li>幂等变化A一定可对角化<ul>
<li>最小是 $\lambda^2-\lambda$  的因式，一定可以</li>
</ul>
</li>
<li>幂零指数l &gt; 1的幂零变换一定不可对角化<ul>
<li>最小是$\lambda^l$ 一定不可以</li>
</ul>
</li>
<li>特征不等于2时，对合变换A一定可对角化。特征等于2时，不等于I的对合变换一定不可对角化<ul>
<li>特征：mod 3的特征是3,mod 7的特征是7</li>
<li>对合变换: AA &#x3D; I, </li>
<li>特征不等于2, 最小多项式是 $\lambda^2-1$ 的因式，因为这里特征不为2,所以 1 !&#x3D; -1</li>
<li>特征等于2,最小多项式是$\lambda^2-1$ 的因式，这里特征是2,所以1&#x3D;-1,$(\lambda+1)^2$的因式，如果$\lambda+1$是最小多项式$A&#x3D;-I&#x3D;I$ 这时就是I,所以不等于I的一定不能对角化</li>
</ul>
</li>
<li>F是复数域时，周期变换一定可对角化</li>
</ul>
<p>命题8, r &gt; 1的Jordan块 一定不可对角化，包含级数大于1的jordan块的jordan形矩阵一定不可对角化</p>
<ul>
<li>证明 最小多项式是 $(lambda-a)^r$</li>
</ul>
<p>推论6. A对角化，那么A的任意一个非平凡 不变子空间W, A|W都可对角化</p>
<ul>
<li>证明，也就是 子空间诱导A的最小多项式 是 A的最小多项式的因式，而A的最小多项式同样特征值最高幂次为1次，所以诱导的最高幂次也不会超过1次，得证</li>
</ul>
<p>命题9 A可对角化，A的任意不变子空间W &#x3D; $\oplus (V_{\lambda_i} \cap W)$的直和</p>
<ul>
<li>由上，不变子空间特征值 都是 A的特征值<ul>
<li>属于 A|W的某个特征值的 子空间 正是 对应的和W的交</li>
<li>并且 A|W可对角化，所以可以由它们的直和</li>
</ul>
</li>
</ul>
<p>命题10. A可对角化，当且仅当，特征多项式在包含F的代数封闭域中的全部n个根都在F中，且对于A的任一不变子空间W，都存在A的不变子空间作为W在V中的补空间。</p>
<h2 id="9-7-幂零变换的Jordan标准型"><a href="#9-7-幂零变换的Jordan标准型" class="headerlink" title="9.7 幂零变换的Jordan标准型"></a>9.7 幂零变换的Jordan标准型</h2><p>B是幂零变换，指数为l</p>
<p>存在向量a, $B^{&lt; l}a\neq 0,B^la&#x3D;0$</p>
<p>且$a,Ba,\cdots,B^{l-1}a$线性无关 （否则存在一个另一个 最小式 ）</p>
<p>是 子空间$&lt;a,Ba,\cdots,B^{l-1}a&gt;$的一个基</p>
<p>这个子空间是不变子空间（B(展开) &#x3D; 0+表示）</p>
<p>在这个基下的矩阵为，$jordan(0)$ 对角右便宜1个为1</p>
<hr>
<p>定义1. $a\in V$, $B^{t-1}a\neq 0,B^ta&#x3D;0$, 那么$&lt;B^{t-1}a,…Ba,a&gt;$称作B-强循环子空间</p>
<ul>
<li>是不变子空间</li>
<li>这些是它的一个基</li>
</ul>
<p>定理1. B是r维线性空间W上的幂零变换，指数为l,则W能分解成 dim W_0个B-强循环子空间的直和</p>
<ul>
<li>其中$W_0$是B的属于特征值0的特征子空间</li>
<li>幂零，特征值有0,所以$W_0 !&#x3D;0$</li>
<li>dim W&#x2F;W_0 &#x3D; dim W - dim W_0 &lt; r<ul>
<li>商空间 $a+W_0\in W&#x2F;W_0$中， 诱导线性变换$B_0$, $B_0^l(a+W_0)&#x3D;B_0^la+W_0&#x3D;0+W_0&#x3D;W_0$<ul>
<li>所以 $B_0$ 是商空间上的幂零变换</li>
<li>归纳法，商空间可以分解成 如上形式的直和</li>
<li>W &#x3D; W_0 直和 （归纳中 上述形式的直和 个数为$s &#x3D; dim (W&#x2F;W_0)_0$）</li>
<li>由表示法 $\sum_i c_iB^{t_{i}}a_i &#x3D; 0$ 知道 这些$B^{t_i}a_i$ 在W_0中 且线性无关</li>
<li>又都是$W_0$中的，所以 $B^{t_i}a_i$ 扩充成W_0的一个基，</li>
<li>W &#x3D; 上述形式 每个的 幂次从$B^{t_i-1}a_i$ 多一个$B^{t_i}a_i$, 以及生于扩充所用到的基<ul>
<li>这里其实如何和 W&#x3D;W_0直和 归纳 对应着看的话</li>
<li>那么 归纳中的每一个都多一个向量，这些向量线性无关，且都属于W_0,然后W_0剩余的部分，每个向量一个 强循环子空间</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>定理2. B是r维线性空间W上的幂零变换，幂零指数为l,W中存在一个基，使得B在此基下的矩阵B为一个Jordan形矩阵，其中每个Jordan块的主对角元都是0,级数不超过l, Jordan块总数 &#x3D; dim(Ker B)&#x3D;r - rank(B),t级Jordan块的个数N(t)&#x3D;rank(B^{t+1})+rank(B^{t-1})-2rank(B^t)</p>
<ul>
<li>总数 &#x3D; dim W_0 &#x3D; dim Ker B &#x3D; r - rank(B)</li>
<li>rank $J_n(0)^m&#x3D;max(n-m,0)$</li>
<li>在考虑 $B^{t-1}$ 会让 小于t的 jordan块都变成零矩阵<ul>
<li>$rank(B^{t-1})&#x3D; 1<em>N(t)+2</em>N(t+1)+\cdots +(l-(t-1)) N(l)$</li>
<li>$rank(B^{t})&#x3D; 1*N(t+1)+\cdots +(l-t) N(l)$</li>
<li>$rank(B^{t-1})-rank(B^t)&#x3D; N(t)+\cdots +N(l)$</li>
<li>$rank(B^{t})-rank(B^{t+1})&#x3D; N(t+1)+\cdots +N(l)$</li>
<li>得证</li>
</ul>
</li>
</ul>
<h2 id="9-8-线性变换的jordan标准型"><a href="#9-8-线性变换的jordan标准型" class="headerlink" title="9.8 线性变换的jordan标准型"></a>9.8 线性变换的jordan标准型</h2><p>线性变换A的最小多项式m(lambda)在F[lambda]中的标准分解式为 $m(\lambda)&#x3D;\prod (\lambda-\lambda_i)^{l_i}$</p>
<p>那么V下存在一个基，使得在此基下的矩阵A为jordan形矩阵，主对角元是全部特征值</p>
<p>主对角元 $\lambda_j$的Jordan块的总数$N_j&#x3D;n-rank(A-\lambda_jI)$</p>
<p>lambda_i是所有不同特征值</p>
<p>$V&#x3D;Ker(A-\lambda_iI)^{l_i}$的直和</p>
<p>令$W_i&#x3D;Ker(A-\lambda_iI)^{l_i}$ ,$B_i&#x3D;A|W_i-\lambda_iI$</p>
<p>则$B_i$是 $W_i$上的幂零变换，存在基使得B_i在W_i上是Jordan形</p>
<p>在这个基下 诱导A 为$A_i&#x3D;\lambda_iI+B_i$</p>
<ul>
<li>$N_i&#x3D;dim Ker B_i&#x3D; dim Ker(A|W_i-\lambda_iI)&#x3D;dim(Ker(A-\lambda_iI))&#x3D;n-rank(A-\lambda_iI)$</li>
<li>$N_i(t)&#x3D;rank(A-\lambda_iI)^{t+1}+rank(A-\lambda_iI)^{t-1}-2rank(A-\lambda_iI)^{t}$</li>
</ul>
<hr>
<p>推论2，线性变换有jordan标准形，当且仅当A的最小多项式m(lambda) 在F[lambda] 中可分解成一次因式的乘积</p>
<p>推论3, 线性变换有jordan标准形，当且仅当A的特征多项式m(lambda) 在F[lambda] 中可分解成一次因式的乘积</p>
<p>定义1. A有Jordan标准型J,那么J中所有Jordan块的最小多项式称为A的初等因子</p>
<ul>
<li>如果有jordan标准型，那么完全有初等因子决定</li>
</ul>
<p>推论5. $A,B\in M_n(F)$如果A,B都有Jordan标准形，那么A与B相似当且仅当A与B有相同的初等因子</p>
<p>推论6,两个n级复矩阵相似当且仅当它们有相同的初等因子</p>
<ul>
<li>在复数域上所有n级矩阵组成的集合$M_n(C)$中，初等因子是相似关系下的一组完全不变量</li>
</ul>
<hr>
<p>综上所述，我们对于最小多项式m(lambda)在F[lambda]中能分解成一次因式乘积的线性变换A,通过把线性空间V分解成A的根子空间的直和，在A的每个根子空间$W_i&#x3D;Ker(A-\lambda_iI)^{l_i}$ 中取一个合适的基（通过 W_i上的幂零变换$B_i&#x3D;A|W_i-\lambda_iI$来找合适的基）使A|W_i在此基下的矩阵A_i为一个jordan形矩阵，把W_i的基合起来成唯V的一个基，A在V的这个基下的矩阵A&#x3D;diag{A1…As}就是一个jordan形矩阵。 这样求出A的最简单形式的矩阵表示的方法称为线性空间V分解成A的根子空间的直和的方法，简称为空间分解的方法。</p>
<hr>
<blockquote>
<p>这里要看章节7.2的 定义 定理3 &#x2F;4, 章节7.3定义定理 6&#x2F;7</p>
</blockquote>
<p>定理2. 任意一个非零的n级$\lambda-$矩阵 一定相抵于对角 lambda矩阵</p>
<ul>
<li>相抵：初等行列变换</li>
<li>diag {$d_1(\lambda),d_2(\lambda),\cdots,d_n(\lambda)$}</li>
<li>其中$d_i(\lambda) | d_{i+1}(\lambda)$</li>
<li>对于非0的d_i,首项系数为1,</li>
<li>满足这些要求的矩阵 称为 一个相抵标准形，或Smith 标准型</li>
</ul>
<p>定义2 $A(\lambda)$的相抵标准形中主对角线上的非零元 $d_i(\lambda)$ 称为$A(\lambda)$的不变因子</p>
<p>定义3 $s\times n$ $\lambda-$矩阵$A(\lambda)$ 的所有k阶子式的首一最大公因式称为A(lambda)的k阶行列式因子，记作$D_k(\lambda),1\le k \le min(s,n)$</p>
<p>定义4, 如果非零 $\lambda-$矩阵A($\lambda$) 有一个r阶子式不为0,而所有r+1阶子式都为0,那么称$A(\lambda)$的秩为r,零矩阵的秩规定为0</p>
<p>定理3, 相抵的$\lambda-$矩阵有相同的秩和相同的各阶行列式因子</p>
<ul>
<li>$D_1(\lambda)&#x3D;d_1(\lambda)$</li>
<li>$D_2(\lambda)&#x3D;d_1(\lambda)d_2(\lambda)$</li>
<li>$D_r(\lambda)&#x3D;\prod d_i(\lambda)$</li>
<li>$D_{r+1}(\lambda)&#x3D;0$</li>
</ul>
<p>因此有</p>
<ul>
<li>$d_1(\lambda)&#x3D;D_1(\lambda)$</li>
<li>$d_i(\lambda)&#x3D;\frac{D_i(\lambda)}{D_{i-1}(\lambda)}$</li>
</ul>
<p>定理4, 两个n级 $\lambda-$矩阵相抵，当且仅当它们有相同的不变因子，或者有相同的各阶行列式因子。</p>
<ul>
<li>术语K上的n级矩阵A的特征矩阵$\lambda I-A$的n阶行列式因子$D_n(\lambda)$就是$\lambda I-A$的行列式$|\lambda I - A|$即A的多项式</li>
</ul>
<p>定义5, $A(\lambda)$是$C[\lambda]$上n级非零矩阵，每个次数大于0的不变因子，分解成互不相同的一次因式方幂的乘积，所有这些一次因式的方幂（相同的必须按出现的次数计算）称为$A(\lambda)$的初等因子</p>
<p>定理5：C[lambda]上两个满秩矩阵，通过初等变换把A(lambda)化成对角行，然后，把主对角线上每个次数大于0的多项式分解成互不相同的一次因式的方幂的成绩，则所有这些一次因式的方幂就是A(lambda)的初等因子</p>
<p>定理7： 复数域上 两个n级矩阵的特征矩阵 相抵的充分必要条件是他们有相同的不变因子，或者它们有相同的初等因子</p>
<p>定理8：数域K上两个n级矩阵A与B相似的充要条件是， $\lambda I-A$与$\lambda I-B$相抵</p>
<p>定理9：数域K上两个n级矩阵相似的充分必要条件是 它们有相同的不变因子</p>
<ul>
<li>不变因子 是 $M_n(K)$在相似关系下的一组完全不变量</li>
<li>初等因子 是$M_n(C)$在相似关系下的一组完全不变量</li>
</ul>
<p>jordan块$J_r(a)$的 r阶行列式因子为 $D_r(\lambda)&#x3D;(\lambda - a)^r$, $D_{&lt;r}(\lambda)&#x3D;1$(右上角的1)</p>
<ul>
<li>有$d_r(\lambda)&#x3D;(\lambda-a)^r, d_{&lt;r}(\lambda)&#x3D;1$</li>
</ul>
<p>jordan矩阵，由它的每个jordan块的 初等因子决定（除了顺序）</p>
<p>定理10：n级复矩阵A都与一个jordan形矩阵相似，这个Jordan形矩阵除去其中jordan块的排列次序外被A唯一决定，称它为jordan标准型</p>
<ul>
<li>证明：设一个n级复矩阵的初等因子为 $(\lambda-\lambda_i)^{r_i},\cdots$ （可能有相同的特征值）</li>
<li>A所有初等因子的乘积等于 $\lambda I-A$的所有不变因子的成绩 &#x3D; A的特征多项式，从而 jordan块阶数和 &#x3D; n</li>
<li>每一个初等因子$(\lambda-\lambda_i)^{r_i}$决定一个Jordan块，共同组成jordan形矩阵</li>
<li>除了jordan块的次序外是相同的 唯一的</li>
<li>把 J（jordan形矩阵）中所有jordan块的最小多项式成为A的初等因子，<ul>
<li>m(lambda) &#x3D; 最小公倍数 ((lambda-lambda_i)^{r_i})</li>
<li>注意到特征值可能有相同的，因此 相同时 取最大的幂次</li>
</ul>
</li>
</ul>
<p>推论7： n级复矩阵   A的最小多项式 m(lambda) 扥远古A的最后一个不变因子 d_n(lambda)</p>
<p>推论8：数域K上n级矩阵   A的最小多项式m(lambda)等于A的最后一个不变因子d_n(lambda)</p>
<p>推论9: 数域K上n级 矩阵A 和 矩阵B 相似，当且仅当把它们堪称复矩阵后相似</p>
<ul>
<li>也就是 不变因子，在看成复矩阵后，还是同样的不变因子</li>
<li>&lt;&#x3D;&gt; A与B有相同的不变因子</li>
<li>&lt;&#x3D;&gt; A与B堪称复矩阵后相似</li>
</ul>
<p>定义6 设A是域F上n维 线性空间V上的线性变换，如果A在V的一个基下的矩阵是Jordan形矩阵，那么称这个基成为A的一个Jordan基</p>
<ul>
<li>如何求jordan基</li>
<li>A和B相似: $A&#x3D;P^{-1}BP$, 有$\lambda I-A&#x3D;P^{-1}(\lambda I - B)P$ 这两个相抵<ul>
<li>存在可逆 $\lambda-$矩阵$P(\lambda),Q(\lambda)$</li>
<li>$\lambda I - A&#x3D; P(\lambda)(\lambda I - B)Q(\lambda)$<ul>
<li>$P^{-1}(\lambda)(\lambda I - A)&#x3D;(\lambda I - B)Q(\lambda)$</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>引理1 设A是域F上的任一非零矩阵，G(\lambda)是任意一个n级lambda-矩阵， 则存在n级\lambda-矩阵$H_1(\lambda),H_2(\lambda)$ 和域F上n级矩阵$T_1,T_2$使得</p>
<ul>
<li>$G(\lambda)&#x3D;H_1(\lambda)(\lambda I - A) + T_1$</li>
<li>$G(\lambda)&#x3D;(\lambda I - A)H_2(\lambda) + T_2$<ul>
<li>证明 按照$\lambda$的幂次，把G(\lambda)拆开成和$G(\lambda)&#x3D;\sum_{i&#x3D;0}^m \lambda^i G_i(\lambda)$, 最高次$G_m(\lambda)$ 不是零矩阵</li>
<li>上面的  $H_1$ 最高次就是$m-1$,可以$H_1$同样的方式 按照幂次展开，$H_1(\lambda)&#x3D;\sum_{i&#x3D;0}^{m-1} \lambda^i B_i(\lambda)$<ul>
<li>幂次对应相等有 $B_{m-1}&#x3D;G_m$, $B_{i\le m-2}&#x3D;G_{i+1}+B_{i+1}A$, $T_1&#x3D;G_0+B_0A$ 所以有方法表示</li>
<li>同理 可以正民有 $H_2,T_2$</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>定理11. 域F上两个n级矩阵A与B相似当且仅当$\lambda I - A$与$\lambda I -B$相抵</p>
<ul>
<li>若相抵，则 存在$P,Q$ 使得$\lambda I -A&#x3D;P(\lambda I -B)Q$<ul>
<li>根据引理</li>
<li>$Q&#x3D;H_1(\lambda I -A)+T_1$</li>
<li>$P&#x3D;(\lambda I -A)H_2+T_2$<ul>
<li>$P^{-1}(\lambda I-A)&#x3D;(\lambda I - B)(H_1(\lambda I - A) +T_1)$ 带入得</li>
<li>$(P^{-1}-(\lambda I -B)H_1)(\lambda I -A)&#x3D;(\lambda I -B)T_1$,  右侧幂次为1或0,左右 左侧的左边因子 lambda幂次为0<ul>
<li>$S&#x3D; P^{-1}-(\lambda I -B)H_1$</li>
<li>$I&#x3D;PP^{-1}&#x3D;P(S+(\lambda I-B)H_1)$</li>
<li>$&#x3D;((\lambda I - A)H_2+T_2)S+(\lambda I-A)Q^{-1}H_1$</li>
<li>$&#x3D;T_2S+(\lambda I -A)(H_2S+Q^{-1}H_1)$ &#x2F;&#x2F; 这里注意到lambda的幂次，所以$H_2S+Q^{-1}H_1&#x3D;0$</li>
<li>所以 $I&#x3D;T_2S$, 从而S是可逆矩阵</li>
<li>$\lambda I - B&#x3D;S^{-1}(\lambda I - A)T_1&#x3D;\lambda S^{-1}T_1-S^{-1}AT_1$ 同样 lambda的幂次对应相等</li>
<li>有 $I&#x3D;S^{-1}T_1,B&#x3D;S^{-1}AT_1$<ul>
<li>即$B&#x3D;S^{-1}AS$</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p>例子 ： <code>A=[-1,1,0;-4,3,0;1,0,2]</code></p>
<p>行列式因子</p>
<ul>
<li>$D_3(\lambda) &#x3D; |\lambda I - A|&#x3D;(\lambda-2)(\lambda-1)^2$</li>
<li>$D_2(\lambda)&#x3D;1$ 这种 随便取几个很快得到1</li>
<li>$D_1(\lambda)&#x3D;1$ 这种 随便取几个很快得到1</li>
</ul>
<p>不变因子</p>
<ul>
<li>$d_1(\lambda)&#x3D;D_1(\lambda)&#x3D;1$</li>
<li>$d_2(\lambda)&#x3D;D_2(\lambda)&#x2F;D_1(\lambda)&#x3D;1$</li>
<li>$d_3(\lambda)&#x3D;D_3(\lambda)&#x2F;D_2(\lambda)&#x3D;(\lambda-2)(\lambda-1)^2$</li>
</ul>
<p>初等因子</p>
<ul>
<li>$(\lambda -2)$</li>
<li>$(\lambda -1)^2$</li>
</ul>
<p>Jordan标准型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">= diag(J_2(1),J_1(2))</span><br><span class="line">1 1</span><br><span class="line">  1</span><br><span class="line">    2</span><br></pre></td></tr></table></figure>

<h2 id="9-9-线性变换的有理标准型"><a href="#9-9-线性变换的有理标准型" class="headerlink" title="9.9 线性变换的有理标准型"></a>9.9 线性变换的有理标准型</h2><p>最小多项式，在F[lambda]中不能分解成一次因式的乘积，那么A的最简单形式的矩阵表示是什么样呢？</p>
<h2 id="9-10-线性函数与对偶空间"><a href="#9-10-线性函数与对偶空间" class="headerlink" title="9.10 线性函数与对偶空间"></a>9.10 线性函数与对偶空间</h2><p>V是域F上的线性空间，由于域F可以看成自身上的线性空间，因此自然可以考虑线性空间V到F的线性映射，我们把这种线性映射称为V上的线性函数</p>
<p>定义1. V是域上线性空间，V到F的一个映射f如果满足</p>
<ul>
<li>f(a+b)&#x3D;f(a)+f(b),$a,b\in V$</li>
<li>f(ka)&#x3D;kf(a), $a\in V, k \in F$</li>
<li>那么称f是V的一个线性函数</li>
</ul>
<p>例如 trace函数 ，有线性加和数量乘</p>
<p>线性函数空间</p>
<p><code>dim Hom(V,F)=(dim V)(dim F)=n * 1 = n</code></p>
<p>设V的一个基是 $a_1,\cdots,a_n$</p>
<ul>
<li>$\sigma: Hom(V,F)\to F^n, f\to (f(a_1),\cdots,f(a_n))$</li>
<li>$\sigma^{-1}$也是一个同构映射<ul>
<li>$F^n$中取标准基$\epsilon_1,\cdots,\epsilon_n$<ul>
<li>$\sigma^{-1}(\epsilon_1),\cdots,\sigma^{-1}(\epsilon_n)$ 是Hom中的一个基，称作对偶基， Hom(V,F)称为V的对偶空间 记作$V^*$</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>定理1 V是域F上的n维线性空间</p>
<ul>
<li>取两组基a_i,b_i,那么$V^*$中相应的对偶基有f_i,g_i</li>
<li>a1-&gt;b1的过度矩阵为A,那么f_i-&gt;g_i的过度矩阵$B&#x3D;(A^{-1})^T$<ul>
<li>证明</li>
<li>(b_i)&#x3D;(a_i)A</li>
<li>$(a_i)&#x3D;(b_i)A^{-1}$</li>
<li>$(g_i)&#x3D;(f_i)B$</li>
<li>注意到  Y &#x3D; base x 的意义可以看成Y的j列的第i个分量，在 base基下的 坐标是 x[i,j]</li>
<li>$A^{-1}[i,j]&#x3D;g_i(a_j)&#x3D;B[j;i]&#x3D;B^T[i;j]$</li>
</ul>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>9.1 幂等，投影，与 线性映射 本身也是一种线性空间</li>
<li>9.2 线性映射过程中：投影的结果是 0 的源叫做核Ker A，dim V&#x2F;(Ker A) &#x3D; dim (Im A), 其子空间关系</li>
<li>9.3 用矩阵来表示，建立 变换 &lt;&#x3D;&gt; 矩阵 的关系， 所有变换构成的线性空间 和 矩阵构成的线性空间的 同构<ul>
<li>一个具体变换，在不同基选择下，对应的矩阵 是相似的！！！</li>
<li>这是一个找相似矩阵的最简单形式的好理由</li>
</ul>
</li>
<li>9.4 从这个引入 特征向量 和 特征值</li>
<li>9.5 不变子空间（任意 子空间内向量 经过 线性变换A后 依然属于子空间）<ul>
<li>对于可对角化的 表示成 特征子空间直和，注意到这些特征子空间中 的 向量经过变化后 还是在特征子空间中，考虑引出不变子空间<ul>
<li>0,V 这两个都是平凡不变子空间（显然的）</li>
<li>Ker 和 Im 也是不变子空间</li>
<li>特征子空间 也是 不变子空间</li>
</ul>
</li>
<li>关系的研究 主要通过向量通过基的表示法</li>
<li>多项式 可以拆分成互素子多项式的乘积，那么多项式的Ker也可以拆成对应 子多项式Ker 的直和</li>
<li>零化多项式 f(A)&#x3D;0</li>
<li>Hamiton-Cayley 特征多项式 是 A的一个零化多项式</li>
</ul>
</li>
<li>9.6 最小多项式<ul>
<li>零化多项式，最小，</li>
<li>是 特征多项式的因式，唯一</li>
<li>特殊的零化多项式  和 jordan块</li>
</ul>
</li>
<li>9.7 幂零变换的jordan标准型<ul>
<li>结构是 强循环子空间: 取这样的基 可以产生 jordan块，<ul>
<li>可以分解成 dim W_0(特征值0的子空间)各 强循环子空间的直和</li>
</ul>
</li>
<li>一般的是由jordan块拼成的对角</li>
</ul>
</li>
<li>9.8 线性变换的jordan标准形<ul>
<li>$\lambda I - A$, 最小多项式 与 幂零建立联系，从而建立 线性变换和jordan块的联系</li>
<li>初等因子</li>
<li>不变因子（相抵标准型 主对角线） d_i</li>
<li>k阶行列式因子, D_i</li>
</ul>
</li>
</ul>
<p>脉络</p>
<ul>
<li><p>这里其实就是，对角化（并不通用）</p>
</li>
<li><p>观察对角化 表示成 特征子空间的直和</p>
<ul>
<li>对角化是 n个线性无关的向量</li>
</ul>
</li>
<li><p>也就是希望有一个基，在这个基下的 变换矩阵比较简单</p>
</li>
<li><p>如果能变成 这在矩阵书写形状上是对角分块，那么可以变成块之间的 直和</p>
</li>
<li><p>而 分块 的意义 就是“不变子空间”</p>
<ul>
<li>那么去哪里找这些不变子空间</li>
<li>另一个启发是， AB&#x3D;BA (如果可交换，那么ker B是A的不变子空间)<ul>
<li>那么可以考虑 A的幂次, &#x3D;&gt; A的多项式， F[A]&#x3D;{A的多项式} \in Hom(V,V)， 是交换环</li>
<li>所以 任何一个多项式 F[A]的 Ker 是A的不变子空间</li>
</ul>
</li>
<li>互素 f1,f2 以及f&#x3D;f1f2 &#x3D;&gt; 从而 uf1+vf2&#x3D;I &#x3D;&gt; 从而 可以去想 ker f &#x3D; ker f1 + ker f2 通过表示法，和直和定义（交空，和能表示所有）<ul>
<li>再归纳法，拓展到f&#x3D;多个 互素多项式的乘积，这样 ker f &#x3D; ker fi 的直和</li>
<li>我们希望整个V 分解成成A的不变子空间的直和</li>
<li>V &#x3D; ker ? &#x3D;&gt; 直和拆解<ul>
<li>而 ker 0 &#x3D; V 引出 零变换 （V的每个向量 的 映射到 0），和零化多项式</li>
</ul>
</li>
</ul>
</li>
<li>f(A)&#x3D;0 零化多项式 f[x]带入A<ul>
<li>矩阵 和 线性变换 同构，可以研究矩阵，线性变换零化多项式&lt;&#x3D;&gt; 矩阵零化多项式</li>
<li>一定存在： 抽屉原理 A^{n^2} 可得总能线性相关</li>
<li>gcd辗转相除 得到有最小，和都是倍数的性质 </li>
<li>Hamiton-Cayley 特征多项式 是 A的一个零化多项式<ul>
<li>书上是一个 伴随矩阵强行代数，然后的对应位置相等来完成证明了，视频是105，没有什么感受</li>
<li>搜了下知乎和google, 一个观点是，可对角化&#x3D;&gt;n个不同向量 f(A)ai&#x3D;f(lambda i)ai&#x3D;0 所以是零化多项式, 然后可对角化稠密+连续性 &#x3D;&gt; 不可对角化可以趋近，所以不可对角化也是零化多项式</li>
<li>V &#x3D; ker f(A) &#x3D; ker $A-\lambda_i I$ 们的直和，而特征多项式 可以分解成 方幂的乘积</li>
</ul>
</li>
</ul>
</li>
<li>希望有各更“临界的状态”，希望有个临界的 零化多项式，而不只是特征多项式，同时和特征多项式建立联系</li>
<li>引出 最小零化多项式m(\lambda)，（为了唯一 让最高次系数为1）<ul>
<li>又是 带余除法那一套，证明唯一性，倍数性</li>
<li>和特征多项式关系，倍数性质，根显然也是特征多项式根，而特征多项式根对应特征向量有 m(lambda_i)a_i&#x3D;(展开)a_i&#x3D;替换成A&#x3D;m(A)a_i&#x3D;0a_i&#x3D;0, 说明了 两边根相同（重数不保证）</li>
</ul>
</li>
<li>根据之前的 两个矩阵相似，可以看成同一个线性变换，在不同基下的 变换矩阵<ul>
<li>矩阵A 和 变换A 的 最小多项式 相同</li>
<li>矩阵B 和 变换A 的 最小多项式 相同<ul>
<li>所以 相似矩阵 最小多项式相同</li>
</ul>
</li>
</ul>
</li>
<li>V&#x3D;Wi们的直和<ul>
<li>每个W_i的最小多项式是m_i(lambda)</li>
<li>可以证明 V的最小多项式 是 m_i(lambda)的倍数（通过零化关系证明）<ul>
<li>所以V的最小多项式是 所有m_i的最小公倍数 的倍数</li>
<li>这边用 两边集合互相包含来证明相等 得到是最小公倍数。 {零化多项式} 互相包含 {m_i公倍数}</li>
<li>感觉似乎可以直接推至少的幂次吗？吧？</li>
</ul>
</li>
<li>结论就是 V&#x3D;W_i们的直和，那么m()&#x3D;lcm(m_i)<ul>
<li>从书写上，就是对角分块，的每个分块的 最小多项式 的 lcm</li>
</ul>
</li>
</ul>
</li>
<li>那么接下来就是研究 具体的小块的 最小多项式了<ul>
<li>复杂的难观察，先观察幂零变换，有特点是 幂次l时&#x3D;0, 小于l时非0</li>
<li>$f(\lambda)&#x3D;\lambda^l$</li>
<li>可对角化 &lt;&#x3D;&gt; 可分解成不同特征值的子空间的直和<ul>
<li>因为 向量属于 特征值$\lambda_i$的特征子空间中， 当且仅当 它  属于 ker $A-\lambda_i I$， 所以有 $V_{\lambda_i}&#x3D;Ker (A-\lambda_i I)$<ul>
<li>$\lambda-\lambda_i$是$A|V_{\lambda_i}$的一个零化多项式</li>
<li>即 特征子空间的零化多项式lambda最高幂次为1</li>
</ul>
</li>
<li>所以 V &#x3D; Ker(A-\lambda_i I) 们的直和</li>
<li>可对角化 &lt;&#x3D;&gt; 最小多项式每个特征值对应$\lambda-\lambda_i$最高幂次为1 , &lt;- 一个有用的结论<ul>
<li>推论 如果有幂次 &gt; 1则一定不可以对角化</li>
<li>例子 幂等可对角化 ，最小多项式 lambda(lambda-1) 的因式</li>
</ul>
</li>
</ul>
</li>
<li>$m(\lambda)&#x3D;\prod_i (\lambda-\lambda_i)^{l_i}$, 其中特征值两两不同，这里$l_i$ 表示原始矩阵的最小多项式的对应特征值的幂次<ul>
<li>V&#x3D; Ker $((A-\lambda_i I)^{l_i})$ 们的直和 （分块对角矩阵）</li>
<li>下个目标就是<ul>
<li>希望 对于 $(A-\lambda_i I)^{l_i}$中找到一个基，使得在这个基下的坐标尽量简单</li>
<li>如何 求 m_i(lambda)：<ul>
<li>找一个零化多项式，然后让它尽量小</li>
</ul>
</li>
<li>$\forall a_j\in W_i&#x3D;Ker((A-\lambda_i I)^{l_i})$ 有$(A|W_i-\lambda_i I)^{l_i}a_j&#x3D;(A-\lambda_i I)^{l_i}a_j&#x3D;0$<ul>
<li>所以 $(\lambda-\lambda_i)^{l_i}$ 是零化多项式，因为（上面把$A|W_i$带进入是零多项式）</li>
<li>证明最小：和m()中分解出的m_i中的幂次一致</li>
<li>$B_i&#x3D;A|W_i-\lambda_i I$, 是$W_i$上的幂零变换，幂次为$l_i$</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>引出问题：幂零变换在什么样的基最简形式， 如果找到的话，$A|W_i&#x3D;B_i+\lambda_i I$, 也就是最简单形式 + 对角线的lambda<ul>
<li>注意到$B^{l_i}&#x3D;0,B^{&lt;l_i}\neq 0$,所以存在 $a\in W_i$, $a,Ba,\cdots,B^{l_i-1}a$线性无关<ul>
<li>因为 $\sum k_jB^ja&#x3D;0$ 只有$k_j&#x3D;0$零解 （证明, 左边同时乘以$B^{l_i-1}$ 可以得到 $k_j&#x3D;0$, 反复 降低乘的幂次可得所有k是0</li>
<li>所以可以选作一组基</li>
<li>同时也是不变子空间 </li>
<li>B 在基 {$B^{l-1}a,\cdots,Ba,a$ } 下的矩阵为 对角线右移一位全1,其它地方全1的矩阵 &#x3D; Jordan_{l}(0)<ul>
<li>也就是前面学的  变换B (基)&#x3D;基 * 矩阵B</li>
<li>定义 a,Aa,…A^{t-1}a 线性无关, $A^t$ 属于它们的生成空间<ul>
<li>那么称作 循环子空间</li>
<li>如果$A^t&#x3D;0$ 称作 强循环子空间</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>希望把 对于是r维线性空间V的幂零变换B,希望把W分解成 与 B-强循环子空间 有关 的直和<ul>
<li>对于空间的维数大小，用数学归纳法<ul>
<li>1维 &lt;基&gt;</li>
<li>n维 （这个构造的思路怎么冒出来的），小于n维可分解，对于幂零变换B，幂零指数为l<ul>
<li>l&#x3D;1, 那么W分解成 每个基向量子空间的直和<ul>
<li>也就是B&#x3D;0, $B^1a&#x3D;0^1a&#x3D;0$ 所以每个基向量的子空间 是 0-强循环子空间</li>
</ul>
</li>
<li>l &gt; 1, $B\neq 0$, 有特征值, B的基于特征值0的特征子空间，$W_0\neq 0$<ul>
<li>$1\le dim W&#x2F;W_0 &#x3D;dim W - dim W_0 &lt; dim W &#x3D; r$</li>
<li>dim W&#x2F;W_0 可以拆成<ul>
<li>每个拆的多一个 $B^{幂次_i+1}a_i$</li>
<li>一方面 在W中 它们线性无关，一方面这些都是W_0中的，什么感觉呢 W&#x3D;W_0直和 V, 然后V是 可以拆分成 强循环 的直和的，很巧V中每个强循环的 增加一个幂次，都在W_0中，又线性无关，那么W_0就可以拆分成它们 以及 扩充的基，这样 总个数 就是W_0各强循环，这里的“强”（也就是幂次增1会让结果是0)保证了 每个多一个幂次都在$W_0$中，</li>
<li>个数是 dim W_0个</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>所以 有 空间V和幂零变换B（上面选择的是Ker) 然后就可以拆直和，（既然是直和，那么完成了拆分+填满）<ul>
<li>幂零矩阵 相似于 jordan形矩阵</li>
<li>$B_i&#x3D;A|W_i-\lambda_i I$ 是一个$W_i$上的幂零变换, 然后V取所有$W_i$对应基组成的，为jordan形矩阵</li>
</ul>
</li>
<li>如果 最小多项式，变换某个乘项幂次更大，根据拆分还是同样的基<ul>
<li>那么 我们就不一定要找最小多项式了，而是找特征多项式</li>
<li>$N_i&#x3D;dim Ker(A|W_i-\lambda I ) &#x3D; n-rank(A-\lambda_i I)$</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>最终证明是jordan型，表示成 特征子空间直和（可能有重复的特征值）</p>
<ul>
<li>而jordan型是所有都可以，那么对角化只是jordan型的一种特例</li>
</ul>
</li>
</ul>
<h2 id="相关阅读"><a href="#相关阅读" class="headerlink" title="相关阅读"></a>相关阅读</h2><p>Hamiton-Cayley</p>
<ul>
<li><a href="https://www.zhihu.com/question/392031909">哈密顿-凯莱定理为什么不用矩阵或线性变换直接代入？</a></li>
<li><a href="https://www.zhihu.com/question/31557902">哈密尔顿-凯莱定理的本质是什么？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/499834277">聊聊凯莱-哈密顿(Cayley-Hamilton)定理</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/265392174">Hamilton-Cayley定理的另证</a> 哎 内容还在 账号已注销</li>
<li><a href="https://zhuanlan.zhihu.com/p/7745376929">凯莱哈密顿Cayley-Hamilton定理的4个证明</a></li>
<li><a href="https://www.quora.com/Which-proof-of-the-Cayley-Hamilton-theorem-in-linear-algebra-is-the-easiest-and-shortest-to-understand-And-which-proof-is-the-most-elegant">Which proof of the Cayley-Hamilton theorem in linear algebra is the easiest and shortest to understand? And which proof is the most elegant?</a></li>
</ul>
<p>Jordan 标准型</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/470026382">szmike - Jordan(若尔当)标准型知识梳理</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/375021829">Lewis - Jordan标准形的推导，“空间分解”是关键</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/666594267">名前 - 最凶最恶の矩阵相似——Jordan标准型</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/855821521">霜夏 - 【抄书笔记】如何作 Jordan 分解</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/646886010">圆规 - Jordan标准型的计算（北大数学系代数小组教材）</a></li>
<li><a href="https://www.zhihu.com/question/37226720/answer/644040310">仓鼠磨光 - Jordan标准形的本质是什么？</a></li>
</ul>
<p>吐槽：书上变换是粗体的A,矩阵是正常字体的A, 要是用笔写真的吐血</p>
<ul>
<li>是不是这里完全可以先把这两个同构掉，然后就只用讨论一个了啊</li>
</ul>
]]></content>
      <categories>
        <category>高等代数</category>
      </categories>
      <tags>
        <tag>高等代数</tag>
        <tag>线性映射</tag>
        <tag>不变子空间</tag>
        <tag>Hamiton-Cayley定理</tag>
        <tag>Jordan标准型</tag>
      </tags>
  </entry>
  <entry>
    <title>Fermat&#39;s two square theorem</title>
    <url>/Math/Fermat_s_two_square_theorem/</url>
    <content><![CDATA[<h1 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h1><p>对于奇素数$p$有能被表示成$p &#x3D; a^2+b^2$和$p &#x3D; 4k+1$为充要条件</p>
<h1 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h1><h2 id="一定不是-4k-3"><a href="#一定不是-4k-3" class="headerlink" title="一定不是$4k+3$"></a>一定不是$4k+3$</h2><p>众所周知</p>
<p>$(4k+0)^2 \equiv 0 \pmod 4$</p>
<p>$(4k+1)^2 \equiv 1 \pmod 4$</p>
<p>$(4k+2)^2 \equiv 0 \pmod 4$</p>
<p>$(4k+3)^2 \equiv 1 \pmod 4$</p>
<p>所以</p>
<p>$a^2 + b^2 \not\equiv 3 \pmod 4$</p>
<p>那么有了充分, 如果$p &#x3D; a^2+b^2$则一定$p &#x3D; 4k+1$</p>
<h2 id="p-x3D-4k-1-to-p-x3D-a-2-b-2"><a href="#p-x3D-4k-1-to-p-x3D-a-2-b-2" class="headerlink" title="$p&#x3D;4k+1 \to p&#x3D;a^2+b^2$"></a>$p&#x3D;4k+1 \to p&#x3D;a^2+b^2$</h2><p>现在问题剩下就是如果 奇素数$p &#x3D; 4k+1$, 如何证明它可以被表示成$a^2+b^2$</p>
<h2 id="Euler’s-proof-by-infinite-descent"><a href="#Euler’s-proof-by-infinite-descent" class="headerlink" title="Euler’s proof by infinite descent"></a>Euler’s proof by infinite descent</h2><h3 id="如果两个整数都能表示为两个平方数之和，则它们的积也能表示为两个平方数之和"><a href="#如果两个整数都能表示为两个平方数之和，则它们的积也能表示为两个平方数之和" class="headerlink" title="如果两个整数都能表示为两个平方数之和，则它们的积也能表示为两个平方数之和"></a>如果两个整数都能表示为两个平方数之和，则它们的积也能表示为两个平方数之和</h3><p><code>Brahmagupta-Fibonacci Identity</code></p>
<p>$(a^2+b^2)(c^2+d^2) &#x3D; (ac+bd)^2 + (ad-bc)^2$</p>
<blockquote>
<p>只有$ad&#x3D;bc$ 时右侧有0的平方 , 也就是两个整数成$c^2&#x2F;a^2$的倍数</p>
</blockquote>
<span id="more"></span>

<h3 id="如果一个能表示为两个平方数之和的整数被另一个能表示为两个平方数之和的素数整除，则它们的商也能表示为两个平方数之和"><a href="#如果一个能表示为两个平方数之和的整数被另一个能表示为两个平方数之和的素数整除，则它们的商也能表示为两个平方数之和" class="headerlink" title="如果一个能表示为两个平方数之和的整数被另一个能表示为两个平方数之和的素数整除，则它们的商也能表示为两个平方数之和"></a>如果一个能表示为两个平方数之和的整数被另一个能表示为两个平方数之和的素数整除，则它们的商也能表示为两个平方数之和</h3><p>$a^2+b^2 &#x3D; k (c^2+d^2)$,$(c^2+d^2) &#x3D; p$为素数</p>
<p>$(cb-ad)(cb+ad) &#x3D; c^2(a^2+b^2)-a^2(c^2+d^2) &#x3D; (c^2k-a^2)p$</p>
<p>若$cb-ad$ 是 p 的倍数(另一半假设,对称同理)</p>
<p>$kp^2 &#x3D; (a^2+b^2)(c^2+d^2) &#x3D; (ac+bd)^2+(ad-bc)^2$</p>
<p>得到 $ap+bq$ 也是 p的倍数</p>
<p>$k &#x3D; (\frac{ac+bd}{p})^2+(\frac{ad-bc}{p})^2$ 能表示成整数的平方和</p>
<h3 id="如果一个能表示为两个平方数之和的整数被另一个不能表示为两个平方数之和的整数整除，则它们的商也必有一个不能表示为两个平方数之和的因子"><a href="#如果一个能表示为两个平方数之和的整数被另一个不能表示为两个平方数之和的整数整除，则它们的商也必有一个不能表示为两个平方数之和的因子" class="headerlink" title="如果一个能表示为两个平方数之和的整数被另一个不能表示为两个平方数之和的整数整除，则它们的商也必有一个不能表示为两个平方数之和的因子"></a>如果一个能表示为两个平方数之和的整数被另一个不能表示为两个平方数之和的整数整除，则它们的商也必有一个不能表示为两个平方数之和的因子</h3><p>$a^2+b^2 &#x3D; x \cdot p_1 \cdot p_2 \cdots p_n$ x不能表示为两个数的平方和, 则 $p_i$ 中至少有一个不能表示为两个平方数之和的因子</p>
<p>如果$p_i$ 都能表示成，那么根据上面的结论，必定能表示成平方和，矛盾</p>
<h3 id="如果-a-b-互素，那么-a-2-b-2-所有因子都能表示为两个平方数之和"><a href="#如果-a-b-互素，那么-a-2-b-2-所有因子都能表示为两个平方数之和" class="headerlink" title="如果$a,b$互素，那么$a^2+b^2$ 所有因子都能表示为两个平方数之和"></a>如果$a,b$互素，那么$a^2+b^2$ 所有因子都能表示为两个平方数之和</h3><p>$a^2+b^2 &#x3D; x \cdot p_1 \cdot p_2 \cdots p_n $</p>
<p>$a &#x3D; mx \pm c, b &#x3D; nx \pm d$, 其中 $ 2|c| \leq x,2|d| \leq x$</p>
<p>有 $a^2+b^2 &#x3D; m^2x^2 \pm 2mxc + c^2 + n^2x^2 \pm 2nxd + d^2 &#x3D; Ax+(c^2+d^2)$</p>
<p>$c^2+d^2 &#x3D; kx$</p>
<p>令$g &#x3D; gcd(c,d)$</p>
<p>因为$\gcd(a,b)&#x3D;1 \Rightarrow \gcd(a,x)&#x3D;1 \Rightarrow \gcd(c,x)&#x3D;1$, 同理 $\gcd(d,x)&#x3D;1$, 所以$\gcd(g,x)&#x3D;1$</p>
<p>$g^2((\frac{c}{g})^2+(\frac{d}{g})^2) &#x3D; kx$, 说明中间的部分也是$x$的倍数</p>
<p>能得到 $e^2+f^2&#x3D;k_1x$ 且$e,f$互素</p>
<p>$k_1x &#x3D; e^2+f^2 \leq c^2+d^2 \leq (\frac{x}{2})^2 + (\frac{x}{2})^2 &#x3D; \frac{x^2}{2}$</p>
<p>有 $k_1 \leq \frac{x}{2}$</p>
<p>由上一个定理，若x非平方和，那么k包含非平方和因子,令这个因子为$x’$</p>
<p>$x’ \leq k_1 \leq \frac{x}{2} &lt; x $</p>
<p>综上 如果$a,b$互质,$x$是 $a^2+b^2$ 的因子，且$x$不能被表示成两个数的平方和，那么存在一个小于$x$的数$x’$，也满足是$e^2+f^2$的因子($\gcd(e,f)&#x3D;1,e\le a,f\le b$),且$x’ &lt; x$小，同时也是不能表示成两个数的平方和。</p>
<p>然而整数无法无限下降，所以所有因子都能表示成两个数的平方和</p>
<p>即若$\gcd(a,b)&#x3D;1$,那么$a^2+b^2$的质因子只有$2$和$4k+1$形式的</p>
<h3 id="4n-1-形式的素数是平方分解数"><a href="#4n-1-形式的素数是平方分解数" class="headerlink" title="$4n+1$形式的素数是平方分解数"></a>$4n+1$形式的素数是平方分解数</h3><p>$p &#x3D; 4n + 1$</p>
<p>$1,2^{4n},3^{4n},…,(4n)^{4n}$ 模$p$余1 (费马小定理)</p>
<p>$2^{4n}-1,3^{4n}-2^{4n},…,(4n)^{4n}-(4n-1)^{4n}$ 均是$p$的倍数</p>
<p>$a^{4n} - b^{4n} &#x3D; (a^{2n}+b^{2n})(a^{2n}-b^{2n})$</p>
<ol>
<li>若 $p$ 是任意一个 $a^{2n}+b^{2n}$ 的因子，注意到 $a,p$ 互质, $b,p$互质,$a,b$ 互质（a&#x3D;b+1）</li>
</ol>
<p>由上一条引理，$p$ 是互素平方和的因子，所以$p$可以拆解成两个数的平方和</p>
<ol start="2">
<li>否则 $p$ 是所有 $a^{2n}-b^{2n}$ 的因子</li>
</ol>
<p>$(x+1)^{2n} - x^{2n} &#x3D; ((x+1)^n + x^n) ((x+1)^n - x^n)$</p>
<h4 id="差分-f-x-为-n-次多项式，那么-f-x-的-n-阶差分为-n-a-n"><a href="#差分-f-x-为-n-次多项式，那么-f-x-的-n-阶差分为-n-a-n" class="headerlink" title="差分 $f(x)$ 为$n$次多项式，那么 $f(x)$ 的$n$阶差分为 $n!a_n$"></a>差分 $f(x)$ 为$n$次多项式，那么 $f(x)$ 的$n$阶差分为 $n!a_n$</h4><p><img data-src="http://nonagon.org/ExLibris/sites/default/files/images/Differences-Cubes.jpg" alt="差分"></p>
<p>$ f(x) &#x3D; a_0 + a_1x $</p>
<p>$ f(x+1) - f(x) &#x3D; a_1 $ 一次多项式得证</p>
<p>若 $n-1$次多项式成立</p>
<p>设 $f$ 是$n$次多项式 $ f(x) &#x3D; a_0 + a_1x+ \cdots + a_nx^n $</p>
<p>$ g(x) &#x3D; f(x+1) - f(x) &#x3D; k_0 + k_1x+ \cdots + a_n \cdot n x^{n-1} $</p>
<p>$g$是 $n-1$次多项式，且其最高项的系数为 $a_n \cdot n $</p>
<p>因为 $g(x)$ 的$n-1$阶差分为 $(n-1)!(a_n \cdot n)  &#x3D; n! a_n$，归纳法递推得证</p>
<p>回到上面 我们因为p是所有减法式子的因子，因此$f(x) &#x3D; x^{2n}$的$2n$阶差分为$(2n)!$, 差分过程中始终是$p$的倍数</p>
<p>而$(2n)!$不是$p$的倍数，所以矛盾。必然$p$是上面某个加法的因子</p>
<blockquote>
<p>综上，$4n+1$ 形式的素数是平方分解数</p>
</blockquote>
<p>$4n+3$ 根据模4的余数，显然不是</p>
<blockquote>
<p>综上充要得证: 一个奇素数是平方分解数，那么它是$4n+1$, 一个素数是$4n+1$形式，那么它是平方分解数</p>
</blockquote>
<h3 id="补充性质"><a href="#补充性质" class="headerlink" title="补充性质"></a>补充性质</h3><p>$p &#x3D; x^2+y^2$ 质数唯一表示</p>
<p>$p &#x3D; a^2+b^2&#x3D;c^2+d^2$</p>
<p>轮换性质，不妨设$a&gt;c&gt;d&gt;b$</p>
<p>$(ac+bd)(ad+bc) &#x3D; (a^2+b^2)cd +(c^2+d^2)ab &#x3D; p(cd+ab)$</p>
<p>至少一个是p的倍数, 若 $(ac+bd) &#x3D; Kp$ ,</p>
<p>$0 &lt; (a-c)^2+(b-d)^2 &#x3D; a^2+b^2+c^2+d^2-2ac-2bd &#x3D; 2p-2Kp &lt; 2p $，</p>
<p>同时除2,$0 &lt; p-Kp &lt; p $ 矛盾</p>
<p>因此$p$ 唯一表示成两个</p>
<h2 id="Lagrange’s-proof-through-quadratic-forms"><a href="#Lagrange’s-proof-through-quadratic-forms" class="headerlink" title="Lagrange’s proof through quadratic forms"></a>Lagrange’s proof through quadratic forms</h2><p>TODO</p>
<h2 id="Dedekind’s-two-proofs-using-Gaussian-integers"><a href="#Dedekind’s-two-proofs-using-Gaussian-integers" class="headerlink" title="Dedekind’s two proofs using Gaussian integers"></a>Dedekind’s two proofs using Gaussian integers</h2><p>TODO</p>
<h2 id="Proof-by-Minkowski’s-Theorem"><a href="#Proof-by-Minkowski’s-Theorem" class="headerlink" title="Proof by Minkowski’s Theorem"></a>Proof by Minkowski’s Theorem</h2><p>TODO</p>
<h2 id="Zagier’s-“one-sentence-proof”"><a href="#Zagier’s-“one-sentence-proof”" class="headerlink" title="Zagier’s “one-sentence proof”"></a>Zagier’s “one-sentence proof”</h2><p><a href="https://people.mpim-bonn.mpg.de/zagier/files/doi/10.2307/2323918/fulltext.pdf">https://people.mpim-bonn.mpg.de/zagier/files/doi/10.2307/2323918/fulltext.pdf</a></p>
<h2 id="Roger-Heath-Brown-in-1971"><a href="#Roger-Heath-Brown-in-1971" class="headerlink" title="Roger Heath-Brown in 1971"></a>Roger Heath-Brown in 1971</h2><p>$p &#x3D; 1 + 4k$</p>
<p>如果可以拆分，显然一奇一偶</p>
<p>$p &#x3D; x^2+ (2y)^2 &#x3D; x^2+4y^2$</p>
<p>考虑</p>
<p>$p &#x3D; x^2+4yz$</p>
<p>有解$(x,y,z) &#x3D; (1,1,k)$, 注意到如果 $y\neq z$,那么$(x,y,z)$如果是一组解,则有$(x,z,y)$,形成配对</p>
<p>那么如果能证明$p&#x3D;x^2+4yz$的所有解的个数是奇数个，那么必定有不能配对的就是$y&#x3D;z$的, 就是一个解了(这种方法不会直接给到如何计算，但是从存在性上完成证明)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   b</span><br><span class="line">cccb</span><br><span class="line"> dob</span><br><span class="line"> daaa</span><br><span class="line"> d</span><br><span class="line"></span><br><span class="line">   b</span><br><span class="line">cooo</span><br><span class="line"> ooo</span><br><span class="line"> oooa</span><br><span class="line"> d</span><br></pre></td></tr></table></figure>

<p>以$x^2$拼<code>o</code>,然后以类似上面形式拼4个$yz$</p>
<p>那么 只有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   c</span><br><span class="line">   c</span><br><span class="line">   c</span><br><span class="line">dddobbb</span><br><span class="line">   a</span><br><span class="line">   a</span><br><span class="line">   a</span><br></pre></td></tr></table></figure>

<p>唯一对应$(y,z)$ (因为 相当于$y&#x3D;x$的情况,即$p&#x3D;x^2+4xz&#x3D;x(x+4z)$只有$x&#x3D;1$)</p>
<p>而其它的都对应两个不同的$(y,z)$的解</p>
<p>得证</p>
<h1 id="x-2-ny-2"><a href="#x-2-ny-2" class="headerlink" title="$x^2+ny^2$"></a>$x^2+ny^2$</h1><p>原文见Cox的书</p>
<p>有几个性质(稍后证明):</p>
<p>$p&#x3D;x^2+y^2, x,y \in \mathbb{Z} \Leftrightarrow p\equiv 1 \pmod 4$</p>
<p>$p&#x3D;x^2+2y^2, x,y \in \mathbb{Z} \Leftrightarrow p\equiv 1 \mathrm{or} 3 \pmod 8$</p>
<p>$p&#x3D;x^2+3y^2, x,y \in \mathbb{Z} \Leftrightarrow p&#x3D;3 \mathrm{or} p \equiv 1 \pmod 3$</p>
<hr>
<p>$(x^2+ny^2)(z^2+nw^2) &#x3D; (zx\pm nyw)^2+n(xw\mp yz)^2$</p>
<hr>
<p>若$N &#x3D; x^2+ny^2, p | N,p&#x3D;a^2+nb^2,\gcd(a,b) &#x3D; 1$, $p$是质数</p>
<p>参考$n&#x3D;1$时</p>
<p>$(ax-nby)(ax+nby) &#x3D; a^2x^2-n^2b^2y^2 &#x3D; a^2(x^2+ny^2) - ny^2(a^2+nb^2) &#x3D; a^2N - ny^2p$</p>
<p>因此前面至少一个是p的倍数, 不妨设$c&#x3D;\frac{ax-nby}{p}$,则$d&#x3D;\frac{bx+ay}{p}$,均为整数</p>
<p>因此如果$N&#x3D;x^2+ny^2$且有质因子也能表示成$p&#x3D;a^2+ny^2$,那么$\frac{N}{p}$也可以表示成$c^2+nd^2$</p>
<hr>
<p>若$N&#x3D;x^2+ny^2, N &#x3D; zz’$,而$z$无法被表示成$a^2+nb^2$,则$z’$中有无法被表示成$a^2+nb^2$形式的质因子</p>
<p>反证法, 若$z’$的的所有质数因子都能被表示,根据上面的$\frac{N}{p_1}$能被表示$\frac{N}{p_1p_2}$,这样逐个除$z’$中的质因子,最终$z$也可以被表示矛盾</p>
<hr>
<p>对于$p | x^2+ny^2,\gcd(x,y)&#x3D;1$, 因为知道$t^2 \equiv (p-t)^2\pmod p$, 所以可以取$x &#x3D; min(|x| \bmod p, p - |x| \bmod p) \le \frac{p}{2}$, 对于$y$同理</p>
<p>注意的是，在调整到$\le \frac{p}{2}$的过程中 $\gcd(x,y)&#x3D;1$可能会不满足,但是注意到$gcd(x,p)&#x3D;1,gcd(y,p)&#x3D;1$,即$\gcd(\gcd(x,y),p) &#x3D; 1$,因此即使过程$\gcd(x,y)\neq 1$,只需要$x,y$同时除以$gcd(x,y)$即可</p>
<p>因此可以取$|x|,|y|\le \frac{p}{2}$ 因为$\gcd(x,y)&#x3D;1$，只有$x&#x3D;y&#x3D;\frac{p}{2} &#x3D; 1$时才会有同时小于等于取等,也就是$p&#x3D;2$的特殊q情况</p>
<p>对于一般$p&gt;3$的情况, 则当$n\le 3$时, $x^2+ny^2 &lt; (\frac{p}{2})^2 + n(\frac{p}{2})^2 &#x3D;\frac{1+n}{4}p^2 \le p^2$时</p>
<p>这就是Fermat的当$p &gt; 3$是$x^2+ny^2$的因子时,可以通过调整$x,y$让$x^2+ny^2 &lt; p^2$</p>
<p>那么有如果$p$不可被表示,则$1 &lt; \frac{x^2+ny^2}{p} &lt; p$且不可被表示,无法无穷下降</p>
<p>综上$x^2+ny^2,n\le 3,\gcd(x,y)&#x3D;1$时, 它的质因子形式都是$a^2+nb^2$</p>
<p>特殊的</p>
<p>对于$n&#x3D;2$时，如果$2|x$则考虑$y^2+2(\frac{x}{2})^2$, 最后会递降到3</p>
<p>其中对于$n&#x3D;3$ 时,如果$3|x$则考虑$y^2+3(\frac{x}{3})^2$,可能有$4$也是因子, 即$4p | x^2+3y^2,gcd(x,y)&#x3D;1$</p>
<p>但是注意到$x-3y,x+3y$ 至少一个是4的倍数,因此同上面拆的部分可得到$p|x’^2+3y’^2$, 也就是当$x,y$同时为奇数的时候，可以除以$1^2+3\cdot 1^2$来完成下降,直到$p$可以表示或者$x,y$一个奇一个偶数</p>
<hr>
<p>$p&#x3D;x^2+ny^2$ and Quadratic Reciprocity</p>
<p>($n&#x3D;5$时Euler和Fermat都知道这个结论不一定 $21&#x3D;1^2+5\cdot 2^2, 3|21$,但是$3$不能被表示)</p>
<p>Legendre symbol (a是整数,p是奇质数)</p>
<p>${\displaystyle \left({\frac {a}{p}}\right)&#x3D;{\begin{cases}1&amp;{\text{if }}a{\text{ is a quadratic residue modulo }}p{\text{ and }}a\not \equiv 0{\pmod {p}},\\ -1&amp;{\text{if }}a{\text{ is a quadratic nonresidue modulo }}p,\\ 0&amp;{\text{if }}a\equiv 0{\pmod {p}}.\end{cases}}}$</p>
<p>或者$(\frac{a}{p}) &#x3D; a^{\frac{p-1}{2}} \pmod p$</p>
<p>对于$1,-1$也就是是否存在$x^2 \equiv a \pmod p$,因为存在时显然$a^{\frac{p-1}{2}} \equiv x^{p-1} \equiv 1 \pmod p$</p>
<p>设$g$为模$p$的一个原根,则存在$k$使$g^k\equiv n \pmod p$,所以$(g^k)^{\frac{p-1}{2}} \equiv 1 \pmod p$, 因为$g$是原根,所以$p-1 | k\cdot \frac{p-1}{2}$, 因此$\frac{k}{2}$是整数,所以$n \equiv (g^{\frac{k}{2}})^2$</p>
<p>综上$x^2 \not\equiv a\pmod p \Leftrightarrow (\frac{a}{p}) &#x3D; -1$</p>
<hr>
<p>定理1.7: $n$是非零整数, $p$是奇质数且$p\nmid n$, 则 $p \mid x^2+ny^2,\gcd(x,y)&#x3D;1 \Leftrightarrow (\frac{-n}{p})&#x3D;1$</p>
<p>因为$x^2+ny^2\equiv 0 \pmod p, gcd(x,y)&#x3D;1$ 则$gcd(y,p) &#x3D; 1$</p>
<p>$x^2 \equiv -ny^2 \pmod p$</p>
<p>$(x^2)^{\frac{p-1}{2}} \equiv (-ny^2)^{\frac{p-1}{2}} \pmod p$</p>
<p>$x^{p-1} \equiv (-n)^{\frac{p-1}{2}}y^{p-1} \pmod p$</p>
<p>$1 \equiv (-n)^{\frac{p-1}{2}}\cdot 1 \pmod p$</p>
<p>正向得证</p>
<p>即存在$z^2 \equiv -n \pmod p$</p>
<p>即$z^2 + n\cdot 1^2 \equiv -n+n \equiv 0 \pmod p, gcd(z,1)&#x3D;1$</p>
<p>反向得证，充要得证</p>
<hr>
<p>然后欧拉发现了一些</p>
<p>$(\frac{-3}{p}) &#x3D; 1 \Leftrightarrow p\equiv 1,7 \mod 12$</p>
<p>$(\frac{-5}{p}) &#x3D; 1 \Leftrightarrow p\equiv 1,3,7,9 \mod 20$</p>
<p>$(\frac{-7}{p}) &#x3D; 1 \Leftrightarrow p\equiv 1,9,11,15,23,25 \mod 28$</p>
<p>$(\frac{3}{p}) &#x3D; 1 \Leftrightarrow p\equiv \pm 1 \mod 12$</p>
<p>$(\frac{5}{p}) &#x3D; 1 \Leftrightarrow p\equiv \pm 1,\pm 9 \mod 20$, (注这里$\pm 9$也可以写成$\pm 11$,但是$\pm 9$会让人发现都是奇数平方)</p>
<p>$(\frac{7}{p}) &#x3D; 1 \Leftrightarrow p\equiv \pm 1,\pm 9,\pm 25 \mod 28$</p>
<hr>
<p>但不是所有都能变成平方，比如</p>
<p>$(\frac{6}{p}) &#x3D; 1 \Leftrightarrow p\equiv \pm 1,\pm 5 \mod 24$</p>
<p>但6不是质数</p>
<hr>
<p>若$p$是奇质数,</p>
<p>若$p\equiv 1 \pmod 4, (\frac{-1}{p}) &#x3D; 1$</p>
<p>若$p\equiv 3 \pmod 4, (\frac{-1}{p}) &#x3D; -1$</p>
<p>证明 $(\frac{-1}{p}) \equiv (-1)^{\frac{p-1}{2}} \pmod p$, 显然得证</p>
<hr>
<p>猜想1.9, 如果$p,q$是不同的质数,则$(\frac{q}{p}) &#x3D; 1 \Leftrightarrow p\equiv \pm \beta^2 \bmod 4q$对于一些奇数$\beta$, (待证明)</p>
<p>命题1.10(重要,也就是而二次互反律quadratic reciprocity) 若$p,q$是不同奇质数,则1.9等价于 $(\frac{p}{q})(\frac{q}{p}) &#x3D; (-1)^{\frac{(p-1)(q-1)}{4}}$</p>
<p>证明: 显然$(\frac{-1}{p}) &#x3D; (-1)^{\frac{p-1}{2}}$,$(\frac{ab}{p}) &#x3D; (\frac{a}{p})(\frac{b}{p})$</p>
<p>????????</p>
<p>Page 27&#x2F;363</p>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p><a href="https://yexiaorain.github.io/Blog/pe/233">https://yexiaorain.github.io/Blog/pe/233</a></p>
<p><a href="https://mathoverflow.net/a/299696/500903">https://mathoverflow.net/a/299696/500903</a></p>
<p><a href="http://www.math.toronto.edu/~ila/Cox-Primes_of_the_form_x2+ny2.pdf">http://www.math.toronto.edu/~ila/Cox-Primes_of_the_form_x2+ny2.pdf</a></p>
<p><a href="https://nonagon.org/ExLibris/euler-proves-fermats-theorem-sum-two-squares">https://nonagon.org/ExLibris/euler-proves-fermats-theorem-sum-two-squares</a></p>
<p><a href="https://en.wikipedia.org/wiki/Legendre_symbol">https://en.wikipedia.org/wiki/Legendre_symbol</a></p>
<p><a href="https://www.youtube.com/watch?v=VBPrP4nChbo">https://www.youtube.com/watch?v=VBPrP4nChbo</a></p>
<p><a href="http://ramanujan.math.trinity.edu/rdaileda/teach/f20/m3341/lectures/lecture18_slides.pdf">http://ramanujan.math.trinity.edu/rdaileda/teach/f20/m3341/lectures/lecture18_slides.pdf</a></p>
<p><a href="https://egrove.olemiss.edu/cgi/viewcontent.cgi?article=2539&amp;context=etd">https://egrove.olemiss.edu/cgi/viewcontent.cgi?article=2539&amp;context=etd</a></p>
]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>Fermat</tag>
        <tag>平方和定理</tag>
      </tags>
  </entry>
  <entry>
    <title>MIT18.06线性代数</title>
    <url>/Math/MIT_18.06_linear_algebra/</url>
    <content><![CDATA[<h1 id="MIT-线性代数公开课"><a href="#MIT-线性代数公开课" class="headerlink" title="MIT 线性代数公开课"></a>MIT 线性代数公开课</h1><p><a href="http://web.mit.edu/18.06">http://web.mit.edu/18.06</a></p>
<p><a href="https://www.youtube.com/playlist?list=PLE7DDD91010BC51F8">https://www.youtube.com/playlist?list=PLE7DDD91010BC51F8</a></p>
<p><a href="https://ocw.mit.edu/courses/18-06sc-linear-algebra-fall-2011/download/">https://ocw.mit.edu/courses/18-06sc-linear-algebra-fall-2011/download/</a></p>
<span id="more"></span>

<h2 id="1-方程组的几种解释"><a href="#1-方程组的几种解释" class="headerlink" title="1 方程组的几种解释"></a>1 方程组的几种解释</h2><p>问题：当我们小学学到鸡兔同笼时会用方程组，如果未知量更多变量更多的方程组有什么解决方案？</p>
<p>从2个未知量，2个方程开始</p>
<p>$1x+1y&#x3D;2$ 头</p>
<p>$2x+4y&#x3D;6$ 脚</p>
<p>此时为了简化书写,定义了矩阵</p>
<p>$\pmatrix{1 &amp; 1 \\ 2 &amp; 4 }\pmatrix{x \\ y}&#x3D;\pmatrix{2 \\ 6}$</p>
<p>这里 在矩阵定义上扩充一下行列都$\ge 1$，定义多行多列的矩阵乘法运算为</p>
<p>$A_{m\times n}\cdot B_{n\times s}&#x3D;C_{m\times s}$</p>
<p>其中$C_{i,j}&#x3D;\sum_{k&#x3D;1}^{n} A_{i,k}\cdot B_{k,j}$</p>
<p>原问题变成$Ax&#x3D;b$</p>
<hr>
<p>由这个定义可以 容易的得到</p>
<ul>
<li>矩阵乘法有结合率</li>
<li>矩阵乘法<strong>没有</strong>交换</li>
<li>矩阵乘法可以块状乘法</li>
</ul>
<hr>
<ul>
<li>把一<code>行</code>拿出来看 对应的函数图像是 线的交点求解</li>
<li>把一<code>列</code>拿出来看，对应的函数图像是 多个向量的线性组合方案求解</li>
</ul>
<p>考虑 维度增加，那么</p>
<ul>
<li><code>行</code>就是高维平面的交</li>
<li><code>列</code>就是高维向量的组合方案</li>
</ul>
<h2 id="2-矩阵消元（高斯消元）"><a href="#2-矩阵消元（高斯消元）" class="headerlink" title="2 矩阵消元（高斯消元）"></a>2 矩阵消元（高斯消元）</h2><p>初中解答鸡兔同笼，有的时候用的是用y表示x,再带入x</p>
<p>而还有一种方法，就是 整行做减法</p>
<p>把第二个方程变为 $(2x+4y)-2(x+y)&#x3D;6-2\cdot2$</p>
<p>这里有性质：</p>
<ul>
<li>原方程组的解一定是新方程组的解（假设先带入满足原方程则后续方程左右都是同样的操作）</li>
<li>新方程的解一定是原方程的解（当我们把方程i+&#x3D;k倍方程j时，只需要逆向操作是 -&#x3D;k倍 方程j 就可以还原）</li>
</ul>
<p>所以 把方程的行变换（i行+&#x3D;k倍j行，或交换行）操作对应到矩阵的上来看，这些操作最终不会影响结果</p>
<hr>
<p>类似的 如果 做类似的列操作 相当于定义新的变量 <code>y_new=(y_old+kx)</code></p>
<p>综上</p>
<ul>
<li>基础行变化 是 在对方程之间加减</li>
<li>基础列变化 是 在对未知数之间加减</li>
</ul>
<hr>
<p>然后如果我们希望不要用文字描述操作而是矩阵描述的话，会发现 左乘是行操作，</p>
<p>当我们进行阶梯型变换时，全是左乘上下三角</p>
<h2 id="3-乘法和逆矩阵"><a href="#3-乘法和逆矩阵" class="headerlink" title="3 乘法和逆矩阵"></a>3 乘法和逆矩阵</h2><p>首先单位矩阵 $AI&#x3D;A&#x3D;IA$, 显然存在(对角是1)且唯一$I_1&#x3D;I_1I_2&#x3D;I_2$</p>
<p>那么考虑如果存在逆矩阵 $A^{-1}A&#x3D;I$</p>
<p>注意矩阵乘法不满足交换率，所以还需要证明一下 左侧逆&#x3D;右侧逆，</p>
<ul>
<li>若左右逆存在 $A^{-1}_l&#x3D;A^{-1}_l(AA^{-1}_r)&#x3D;(A^{-1}_lA)A^{-1}_r&#x3D;A^{-1}_r$ 根据结合率</li>
<li>若一侧逆存在，另一侧逆不存在  ??????????????????</li>
</ul>
<hr>
<p>用 gauss-jordan的 行变换 把$Ax&#x3D;b$写成$A|b$的增广矩阵，然后把A通过多次行变换尽量变成单位矩阵</p>
<p>因此有 $x&#x3D;A^{-1}b$</p>
<h2 id="4-LU分解"><a href="#4-LU分解" class="headerlink" title="4 LU分解"></a>4 LU分解</h2><p>$(AB)^{-1}&#x3D;B^{-1}A^{-1}$</p>
<p>对于$Ax&#x3D;b$对A进行向阶梯形变换时，左侧乘上的一直是 下(Lower)三角矩阵（长宽相等）</p>
<p>而 多个下三角矩阵的乘积显然还是 下三角矩阵(根据矩阵乘法定义易证)</p>
<p>所以 $A&#x3D;LU$ 可以变成 下（Lower）三角矩阵 乘上 上（Upper）三角矩阵</p>
<p>注意到的是 $A$在向阶梯矩阵变换时，还可能因为行的主元位置是0,需要进行行交换</p>
<p>所以另$P$为预先完成目标行交换的 行交换矩阵，所以上面的变成</p>
<p>先完成行交换$PA&#x3D;LU$再进行阶梯矩阵的行变换操作</p>
<h2 id="5-转置"><a href="#5-转置" class="headerlink" title="5 转置"></a>5 转置</h2><p>$A_{i,j}&#x3D;A^T_{j,i}$</p>
<p>对称矩阵: $A&#x3D;A^T$</p>
<p>显然$RR^T$ 是对称矩阵</p>
<p>行交换矩阵 的逆等于它的转置 $P^{-1}&#x3D;P^T$,显然</p>
<hr>
<h2 id="6-列空间，nullspace"><a href="#6-列空间，nullspace" class="headerlink" title="6 列空间，nullspace"></a>6 列空间，nullspace</h2><p>$A_{m\times n}$列向量是$n$条在$R^{m}$中的向量，它们的生成空间是$C(A)$, 是$R^{m}$的子空间</p>
<p>向量空间：需要加法，数乘封闭（所有线性组合还在空间中）</p>
<p>$Ax&#x3D;0$ 对应的$x$的解叫做解的0空间 null space</p>
<h2 id="7-Ax-x3D-0-主变量，特解"><a href="#7-Ax-x3D-0-主变量，特解" class="headerlink" title="7 Ax&#x3D;0,主变量，特解"></a>7 Ax&#x3D;0,主变量，特解</h2><p>echelon form（阶梯形式）</p>
<p>计算$Ax&#x3D;0$ 还是对A阶梯型，$A_{m\times n}$对于变换后</p>
<ul>
<li>列数n</li>
<li>主元数,pivot variables: r， rank（秩）&#x3D;行变换主元的个数</li>
<li>自由变量(free variables): n-r</li>
</ul>
<p>对于主元不止后面行变换成零，前面行也边，主元再变为1, 就是 matlab 的<code>rref(A)</code>,(reduced row echelon form)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 2 2 2        1 2 2 2       1 2 0 -2</span><br><span class="line">2 4 6 8    =&gt;  0 0 2 4  =&gt;   0 0 1  2 (reduced)</span><br><span class="line">3 6 8 10       0 0 0 0       0 0 0  0</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主元列， 自由列</span><br><span class="line">1 0    2 -2</span><br><span class="line">0 1    1  2</span><br><span class="line">0 0    0  0</span><br><span class="line"></span><br><span class="line">是</span><br><span class="line">I F</span><br><span class="line">0 0</span><br><span class="line">的形式</span><br><span class="line"></span><br><span class="line">[I F]*[x_p,x_f]^T=0</span><br></pre></td></tr></table></figure>

<p>那么 <code>nullspace维数=n-r</code></p>
<p>$x_{pivot} &#x3D; -Fx_{free}$</p>
<p>$x&#x3D;c\pmatrix{-F \\ I}$</p>
<h2 id="8-Ax-x3D-b，可解性和可解结构"><a href="#8-Ax-x3D-b，可解性和可解结构" class="headerlink" title="8 Ax&#x3D;b，可解性和可解结构"></a>8 Ax&#x3D;b，可解性和可解结构</h2><p>类似的 阶梯化到reduced形，然后对于自由的设为0, 非自由的计算对应值 得到特解</p>
<p>然后加上 上面nullspace，也就是经过特定点（一个特解） 指定偏移形状（nullspace）的 子空间</p>
<hr>
<p>$A_{m\times n}$</p>
<p>显然 $r\le m, r \le n$ 不会超过行列数</p>
<p>满列 $r&#x3D;n \le m$时 无自由变量 nullspace为单点,$N(A)&#x3D;\lbrace 0\rbrace$ 只有0向量，所以0个或1个解</p>
<p>满行$r&#x3D;m \le n$时 有1个或多个解</p>
<p>$r&#x3D;m&#x3D;n$时1个解</p>
<p>这里结论:</p>
<ul>
<li>解 &#x3D; 特解+nullspace</li>
<li>而 矩阵的rank决定了 特解存在性 与 nullspace的形状，也就决定了解的数目</li>
</ul>
<h2 id="9-线性相关性，基，维"><a href="#9-线性相关性，基，维" class="headerlink" title="9 线性相关性，基，维"></a>9 线性相关性，基，维</h2><ul>
<li>线性相关&#x2F;线性无关</li>
<li>生成（张成）空间spanning a space</li>
<li>BASIS and dimension</li>
</ul>
<p>$\sum_{a_i} a_i \alpha_i &#x3D;0$ 只存在 全$0$的$a_i$解 则线性相关，否则线性无关</p>
<p>所以 矩阵A 的 nullspace 只有零解 当且仅当 A的列向量 线性无关（因为 线性相关 对应 $a_i$ 就对应到了 nullspace 的非零解），rank &#x3D; n(列数)</p>
<hr>
<p>span（生成，长成）：由向量组 线性组合得到的所有向量的集合， 向量组 生成 空间（space)</p>
<p>引出 “基”（Basis) 的概念：</p>
<ul>
<li>基basis for a space is a sequence of vectors v1,v2,…,vd, with 2 性质:<ul>
<li>它们 线性无关（限制多了不行，多了些不必要的）</li>
<li>它们 能生成span the 空间space, (限制少了不行，会无法完全表示)</li>
</ul>
</li>
</ul>
<p>给定一个空间，every basis for the space has the same number of vectors, 这个 个数 称作 空间的维数（dimension）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A =</span><br><span class="line">1 2 3 1</span><br><span class="line">1 1 2 1</span><br><span class="line">1 2 3 1</span><br><span class="line"></span><br><span class="line">列向量 能生成 space C(A)</span><br><span class="line">列向量不是基，因为线性相关</span><br><span class="line">nullspace 例如 N(A) = [-1,-1,1,0]^T，[1,0,0,-1]^T</span><br><span class="line"></span><br><span class="line">&#123;列1+列2&#125; 可以作为基</span><br></pre></td></tr></table></figure>

<p>rank(A) &#x3D; 主元的列数 &#x3D; C(A)的维数dim</p>
<p>dim(N(A)) &#x3D; 自由变量个数 &#x3D; n - rank(A)</p>
<h2 id="10-四个基本子空间"><a href="#10-四个基本子空间" class="headerlink" title="10 四个基本子空间"></a>10 四个基本子空间</h2><p>对于$A_{m\times n}$ 是$m$行$n$列的矩阵</p>
<p>C(A): 列空间 column , in $R^m$</p>
<p>N(A): nullspace, in $R^n$</p>
<p>row space: 行的所有组合 &#x3D;&gt; $C(A^T)$, in $R^n$</p>
<p>null space of $A^T$ &#x3D;&gt; $N(A^T)$, 常用名字 left nullspace, in $R^m$</p>
<p>![[mit_la_10.png]]</p>
<hr>
<p>$R^n$ 空间中： nullspace(n-r) 和 row space (r)正交，且维度和为n</p>
<p>$R^m$ 空间中： N(A^T) 和 C(A) 正交，且维度和为m</p>
<hr>
<p>因为 basis for rowspace is first <code>r</code> row of <code>rref(A)</code>, 注意行变换后 C(A) 不一定等于 C(rref(A)), 但是行还是，</p>
<p>因为逆操作保证了rref(A)的行能表示原始A的行，所以$C(A^T)&#x3D;C(\mathrm{rref}(A)^T)$</p>
<p>rref的过程 是行变换 相当于乘上 操作组合的矩阵E,而乘了以后，A变为rref(A)，它的倒数m-r全为0,正好说明了 E的后m-r行对应的 正是 left nullspace 的基，而且 因为E是单位矩阵  和 A相同的基础行变换得到，的所有E的行之间是线性无关的。</p>
<p>$R^n$ 延伸到 $R^{n\times n}$, 把矩阵看成向量</p>
<p>例如 $R^3$的所有对角矩阵的 集合（space），的基可以是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 0 0</span><br><span class="line">0 0 0</span><br><span class="line">0 0 0</span><br><span class="line"></span><br><span class="line">1 0 0</span><br><span class="line">0 3 0</span><br><span class="line">0 0 0</span><br><span class="line"></span><br><span class="line">0 0 0</span><br><span class="line">0 0 0</span><br><span class="line">0 0 7</span><br></pre></td></tr></table></figure>

<h2 id="11-矩阵空间，rank-x3D-1矩阵，小世界图"><a href="#11-矩阵空间，rank-x3D-1矩阵，小世界图" class="headerlink" title="11 矩阵空间，rank&#x3D;1矩阵，小世界图"></a>11 矩阵空间，rank&#x3D;1矩阵，小世界图</h2><ul>
<li>Base of new vector spaces</li>
<li>rank one matrices</li>
<li>small world graphs</li>
</ul>
<p>因为矩阵，可以数乘，相加（线性要求的基础）</p>
<p>$R^3$ 的所有矩阵的 基，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 0 0</span><br><span class="line">0 0 0</span><br><span class="line">0 0 0</span><br><span class="line"></span><br><span class="line">0 1 0</span><br><span class="line">0 0 0</span><br><span class="line">0 0 0</span><br><span class="line"></span><br><span class="line">0 0 1</span><br><span class="line">0 0 0</span><br><span class="line">0 0 0</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0 0 0</span><br><span class="line">0 0 0</span><br><span class="line">0 0 1</span><br></pre></td></tr></table></figure>

<p>类似的，对称矩阵(symm) 的基的个数是6个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">100</span><br><span class="line">000</span><br><span class="line">000</span><br><span class="line"></span><br><span class="line">010</span><br><span class="line">100</span><br><span class="line">000</span><br><span class="line"></span><br><span class="line">001</span><br><span class="line">000</span><br><span class="line">100</span><br><span class="line"></span><br><span class="line">000</span><br><span class="line">010</span><br><span class="line">000</span><br><span class="line"></span><br><span class="line">000</span><br><span class="line">001</span><br><span class="line">010</span><br><span class="line"></span><br><span class="line">000</span><br><span class="line">000</span><br><span class="line">001</span><br></pre></td></tr></table></figure>

<p>S(对称矩阵) and U(上三角矩阵) &#x3D; diag(对角矩阵)</p>
<p>dim(S交U) &#x3D; 3</p>
<p>S并U &#x3D;&gt; 不是一个空间，运算不封闭</p>
<p>S+U &#x3D;&gt; 组合 而不是并，也就是 “不是两个空间之和，而是空间S中任意元素+U中任意元素“ &#x3D; ”两者基的集合之和 再 span生成的空间”</p>
<p>dim(S+U) &#x3D; 9</p>
<p>dim(S并U)+dim(S+U)&#x3D;dim(S)+dim(U)</p>
<hr>
<p>$y’’+y&#x3D;0$</p>
<p>$y&#x3D;\cos x, \sin x, e^{ix}$ 找所有解, 也是解空间的基的线性组合</p>
<p>$y&#x3D;c_1\cos x+c_2\sin x$</p>
<p>dim(解空间)&#x3D;2</p>
<hr>
<p>秩为1的矩阵 总可以表示成 $A&#x3D;uv^T$, 一列乘上1行</p>
<p>这一章，主要就是用 更特殊的例子（把矩阵看作向量，来构成矩阵空间，用例子来再度回顾，什么是space,什么是基，什么是线性组合 ）</p>
<hr>
<p>图论 和 线性代数 的关系，人与人之间的6步认识理论</p>
<h2 id="12-图和网络"><a href="#12-图和网络" class="headerlink" title="12 图和网络"></a>12 图和网络</h2><ul>
<li>graphs &amp; networks</li>
<li>incidence matrices （关联矩阵）</li>
<li>kirchnoff’s laws</li>
</ul>
<p>与实际应用相关的</p>
<p>Graphs: 点 和 边, 也可以表示电路系统，液压系统，桥系统</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A =</span><br><span class="line">         列对应点</span><br><span class="line">行对应 边 [        ], -1表示出，1表示入点</span><br></pre></td></tr></table></figure>

<p>$Ax&#x3D; [x入-x出…]^T&#x3D;0$</p>
<hr>
<p>对于“连通图”</p>
<p>零空间是 <code>[1,1,1,1,1,1]</code></p>
<p>看成电势能，可以选一个点接地（xi&#x3D;0）</p>
<p>$N(A^T) &#x3D; m-r$</p>
<p>$A^Ty&#x3D;0$, Kirchoff’s 基尔霍夫电流定律 KCL, 每一行 说明 节点上不累计电子</p>
<p>nullspace(A^T) &#x3D; 那么 线性无关的 A^T 的列 对应的图中的边 不含环loop</p>
<p>连通图的不含回边含有所有点的图是树</p>
<p>dim N(A^T) &#x3D; m - r &#x3D; 独立loops个数 &#x3D; edges - (点数-1)</p>
<p>点数-边数+独立环数&#x3D;1</p>
<p>Euler‘s 公式 视角：空间里 面对应这里的点，边对应这里的边，而点对应这里的 独立loops</p>
<p>$A^TCAx&#x3D;f$ 稳定电流问题，</p>
<hr>
<p>延伸：图论里还有生成树个数计算</p>
<h2 id="13-复习1"><a href="#13-复习1" class="headerlink" title="13 复习1"></a>13 复习1</h2><ul>
<li>review for exam 1</li>
<li>emphasites chapter 3</li>
</ul>
<p>练习1. 是非题  $A^2&#x3D;0 \to A&#x3D;0$ ?, False, 我觉得这个很“反例，因为在线代之前都是单个的数，就算到了复数,只要结果是0,那么乘数一定有零，而这里的反例反过来再次强调了乘法规则的变化”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 1</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure>

<p>练习2. if C 是 可逆的， N(CD)&#x3D;N(D), 左乘可逆不会改变nullspace</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rref(A) =</span><br><span class="line">  I   F  的形状</span><br><span class="line">    O</span><br><span class="line">解形状 =</span><br><span class="line">  -F</span><br><span class="line">   O</span><br></pre></td></tr></table></figure>


<p>解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1 1 0][1 0  1 2]     1</span><br><span class="line">[0 1 0][0 1 -1 1] x = 0</span><br><span class="line">[1 0 1][0 0  0 0]     1</span><br></pre></td></tr></table></figure>

<p>这里 nullspace用上面的N(CD)&#x3D;N(D)来算</p>
<p>而<code>特解</code> 注意到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1 1 0] [1]   1</span><br><span class="line">[0 1 0] [0] = 0</span><br><span class="line">[1 0 1] [0]   1</span><br><span class="line">只需要再解</span><br><span class="line">[1 0  1 2]     1</span><br><span class="line">[0 1 -1 1] x = 0</span><br><span class="line">[0 0  0 0]     0</span><br><span class="line">就好了，这样就很easy!?</span><br></pre></td></tr></table></figure>

<p>练习3. 如果m&#x3D;n,那么 行空间&#x3D;列空间，错，相等的只是维数而生成空间不一定相等, <code>[0 1 ; 0 0]</code></p>
<p>练习4. A和-A是否拥有相同的四个空间, True</p>
<p>练习5. 如果A和B的四个子空间相同,那么A是B的倍数? 错 反例<code>[1 0;0 1]</code>和 <code>[0 1;1 0]</code></p>
<p>练习5. 为什么 一个向量 不能同时 是行向量 且 在 nullspace里？</p>
<p>想说 多个平方和吗？这样想的花 i,1 就可以</p>
<p>这里要引入零空间和行空间正交</p>
<h2 id="14-正交向量与子空间"><a href="#14-正交向量与子空间" class="headerlink" title="14 正交向量与子空间"></a>14 正交向量与子空间</h2><ul>
<li>orthogonal vectors &amp; subspaces</li>
<li>nullspace 正交 row space 和 column space 正交$N(A^T)$</li>
<li>$N(A^TA)&#x3D;N(A)$</li>
</ul>
<p>毕达哥拉斯pythagoras, 勾股定理与正交: $x^Ty&#x3D;0$</p>
<p>高维空间中</p>
<p>$||x||^2+||y||^2&#x3D;||x+y||^2$</p>
<p>$x^Tx+y^Ty&#x3D;(x+y)^T(x+y)&#x3D;x^Tx+y^Ty+x^Ty+y^Tx$, 最后两项 点乘是一样的</p>
<hr>
<p>向量正交 推广到 空间正交：A空间中的任意向量 和 B空间中的任意向量正交</p>
<p>&#x2F;&#x2F; 这时候会发现3维不是一个很好的高维示例，因为当想拆两个子空间时，如果拆成 1维和2维，总有一个维度会显得不够灵活</p>
<hr>
<p>row space和 nullspace 正交:</p>
<p>nullspace: $Ax &#x3D; 0$, $x$所属的space</p>
<p>只需要展开A就能 看到 A的原始的row 乘上x 的到的 数值为0</p>
<p>所以A的行全部和x正交，所以行的生成空间（原始行的任意线性组合）</p>
<p>这里不止正交，而且一个r维,一个n-r维,所以一个是$R^n$中另一个的剩下所有垂直向量生成的空间</p>
<hr>
<p>研究 $A^TA$ ，因为很多情况下$A$并不一定是方阵，而是长方形</p>
<ul>
<li>n阶方阵</li>
<li>角对称</li>
</ul>
<p>$Ax&#x3D;b$ 可变成 $A^TA\hat{x}&#x3D;A^Tb$, 特别当$m &gt; n$时</p>
<p>$x$的解一定是 $\hat{x}$的解, 而如果$A^TA$又可逆，那么一定有解</p>
<p>于是要用到 rank(A^TA) &#x3D; rank(A), 第15章证明</p>
<p>hat $\hat{x}$表示最优,而不是准确</p>
<h2 id="15-子空间投影"><a href="#15-子空间投影" class="headerlink" title="15 子空间投影"></a>15 子空间投影</h2><ul>
<li>projections， 从投影到1维，延伸到 投影到空间</li>
<li>least squares and best straight line</li>
</ul>
<p>从二维 向量a,b投影 谈起</p>
<p>也就是 a方向上的向量p&#x3D;ka, 与 b-p垂直, 其中$k$是某个<code>数</code>,a,b是向量</p>
<p>$(k\vec{a})^T(\vec{b}-k\vec{a}) &#x3D; 0$</p>
<p>即 $a^T(b-ka) &#x3D; 0$</p>
<p>即 $a^Tb &#x3D; ka^Ta$, 注意到这里 $a^Tb$和$a^Ta$都是数</p>
<p>即 $k &#x3D; \frac{a^Tb}{a^Ta}$</p>
<p>$p&#x3D;a\frac{a^Tb}{a^Ta}$</p>
<p>$P(b) &#x3D; \frac{aa^T}{a^Ta} b$, 注意分子是矩阵 而分母是数 , 这里是”投影矩阵”，rank&#x3D;1</p>
<p>两个好的性质</p>
<ul>
<li>$P^T&#x3D; P$ 根据表达式显然</li>
<li>$P^2 &#x3D; P$ 幂等, 意义证明也就是投影的投影是不变的，代数证明根据结合律也显然</li>
</ul>
<hr>
<p>why project? 为什么做投影?</p>
<p>因为 $Ax&#x3D;b$ 可能无解</p>
<p>变成找$Ax&#x3D;p$, 其中$p$是$b$在$A$的列空间的投影</p>
<p>那么$b$ 关于$A$的每个列向量的投影都可以用类似上面的过程</p>
<p>$(A)^T(b-A\hat{x})&#x3D;[0,\cdots,0]^T$, 左边是列向量的转置，右边是 $e&#x3D;b-(p&#x3D;A\hat{x})$, 这样说明$e$和$A$的所有列向量正交，也就和列空间正交</p>
<p>注 这里根据前面 子空间正交性和充满空间 有$e$在$N(A^T)$中</p>
<p>注 这里不能单独的和每个列向量正交再加起来，因为和一个列向量正交的同时可能和另一个列向量不正交，这里需要同时和所有列向量正交</p>
<p>$A^Tb &#x3D; A^TA\hat{x}$</p>
<p>$\hat{x}&#x3D;(A^TA)^{-1}A^Tb$ ?? 不需要保证 可逆性吗?????</p>
<p>$p &#x3D; A\hat{x} &#x3D; A(A^TA)^{-1}A^T b$</p>
<p>$P(b) &#x3D; A(A^TA)^{-1}A^T b$, 这里的一个结论是，如果$A$是方阵且可逆，则 $P(b)&#x3D;b$</p>
<p>性质</p>
<ul>
<li>$P^T&#x3D; P$, 这里要用到 对称矩阵的逆 是对称矩阵？啊？？？？？？</li>
<li>$P^2 &#x3D; P$，这个同样从意义上 投影的投影幂等，从表达式上结合律</li>
</ul>
<hr>
<p>应用: 最小二乘法 拟合直线 Least squares fitting by a line</p>
<p>3个点: (1,1),(2,2),(3,2)</p>
<p>直线$y&#x3D;b+kx$</p>
<p>那么对应</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b+k=1</span><br><span class="line">b+2k=2</span><br><span class="line">b+3k=2</span><br></pre></td></tr></table></figure>

<p>显然是无解的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1 1]       [1]</span><br><span class="line">[1 2] [b] = [2]</span><br><span class="line">[1 3] [k]   [2]</span><br></pre></td></tr></table></figure>

<p>下节课</p>
<h2 id="16-投影矩阵-最小二乘法"><a href="#16-投影矩阵-最小二乘法" class="headerlink" title="16. 投影矩阵,最小二乘法"></a>16. 投影矩阵,最小二乘法</h2><ul>
<li>projections</li>
<li>least squares and best straight line</li>
</ul>
<p>$P&#x3D;A(A^TA)^{-1}A^T$ 投影矩阵</p>
<p>如果 b 在 列空间中,那么 Pb &#x3D; b 投影是自己</p>
<p>如果 b 垂直于 列空间,那么 Pb &#x3D; b 投影是0， $b \in N(A^T)$</p>
<p>其它情况 b,即不在列空间，也不垂直列空间</p>
<p>对于b</p>
<ul>
<li>把b投影到 列空间 的部分称作p</li>
<li>投影到N(A^T)的部分叫做e</li>
<li>b &#x3D; p+e (因为 列空间 和 N(A^T)正交！ 不正交的话投影和就不一定等)</li>
<li>p&#x3D;Pb</li>
<li>e&#x3D;(I-P)b</li>
<li>这里小p是投影，大P是投影矩阵</li>
</ul>
<hr>
<p>回到best line fitting, 那么要评价best line需要指标？</p>
<p>指标 $\min ||Ax-b||$ 这里描绘的是 y方向的差的平方最小，并不是点到直线的投影，（线性回归 linear regreation)</p>
<p>$&#x3D;\min (b+k-1)^2 +(b+2k-2)^2 +(b+3k-2)^2$</p>
<p>微积分视角 偏导数，也会得到下面的方程</p>
<figure class="highlight m"><figcaption><span>matlab</span></figcaption><table><tr><td class="code"><pre><span class="line">A <span class="built_in">=</span> [<span class="number">1</span> <span class="number">1</span>; <span class="number">1</span> <span class="number">2</span>;<span class="number">1</span> <span class="number">3</span>];</span><br><span class="line">A <span class="built_in">=</span> [<span class="number">1</span>;<span class="number">2</span>;<span class="number">2</span>];</span><br><span class="line">ata <span class="built_in">=</span> A<span class="string">&#x27; * A;</span></span><br><span class="line"><span class="string">atb = A&#x27;</span> * b;</span><br><span class="line">x <span class="built_in">=</span> ata\atb; // [<span class="number">2</span>/<span class="number">3</span>;<span class="number">1</span>/<span class="number">2</span>] <span class="built_in">=&gt;</span> 最优 直线 y <span class="built_in">=</span> <span class="number">2</span>/<span class="number">3</span> + <span class="number">1</span>/<span class="number">2</span> x</span><br><span class="line">p <span class="built_in">=</span> A * x;</span><br><span class="line">// <span class="number">3</span>  <span class="number">6</span>  | <span class="number">5</span></span><br><span class="line">// <span class="number">6</span> <span class="number">14</span>  | <span class="number">11</span></span><br><span class="line">// normal eqn</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    [1]             [7 /6]       [-1/6]</span><br><span class="line">b = [2] = (p = Ax = [5 /3]) + (e=[ 2/6])</span><br><span class="line">    [2]             [13/6]       [-1/6]</span><br><span class="line"></span><br><span class="line">p 垂直 e</span><br><span class="line">e 垂直 原来列向量 [1;1;1],[1;2;3]</span><br></pre></td></tr></table></figure>

<p>这里核心要导出的结论是: 如果A的列 线性无关, 那么$A^TA$是可逆的</p>
<p>也就是要证明 $A^TAx&#x3D;0$ 只有零解</p>
<p>那么 $x^TA^TAx&#x3D;0$</p>
<p>那么 $(Ax)^TAx&#x3D;0$ 这里是  $列向量^T列向量 &#x3D;0$, 所以</p>
<p>即是 $Ax&#x3D;0$， 列向量线性无关所以只有零解，所以$A^TA$可逆</p>
<hr>
<p>columns definitely independent if they are (perp.unit vectors&#x2F;orthogornal vectors) , 列如果恰好单位向量&#x2F;相互垂直，那么它们线性无关</p>
<p><code>[-sin cos]</code>和 <code>[cos sin]</code></p>
<h2 id="17-正交矩阵-Gram-Schmidt-正交化"><a href="#17-正交矩阵-Gram-Schmidt-正交化" class="headerlink" title="17. 正交矩阵,Gram-Schmidt 正交化"></a>17. 正交矩阵,Gram-Schmidt 正交化</h2><ul>
<li>orthogornal basis, q1,…,qn, n条正交基</li>
<li>orthogornal matrix Q</li>
<li>Gram-Schmidt A-&gt;Q</li>
</ul>
<p>orthog-normal vectors: 基两两正交，且每个基长度为1</p>
<p>$Q&#x3D;[q_1,\cdots,q_n]$</p>
<p>正交矩阵:</p>
<ul>
<li>$Q^TQ &#x3D; I$, 注意 虽然名字里没有 normal,只有orthog,但正交矩阵是要求normal的</li>
</ul>
<p>如果$Q$是 方阵, 那么$Q^T&#x3D;Q^{-1}$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例子</span><br><span class="line">[0 0 1]</span><br><span class="line">[1 0 0]</span><br><span class="line">[0 1 0]</span><br><span class="line"></span><br><span class="line">[cos -sin]</span><br><span class="line">[sin  cos]</span><br><span class="line"></span><br><span class="line">adhermar matrix, 全是1,-1组成的，还有系数的</span><br><span class="line"></span><br><span class="line">    [1 -2  2]</span><br><span class="line">1/3 [2 -1 -2]</span><br><span class="line">    [2  2  1]</span><br></pre></td></tr></table></figure>

<p>如果$Q$的列是 标准(normal 单位长度)正交的</p>
<p>$P&#x3D;Q(Q^TQ)^{-1}Q^T &#x3D; QQ^T$</p>
<ul>
<li>再次,如果Q是方阵,那么$P&#x3D;I$</li>
<li>再次 对称</li>
<li>再次 幂等</li>
</ul>
<p>这种情况下 $\hat{x_i} &#x3D; q_i^T b$</p>
<hr>
<p>Gram-Schmidt 正交化</p>
<ul>
<li>把一般的矩阵的线性无关的列向量 转化为正交列向量</li>
</ul>
<p>从两个向量开始 $(a,b) \to (a_1&#x3D;a,b_1&#x3D;b-\frac{aa^T}{a^Ta}b)$, 上面学的投影，完成后，再进行单位化$(q_1&#x3D;\frac{a}{||a||},q_2&#x3D;\frac{b}{||b||})$，</p>
<ul>
<li>这里视频上是$\frac{a^Tb}{a^Ta}a$的形式，这表现出是向量$a$的某个倍数，而且更容易计算</li>
<li>因为“数”可以交换位置 $\frac{aa^T}{a^Ta}b &#x3D; \frac{a^Tb}{a^Ta} a$</li>
</ul>
<p>三个向量 $(a,b,c) \to (a_1&#x3D;a,b_1&#x3D;b-\frac{aa^T}{a^Ta}b,c)$,</p>
<p>$\to (a_1&#x3D;a,b_1&#x3D;b-\frac{aa^T}{a^Ta}b,c_1&#x3D;c-\frac{a_1a_1^T}{a_1^Ta_1}c-\frac{b_1b_1^T}{b_1^Tb_1}c)$, 这里因为前两项已经完成了正交，所以后面的减法才能合并成立</p>
<p>整个操作 列空间没有变化，也就是保持列空间不变的情况下，选了一组normal 正交基</p>
<p>回过头来看</p>
<ul>
<li>$A&#x3D;LU$ 描述 之前的 rref阶梯化</li>
<li>$A&#x3D;QR$ 描述了这里 ,A$列变化提出normal正交列向量, R是上三角矩阵</li>
</ul>
<h2 id="18-行列式-及其性质"><a href="#18-行列式-及其性质" class="headerlink" title="18 行列式 及其性质"></a>18 行列式 及其性质</h2><ul>
<li>Determinants det A &#x3D; |A|, 而 determinate的英文是确定的</li>
<li>properties</li>
</ul>
<p>eigen values(固有值， 特征值)</p>
<p>本章 重要结论之一 可逆 &lt;-&gt; 行列式非零</p>
<p>由3条性质基础得到行列式，而不是先行列式有什么性质</p>
<ul>
<li>性质1. det I &#x3D; 1</li>
<li>性质2. 交换行，影响行列式的 符号<ul>
<li>任意的 置换矩阵 det P &#x3D; 1 or -1</li>
</ul>
</li>
<li>性质3. 每行都是可以独立考虑线性性质的，也就是固定其它行 有数乘和加法<ul>
<li>3.1. 单行乘上t, 结果乘上t<ul>
<li>$\det kA &#x3D; k^n \det A$</li>
</ul>
</li>
<li>3.2. 两个矩阵n-1行相同, 那么它们的行列式相加 &#x3D; 这相同的n-1行以及 对应的对位相加 的 矩阵的行列式.</li>
</ul>
</li>
</ul>
<p>虽然直接上代数式更代数，但这里3个性质更 直观，但这样的性质有一些潜在的风险，例如 性质2<br>    - 这里 数学一点 需要证明如果行两两不同，那么奇数次交换 和 偶数次交换 无法得到同样的矩阵， 而隐藏在里面的 正是排列数的内容，</p>
<hr>
<p>根据基础性质有</p>
<ul>
<li>性质4. 相等的两行 det &#x3D; 0, （根据性质2)</li>
<li>性质5. 行i -&#x3D; k * 行j $(j\neq i)$, 行列式不变，根据性质4和性质3</li>
<li>性质6. 有全零行, 则 det A &#x3D; 0, 根据性质3 乘上 0</li>
<li>性质7. U(上三角矩阵)行列式 &#x3D;对角线上的乘积, 根据1,5,3,以得到</li>
<li>性质8. 当A is singular(奇异 不可逆), det A &#x3D; 0<ul>
<li>前面 可逆 &lt;-&gt; rref后每行有主元 &lt;-&gt; U , det U!&#x3D; 0</li>
<li>对于2维 |[a,b;c,d]| &#x3D; ad-bc, 根据上面推出的而不是定义的！</li>
<li>对于n维的同样 推出 代数式 ！！！！（不过同样的在下一章）</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>性质9: det (AB) &#x3D; det(A) det(B)<ul>
<li>若不可逆，和0的关系易证</li>
<li>那么对于 A,B 均可逆，证明？？？？？？？？？？？？<ul>
<li>代数式倒是易证，然而是第19章</li>
<li>首先特别的 对于简单的行变化 R, det (RA) &#x3D;  det(R)det(A)</li>
<li>这里是 只看B的行向量，而通过对A进行变换（是左，那么左右同步同样变化，直到A完全变成 对角矩阵，得证</li>
</ul>
</li>
<li>推论 det $A^{-1}$ &#x3D; 1&#x2F;det A</li>
</ul>
</li>
<li>性质10: $\det A^T &#x3D; \det A$<ul>
<li>证明: $|U^T||L^T| &#x3D; |A^T| &#x3D; |A| &#x3D; |L||U|$, 用上面性质</li>
<li>推论 零列 &#x3D;&gt; det 0</li>
<li>推论 det Q &#x3D; 1 or -1, 因为$Q^TQ&#x3D;I$</li>
</ul>
</li>
</ul>
<p>&#x2F;&#x2F; 这样看来3x4的行列式，主要是性质1难以满足，而且本身长矩阵 无可逆一说，这样的值没有用处，后续9,10也不行，而想满足其它有些性质还真可以</p>
<h2 id="19-行列式公式-cofactors代数余子式"><a href="#19-行列式公式-cofactors代数余子式" class="headerlink" title="19 行列式公式, cofactors代数余子式"></a>19 行列式公式, cofactors代数余子式</h2><p><code>[a,b;c,d] = [a,0;c,d]+[0,b;c,d] = [a,0;c,0]+[a,0;0,d]+[0,b;c,0]+[0,b;0,d]</code> 简单的利用性质3，一直拆就行了</p>
<p>amazing比 先走表达式，漂亮多了，从我们需要的性质去导出一个满足的</p>
<p>$\det A &#x3D; \sum_{(t_i,\cdots)排列} \pm \prod_{i&#x3D;1}^n a_{i{t_i}}$</p>
<p>下个问题 是这里$\pm$的具体取值能否 通过排列判断出</p>
<p>上面的性质 是 列号 &#x3D; 经过多少次 交换能变成 (1,…,n) 那就决定了-1的奇偶</p>
<hr>
<p>cofactors 代数余子式, 啊这因为字面意思是 co-(共，伴随) factors因子， 有的时候这种 中文就太别扭不精确</p>
<p>把第一行 的每个数拆出来</p>
<p>$&#x3D; a_{11}(a_{22}a_{33}-a_{23}a_{32})+a_{12}(-(a_{21}a_{33}-a_{23}a_{31}))+a_{13}(a_{})$, 括号里的就是代数余子式</p>
<p>$\det A &#x3D;a_{11}C_{11}+a_{12}C_{12}+\cdots+a_{1n}C_{1n}$</p>
<p>回到上面的问题, cofactor of $a_{ij}$的 符号问题，容易猜出 再证明$(-1)^{i+j}$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+ - + - +</span><br><span class="line">- + - + -</span><br><span class="line">+ - + - +</span><br><span class="line">- + - + -</span><br><span class="line">+ - + - +</span><br></pre></td></tr></table></figure>

<p>代数余子式的想法的拆解，能对于一些有规律的大矩阵得到递推公式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 1</span><br><span class="line">1 1 1</span><br><span class="line">  1 1 1</span><br><span class="line">    1 1 1</span><br><span class="line">      1 1 ...</span><br></pre></td></tr></table></figure>

<h2 id="20-Cramers-Rules-克拉默法则"><a href="#20-Cramers-Rules-克拉默法则" class="headerlink" title="20 Cramers Rules 克拉默法则"></a>20 Cramers Rules 克拉默法则</h2><ol>
<li>Formula for $A^{-1}$</li>
<li>Cramers Rules for x&#x3D;$A^{-1}b$</li>
<li>行列式应用 |Det A| &#x3D; volume of box</li>
</ol>
<p>对于2阶矩阵 $[a,b;c,d]^{-1} &#x3D; \frac{1}{|[a,b;c,d]|} [d,-b;-c,a]$</p>
<p>本章 重要结论$A^{-1}&#x3D;\frac{1}{\det A} C^T$, 其中$C$是上一章的 代数余子式</p>
<p>证明:</p>
<p>就是 乘法展开，会发现$AC^T$的对角 是$\det A$, 而 非对角$i,j$，相当于把$A$的$j$行 换成$i$行 再去求$\det$,而我们知道 有两个相同行的$\det$为0, 所以得证</p>
<p>这个公式也帮助理解 原矩阵变化 对 逆矩阵的影响</p>
<hr>
<p>Cramers Rules: $x&#x3D;A^{-1}b&#x3D;\frac{1}{\det A}C^T b$</p>
<p>看向量$x$的每个 分量</p>
<p>$x_{i}&#x3D;\frac{\det B_i}{\det A}$, 其中 $B_i &#x3D;$ 把$A$的第i列换成$b$, 这也是 从 余子式 和 行列式 的关系 得到的</p>
<p>感觉算法竞赛里 常见的还是高斯消元，但那偏应用，而这里是数学性质的推导</p>
<p>这个的主要价值 是 提供了一个表达式，但不易于计算, (三阶求逆的时候比较好用</p>
<hr>
<p>行列式应用： 求体积</p>
<p>命题：行列式的值 &#x3D; 箱子的体积</p>
<p>箱子的三条边，三个行向量，（行列式的值可能为负（告诉我们手性），则取绝对值）</p>
<p>直觉的证明 如果能证明上面18章的3个基础性质 和体积变化同步，那么就可以证明</p>
<ul>
<li>性质1. det I &#x3D; 1 对应 单位标准立方体</li>
<li>性质2. 行交换 乘上-1, 对应空间的维度交换</li>
<li>性质3. 固定其它维度，单行的加和乘满足线性关系。 对应箱子单边的伸缩！！</li>
</ul>
<p>延伸，2维的det 求面积</p>
<p>延伸，三角形面积 非原点 用三维det, 因为 做两次 行相减，就能让非1的部分回到原点。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1/2 * det(</span><br><span class="line">x1 y1 1</span><br><span class="line">x2 y2 1</span><br><span class="line">x3 y3 1</span><br><span class="line">)</span><br></pre></td></tr></table></figure>


<h2 id="21-eigenvalues特征值-与-eigenvectors特征向量"><a href="#21-eigenvalues特征值-与-eigenvectors特征向量" class="headerlink" title="21 eigenvalues特征值 与 eigenvectors特征向量"></a>21 eigenvalues特征值 与 eigenvectors特征向量</h2><ul>
<li>eigen values , eigen vectors</li>
<li>$\det (A-\lambda I) &#x3D; 0$</li>
<li>trace &#x3D; $\lambda_1+\lambda_2+\cdots+\lambda_n$</li>
</ul>
<p>还是对于方阵</p>
<p>eigen(自身的)</p>
<p>看成函数 $f(x)&#x3D;Ax$</p>
<p>那么希望研究其中, 运算后和x平行的, parallel to x (eigen vectors)</p>
<p>$Ax&#x3D; \lambda x$, 其中$\lambda$ 是数值，eigen values</p>
<p>if A is Singular, 存在非零x, $A x &#x3D; 0 x$, 也就是0是它的特征值,</p>
<p>这里要研究所有特征值.</p>
<hr>
<p>what are the x’s and \lambda ‘s for project matrix? 投影矩阵的 特征值 和 特征向量 是什么？</p>
<p>根据之前的内容，不在空间外的 到子空间的投影 一定不是平行的(parallel)</p>
<p>而在空间中的向量到空间的投影，就是它本身$Px&#x3D;x$, 这里$\lambda &#x3D; 1$</p>
<p>正交于空间的，投影都是0, 所以$Px &#x3D; 0$, 这里$\lambda &#x3D; 0$</p>
<p>所以只有1 和 0</p>
<hr>
<p>置换矩阵 <code>[0,1;1,0]</code>, 因为交换顺序， 所以只有交换前 平行</p>
<ul>
<li>$x&#x3D;[1;1],\lambda &#x3D; 1$</li>
<li>$x&#x3D;[1;-1],\lambda &#x3D; -1$</li>
</ul>
<p>而且 两个$x$是正交的</p>
<hr>
<p>性质:</p>
<ul>
<li>n个 特征值, 因为 上面会变成n次方程</li>
<li>trace $&#x3D; \sum_i \lambda_i &#x3D; A_{ii}$<ul>
<li>证明 注意 特征方程 的$n-1$次方只能来源于对角线, 而$\prod_i (\lambda - \lambda_i)$的$n-1$ 次系数 对应$\sum_i$, 因此得证</li>
</ul>
</li>
<li>$\det &#x3D; \prod_i {\lambda_i}$<ul>
<li>其实 右边是$\prod_i (\lambda - \lambda_i)$的零次系数，那么直接把$\lambda &#x3D;0$带入就是左边</li>
</ul>
</li>
</ul>
<hr>
<p>how to solve $Ax&#x3D;\lambda x$?</p>
<p>$(A-\lambda I)x &#x3D;0$ 如果存在非零向量$x$,那么左侧一定是奇异的，所以$\det (A-\lambda I) &#x3D; 0$, 所以变成关于$\lambda$的$n$次方程 (特征方程)</p>
<p>可能相同，也可能不同</p>
<p>如果有$\lambda$, 那么只需要带回去 高斯消元 求nullspace就能有x</p>
<p>简单例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 1</span><br><span class="line">1 3</span><br><span class="line">显然有2,4</span><br><span class="line">而上面例子</span><br><span class="line">0 1</span><br><span class="line">1 0</span><br><span class="line">的特征值-1,1， 对矩阵的对角同时增加k，那么特征值同时增加k，而特征向量不变</span><br></pre></td></tr></table></figure>

<p>$Q&#x3D;[0,-1;1,0]$， 90度旋转矩阵，会遇到$\lambda^2 &#x3D; -1$, 会出现 复数</p>
<p>上三角矩阵的特征值 就在 对角线上 显然</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 1</span><br><span class="line">0 3</span><br><span class="line">特征值3, (lambda -3)(lambda - 3) =0</span><br><span class="line"></span><br><span class="line">(A-3I)x = [0 1] = [0]</span><br><span class="line">          [0 0]   [0]</span><br><span class="line"></span><br><span class="line">degenerate matrix(退化矩阵，重复的特征值 可能造成 特征向量短缺，只有[1;0]）</span><br></pre></td></tr></table></figure>

<h2 id="22-对角化-A的幂"><a href="#22-对角化-A的幂" class="headerlink" title="22 对角化, A的幂"></a>22 对角化, A的幂</h2><ul>
<li>Diagonaliging a matrix $S^{-1}AS&#x3D;\Lambda$</li>
<li>Powers of A &#x2F; equation $u_{k+1}&#x3D;A u_{k}$</li>
</ul>
<p>假设A有n个线性无关 特征向量</p>
<p>S是特征向量 组成的矩阵（必定可逆）</p>
<p>$AS&#x3D;A[特征向量列]&#x3D;A[\lambda_i x_i…]&#x3D;S [\lambda_i 特征值对角矩阵] &#x3D; S\Lambda$</p>
<p>$S^{-1}AS &#x3D; \Lambda$</p>
<p>$A&#x3D;S\Lambda S^{-1}$， 这里也可以得到 如果 $\forall |\lambda_i| &lt; 1$那么 $k\to \infty, A^k\to O$</p>
<p>$A^n&#x3D;S\Lambda^n S^{-1}$ 这就很amazing了，，，我还是隐约觉得fft 转化过程 有这种类似的感觉，转化成一个高效计算的，然后转化回来</p>
<p>不走这一步的话 也能得到 $A^n$的特征值有$\lambda^n$, 通过最开始的特征值定义</p>
<hr>
<p>A is Sure to have n indep evectors (and be diagonaligable) if all the $\lambda$ are different (no repeated \lambda’s) 如果A有n个不同的特征值，那么它有n个线性无关特征向量(对角化), 这里是充分不是充要，prove：</p>
<ul>
<li>搜了不少内容，很多都在说 两个不同特征值对应的特征向量线性无关<ul>
<li>两个很好证，因为 第一个对应的 组合 成$\alpha_1$,第二个组合成$\beta_1$,那么有 $\alpha_1 &#x3D; \beta_1$, $\lambda_1\alpha_1 &#x3D; A\alpha_1 &#x3D;A\beta_1&#x3D; \lambda_2 \beta_1$ 矛盾</li>
<li>但这里我需要的是 要组成$A&#x3D;S\Lambda S^{-1}$,也就是$S$的部分，需要证明的是所有个，而不是其中两个，如果三个特征值对应的三个特征向量是<code>[1;0;0],[1;1;0],[0;1;0]</code>,它们的确两两无关，但是3个是相关的</li>
<li>一个是归纳法 对于s-1成立 若 $\sum_{i&#x3D;1}^s k_i\alpha_i&#x3D;0$ 有非零解<ul>
<li>$\times (A-\lambda_s)$ 有$0&#x3D;\sum_{i&#x3D;1}^s k_i(A-\lambda_s)\alpha_i&#x3D;\sum_{i&#x3D;1}^s k_i(\lambda_i-\lambda_s)\alpha_i$</li>
<li>则有 找到一个s-1有非零解，矛盾</li>
</ul>
</li>
<li>另一个是空间意义的反证法<ul>
<li>如果 特征向量 和前面的特征向量集合线性相关，那么就是在前面向量的生成空间中，而前面的可以看作生成空间的基（不一定正交）的放缩，容易证明在基的生成空间中，每个基的放缩不同时，对于非平行于基的点的变化一定带有旋转，</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>当有重复特征值时</p>
<ul>
<li>不满足的例子 <code>[1,1;0 1]</code></li>
<li>满足的例子 <code>[1,0;0,1]</code></li>
</ul>
<hr>
<p>给定初始向量和地推式$u_0$, $u_{k+1}&#x3D;Au_{k}&#x3D;A^{k+1}u_0$</p>
<p>把$u_0&#x3D;\sum_{i} c_ix_i$ 拆分成 $A$的特征向量的组合。 (一定可拆分吗？？？？？？？</p>
<p>那么有$u_{k} &#x3D; A^k (\sum_i c_ix_i)&#x3D; \sum_{i} c_i \lambda_i^k x_i &#x3D; \Lambda^k S C$, 注意 最后的 Lambda,S(特征向量组成的矩阵),C(拆分的系数向量)， 三者的i的顺序要对应一致</p>
<hr>
<p>例子 Fibonacci</p>
<p>$F_{k+2}&#x3D;F_{k+1}+F_k$</p>
<p>$u_k&#x3D;[F_{k+1};F_k]$</p>
<p>$A&#x3D;[1 ,1;1 ,0]$</p>
<p>也就是 经常用到的线性递推转幂次 $\lambda &#x3D;\frac{1\pm \sqrt{5}}{2}$</p>
<p>$\lambda^2-\lambda-1&#x3D;0$ 和原始递推式非常像，TODO ??? 应该可以延伸吧</p>
<p>另一方面 $F_{100} \sim c_1 (\frac{1+\sqrt{5}}{2})^{100}$, 较大的特征值描述了区域无限时的增长趋势</p>
<p>这里 注意到$[1-\lambda,1;1,-\lambda] [\lambda;1]&#x3D; [0;0]$ 所以两个特征向量 $[\lambda_1;1],[\lambda_2;1]$</p>
<h2 id="23-微分方程-Exp-At"><a href="#23-微分方程-Exp-At" class="headerlink" title="23 微分方程, Exp(At)"></a>23 微分方程, Exp(At)</h2><ul>
<li>Differential Eqns $\frac{du}{dt} &#x3D; Au$</li>
<li>Exponential $e^{At}$ of Matrix</li>
</ul>
<p>$u(0)&#x3D;[1;0]$</p>
<p>$\frac{du_1}{dt}&#x3D;-u_1+2u_2$</p>
<p>$\frac{du_2}{dt}&#x3D;u_1-2u_2$</p>
<p>$A[-1,2;1,-2]$</p>
<p>$\lambda &#x3D;0,-3$</p>
<p>$\lambda_1&#x3D;0, x_1&#x3D;[2;1]$</p>
<p>$\lambda_2&#x3D;3, x_1&#x3D;[1;-1]$</p>
<p>solution: $u(t)&#x3D;c_1e^{\lambda_1 t}x_1+c_2e^{\lambda_2 t}x_2$, drop from sky</p>
<p>check:  $\frac{du}{dt}&#x3D;c_1\lambda_1 e^{\lambda_1 t}x_1+c_2\lambda_2 e^{\lambda_2 t}x_2 &#x3D; \lambda_1 x_1 c_1 e^{\lambda_1 t}x_1+\lambda_2 x_2 c_2e^{\lambda_2 t} &#x3D; A(c_1e^{\lambda_1 t}x_1+c_2e^{\lambda_2 t}x_2 )&#x3D;Au$<br>带入得 $u(t)&#x3D;c_1\cdot 1 [2;1]+c_2e^{-3t}[1;-1]$</p>
<p>利用$u(0)&#x3D;[2;1]$</p>
<p>解得$c_1&#x3D;\frac{1}{3},c_2&#x3D;\frac{1}{3}$</p>
<p>$u(t)&#x3D;\frac{1}{3}[2;1]+\frac{1}{3}e^{-3t}[1;-1]$</p>
<p>$u(\infty)&#x3D;\frac{1}{3}[2;1]$</p>
<p>这也能描绘 系统是否趋于稳定性</p>
<ul>
<li>如果$\lambda&#x3D;-3+6i$, 而$i$的部分虚数意义是旋转 不影响大小， 实部 &lt; 0</li>
<li>稳态: $\lambda_1 &#x3D;0$ 其它$\lambda$实部&lt;0</li>
</ul>
<p>2阶 稳定性，两个特征值 都 &lt; 0, 那么 trace &lt; 0, det &gt; 0</p>
<p><code>[a,b;c,d]</code> 即 a+d &lt; 0, ad-bc &gt; 0</p>
<hr>
<p>$\frac{du}{dt}&#x3D;Au$</p>
<p>令$u&#x3D;Sv$, S是 e vectors</p>
<p>$S\frac{dv}{dt} &#x3D; ASv$， 带入</p>
<p>$\frac{dv}{dt} &#x3D; S^{-1}ASv&#x3D;\Lambda v$</p>
<p>$v(t)&#x3D;e^{\Lambda t}v(0)$， 等下解释幂次的矩阵， drop from sky</p>
<p>$u(t)&#x3D;Se^{\Lambda t}S^{-1}u(0)$</p>
<p>$e^{At}&#x3D;Se^{\Lambda t}S^{-1}$, 根据下面的展开 也能得到， 这里处理的也是能够对角化的</p>
<p>解释:</p>
<p>$e^{At}&#x3D;I+At+\cdots+\frac{(At)^i}{i!}+\cdots$ 泰勒级数展开</p>
<p>类似的$(I-At)^{-1}&#x3D;I+At+\cdots+(At)^i+\cdots$</p>
<p>$e^{\Lambda t}&#x3D;$对角矩阵，对角线上$e^{\lambda_it}$</p>
<hr>
<p>例子: y’’+by’+ky&#x3D;0</p>
<p>如何把二阶微分方程 转化成 方程组</p>
<p>$u &#x3D; [y’;y]$</p>
<p>$u’&#x3D;[y’’;y’]$</p>
<p>$\frac{du}{dx} &#x3D; u’ &#x3D; [-b,-k;1,0] u$</p>
<h2 id="24-特征值应用，马尔可夫矩阵，傅里叶级数投影"><a href="#24-特征值应用，马尔可夫矩阵，傅里叶级数投影" class="headerlink" title="24 特征值应用，马尔可夫矩阵，傅里叶级数投影"></a>24 特征值应用，马尔可夫矩阵，傅里叶级数投影</h2><ul>
<li>Fouries series projections</li>
<li>steady state<ul>
<li>lambda &#x3D; 1</li>
<li>lambda &#x3D; 0, 得到 $e^{0t}$</li>
</ul>
</li>
<li>Markov matrix</li>
</ul>
<p>马尔可夫矩阵(与概率论有关)</p>
<ul>
<li>例子<code>A = [.1,.01,.3;.2,.99,.3;.7,0,.4]</code></li>
<li>所有元素非负</li>
<li>所有列的和 &#x3D; 1<ul>
<li>保证了 1是它的一个特征值，因为$A-I$进行行变换 n行相加 是0<ul>
<li>这里视频似乎还没有使用 行秩 &#x3D; 列秩一类的，用的行线性相关 &#x3D;&gt; det((A-I)^T) &#x3D; 0, 又有 det((A-I)^T)&#x3D;det(A-I)</li>
</ul>
</li>
<li>所有 其它特征值 $|\lambda_i| &lt; 1$, prove???</li>
<li>$u_k&#x3D;A^ku_0 &#x3D; c_1\lambda_1^kx_1+\cdots$, 这样一个特征1,其它无限迭代趋于0， 是一个 steady state 稳态</li>
</ul>
</li>
<li>用途一般用来表示 多个状态变化迁移（所以总和是1）<ul>
<li>因为特征值是1,和绝对值小于1的，那么再无穷多步以后有“趋于的稳态”的性质</li>
</ul>
</li>
</ul>
<p>例子</p>
<p>$u_{k+1}&#x3D;Au_k$</p>
<p>$[c;m]_{k+1}&#x3D;[.9,.2;.1,.8][c;m]_k$</p>
<p>$u_0&#x3D;[c;m]_0&#x3D;[0;1000]$</p>
<p>特征值特征向量 $1,[2;1],.7,[1;-1]$</p>
<p>$u_{k}&#x3D;c_1 1^k[2;1]+c_2(.7)^k[-1;1]$</p>
<p>通过$u_0$可得到$c_1 &#x3D; \frac{1000}{3},c_2&#x3D;\frac{2000}{3}$</p>
<hr>
<p>projections with orthonormal basis, $q_1,\cdots,q_n$</p>
<p>要拆解 $v &#x3D; x_1q_1+\cdots+x_nq_n$</p>
<p>如何得到$x_1$, 利用q的正交性</p>
<p>$x_1 &#x3D; q_1^Tv$</p>
<p>也就是$Qx&#x3D;v$的解是$Q^Tv&#x3D;x&#x3D;Q^{-1}v$</p>
<hr>
<p>fourier series 函数 $f(x) &#x3D; a_0+a_1\cos(x)+b_1\sin(x)+a_2\cos(2x)+b_2\sin(2x)+\cdots$</p>
<p>这里是无穷多个正交的函数，而函数正交的定义类似向量</p>
<ul>
<li>向量 内积 $u^Tv&#x3D;\sum_{i} u_iv_i$</li>
<li>函数$f^Tg &#x3D; \int_0^{2\pi}f(x)g(x)dx$, 因为上面研究的周期是$2\pi$<ul>
<li>例如 $\int_{0}^{2\pi}\sin(x)\cos(x) dx &#x3D; \frac{1}{2} (\sin(x))^2 |_0^{2\pi} &#x3D; 0$</li>
</ul>
</li>
<li>那么类似上面分解$v$到$q_i$计算系数$x_i$, 同样的想法，这里要做的 乘上对应正交基，$\int_0^{2\pi} f(x)\cos(x) dx$<ul>
<li>那么注意到 $\int_0^{2\pi}(cos(kx))^2 dx&#x3D;\pi$, 所以上面系数再乘上$\frac{1}{\pi}$, 其中 $\int_{0}^{2\pi} dx &#x3D; 2\pi$ 所以$a_0$的系数是$\frac{1}{2\pi}$</li>
</ul>
</li>
</ul>
<figure class="highlight m"><table><tr><td class="code"><pre><span class="line">f <span class="built_in">=</span> @(x) (cos(x)).^<span class="number">2</span>;</span><br><span class="line">q <span class="built_in">=</span> integral(f,<span class="number">0</span>,<span class="number">2</span>*pi);</span><br></pre></td></tr></table></figure>

<hr>
<p>？？？ 感觉这两章有些公式 drop from sky, 例如 $e^{\lambda t}$, 例如</p>
<h2 id="25-复习-2"><a href="#25-复习-2" class="headerlink" title="25 复习 2"></a>25 复习 2</h2><p>总览</p>
<p>标准正交矩阵 $Q&#x3D;[q_1,\cdots,q_n]$, $Q^TQ&#x3D;I$</p>
<ul>
<li>Projections-Least Squares, 无解的投影解，以及最小二次<ul>
<li>投影矩阵的对称性和幂等性</li>
</ul>
</li>
<li>Gram-Schmidt, 一个向量减去它投影到另一个向量的部分来逐渐建立正交系<ul>
<li>当 另一组 向量内部是两两正交的，那么就可以互不影响的相减了</li>
<li>$\displaystyle a_{i_{new}}&#x3D;a_i-\sum_{j&lt;i} \frac{a_{j_{new}}^Ta_i}{a_{j_{new}}^Ta_{j_{new}}}a_{j_{new}}$</li>
</ul>
</li>
</ul>
<p>行列式， 3个基础性质，导出</p>
<ul>
<li>延伸性质</li>
<li>公式</li>
<li>定义代数余子式<ul>
<li>导出 逆矩阵公式</li>
<li>利用代数余子式求一些有规律的大矩阵的递推式</li>
</ul>
</li>
</ul>
<p>特征值，特征向量</p>
<ul>
<li>特征向量</li>
<li>sum &#x3D; trace, prod &#x3D; det</li>
<li>对角化<ul>
<li>幂次</li>
</ul>
</li>
<li>差分&#x2F;递推 方程<ul>
<li>fib</li>
<li>周期的递推，在特征值视角上 也是 复平面的单位圆</li>
<li>微分方程</li>
</ul>
</li>
</ul>
<hr>
<p>例题：</p>
<p><code>a = [2;1;2]</code>, 任意向量到a的投影矩阵P $&#x3D;\frac{aa^T}{a^Ta}$, 空间是$A(A^TA)^{-1}A^T$</p>
<p> $P &#x3D; 1&#x2F;9 [4,2,4;2,1,2;4,2,4]$,</p>
<p> 特征值: 维度是1,所以现有有两个是0, 另一个 &#x3D; $trace - 0-0&#x3D;1$</p>
<p>特征值 对应的特征向量是a,因为$Pa&#x3D;a$</p>
<p>$u_{k+1}&#x3D;Pu_k$, $u_0&#x3D;[9;9;0]$</p>
<p>$u_{k+1}&#x3D;u_1&#x3D;Pu_0&#x3D;[6;3;6]$, 幂等性质</p>
<p>$u_0&#x3D;c_1x_1+c_2x_2+c_3x_3$的展开</p>
<p>$u_k&#x3D;A^ku_0&#x3D;c_1\lambda_1^kx_1+c_2\lambda_2^kx_2+c_3\lambda_3^ku_3$</p>
<hr>
<p>例题： 拟合最好y&#x3D;kx直线 (1,4),(2,5),(3,8)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1       4</span><br><span class="line">2 [k] = 5</span><br><span class="line">3       9</span><br></pre></td></tr></table></figure>

<p>$a^Ta \hat{k}&#x3D;a^Tb$</p>
<p>$14\hat{k}&#x3D;38$</p>
<p>$\hat{k} &#x3D; \frac{38}{14}$</p>
<p>最小二乘法，看作 把 目标向量 投影到 列向量空间的结果是“最好”</p>
<hr>
<p>4x4 矩阵 $\lambda_{1,2,3,4}$</p>
<ul>
<li>$\forall \lambda_i \neq 0$&lt;&#x3D;&gt; 可逆</li>
<li>$det(A^{-1}) &#x3D; \prod \frac{1}{\lambda_i}$<ul>
<li>$x&#x3D;Ix&#x3D;A^{-1}Ax&#x3D;A^{-1}\lambda x$<ul>
<li>$A^{-1}x&#x3D;\frac{1}{\lambda}x$, 总感觉之前和现在一直没证明 有重复存在时的一些对应关系</li>
</ul>
</li>
</ul>
</li>
<li>$trace(A+I) &#x3D; \sum_i (\lambda_i+1)$</li>
</ul>
<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A4 = [</span><br><span class="line">0,1,0,0;</span><br><span class="line">1,0,2,0;</span><br><span class="line">0,2,0,3;</span><br><span class="line">0,0,3,0</span><br><span class="line">]</span><br><span class="line">det A4=9</span><br></pre></td></tr></table></figure>

<p>P&#x3D;? $A(A^TA)^{-1}A^T$ 可逆矩阵的投影矩阵都是$I$,因为占满了$R^n$</p>
<p>哈哈 “not difficult”</p>
<h2 id="26-对称矩阵，-正定性"><a href="#26-对称矩阵，-正定性" class="headerlink" title="26 对称矩阵， 正定性"></a>26 对称矩阵， 正定性</h2><ul>
<li>symmetric matrices 对称矩阵</li>
<li>positive definite matrices</li>
<li>特征值，和特征向量有何特殊之处</li>
</ul>
<p>$A&#x3D;A^T$ 性质</p>
<ul>
<li>特征值 是 实数 （下面证明）<ul>
<li>稍后证明</li>
</ul>
</li>
<li>特征向量， <strong>是</strong> 垂直的（perpendicular(老师写墙上了黑板不够长)<ul>
<li>证明<ul>
<li>$x_1^TAx_2&#x3D;x_1^T\lambda_2x_2&#x3D;\lambda_2x_1^Tx_2$</li>
<li>$x_1^TAx_2&#x3D;x_2^TA^Tx_1&#x3D;x_2^TAx_1 &#x3D; x_2^T\lambda_1 x_1$</li>
<li>那么有 $\lambda_1 x_1^Tx_2&#x3D;\lambda_2 x_2^Tx_1$, 要么正交，要么 相等<ul>
<li>这里还说明 $A$和$A^T$ 的不同特征值的特征向量 正交</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>来自复习3 特征向量正交+特征值实数 &#x3D;&gt; 是对称矩阵 prove ???？？？</p>
<p>通常$A&#x3D;S\Lambda S^{-1}$</p>
<p>那么 对于 对称矩阵，根据上面垂直的性质, $A&#x3D;Q\Lambda Q^{-1}&#x3D;Q\Lambda Q^T$, spectral theorem , 力学上 主轴定理</p>
<hr>
<p>why real eigenvalues? 为什么 对称矩阵的特征值一定是实数</p>
<p>$Ax&#x3D;\lambda x$ 对两边取共轭，有$\bar{A}\bar{x}&#x3D;\bar{\lambda}\bar{x}$</p>
<p>这里$A\bar{x}&#x3D;\bar{\lambda}\bar{x}$说明实矩阵 的特征值共轭是成对出现的</p>
<p>转置 $\bar{x}^TA&#x3D;\bar{\lambda} \bar{x}^T$</p>
<p>$\bar{x}^TAx&#x3D;\bar{\lambda} \bar{x}^Tx$</p>
<p>$\bar{x}^T \lambda x&#x3D;\bar{\lambda} \bar{x}^Tx$, 注意到 向量点积是数, 那么取决于$\bar{x}^Tx$的值非0, 只要$x$非全零 显然</p>
<ul>
<li>同时这里知道$\bar{x}^Tx$表示 有复数的向量的长度</li>
<li>$(\lambda-\bar{\lambda})\bar{x}^T x&#x3D;0$<ul>
<li>得证</li>
</ul>
</li>
<li>根据同样的过程也知道如果是复矩阵，只要$A&#x3D;\bar{A}^T$ 有一样的性质</li>
</ul>
<p>$A&#x3D;Q\Lambda Q^T$展开看</p>
<p>$&#x3D;\sum \lambda_i q_i q_i^T$, 注意每个后面是 投影矩阵，所以 实对称矩阵是 投影矩阵的组合</p>
<hr>
<p>正主元(???)的个数 &#x3D; 正 lambda的个数 sign of pivot same as sign’s of lambda’s ????</p>
<hr>
<p>positive definite symmetric matrix 正定对称矩阵</p>
<ul>
<li>所有 特征值 是正的</li>
<li>所有 pivots 是 positive<ul>
<li>$\det &#x3D; \prod pivots &gt; 0$</li>
</ul>
</li>
<li>all subdeterminants are positive, 所有 余子式非负</li>
<li>上面 这三条 是相互可推的？prove？？？？？？</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 2</span><br><span class="line">2 3</span><br><span class="line">主元, 5, 11/5</span><br><span class="line">特征值, 4\pm sqrt(5)</span><br></pre></td></tr></table></figure>

<h2 id="27-复数矩阵，FFT-傅里叶矩阵"><a href="#27-复数矩阵，FFT-傅里叶矩阵" class="headerlink" title="27 复数矩阵，FFT 傅里叶矩阵"></a>27 复数矩阵，FFT 傅里叶矩阵</h2><p>相当于一个插入的分支章节</p>
<ul>
<li>complex vectors matrices</li>
<li>inner products</li>
<li>DISCRETE Fourier FAST Transform<ul>
<li>Fourier matrix F_n</li>
<li>算法竞赛里 现在NTT更多（数域变为mod 998244353)</li>
</ul>
</li>
</ul>
<p>$z&#x3D;[z_1;z_2,\cdots;z_n] \in C^n$ 复数域里的向量 如何算长度</p>
<p>上面有提到$z^Tz$ 不再好 not good</p>
<p>而是 $\bar{z}^Tz$</p>
<p>Hermition写法$z^Hz$ 表示 <code>共轭</code>+<code>转置</code>, inner product</p>
<p>symmetric $A^T&#x3D;A$ no good if A complex</p>
<p>$\bar{A}^T&#x3D;A$或者$A^H&#x3D;A$ 例如 $[2,3+i;3-i,5]$</p>
<p>同时 重新 定义 正交, 也重新定义 $Q$</p>
<ul>
<li>$q_i^Hq_j&#x3D;0,i\neq j$</li>
<li>$q_i^Hq_j&#x3D;1,i &#x3D;j$</li>
</ul>
<p>unitary matrix酉矩阵, 幺正举证，厄米(Hermitian)共轭， 其中unitary是归一或单位的意思</p>
<ul>
<li>“酉”是Unitary的音译，据说是华罗庚的建议_。中英文都有“一”和“元”的意思。同样，后来对“Simplectic”的翻译也遵循了同样的做法，音译为“辛”</li>
</ul>
<hr>
<p>傅里叶矩阵</p>
<p>It’s just math starts counting with one, and electrical engineers start counting at zero. Actually they’re probably right So anyway, we’ll give them – humor them</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0-index Fn = []</span><br><span class="line">1 1       1          ... 1</span><br><span class="line">1 w       w2         ... w^&#123;(n-1)&#125;</span><br><span class="line">1 w^2     w4</span><br><span class="line">...</span><br><span class="line">1 w^&#123;n-1&#125; w^&#123;2(n-1)&#125; ... w^&#123;(n-1)(n-1)&#125;</span><br></pre></td></tr></table></figure>

<p>$(F_n)_{ij}&#x3D;w^{ij}$</p>
<p>want $w^n&#x3D;1$, so $w&#x3D;e^{\frac{i2\pi}{n}}$</p>
<p>对于 n &#x3D; 4, $w&#x3D;e^{\frac{2\pi i}{4}}&#x3D;i$</p>
<p>$F_4&#x3D;$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1  1  1  1      1  1  1  1</span><br><span class="line">1  i  i2 i3  =  1  i -1 -i</span><br><span class="line">1  i2 i4 i6     1 -i  1 -1</span><br><span class="line">1  i3 i6 i9     1 -i -1  i</span><br></pre></td></tr></table></figure>

<p>这个矩阵 各列正交，因此 $Q_4 &#x3D;\frac{1}{\sqrt{4}} F_4, Q_4^HQ_4&#x3D;I$</p>
<p>$F_4^{-1}&#x3D;\frac{1}{\sqrt{4}} Q_4^{H}&#x3D;\frac{1}{\sqrt{4}}Q_4^{-1}&#x3D;\frac{1}{\sqrt{4}}Q_4^{T}&#x3D;\frac{1}{\sqrt{4}}Q_4&#x3D;\frac{1}{4}F_4$, 所以逆举运算和正运算核心一样</p>
<p>这只是离散的傅里叶变换</p>
<p>那么问题是如何快速，也就是降低计算量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[F8] = [I  D][F4  O][P  ]</span><br><span class="line">       [I -D][O  F4][   ]</span><br><span class="line"></span><br><span class="line">P 的形状: (奇偶穿插矩阵)</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">  1</span><br><span class="line">    1</span><br><span class="line">      1</span><br><span class="line"> 1</span><br><span class="line">   1</span><br><span class="line">     1</span><br><span class="line">       1</span><br><span class="line">D 的形状</span><br><span class="line">1</span><br><span class="line">  w</span><br><span class="line">    w2</span><br><span class="line">       w3</span><br><span class="line">         ...</span><br><span class="line">例子</span><br><span class="line">1  1  1  1  [1    1   ][1 1    ][1    ]</span><br><span class="line">1  i -1 -i =[  1     i][1 i    ][   1 ]</span><br><span class="line">1 -1  1 -1  [1   -1   ][    1 1][ 1   ]</span><br><span class="line">1 -i -1  i  [  1    -i][    1 i][    1]</span><br></pre></td></tr></table></figure>

<p>matlab</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I=[1,0;0,1];</span><br><span class="line"></span><br><span class="line">D=[1,0;0,i];</span><br><span class="line"></span><br><span class="line">O=[0,0;0,0];</span><br><span class="line"></span><br><span class="line">F2=[1,1;1,i];</span><br><span class="line"></span><br><span class="line">P=[1,0,0,0;0,0,1,0;0,1,0,0;0,0,0,1];</span><br><span class="line"></span><br><span class="line">F4=[I,D;I,-D]*[F2,O;O,F2]*P;</span><br></pre></td></tr></table></figure>

<p>伪代码+复杂度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f_8(x): F_8 * x</span><br><span class="line">	最右侧矩阵</span><br><span class="line">	px = p_8 * x, n次计算（换奇偶</span><br><span class="line">	px_0,px_1 = px, 分成前一半和后一半</span><br><span class="line">	中间矩阵</span><br><span class="line">	tmp_x_0 = f_4(px_0)</span><br><span class="line">	tmp_x_1 = f_4(px_1)</span><br><span class="line">	最左矩阵</span><br><span class="line">	res_x_0 = tmp_x_0 + D * tmp_x_1, n次计算</span><br><span class="line">	res_x_1 = tmp_x_0 - D * tmp_x_1, n次计算</span><br><span class="line">	return concat(res_x_0,res_x_1)</span><br><span class="line"></span><br><span class="line">f_n(x) 的运算量 = 3n + 2*f_&#123;n/2&#125;(x) 所以总运算量是n log n</span><br></pre></td></tr></table></figure>

<p>算法竞赛中，因为浮点数准确问题，采用了NTT,其核心原理就是</p>
<ul>
<li>fft的数域是复数域，用的F_n中的w 是满足 $w^n&#x3D;1,w^{&lt;n} \neq 1$的也就是$e^{\frac{i2\pi}{n}}$</li>
<li>NTT的数域是mod p(p是质数，最常见的是$998244353$ 因为p-1含有p原根的较高次幂的因数),用的F_n中的w也是满足 $w^n\equiv 1 \pmod{p},w^{&lt; n}\equiv 1 \pmod{p}$ 所以两个是“一致逻辑”的，而NTT全是整数运算，不用担心精度，作为算法正确性校验更友好</li>
</ul>
<h2 id="28-正定矩阵"><a href="#28-正定矩阵" class="headerlink" title="28 正定矩阵"></a>28 正定矩阵</h2><ul>
<li><p>正定 首先是对称矩阵 $A&#x3D;Q\Lambda Q^T$</p>
</li>
<li><p>Positive Definite matrix(Tests) 如何判断正定矩阵</p>
</li>
<li><p>Tests for Minumum (x^TAx &gt;0) Ellipsoids in $R^n$， 找极小值</p>
</li>
</ul>
<p>why什么对正定性感兴趣，椭圆&#x2F;双曲线</p>
<p>从2x2矩阵开始<code>[a,b;b,c]</code></p>
<p>判定方式</p>
<ul>
<li>特征值均正 $\lambda_1 &gt;0, \lambda_2 &gt;0$, 有等于零 则 是semi半正定</li>
<li>从左上角的子det均正 $a &gt;0,ac-b^2&gt;0$</li>
<li>rref以后的主元为正，pivots $a &gt; 0, \frac{ac-b^2}{a} &gt; 0$</li>
<li>$x^TAx &gt; 0$</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 6</span><br><span class="line">6 (那么这里要 大于 6^2/2 = 18)</span><br></pre></td></tr></table></figure>

<p>如果18,那么 半正定 pos semidefinite,</p>
<ul>
<li>有特征值0</li>
<li>only 1 pivots</li>
<li>$x^TAx&#x3D;2x_1^2+12x_1x_2+18x_2^2$</li>
</ul>
<p>matlab</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f=@(x,y) 2*x.^2+12*x.*y+1*y.^2;</span><br><span class="line"></span><br><span class="line">fsurf(f,[-10,10,-10,10]);</span><br></pre></td></tr></table></figure>

<p>非正定：二维向量$x&#x3D;[x_1;x_2]$那么$y(x_1,x_2)$马鞍面：某个点 一个方向的极大值，另一个方向的极小值</p>
<p>正定 $x^TAx$除了$0,0$处处为正</p>
<ul>
<li>微积分： 最小值 二阶导数为正</li>
<li>18.06： matrix 是 pos def(正定)</li>
</ul>
<p>$2x^2+12xy+24y^2$ 在 &gt;0的横截面 还是椭圆</p>
<p>$&#x3D;2(x+3y)^2+4y^2&#x3D;1$是个椭圆， 这里(2,4)是主元，而3是消元时的倍数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[2 6]</span><br><span class="line">[6 24]</span><br><span class="line"></span><br><span class="line">= LU</span><br><span class="line">= [1  ][2 6]</span><br><span class="line">  [3 1][  4]</span><br><span class="line"></span><br><span class="line">2阶导矩阵 一定程度上是，这里还有额外的幂次2</span><br><span class="line">[fxx  fxy]</span><br><span class="line">[fyx  fyy]</span><br></pre></td></tr></table></figure>

<hr>
<p>例子3x3</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 2 -1  0</span><br><span class="line">-1  2 -1</span><br><span class="line"> 0 -1  2</span><br><span class="line"></span><br><span class="line">dets: A_1 = 2, A_2 = 3, A_3 = 4</span><br><span class="line"></span><br><span class="line">pivots 2,3/2,4/3 (因为 prod pivots = det, 所以pivot_i = det_i/det_&#123;i-1&#125;)</span><br><span class="line"></span><br><span class="line">eigenvalues: 2-sqrt(2),2,2+sqrt(2)</span><br></pre></td></tr></table></figure>

<p>关联函数 $x^TAx &#x3D; 2x_1^2+2x_2^2+2x_3^2-2x_1x_2-2x_2x_3 &gt; 0$</p>
<p>在大于 0 的位置切割，得到椭圆体（3个主要方向（3个特征值不同））</p>
<h2 id="29-相似矩阵，Jordan-form-若尔当形"><a href="#29-相似矩阵，Jordan-form-若尔当形" class="headerlink" title="29 相似矩阵，Jordan form 若尔当形"></a>29 相似矩阵，Jordan form 若尔当形</h2><ul>
<li>$A^TA$ is positive definite</li>
<li>similar matrices A,B， $B&#x3D;M^{-1}AM$, Jordan form</li>
</ul>
<p>正定矩阵:</p>
<ul>
<li>与最小二乘法有关</li>
<li>$x^TAx &gt;0,x \neq 0$</li>
</ul>
<p>A是正定矩阵,A的逆是什么？</p>
<ul>
<li>特征值 &#x3D; 1&#x2F;原矩阵的特征值，所以$A^{-1}$也是正定的</li>
</ul>
<p>A,B是 正定的</p>
<ul>
<li>A+B: $x^T(A+B)x &gt; 0$ 所以也是正定的</li>
</ul>
<p>A是长方形 $A^TA$ 是正定的吗？</p>
<ul>
<li>$x^TA^TAx &#x3D; (Ax)^T(Ax)$ 非负，半正定的<ul>
<li>如果 A的列线性无关，则是正定的</li>
</ul>
</li>
</ul>
<hr>
<p>A,B相似，意味着,存在$M$</p>
<p>$B&#x3D;M^{-1}AM$</p>
<ul>
<li>性质： 相似矩阵有相同的特征值，因为她们都能变化为 特征值的对角矩阵, 但这个性质不充分，见下</li>
<li></li>
<li>$Ax&#x3D;\lambda x$<ul>
<li>$(M^{-1}AM)(M^{-1}x)&#x3D;\lambda(M^{-1}x)$</li>
</ul>
</li>
</ul>
<p>核心依然是 $S^{-1}AS&#x3D;\Lambda$, $S$是特征向量矩阵</p>
<p>$A&#x3D;[2,1;1,2], B&#x3D;[-2,-15,1,6]$</p>
<p>它们有相同“特征值”</p>
<hr>
<p>bad case, 如果有重复的特征值，可能无法对角化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 0</span><br><span class="line">0 4</span><br><span class="line">和</span><br><span class="line">4 1</span><br><span class="line">0 4</span><br><span class="line">不属于同一类 （不相似）</span><br></pre></td></tr></table></figure>

<p>注意到第一个 $M^{-1}AM&#x3D;A$ 相似的 只有它自己</p>
<p>第二个是，jordan form 最接近标准型 但是又不相似于标准型</p>
<p>例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 5  1</span><br><span class="line">-1  3</span><br><span class="line">相似于</span><br><span class="line">4  0</span><br><span class="line">17 4</span><br></pre></td></tr></table></figure>

<p>Jordan block(每个block有一个 evector)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0100</span><br><span class="line">0010</span><br><span class="line">0000</span><br><span class="line">0000</span><br><span class="line">和</span><br><span class="line">0100</span><br><span class="line">0000</span><br><span class="line">0001</span><br><span class="line">0000</span><br><span class="line">不相似</span><br></pre></td></tr></table></figure>

<p>Jordan定理： 每个方阵A 相似于 Jordan matrix J</p>
<ul>
<li>也就是解决 特征值重复的问题</li>
<li>现在 主要关注还是上面的可分解型，没有关注这种形式</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">J1</span><br><span class="line">   J2</span><br><span class="line">      J3</span><br><span class="line">         ...</span><br><span class="line">J的数量 = evector的数量</span><br></pre></td></tr></table></figure>

<h2 id="30-奇异值分解"><a href="#30-奇异值分解" class="headerlink" title="30 奇异值分解"></a>30 奇异值分解</h2><ul>
<li>Singular Value Decomposition (SVD)</li>
<li>$A&#x3D;U\Sigma V^T&#x3D;U\Sigma V^{-1}$, 两边是 正交矩阵，中间是对角矩阵<ul>
<li>A&#x3D;(orthog)(diag)(orthog) every A</li>
<li>对角一定非负（视频33）<ul>
<li>下面计算过程表示了Lambda一定是正的，这里开根 不能取负号吗？？</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>回顾之前</p>
<ul>
<li>对于一般可逆矩阵有$A&#x3D;S\Lambda S^{-1}$ 这个的缺点就是$S$的列不是正交的，</li>
<li>对于实对称矩阵（包含 正交矩阵），有$A&#x3D;Q\Lambda Q^T$</li>
</ul>
<p>希望 $AV&#x3D;U\Sigma$</p>
<ul>
<li>A乘上 来自行空间的基列向量V, &#x3D; 来自列空间的基列向量U * 对角乘数因子Sigma</li>
<li>因此 $Av_i &#x3D; u_i\sigma_i$</li>
<li>目标： to find an orthogonal basis in the orthonormal, even basis in the row space and an orthonormal basis in the column space</li>
</ul>
<p>例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 4 4</span><br><span class="line">-3 3</span><br><span class="line">找 v1,v2 in row space R^2， v1,v2 标准+正交</span><br><span class="line">找 u1,u2 in col space R^2， u1,u2 标准+正交</span><br><span class="line">以及 sigma_1,sigma_2 &gt; 0</span><br></pre></td></tr></table></figure>


<p>$A&#x3D;U\Sigma V^{-1}&#x3D;U\Sigma V^{T}$</p>
<p>$A^TA&#x3D;V\Sigma^TU^TU\Sigma V^{T}&#x3D;V\Sigma^2V^T$</p>
<p>$AA^T&#x3D;U\Sigma V^{T}V\Sigma^TU^T&#x3D;U\Sigma^2U^T$</p>
<ul>
<li>它们 特征值相同, AB和BA特征值相同</li>
</ul>
<p>因此 $V,U$分别为$A^TA,AA^T$的 正交化的特征向量组成的矩阵, 注意两边的Sigma中的特征值顺序要一致, 另外的 注意上面的 U,V的正负号 因为平方的原因 没有影响， 所以需要“指定”夷夏政府 再回到 $Av_i&#x3D;u_i \sigma_i$ 确定符号</p>
<p>$\Sigma$为 $A^TA,AA^T$的特征值开根</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A=[<span class="number">4</span>,<span class="number">4</span>;<span class="number">-3</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">ATA=A&#x27;*A;</span><br><span class="line"></span><br><span class="line">[V,D1]=eig(ATA); <span class="comment">% D1是特征值对角矩阵, V是norm 特征向量矩阵</span></span><br><span class="line"></span><br><span class="line">AAT=A*A&#x27;;</span><br><span class="line"></span><br><span class="line">[U,D2]=eig(AAT); <span class="comment">% D2 == D1</span></span><br><span class="line"></span><br><span class="line">S=sqrtm(D2); <span class="comment">% Sigma = sqrt(</span></span><br><span class="line"></span><br><span class="line">U*S*V&#x27;; <span class="comment">% = A</span></span><br></pre></td></tr></table></figure>

<hr>
<p>例子2, rank&#x3D;1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A=</span><br><span class="line">4 3</span><br><span class="line">8 6</span><br></pre></td></tr></table></figure>

<p>row space: k[4;3]</p>
<p>col space: [4;8]</p>
<p><code>v_1 = 1/5[4;3]= [.8;.6]</code></p>
<p><code>u_1 = [1/sqrt(5);2/sqrt(5)]</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 3          [1  2][sqrt(125)  ][.8  .6]</span><br><span class="line">8 6 =(1/sqrt5[2 -1][          0][.6 -.8]</span><br><span class="line">A     U            Sigma         V^T</span><br></pre></td></tr></table></figure>


<h2 id="31-线性变换-及-对应矩阵"><a href="#31-线性变换-及-对应矩阵" class="headerlink" title="31 线性变换 及 对应矩阵"></a>31 线性变换 及 对应矩阵</h2><p>Linear transformations</p>
<ul>
<li>without coordinates: no matrix</li>
<li>with coordinates -&gt; matrix</li>
</ul>
<p>线性变换</p>
<ul>
<li>T(v+w)&#x3D;T(v)+T(w)</li>
<li>T(cv) &#x3D; cT(v)</li>
</ul>
<p>例1: projection 投影</p>
<p>T: $R^2\to R^2$</p>
<p>例2: shift whole plane, 平移整个面点。不是线性变换</p>
<p>例3: T(v)&#x3D;||v||^2不是线性变换</p>
<p>例4: 旋转45度,是线性变换</p>
<p>例5: T(v)&#x3D;Av,是线性变换</p>
<p>例6: $T(v)&#x3D;A_{2\times 3}v$ 这里$T:R^3\to R^2$,是线性变换,</p>
<p>那么对于一个线性变换T的“关键要素有什么”</p>
<ul>
<li>其实是 对输入进行基的拆解，然后T只关心对 基的变换，变换后再组合（而这可以拆分与组合 正式因为T是线性变换）</li>
<li>那么 coordinates是 所选定基的拆分结果而已</li>
</ul>
<p>那么目标，对于给定的 $T:R^{n}\to R^m$,希望找一个$A_{m\times n}$来描述</p>
<p>所以 A的第i列表示输入的第i个基 变为的新的基的 坐标</p>
<hr>
<p>例子 求导， $T&#x3D;\frac{d}{dx}$</p>
<p>输入 $c_0+c_1x+c_2x^3$, 基$1,x,x^2$</p>
<p>输出 $c_1+2c_2x$, 基$1,x$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  c0</span><br><span class="line">A c1 =   c1</span><br><span class="line">  c2    2c2</span><br><span class="line"></span><br><span class="line">A= 0 1 0</span><br><span class="line">   0 0 2</span><br></pre></td></tr></table></figure>

<h2 id="32-基变换-图像压缩"><a href="#32-基变换-图像压缩" class="headerlink" title="32  基变换 图像压缩"></a>32  基变换 图像压缩</h2><p>应用</p>
<ul>
<li>change of basis</li>
<li>compression of Images</li>
<li>Transformation &lt;-&gt; matrix</li>
</ul>
<p>lossy compression: 有损压缩</p>
<p>图像存储 &#x3D; 像素个数 * 颜色 大小的长向量</p>
<p>JPEG &#x3D; Joint Photograpihc Experts Group</p>
<p>标准基 &#x3D; $I_n \in R^n$的列向量</p>
<p>better basis</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1  1      1</span><br><span class="line">1  1     -1</span><br><span class="line">1 -1      1</span><br><span class="line">1 -1 ... -1</span><br></pre></td></tr></table></figure>

<p>JPEG用了 Fourier basis,  $w&#x3D;e^{\frac{i2\pi}{n}}$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">signal x</span><br><span class="line">    无损 change basis</span><br><span class="line">coeffs c  &lt;-  线性代数能帮助 系数的计算</span><br><span class="line">    lossy compression</span><br><span class="line">    丢掉肉眼看不见的帧</span><br><span class="line">hat&#123;c&#125;</span><br><span class="line">    复原</span><br><span class="line">hat&#123;x&#125; = sum hat&#123;ci&#125; vi, 不再是64个基向量</span><br></pre></td></tr></table></figure>

<p>视频， sequence images, 期望上 连续的图像高度相关，</p>
<hr>
<p>傅里叶基的竞争对手， 小波基 wavelets, FWT, 全是0,-1， 正交的， 也和 傅里叶那样可以快速计算</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1  1  1  0</span><br><span class="line">1  1 -1  0</span><br><span class="line">1 -1  0  1</span><br><span class="line">1 -1  0 -1</span><br></pre></td></tr></table></figure>

<p>change of basis</p>
<p>标准基中坐标x&#x3D; P新基 c新基中的坐标</p>
<p>$c&#x3D;P^{-1}x$</p>
<p>然后$P^{-1}$的具体计算要足够快，比如 之前学过FFT的 快速计算 方法</p>
<p>总结：不论是 fft还是fwt</p>
<ul>
<li>能扔掉维度 对视觉影响小</li>
<li>快速运算</li>
</ul>
<hr>
<p>对于一个变换， 如果用 （A和基v…）能表示，用(B和基础w…)能表示，</p>
<p>那么 A和B相似，坐标+相似 乘上M得到另一个里的坐标，同一个东西，那么一定存在可逆$M$$ ????</p>
<hr>
<p>如果 我们的选的 正好是 eigenvector basis, 特征向量基</p>
<p>那么 就会发现 原来的向量就是 各个角度的 特征值倍数的放缩</p>
<p>再换句话说 ，这是 A就是 $\Lambda$</p>
<h2 id="33-复习3"><a href="#33-复习3" class="headerlink" title="33 复习3"></a>33 复习3</h2><p>大纲</p>
<ul>
<li>lambda ,x 特征值和特征向量<ul>
<li>解 det lambda-AI</li>
<li>例如 投影矩阵因为幂等性，特征值 只能是0或1</li>
<li>用du&#x2F;dt&#x3D;Au解微分方程, e^{At}</li>
<li>A&#x3D;A^T 对称矩阵<ul>
<li>特征值 实数</li>
<li>总是存在足够的特征向量 prove?????</li>
<li>特征向量可以构成正交矩阵<ul>
<li>一定可以对角化 成 A&#x3D;Q Lambda Q^T, Q是norm特征向量列</li>
</ul>
</li>
<li>正定矩阵<ul>
<li>多种判别法<ul>
<li>所有 特征值正</li>
<li>rref主元全正</li>
<li>$x^TAx &gt;0$</li>
<li>最常用： 主(左上角开始的i * i)子行列式 全正</li>
</ul>
</li>
</ul>
</li>
<li>相似矩阵<ul>
<li>特征值一致（必要不充分），且可以转化</li>
<li>$A^n 相似于 B^n$</li>
<li>意义 通过不同的基表示同样的东西</li>
</ul>
</li>
<li>SVD: $A&#x3D;U Sigma V^T$ 对于非对称矩阵的 正交矩阵 对角矩阵 正交矩阵 的分解</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p>题目1: $du&#x2F;dt&#x3D;Au&#x3D;[0,-1,0;1,0,-1;0,1,0]u$</p>
<p>$u(t)&#x3D;c_1e^{\lambda_1t}x_1+c_2e^{\lambda_2t}x_2+c_3e^{\lambda_3t}x_3$</p>
<p>找特征值: $0, \pm \sqrt{2}i$</p>
<p>$u(t)&#x3D;c_1x_1+c_2e^{\sqrt{2}it}x_2+c_3e^{-\sqrt{2}it}x_3$</p>
<hr>
<p>orthogonal evectors什么时候 特征向量正交</p>
<p>如果 满足$AA^T&#x3D;A^TA$，则特征向量正交</p>
<ul>
<li>例如 $A^T&#x3D;A$，A&#x3D;Q, $A^T&#x3D;-A$</li>
</ul>
<hr>
<p>解的形状 $u(t)&#x3D;e^{At}u(0)$</p>
<p>if $A&#x3D;S \Lambda S^{-1}$</p>
<ul>
<li>$e^{At}&#x3D;Se^{\Lambda t}S^{-1}$, 中间 看成 $e^{\lambda_i t}$的对角矩阵</li>
</ul>
<hr>
<p>A 对称 且 正交矩阵</p>
<ul>
<li>特征值？<ul>
<li>$|\lambda|&#x3D;1$<ul>
<li>$Qx&#x3D;\lambda x$两边同时求长度$a^Ta$ 可得</li>
</ul>
</li>
</ul>
</li>
<li>证明 1&#x2F;2 (A+I) 是一个投影矩阵<ul>
<li>特征值 只有0,1</li>
<li>对称:显然</li>
<li>幂等: 1&#x2F;4(A^2+2A+I) &#x3D; 1&#x2F;2(A+I)?<ul>
<li>因为$A&#x3D;A^T&#x3D;A^{-1}$ 得证</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="34-左逆，右逆，伪逆"><a href="#34-左逆，右逆，伪逆" class="headerlink" title="34 左逆，右逆，伪逆"></a>34 左逆，右逆，伪逆</h2><ul>
<li>Left-inverses</li>
<li>Right-inverses</li>
<li>Pseudo-inverses</li>
</ul>
<p>2-sided inverse</p>
<p>$AA^{-1}&#x3D;I&#x3D;A^{-1}A$</p>
<ul>
<li>当 $r&#x3D;m&#x3D;n$时 有 这个完美的逆矩阵</li>
</ul>
<p>列向量线性无关，0&#x2F;1个解，</p>
<p>$(A^TA)^{-1}A^TA&#x3D;I$</p>
<p>$A_{\mathrm{left}}^{-1} &#x3D; (A^TA)^{-1}A^T$ 称作 $A$的左逆矩阵，A可以不是方阵</p>
<p>类似的 ，行向量线性无关</p>
<p>$AA^T(AA^T)^{-1}&#x3D;I$</p>
<p>$A_{\mathrm{right}}^{-1}&#x3D;A^T(AA^T)^{-1}$</p>
<p>但是 $AA_{\mathrm{left}^{-1}} &#x3D;A(A^TA)^{-1}A^T$ 是 投影矩阵！！ 向列向量投影</p>
<p>$A_{\mathrm{right}}^{-1} A$是 向行向量空间的投影矩阵</p>
<p>所以对于可逆矩阵 $Ax$可以看成把一个行空间中的 向量x 投射到列空间中</p>
<ul>
<li>左逆的意思是(列线性无关时） 列空间向量到行空间（更大），再到列空间不变</li>
<li>右逆的意思是(行线性无关时） 行空间向量到列空间（更大），再到行空间不变</li>
</ul>
<hr>
<p>所以理解Ax实际是行空间 到列空间一一对应的转化，只是 不属于行空间的，例如nullspace, 属于大$R^n$的 也会 被映射到列空间罢了</p>
<ul>
<li>也就是，只看定义域（行空间）和值域（列空间））那么A就是一一映射</li>
<li>而如果定义域$R^n$,值域$R^m$ 那么就不是一一映射了</li>
<li>而这个视角看，那么在缩小定义域和值域的时候，那么映射逆就是 一个很优雅的逆</li>
<li>从而 这样去看 转置的意义就哇哦了</li>
</ul>
<p>既然都是rank(row)&#x3D;rank(col) 那么有期望 是 row space和col space 中向量一一对应</p>
<ul>
<li>x,y 在行空间中，且不同，那么 列空间中$Ax\neq Ay$<ul>
<li>理解</li>
<li>如果 Ax &#x3D; Ay, 有 A(x-y)&#x3D;0, 说明x,y在nullspace不在行空间，说明 了 不同行空间向量映射到不同列空间向量</li>
</ul>
</li>
</ul>
<hr>
<p>find the pseudoinverse $A^{+}$</p>
<p>然而是从SVD思考</p>
<p>$A&#x3D;U\Sigma V^T$</p>
<p>$A^{+}&#x3D;V\Sigma^{+}U^{T}$ ,其中  所有$\sigma_i$变成$1&#x2F;\sigma_i$</p>
<p>$\Sigma \Sigma^{+}$  是个对角矩阵，11110000</p>
<h2 id="35-期末复习"><a href="#35-期末复习" class="headerlink" title="35 期末复习"></a>35 期末复习</h2><p>举例 有正交向量组，但是非实对称的矩阵</p>
<ul>
<li>skew-symmetric 反对称: <code>[0,-1;1,0]</code><ul>
<li>一般性吗?<ul>
<li>同样的方法能得到 当 $\lambda_1 + \lambda_2\neq 0$时特征向量是正交的</li>
<li>那么根据 $x^2-9&#x3D;x^2-25+16$<ul>
<li>容易构造矩阵$[5,4;-4,-5]$ 特征值是$3,-3$			- 而特征向量是<code>[-2;1];[1;-2]</code> 果然不正交</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>正交矩阵: <code>[sin,-cos;cos,sin]</code><ul>
<li>特征值是1,-1对应两个特征空间，两个特征空间里取分别的正交系</li>
<li>不同特征值 通过 $x_2^Tx_1&#x3D;x_2^TQ^TQx_1&#x3D;(Qx_2)^T(Qx_1)&#x3D;-(x_2)^T(x_1)$ 可以证明只能正交</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A=[[1;1;1]/sqrt(3),[1;-1;0]/sqrt(2),[1;1;-2]/sqrt(6)]</span><br><span class="line">[V,D]=eig(A)</span><br><span class="line">V&#x27;*V;</span><br></pre></td></tr></table></figure>


<h2 id="想法随记"><a href="#想法随记" class="headerlink" title="想法随记"></a>想法随记</h2><p><a href="https://matlab.mathworks.com/">matlab</a> 比py的numpy更香，现在还有网页版了, 还有<a href="https://ww2.mathworks.cn/help/matlab/index.html?s_tid=hc_panel">官方中文入门文档</a></p>
<p>有些内容用代码 或者 matlab代码可以更好的表述</p>
<p>从多元一次方程组开始，逐个拆分，从小到大，从特例到一般</p>
<p>每次都是例子先行！！相比于定义先行，更intuition！！</p>
<p>习题 的检验反馈环很重要，虽然这个笔记没记录什么习题。</p>
<p>3维作为高维空间，进行子空间关系讲解，拆分的1维空间缺少灵活感</p>
<p>大小写字母在“表现值，向量，矩阵”也有“局限感”, 要是有小，中，大 写就好了</p>
<p>所以“有限的练习题”会误以为掌握，所以应该设计无限的练习题，不要依赖于数量来认为是否掌握</p>
<p>矩阵的一些证明，有一种反除法习惯的感觉。</p>
<p>全部学完以后，感觉 中间的4个子空间 非常关键</p>
<p>当一个新的“定理理论”出现时，可以举一个满足的和一个不满足的双向加深理解</p>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p>TODO 相关的???  ？？？prove补充</p>
<p>TODO 自己整理一个速通关键记要</p>
]]></content>
      <categories>
        <category>线性代数</category>
      </categories>
      <tags>
        <tag>线性代数</tag>
        <tag>MIT</tag>
      </tags>
  </entry>
  <entry>
    <title>数学分析 CheatSheet</title>
    <url>/Math/Mathematical_analysis-cheatsheet/</url>
    <content><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p><a href="https://zh.wikipedia.org/wiki/%E4%B8%89%E8%A7%92%E6%81%92%E7%AD%89%E5%BC%8F">三角横等式</a></p>
<p>$\tan^2x+1&#x3D;\sec^2x$</p>
<p>$\sinh x &#x3D; \frac{e^x}{2} - \frac{e^{-x}}{2}$</p>
<p>$\cosh x &#x3D; \frac{e^x}{2} + \frac{e^{-x}}{2} &#x3D; \sqrt{1+\sinh^2x}$</p>
<p>$sech(x) &#x3D; \frac{2}{e^x + e^{-x}}$</p>
<p>$sin(x)cos(y) &#x3D; \frac{sin(x+y) + sin(x-y)}{2}$</p>
<p>$sin(x)sin(y) &#x3D; \frac{cos(x-y) - cos(x+y)}{2}$</p>
<p>$cos(x)cos(y) &#x3D; \frac{cos(x-y) + cos(x+y)}{2}$</p>
<p>$sin(x) + sin(y) &#x3D; 2sin(\frac{x+y}{2})cos(\frac{x-y}{2})$</p>
<p>$cos(x) + cos(y) &#x3D; 2cos(\frac{x+y}{2})cos(\frac{x-y}{2})$</p>
<p>$cos(x) - cos(y) &#x3D; -2sin(\frac{x+y}{2})cos(\frac{x-y}{2})$</p>
<span id="more"></span>

<h1 id="微分"><a href="#微分" class="headerlink" title="微分"></a>微分</h1><p>$\sin’x &#x3D; \cos x$</p>
<p>$\cos’x &#x3D; - \sin x$</p>
<p>$\tan’x &#x3D; \sec^2x$</p>
<p>$\cot’x &#x3D; - \csc^2x$</p>
<p>$\sec’x &#x3D; \tan x \cdot \sec x$</p>
<p>$\csc’x &#x3D; - \cot x \cdot \csc x$</p>
<p>$\cosh’ x &#x3D; \sinh x$</p>
<p>$\sinh’ x &#x3D; \cosh x$</p>
<p>$\tanh’ x &#x3D; sech^2 x$</p>
<p>$arctanh(x)’ &#x3D; \frac{1}{1-x^2}$</p>
<p>$arcsinh(x)’ &#x3D; \frac{1}{\sqrt{1+x^2}}$</p>
<p>$arccosh(x)’ &#x3D; \frac{1}{\sqrt{x-1}\sqrt{x+1}}$</p>
<p>有些地方<code>^(-1)</code>表示不是<code>-1</code>次方而是逆函数 $\tan^{-1} x &#x3D; \arctan x$</p>
<p>$\arctan’x &#x3D; \frac{1}{1+x^2}$</p>
<p>$arccot’x &#x3D; -\frac{1}{1+x^2}$</p>
<p>$\arcsin’x &#x3D; \frac{1}{\sqrt{1-x^2}}$</p>
]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>CheatSheet</tag>
        <tag>数学分析</tag>
      </tags>
  </entry>
  <entry>
    <title>数学分析 一 分析基础</title>
    <url>/Math/Mathematical_analysis_problems_1/</url>
    <content><![CDATA[<h1 id="分析基础-1"><a href="#分析基础-1" class="headerlink" title="分析基础 1"></a>分析基础 1</h1><h2 id="序列极限-1-3"><a href="#序列极限-1-3" class="headerlink" title="序列极限 1.3"></a>序列极限 1.3</h2><h3 id="题目-1-3-4"><a href="#题目-1-3-4" class="headerlink" title="题目 1.3.4"></a>题目 1.3.4</h3><p>设 $$A&gt;0,x_1&gt;0,x_{n+1}&#x3D;\frac12(x_n+\frac A{x_n}) (n&#x3D;1,2,\dots)$$</p>
<p>(1) 求证: $$x_n$$单调下降且有下界</p>
<p>(2) 求$$lim_{n-&gt;\infty}x_n$$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>(1) 显然 $$x_n \geq \sqrt A (n\geq2)$$</p>
<p>有 $$x_{n+1}-x_n &#x3D; \frac12(\frac A{x_n}-x_n) &#x3D; \frac12 \cdot \frac {(\sqrt A - x_n)(\sqrt A + x_n)}{x_n} \leq 0 (n\geq2)$$</p>
<p>(2) 设极限为<code>a</code>,带入原式子,则 推出$$a&#x3D;\sqrt A$$</p>
<h3 id="题目-1-3-9"><a href="#题目-1-3-9" class="headerlink" title="题目 1.3.9"></a>题目 1.3.9</h3><p>求证 $$lim_{n-&gt;\infty}[\frac{(2n-1)!!}{(2n)!!}]^2\cdot\frac1{2n+1}$$极限存在</p>
<h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>$$a_n &#x3D; lim_{n-&gt;\infty}[\frac{(2n-1)!!}{(2n)!!}]^2\cdot\frac1{2n+1}  &gt; 0$$</p>
<p>$$ \frac{a_{n+1}}{a_n} &#x3D; \frac{(2n+1)^3}{(2n+2)^2\cdot (2n+3)} &lt; 1$$</p>
<p>单调递减 有下界限</p>
<p>从 $$ln a_{n+1} - ln a_n$$ 上看 说明 $$ln a_{n}$$ 趋于 $$-\infty$$ , $$a_n$$极限为$$0$$</p>
<p>总感觉有地方没有说清楚</p>
<h2 id="函数极限与连续概念-1-4"><a href="#函数极限与连续概念-1-4" class="headerlink" title="函数极限与连续概念 1.4"></a>函数极限与连续概念 1.4</h2><h3 id="题目-1-4-3"><a href="#题目-1-4-3" class="headerlink" title="题目 1.4.3"></a>题目 1.4.3</h3><p>设 $$ 0&lt;x_n&lt;+\infty $$,且满足 $$ x_n+\frac 4 {x_{n+1}^2} &lt; 3 $$, 求出此极限值。</p>
<h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>由题目显然有 $$\frac{2\sqrt3}3 &lt; x_n  &lt; 3$$</p>
<p>$$x_{n+1}-x_n &gt; \frac {x_{n+1}^3-3_{n+1}^2+4}{x_{n+1}^2} &#x3D; \frac {(x_{n+1}+1)(x_{n+1}-2)^2}{x_{n+1}^2} \ge 0 $$</p>
<p>单调递增 有上界</p>
<p>如果 $x_n &gt; 2$ 令 $x_n &#x3D; 2+y_n,1 &gt; y_n &gt; 0$ , $y_n$单调递增</p>
<p>如果 $$x_n &#x3D; 2$$ 有 $x_{n+1} &gt; 2$ 取 $ n &#x3D; n+1$</p>
<p>$$x_{n+1}-x_n &gt; \frac {(x_{n+1}+1)(x_{n+1}-2)^2}{x_{n+1}^2} &gt; \frac {(2+1)y_{n+1}^2}{3^2} $$</p>
<p>$m-n &gt; \frac{3}{y_{n+1}^2}$时, 存在 $y_m &gt; 3$</p>
<p>$$\therefore \frac{2\sqrt3}3 &lt; x_n  &lt; 2$$</p>
<p>如果 $x_n &lt; 2$ 令 $x_n &#x3D; 2-y_n,2-\frac{2\sqrt3}3 &gt; y_n &gt; 0$ , $y_n$也单调递减</p>
<p>$$(-y_{n+1}) - (-y_{n}) &gt; x_{n+1}-x_n &gt; \frac {(x_{n+1}+1)(x_{n+1}-2)^2}{x_{n+1}^2} &gt; \frac {2 y_{n+1}^2}{2^2} $$</p>
<p>$$ y_n &gt; y_{n+1} + \frac{y_{n+1}^2}{2} $$</p>
<p>$$ y_{n+1} &lt; \sqrt{2y_n+1} -1 &#x3D; \frac {2y_n}{\sqrt{2y_n+1}+1} &lt;  $$</p>
<p>然后呢????</p>
<p>还是说 简单说 所有 小于2 都不是定点都会增大,但所有增大的结果都小于2 ?,或者说 假设一个小于2的为 极致 用反证 唯一？</p>
<hr>
<p>数列有极限</p>
<p>所以 不等式也有极限 $$lim$$</p>
<h3 id="题目-1-4-12"><a href="#题目-1-4-12" class="headerlink" title="题目 1.4.12"></a>题目 1.4.12</h3><p>设序列$${x_n}$$由如下迭代产生:</p>
<p>$$x_1&#x3D;\frac12,x_{n+1} &#x3D; x_n^2 + x_n (n&#x3D;1,2,\dots)$$</p>
<p>求证 $$lim_{n-&gt;\infty}(\frac1{1+x_1}+\frac1{1+x_2}+\cdot+\frac1{1+x_n})&#x3D;2$$</p>
<h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解 ???"></a>题解 ???</h3><h2 id="比区间上连续函数的性质-1-5"><a href="#比区间上连续函数的性质-1-5" class="headerlink" title="比区间上连续函数的性质 1.5"></a>比区间上连续函数的性质 1.5</h2><h3 id="题目-1-5-3"><a href="#题目-1-5-3" class="headerlink" title="题目 1.5.3"></a>题目 1.5.3</h3><p>设 $$f_n(x)&#x3D;x^n+x$$</p>
<p>求证</p>
<p>(1) 对任意自然数 $$n&gt;1$$,方程 $$f_n(x) &#x3D; 1$$在$$(\frac12,1)$$内有且仅有一个根</p>
<p>(2) 若$$c_n \in (\frac12,1)$$是$$f_n(x)&#x3D;1$$的根,则$$lim_{n-&gt;infty}c_n$$存在，并求此极限</p>
<h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解 ???"></a>题解 ???</h3><p>(1)</p>
<p>求导$$nx^{n-1}+1&gt;0$$,严格单调</p>
<p>所以 $$ (f_n(\frac12)-1) \cdot (f_n(1)-1) &lt; 0, x \in (\frac12,1)$$ 有根,得证</p>
<p>(2) ???</p>
<p>2.6 例22?</p>
<h3 id="题目-1-5-4"><a href="#题目-1-5-4" class="headerlink" title="题目 1.5.4"></a>题目 1.5.4</h3><p>设置$$f(x)$$在 $[a,b]$ 上无界,求证: $$\exists c \in [a,b]$$,使得 $$\forall \delta &gt; 0$$ 函数 $$f(x)$$在 $$[c-\delta,c+\delta]\bigcap [a,b]$$上无界</p>
<h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解 ???"></a>题解 ???</h3><h3 id="题目-1-5-5"><a href="#题目-1-5-5" class="headerlink" title="题目 1.5.5"></a>题目 1.5.5</h3><p>设 $${x_n}$$ 为有界序列。求证: $x_n$ 以 $a$为极限的充分必要条件是: ${x_n}$的任一收敛子序列都有相同的极限值$a$.</p>
<h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解 ???"></a>题解 ???</h3><h3 id="题目-1-5-7"><a href="#题目-1-5-7" class="headerlink" title="题目 1.5.7"></a>题目 1.5.7</h3><p>设 $f(x) \in \mathbb{C}[a,b]$ 且有唯一的取到$f(x)$最大值的点$x^ * $ 又设 $x_n \in [a,b] (n&#x3D;1,2,\dots)$</p>
<p>使得$$ lim_{n-&gt;\infty} f(x_n) &#x3D; f(x^*), 求证 lim_{n-&gt;\infty} x_n &#x3D; x^*$$</p>
<h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解 ???"></a>题解 ???</h3><h3 id="题目-1-5-8"><a href="#题目-1-5-8" class="headerlink" title="题目 1.5.8"></a>题目 1.5.8</h3><p>设$$ f(x) \in \mathbb{C}[0,+\infty) $$又设对 $$\forall l \in \mathbb{R}$$ 方程 $$f(x) &#x3D; l$$在 $$[0,+\infty)$$ 上只有有限个解或无解,求证:</p>
<p>(1) 如果 $f(x)$ 在 $$[0,+\infty)$$ 上有界,则极限 $$lim_{x-&gt;+\infty}f(x)$$存在;</p>
<p>(2) 如果 $f(x)$ 在 $$[0,+\infty)$$ 上无上界,则 $$lim_{x-&gt;+\infty}f(x) &#x3D; + \infty$$</p>
<h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解 ???"></a>题解 ???</h3><h3 id="题目-1-5-10"><a href="#题目-1-5-10" class="headerlink" title="题目 1.5.10"></a>题目 1.5.10</h3><p>设$f(x)$在$[a,b]$上定义,$x_0\in [a,b]$如果对 $\forall \epsilon &gt; 0,\exists \delta &gt; 0$ 当 $|x-x_0|&lt;\delta$时, 有 $f(x) &lt; f(x_0)+\epsilon$, 那么称$f(x)$在点$x_0$处<strong>上半连续</strong>,如果$f(x)$在$[a,b]$上的没一点都上半连续,则称$f(x)$为$[a,b]$上的一个<strong>上半连续函数</strong>.求证: $[a,b]$上的<strong>上半连续函数</strong>一定有上界.</p>
<h3 id="题解-9"><a href="#题解-9" class="headerlink" title="题解 ???"></a>题解 ???</h3>]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>数学分析 二 一元函数微分学</title>
    <url>/Math/Mathematical_analysis_problems_2/</url>
    <content><![CDATA[<h1 id="一元函数微分学-2"><a href="#一元函数微分学-2" class="headerlink" title="一元函数微分学 2"></a>一元函数微分学 2</h1><h2 id="导数与微分-2-1"><a href="#导数与微分-2-1" class="headerlink" title="导数与微分 2.1"></a>导数与微分 2.1</h2><h3 id="题目-2-1-3"><a href="#题目-2-1-3" class="headerlink" title="题目 2.1.3"></a>题目 2.1.3</h3><p>设$f(x)$在点$x_0$处可导,$\alpha_n$,$\beta_n$为趋于零的正数序列，求证:</p>
<p>$\lim\limits_{\substack{n\rightarrow \infty }}\frac{f(x_0+\alpha_n)-f(x_0+\beta_n)}{\alpha_n-\beta_n} &#x3D; f’(x_0)$</p>
<span id="more"></span>

<h3 id="题目-2-1-7"><a href="#题目-2-1-7" class="headerlink" title="题目 2.1.7"></a>题目 2.1.7</h3><p>设曲线由隐式方程 $\sqrt[3]{x^2}+\sqrt[3]{y^2}&#x3D;\sqrt[3]{a^2} (a&gt;0)$给出</p>
<p>(1) 求证: 曲线的切线被坐标轴所截的长度为一常数</p>
<p>(2)写出曲线的参数形式，利用参数式求导给出上一小提的另一证法</p>
<h3 id="题目-2-1-8"><a href="#题目-2-1-8" class="headerlink" title="题目 2.1.8"></a>题目 2.1.8</h3><p>已知 参数方程 $x&#x3D;a[ln(tan\frac{t}{2})+cos(t)],y&#x3D;a\cdot sin(t) (a&gt;0,0 &lt; t &lt;\pi)$</p>
<p>求证，任意切线上，自切点至该切线与x轴交点之间的切线段为定长</p>
<h3 id="题目-2-1-13"><a href="#题目-2-1-13" class="headerlink" title="题目 2.1.13"></a>题目 2.1.13</h3><p>设 $y&#x3D;x^{n-1}ln(x)$ 求证$y^{(n)}&#x3D;\frac{(n-1)!}{x}$</p>
<h3 id="题目-2-1-14"><a href="#题目-2-1-14" class="headerlink" title="题目 2.1.14"></a>题目 2.1.14</h3><p>求证：双纽线$r^2&#x3D;a^2 cos 2\theta$的向径与切线的夹角等于极角的两倍加$\frac{\pi}{2}$</p>
<h2 id="微分中值定理-2-2"><a href="#微分中值定理-2-2" class="headerlink" title="微分中值定理 2.2"></a>微分中值定理 2.2</h2><h3 id="题目-2-2-5"><a href="#题目-2-2-5" class="headerlink" title="题目 2.2.5"></a>题目 2.2.5</h3><p>设f(x)在(a,b)内二阶可导，且$x_0 \in (a,b)$使得$f’’(x_0)\neq 0$求证:</p>
<p>(1) 如果$f’(x_0)&#x3D;0$，则存在$x_1,x_2\in(a,b)$使得$f(x_1)-f(x_2)&#x3D;0$</p>
<p>(2) 如果$f’(x_0)\neq0$，则存在$x_1,x_2\in(a,b)$，使得$\frac{f(x_1)-f(x_2)}{x_1-x_2}&#x3D;f’(x_0)$</p>
<h3 id="题目-2-2-9"><a href="#题目-2-2-9" class="headerlink" title="题目 2.2.9"></a>题目 2.2.9</h3><p>设函数f(x)在$[a,b]$上可导，且$f’(a)&#x3D;f’(b)$,求证$\exists c\in(a,b)$使得$f(c)-f(a)&#x3D;(c-a)f’(c)$</p>
<p>和例12比，把$&#x3D;0$去掉</p>
<h3 id="题目-2-2-10"><a href="#题目-2-2-10" class="headerlink" title="题目 2.2.10"></a>题目 2.2.10</h3><p>设$f(x)$在$(0,1]$上可导,且存在有限极限 $\lim\limits_{\substack{x\rightarrow 0+0 }}\sqrt xf’(x)$,求证f(x)在(0,1]上一致连续</p>
<h3 id="例17"><a href="#例17" class="headerlink" title="例17"></a>例17</h3><p>设f(x)在$[-2,2]$上连续，在(-2,2)上二阶可导，且$|f(x)|\leq 1,f’(0) &gt; 1$,求证:存在 $\epsilon \in (-2,2)$使得$f’’(\epsilon) &#x3D; 0$</p>
<h2 id="函数的升降、极值、最值问题-2-3"><a href="#函数的升降、极值、最值问题-2-3" class="headerlink" title="函数的升降、极值、最值问题 2.3"></a>函数的升降、极值、最值问题 2.3</h2><h3 id="题目-2-3-3"><a href="#题目-2-3-3" class="headerlink" title="题目 2.3.3"></a>题目 2.3.3</h3><h3 id="题目-2-3-6"><a href="#题目-2-3-6" class="headerlink" title="题目 2.3.6"></a>题目 2.3.6</h3><h3 id="题目-2-3-9"><a href="#题目-2-3-9" class="headerlink" title="题目 2.3.9"></a>题目 2.3.9</h3><h2 id="函数的图形、拐点及函数作图-2-4"><a href="#函数的图形、拐点及函数作图-2-4" class="headerlink" title="函数的图形、拐点及函数作图 2.4"></a>函数的图形、拐点及函数作图 2.4</h2><h3 id="题目-2-4-4"><a href="#题目-2-4-4" class="headerlink" title="题目 2.4.4"></a>题目 2.4.4</h3><h2 id="洛必达法则与泰勒公式-2-5"><a href="#洛必达法则与泰勒公式-2-5" class="headerlink" title="洛必达法则与泰勒公式 2.5"></a>洛必达法则与泰勒公式 2.5</h2><h3 id="题目-2-5-4"><a href="#题目-2-5-4" class="headerlink" title="题目 2.5.4"></a>题目 2.5.4</h3><h3 id="题目-2-5-7"><a href="#题目-2-5-7" class="headerlink" title="题目 2.5.7"></a>题目 2.5.7</h3><h3 id="题目-2-5-10"><a href="#题目-2-5-10" class="headerlink" title="题目 2.5.10"></a>题目 2.5.10</h3><h2 id="一元函数微分学的综合应用-2-6"><a href="#一元函数微分学的综合应用-2-6" class="headerlink" title="一元函数微分学的综合应用 2.6"></a>一元函数微分学的综合应用 2.6</h2><p>P121 132&#x2F;473</p>
<h3 id="题目-2-6-5"><a href="#题目-2-6-5" class="headerlink" title="题目 2.6.5"></a>题目 2.6.5</h3><p>$ln(2n+1)-ln(2n)+n ln(n+1) - n ln(n) &gt; 1$</p>
<p>$&#x3D; 1&#x2F;(2n+1) - 1&#x2F;(2n) + ln(n+1)-ln(n) - 1&#x2F;(n+1) &gt; 0$</p>
<p>单增</p>
<p>$1&#x2F;3 - 1&#x2F;2 + ln2 - 1&#x2F;2 &#x3D; ln2 - 2&#x2F;3 &lt; 0$</p>
<p>??</p>
<h3 id="题目-2-6-7"><a href="#题目-2-6-7" class="headerlink" title="题目 2.6.7"></a>题目 2.6.7</h3><p>$&#x3D; 2a - e^x$ 单减</p>
<p>$x&#x3D; ln(2a)$ 时 为 0</p>
<p>$&#x3D; 2ax-e^x$</p>
<p>$(0,ln(2a)) $单增 , $(ln(2a),+\infty)$ 单减</p>
<p>极大值 $2aln(2a) - 2a &#x3D; 2a(ln(2a&#x2F;e))$</p>
<p>$ax^2-e^x &#x3D; 0$</p>
<p>$x \to -\infty , +\infty$</p>
<p>$x \to +\infty , -\infty$</p>
<p>$a &lt; e&#x2F;2$ ，单减 1根</p>
<p>$a \ge e&#x2F;2$, 减 增 减??</p>
]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>数学分析 三 一元函数积分学</title>
    <url>/Math/Mathematical_analysis_problems_3/</url>
    <content><![CDATA[<h1 id="一元函数积分学-3"><a href="#一元函数积分学-3" class="headerlink" title="一元函数积分学 3"></a>一元函数积分学 3</h1><h2 id="不定积分和可积函数类-3-1"><a href="#不定积分和可积函数类-3-1" class="headerlink" title="不定积分和可积函数类 3.1"></a>不定积分和可积函数类 3.1</h2><p>5.可积函数类 P124</p>
<p>(1) 有理函数可分解成多项式和若干项最简真分式之和，因此有理函数一定可积分</p>
<p>(2) 三角函数 总可用<code>t=tan(pi/2)</code>将其化为有理函数积分</p>
<p>(3) 积分 <code>R[x, ((ax+b)/(cx+d))^(1/m)]</code>,其中 (ad-bc!&#x3D;0,m正整数)，令右侧为t可以代换化为有理函数积分</p>
<p>(4) 若 积分 <code>x^m (a+bx^n)^p</code>,只有<code>p,(m+1)/n,(m+1)/n+p</code>中有一个为整数时才可积分否则不可</p>
<p>(5) <code>R[x,sqrt(ax^2+bx+c)]</code>的代换</p>
<p><code>a&gt;0 -&gt; 右侧 = +-x+t</code></p>
<p><code>c&gt;0 -&gt; 右侧 = xt+-sqrt(c)</code></p>
<p><code>b^2-4ac&gt;0 -&gt; 右侧 = t(x-根)</code></p>
<p>例22</p>
<p><a href="https://www.wolframalpha.com/input/?i=int+sqrt(x+1/x)+dx">https://www.wolframalpha.com/input/?i=int+sqrt%28x%2B1%2Fx%29+dx</a></p>
<p>常见方法和知识点 三角函数变形吃常数字，看特征，根据上面的方法进行替换，三角函数有<code>tan(x/2)</code>可以替换</p>
<span id="more"></span>

<h3 id="题目-3-1-5-10"><a href="#题目-3-1-5-10" class="headerlink" title="题目 3.1.5 (10)"></a>题目 3.1.5 (10)</h3><h3 id="题目-3-1-8-3-4"><a href="#题目-3-1-8-3-4" class="headerlink" title="题目 3.1.8 (3,4)"></a>题目 3.1.8 (3,4)</h3><h3 id="题目-3-1-13-4-5-6"><a href="#题目-3-1-13-4-5-6" class="headerlink" title="题目 3.1.13 (4,5,6)"></a>题目 3.1.13 (4,5,6)</h3><h3 id="题目-3-1-13-3-4"><a href="#题目-3-1-13-3-4" class="headerlink" title="题目 3.1.13 (3,4)"></a>题目 3.1.13 (3,4)</h3><h2 id="定积分概念、可积条件与定积分性质-3-2"><a href="#定积分概念、可积条件与定积分性质-3-2" class="headerlink" title="定积分概念、可积条件与定积分性质 3.2"></a>定积分概念、可积条件与定积分性质 3.2</h2><p>R[a,b] 在 [a,b]上可积</p>
<p>任意划分 zhengfu 趋近0,大和 &#x3D; 小和</p>
<p>乘积可积性</p>
<p>方法: 二次不等式判别公式, 积分中值定理</p>
<h3 id="题目-3-2-10"><a href="#题目-3-2-10" class="headerlink" title="题目 3.2.10"></a>题目 3.2.10</h3><h2 id="变限定积分、微积分基本定理、定积分的换元法-3-3"><a href="#变限定积分、微积分基本定理、定积分的换元法-3-3" class="headerlink" title="变限定积分、微积分基本定理、定积分的换元法 3.3"></a>变限定积分、微积分基本定理、定积分的换元法 3.3</h2><p>P161&#x2F;473</p>
<p>连续函数一定可积,积分后一定可微</p>
<p>[a,b]上</p>
<p>f(x)可积分,F(x)连续 有限个点外 F’(x) &#x3D; f(x)</p>
<p>有 积分 &#x3D; F(b)-f(a)</p>
<p>换元积分法的前提是？？？？TODO 反函数存在? 一一映射? 导函数也存在?</p>
<p>3.3.6 带积分余项的泰勒公式</p>
<p>3.3.7 积分第二中值定理</p>
<p>例3 函数可积 并不保证 其积分的任意点可导</p>
<p>例11 绝对值积分不等式 变换 为 |(v(x)f(x))’|</p>
<p>泰勒展开 再积分 常数积分&#x3D; 常数×积分长度 和 变量式子积分相等 抵消为0,其实是靠中值展开</p>
<p>方法有 中值定理进行替换</p>
<p>假设 最值点坐标 进行推导</p>
<p>!! 注意 一定要记住一些 特殊点 端点是否可行，可能是 “错误”的证明， 能找到不符合条件的情况</p>
<p>粗略看过了 实变后, 这个例25 看着就好怪啊 这个连续性质的使用？</p>
<p>例34 证明 pi是 无理数</p>
<h3 id="题目-3-3-19"><a href="#题目-3-3-19" class="headerlink" title="题目 3.3.19"></a>题目 3.3.19</h3><h3 id="题目-3-3-20"><a href="#题目-3-3-20" class="headerlink" title="题目 3.3.20"></a>题目 3.3.20</h3><h2 id="定积分的应用-3-4"><a href="#定积分的应用-3-4" class="headerlink" title="定积分的应用 3.4"></a>定积分的应用 3.4</h2><p>面积微元,弧长微元</p>
<p>参数的面积公式为什么 1&#x2F;2 * (xdy-ydx) 表示什么</p>
<p>古鲁金 第一第二定理</p>
<p>曲率公式</p>
<p>辛卜森公式, <a href="https://en.wikipedia.org/wiki/Simpson%27s_rule">https://en.wikipedia.org/wiki/Simpson%27s_rule</a></p>
<h2 id="广义积分-3-5"><a href="#广义积分-3-5" class="headerlink" title="广义积分 3.5"></a>广义积分 3.5</h2><p>3.广义积分收敛判别法</p>
<h3 id="题目-3-5-5"><a href="#题目-3-5-5" class="headerlink" title="题目 3.5.5"></a>题目 3.5.5</h3>]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>数学分析 四 级数</title>
    <url>/Math/Mathematical_analysis_problems_4/</url>
    <content><![CDATA[<h1 id="级数-4"><a href="#级数-4" class="headerlink" title="级数 4"></a>级数 4</h1><h2 id="级数敛散判别法与性质、上极限与下极限"><a href="#级数敛散判别法与性质、上极限与下极限" class="headerlink" title="级数敛散判别法与性质、上极限与下极限"></a>级数敛散判别法与性质、上极限与下极限</h2><p>-P224</p>
<p>数列和</p>
<p>绝对收敛 条件收敛</p>
<p>柯西收敛准则</p>
<p>定理3 (柯西判别法)</p>
<p>若 $lim_{n\to\infty} \sqrt[n]{a_n} &#x3D; r $, $r&lt;1$级数收敛,$r&gt;1$级数发散</p>
<p>定理4 (达朗贝尔判别法) ,比值极限和1的关系</p>
<p>级数 为单调递减(x&gt;&#x3D;1)函数上的取值点 ，与广义积分同时收敛发散</p>
<p>莱布尼茨判别法, 正负奇偶项,an单调下降趋近0 收敛</p>
<p>狄利克雷判别法 , $sum_{n&#x3D;1}^{\infty} {a_n*b_n}$ , $b_n$的级数 有界(不要求收敛) ,$a_n$单调下降收敛于0,则 乘积级数收敛</p>
<p>阿贝尔判别法, $sum_{n&#x3D;1}^{\infty} {a_n*b_n}$ , $b_n$的级数收敛, $a_n$单调有界,则乘积级数收敛</p>
<p>&#x2F;&#x2F; 这两个和上一章(广义积分)的判别中很像</p>
<p>柯西乘积:在数学上，以法国数学家奥古斯丁·路易·柯西命名的柯西乘积，是指两组数列{\displaystyle a_{n},b_{n}}的离散卷积</p>
<span id="more"></span>

<p>5 两个绝对收敛级数乘积????</p>
<p>上下极限性质，性质4 的中间 怎么证明?</p>
<p>7 为什么是 有限项不是零项</p>
<p>单调递减的等价无穷小 然后和积分同敛散</p>
<p>证明 $\frac{(2n-1)!!}{(2n)!!}$ 趋于0</p>
<p>$a_n \le \frac{1}{a_n(2n+1)}$ &#x2F;&#x2F; 各项分子分母+1</p>
<p>得到 $0 &lt; a_n \le \frac{1}{\sqrt{2n+1}} $</p>
<p>解法: <code>an/sn</code>形式的用分点,</p>
<p>直接证明不了，进行拆分，拆分成 收敛数列的和,或者收敛+发散再得出 原数列</p>
<p>绝对+绝对&#x3D;绝对</p>
<p>绝对+条件&#x3D;条件</p>
<p>重排相关: 绝对收敛-&gt;重排收敛 和相等</p>
<p>条件收敛-&gt;不改顺序,可以组合</p>
<p>发散: -&gt;重排后不一定?</p>
<p>例12 重排后级数会变!?</p>
<p>4.1.3.(3，4) 同例题找一个明确收敛的，然后做比值小于1</p>
<h3 id="题目-4-1-4-6"><a href="#题目-4-1-4-6" class="headerlink" title="题目 4.1.4 (6)"></a>题目 4.1.4 (6)</h3><p>讨论收敛性 $\sum_{n&#x3D;1}^{\infty} (sqrt[n]n-1)^p , (p&gt;0)$</p>
<h3 id="题目-4-1-10-1-2-3-4"><a href="#题目-4-1-10-1-2-3-4" class="headerlink" title="题目 4.1.10(1,2,3,4)"></a>题目 4.1.10(1,2,3,4)</h3><h3 id="题目-4-1-15"><a href="#题目-4-1-15" class="headerlink" title="题目 4.1.15"></a>题目 4.1.15</h3><h3 id="题目-4-1-16"><a href="#题目-4-1-16" class="headerlink" title="题目 4.1.16"></a>题目 4.1.16</h3><h3 id="题目-4-1-17"><a href="#题目-4-1-17" class="headerlink" title="题目 4.1.17"></a>题目 4.1.17</h3><h3 id="题目-4-1-23"><a href="#题目-4-1-23" class="headerlink" title="题目 4.1.23"></a>题目 4.1.23</h3><h3 id="题目-4-1-25-2"><a href="#题目-4-1-25-2" class="headerlink" title="题目 4.1.25(2)"></a>题目 4.1.25(2)</h3><h2 id="函数级数"><a href="#函数级数" class="headerlink" title="函数级数"></a>函数级数</h2><p>狄利克雷 在 广义积分收敛，级数收敛，一致性收敛，都是 一部分的和的极限的绝对值有界, |sum{b_n}|&lt;&#x3D;M，{a_n} 单调下降趋于0 或者 一致收敛于0,等，有结果 sum{a_n*b_n} 有满足性质</p>
<p>形式<code> |sum&#123;&#125;有界限| *单调趋近零</code></p>
<p>阿贝尔 同样在 广义积分收敛，级数收敛，一致性收敛，一部分和bn一致收敛，另一个的每一项 有界限， 则 sum{a_n*b_n}一致收敛</p>
<p>形式:<code> (sum&#123;&#125;有性质) *单调有界限</code></p>
<p>柯西条件的 p&#x3D;1时就是单项的 特例了！</p>
<h3 id="例11"><a href="#例11" class="headerlink" title="例11"></a>例11</h3><h3 id="题目4-2-2"><a href="#题目4-2-2" class="headerlink" title="题目4.2.2"></a>题目4.2.2</h3><h3 id="题目4-2-4"><a href="#题目4-2-4" class="headerlink" title="题目4.2.4"></a>题目4.2.4</h3><h3 id="题目4-2-5"><a href="#题目4-2-5" class="headerlink" title="题目4.2.5"></a>题目4.2.5</h3><p>连续 拆分点?</p>
<h3 id="题目4-2-16"><a href="#题目4-2-16" class="headerlink" title="题目4.2.16"></a>题目4.2.16</h3><h3 id="题目4-2-17"><a href="#题目4-2-17" class="headerlink" title="题目4.2.17"></a>题目4.2.17</h3><h2 id="幂级数"><a href="#幂级数" class="headerlink" title="幂级数"></a>幂级数</h2><p>阿贝尔引理</p>
<h3 id="题目4-3-1-3"><a href="#题目4-3-1-3" class="headerlink" title="题目4.3.1(3)"></a>题目4.3.1(3)</h3><h3 id="题目4-3-7"><a href="#题目4-3-7" class="headerlink" title="题目4.3.7"></a>题目4.3.7</h3><h3 id="题目4-3-8"><a href="#题目4-3-8" class="headerlink" title="题目4.3.8"></a>题目4.3.8</h3><h3 id="题目4-3-13-3"><a href="#题目4-3-13-3" class="headerlink" title="题目4.3.13(3)"></a>题目4.3.13(3)</h3><h3 id="题目4-3-14"><a href="#题目4-3-14" class="headerlink" title="题目4.3.14"></a>题目4.3.14</h3><h3 id="题目4-3-15"><a href="#题目4-3-15" class="headerlink" title="题目4.3.15"></a>题目4.3.15</h3><h3 id="题目4-3-16"><a href="#题目4-3-16" class="headerlink" title="题目4.3.16"></a>题目4.3.16</h3><h3 id="题目4-3-17"><a href="#题目4-3-17" class="headerlink" title="题目4.3.17"></a>题目4.3.17</h3><h3 id="题目4-3-18"><a href="#题目4-3-18" class="headerlink" title="题目4.3.18"></a>题目4.3.18</h3><h2 id="傅式级数的收敛性、平均收敛与一致收敛"><a href="#傅式级数的收敛性、平均收敛与一致收敛" class="headerlink" title="傅式级数的收敛性、平均收敛与一致收敛"></a>傅式级数的收敛性、平均收敛与一致收敛</h2><h3 id="题目4-4-8-4-4-19"><a href="#题目4-4-8-4-4-19" class="headerlink" title="题目4.4.8~4.4.19"></a>题目4.4.8~4.4.19</h3>]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>数学分析 五 多元函数微分学</title>
    <url>/Math/Mathematical_analysis_problems_5/</url>
    <content><![CDATA[<h1 id="多元函数微分学-5"><a href="#多元函数微分学-5" class="headerlink" title="多元函数微分学 5"></a>多元函数微分学 5</h1><h2 id="欧式空间、多元函数的极限与连续"><a href="#欧式空间、多元函数的极限与连续" class="headerlink" title="欧式空间、多元函数的极限与连续"></a>欧式空间、多元函数的极限与连续</h2><p>$\bar{E} &#x3D; ((E^c)^o)^c$</p>
<p>全面极限（所有方向），累次极限（先极限一部分再极限另一部分），二重极限（同时?）</p>
<p>二重极限存在,对应的累次极限不一定存在</p>
<p>例如lim(x,y)→(0,0)(xsin(1&#x2F;y)+ysin(1&#x2F;x))&#x3D;0</p>
<p>对应的两个累次极限limx→0(limy→0(xsin(1&#x2F;y)+ysin(1&#x2F;x)))和limy→0(limx→0(xsin(1&#x2F;y)+ysin(1&#x2F;x)))都不存在</p>
<span id="more"></span>

<h3 id="题目5-1-8"><a href="#题目5-1-8" class="headerlink" title="题目5.1.8"></a>题目5.1.8</h3><p>闭包?</p>
<h3 id="题目5-1-14"><a href="#题目5-1-14" class="headerlink" title="题目5.1.14"></a>题目5.1.14</h3><p>(2)</p>
<h3 id="题目5-1-23"><a href="#题目5-1-23" class="headerlink" title="题目5.1.23"></a>题目5.1.23</h3><h3 id="题目5-1-24"><a href="#题目5-1-24" class="headerlink" title="题目5.1.24"></a>题目5.1.24</h3><h3 id="题目5-1-25"><a href="#题目5-1-25" class="headerlink" title="题目5.1.25"></a>题目5.1.25</h3><h2 id="偏导数与微分"><a href="#偏导数与微分" class="headerlink" title="偏导数与微分"></a>偏导数与微分</h2><p>多元函数泰勒公式</p>
<p>例10,例11</p>
<p>可微<code>(f(x,y)-f(x0,y0) - fx&#39; * (x-x0) - fy&#39; * (y-y0) )/sqrt&#123;(x-x0)^2+(y-y0)^2&#125; = 0</code></p>
<p>第一，偏导x&#x2F;偏导s的倒数写法要求s是x，y的函数，否则就是全导数ds&#x2F;dx。</p>
<p>第二，倒数写法存在当且仅当x（s，t），y（s，t）的反函数存在。</p>
<p>第三，反函数存在除了要求一系列的偏导数连续，还要求雅可比行列式不为0。(重要?)</p>
<p>综上，必须通过一个一般的y&#x3D;g（s，t）且满足反函数存在定理，才可以讨论 偏x&#x2F;偏s !&#x3D; 1&#x2F;(偏s&#x2F;偏x)</p>
<p><a href="https://math.stackexchange.com/questions/1090061/manipulating-partial-derivatives-of-inverse-function">https://math.stackexchange.com/questions/1090061/manipulating-partial-derivatives-of-inverse-function</a></p>
<p>1 &#x3D; dx&#x2F;dx &#x3D; 偏x&#x2F;偏x &#x3D; 偏f(s(x),t(x))&#x2F;偏x &#x3D; 偏f&#x2F;偏s \cdot ds&#x2F;dx + 偏f&#x2F;偏t \cdot dt&#x2F;dx &#x3D; 偏f&#x2F;偏s \cdot 偏s&#x2F;偏x + 偏f&#x2F;偏t \cdot 偏t&#x2F;偏x</p>
<h3 id="题目-5-2-9"><a href="#题目-5-2-9" class="headerlink" title="题目 5.2.9"></a>题目 5.2.9</h3><h3 id="题目-5-2-14-系数why"><a href="#题目-5-2-14-系数why" class="headerlink" title="题目 5.2.14 系数why"></a>题目 5.2.14 系数why</h3><h3 id="题目-5-2-15"><a href="#题目-5-2-15" class="headerlink" title="题目 5.2.15"></a>题目 5.2.15</h3><h3 id="题目-5-2-16"><a href="#题目-5-2-16" class="headerlink" title="题目 5.2.16"></a>题目 5.2.16</h3><h3 id="题目-5-2-25"><a href="#题目-5-2-25" class="headerlink" title="题目 5.2.25"></a>题目 5.2.25</h3><h3 id="题目-5-2-27"><a href="#题目-5-2-27" class="headerlink" title="题目 5.2.27"></a>题目 5.2.27</h3><h3 id="题目-5-2-28"><a href="#题目-5-2-28" class="headerlink" title="题目 5.2.28"></a>题目 5.2.28</h3><h3 id="题目-5-2-29"><a href="#题目-5-2-29" class="headerlink" title="题目 5.2.29"></a>题目 5.2.29</h3><h3 id="题目-5-2-30"><a href="#题目-5-2-30" class="headerlink" title="题目 5.2.30"></a>题目 5.2.30</h3><h3 id="题目-5-2-31"><a href="#题目-5-2-31" class="headerlink" title="题目 5.2.31"></a>题目 5.2.31</h3><h3 id="题目-5-2-32"><a href="#题目-5-2-32" class="headerlink" title="题目 5.2.32"></a>题目 5.2.32</h3><h2 id="反函数与隐函数"><a href="#反函数与隐函数" class="headerlink" title="反函数与隐函数"></a>反函数与隐函数</h2><h3 id="练习题-5-3"><a href="#练习题-5-3" class="headerlink" title="练习题 5.3"></a>练习题 5.3</h3><h2 id="切空间与极值"><a href="#切空间与极值" class="headerlink" title="切空间与极值"></a>切空间与极值</h2><h2 id="含参变量的定积分"><a href="#含参变量的定积分" class="headerlink" title="含参变量的定积分"></a>含参变量的定积分</h2><h2 id="含参变量的广义积分"><a href="#含参变量的广义积分" class="headerlink" title="含参变量的广义积分"></a>含参变量的广义积分</h2>]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>数学分析 六 多元函数积分学</title>
    <url>/Math/Mathematical_analysis_problems_6/</url>
    <content><![CDATA[<h1 id="多元函数积分学-6"><a href="#多元函数积分学-6" class="headerlink" title="多元函数积分学 6"></a>多元函数积分学 6</h1><h2 id="重积分的概念与性质、重积分化累次积分"><a href="#重积分的概念与性质、重积分化累次积分" class="headerlink" title="重积分的概念与性质、重积分化累次积分"></a>重积分的概念与性质、重积分化累次积分</h2><span id="more"></span>

<h2 id="重积分变换"><a href="#重积分变换" class="headerlink" title="重积分变换"></a>重积分变换</h2><h2 id="曲线积分与格林公式"><a href="#曲线积分与格林公式" class="headerlink" title="曲线积分与格林公式"></a>曲线积分与格林公式</h2><h2 id="曲面积分"><a href="#曲面积分" class="headerlink" title="曲面积分"></a>曲面积分</h2><h2 id="奥氏公式、斯托克斯公式、线积分与路径无关"><a href="#奥氏公式、斯托克斯公式、线积分与路径无关" class="headerlink" title="奥氏公式、斯托克斯公式、线积分与路径无关"></a>奥氏公式、斯托克斯公式、线积分与路径无关</h2><h2 id="场论"><a href="#场论" class="headerlink" title="场论"></a>场论</h2>]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>数学分析 七 典型例题 及 参考资料 速查表</title>
    <url>/Math/Mathematical_analysis_problems_7/</url>
    <content><![CDATA[<h1 id="典型综合题分析-7"><a href="#典型综合题分析-7" class="headerlink" title="典型综合题分析 7"></a>典型综合题分析 7</h1><h1 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h1><h2 id="康托定理"><a href="#康托定理" class="headerlink" title="康托定理"></a>康托定理</h2><p>若函数f(x)在闭区间[a,b]上连续，则它在[a,b]上一致连续。换言之，在闭区间上连续的函数在该闭区间一致连续。</p>
<p>采用反证法。</p>
<p>假设$f(x)$在$[a,b]$上非一致连续，由非一致连续定义可知存在$\epsilon_0 &gt; 0$及两点列$${x’_n}$$和$${x’’_n}$$，$$x’_n,x’’_n\in[a,b]$$，满足</p>
<p>$$$$</p>
<span id="more"></span>

<p>，且 。</p>
<p>因为有界，由Bolzano-Weierstrass定理(波尔查诺-维尔斯特拉斯定理是指有界数列必有收敛子列。从极限点的角度来叙述致密性定理，就是：有界数列必有极限点。)，存在收敛子列：</p>
<p>在点列中取子列，其下标与下标相同，则由，又得到</p>
<p>由于函数在点连续，因而有</p>
<p>于是得到：</p>
<p>但这与假设产生矛盾，从而推翻假设，得到在上的一致连续的结论。</p>
<h2 id="和差化积"><a href="#和差化积" class="headerlink" title="和差化积"></a>和差化积</h2><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>积分表&#x2F;等价无穷小 背不全</p>
<p>重要公式</p>
<p>int sin(x)^n dx x&#x3D;0..pi&#x2F;2 &#x3D; int cos(x)^n dx x&#x3D;0..pi&#x2F;2 &#x3D; (n-1)!!&#x2F;n!! * 1 (n奇数时) * pi&#x2F;2(偶数)</p>
<h1 id="参考-辅助"><a href="#参考-辅助" class="headerlink" title="参考 辅助"></a>参考 辅助</h1><p><a href="https://kapeli.com/cheat_sheets/LaTeX_Math_Symbols.docset/Contents/Resources/Documents/index">latex math symbols cheat sheet</a></p>
<h1 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h1><p><a href="https://book.douban.com/subject/1239173/">&lt;数学分析解题指南&gt;</a></p>
<p>ISBN:9787301065501</p>
<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>matlab学习</p>
<p>一个或多个 公式cheatsheet</p>
<p>瓦里斯公式</p>
<p>贝塞尔函数相关</p>
<p>幂级数展开</p>
]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>Walter Rudin 数学分析原理 1 实数系与复数系</title>
    <url>/Math/Principles_of_Mathematical_Analysis_1/</url>
    <content><![CDATA[<p>isbn</p>
<ul>
<li>中文 9787111134176</li>
<li>英文 9787111619543</li>
</ul>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>受众：数学专业高年级，或一年级研究生</p>
<h2 id="实数系与复数系"><a href="#实数系与复数系" class="headerlink" title="实数系与复数系"></a>实数系与复数系</h2><h3 id="导引"><a href="#导引" class="headerlink" title="导引"></a>导引</h3><p>有理数&#x3D;m&#x2F;n</p>
<ul>
<li>不存在有理数 $p^2&#x3D;2$ 这里普林斯顿那本应该也是抄这个例子的<ul>
<li>一方面不存在（ 偶数证明</li>
<li>一方面没有 最近, p &#x3D;(2p+2)&#x2F;(p+2)</li>
</ul>
</li>
</ul>
<p>1.3 快速过了一下集合的概念</p>
<h3 id="有序集-Ordered-sets"><a href="#有序集-Ordered-sets" class="headerlink" title="有序集 Ordered sets"></a>有序集 Ordered sets</h3><p>1.5 集合中的 序order, is a relation</p>
<ul>
<li>任何两个可按照 给定序比较 或相等</li>
<li>传递性, if x,y,z in S, if x &lt; y and y &lt; z then x &lt; z</li>
</ul>
<p>1.6 集合set+序(order is defined) &#x3D;&gt; 有序集 ordered set</p>
<p>1.7 子集的上界定义, bounded above 上方有界, (中文书上翻译的 上有界)</p>
<ul>
<li>有序集S的子集E, 任意E中元素，&lt;&#x3D; b \in S,那么b是上界upper bound of E</li>
<li>类似 Lower bound<ul>
<li>从翻译上 看起来英文的 bounded above是形容集合，而 upper bound of 是一个值的与集合的关系属性</li>
</ul>
</li>
</ul>
<p>1.8 上确界 least-upper-bound of</p>
<ul>
<li>a 是 上界 upper bound of</li>
<li>更小不是上界,b &lt; a, b is not upper bound of</li>
<li>类似下确界 greatest-lower-bound property</li>
</ul>
<p>1.10 最小上界性 least-upper-bound property</p>
<ul>
<li>$E\subset S$,E有上界时, $\text{sup} E \in S$ <ul>
<li>有理数中 $A&#x3D;\lbrace q| q^2&lt;2\rbrace, B&#x3D;\lbrace q | q^2 &gt; 2\rbrace$, A的上界全在B中，但是B没有最小值 从而 $\mathbb{Q}$没有最小上界性</li>
</ul>
</li>
<li>1.11 最小上界性 &lt;&#x3D;&gt; 最小下界性<ul>
<li>这个的证明核心 就是 证明上面的定义的要素：是+更（小&#x2F;大）不是</li>
</ul>
</li>
</ul>
<h3 id="域-Fields"><a href="#域-Fields" class="headerlink" title="域 Fields"></a>域 Fields</h3><p>1.12 Deinition A field is a set F with two operations, called addition and multiplication, 满足两个所谓的 “field axioms”(域的公理)</p>
<ul>
<li>Axioms for addition<ul>
<li>A1 x in F + y in F &#x3D;&gt; x+y in F 封闭</li>
<li>A2 commutative x+y&#x3D;y+x for all x,y in F 交换</li>
<li>A3 associative (x+y)+z&#x3D;x+(y+z) for all x,y,z in F 结合</li>
<li>A4 F contains an elment 0 such that 0+x&#x3D;x for every x in F, 在addition运算下的零元</li>
<li>A5 x in F, exist y in F, x+y&#x3D;0, y 记作 -x, 逆元存在</li>
</ul>
</li>
<li>Axioms for mutiplication<ul>
<li>M1 封闭</li>
<li>M2 交换</li>
<li>M3 结合</li>
<li>M4 乘法零元，且不等于加法零元，记作1, 1x&#x3D;x for every x in F</li>
<li>M5 乘法逆元</li>
</ul>
</li>
<li>the Distribution law 分配<ul>
<li>x(y+z)&#x3D;xy+xz for x,y,z in F</li>
</ul>
</li>
<li>注意一些地方的一些写法是简记<ul>
<li>例如 减法 是 加逆元，分数符号或除法是乘上逆元</li>
<li>同等级 连加，连乘，是省去了运算括号，实际是从左到右侧</li>
<li>整数次幂次 是 同个数连乘缩写</li>
<li>这些“简记”并没有 额外定义性质</li>
</ul>
</li>
</ul>
<p>1.14 命题proposition </p>
<ul>
<li>if x+y&#x3D;y+z then y&#x3D;z</li>
<li>if x+y&#x3D;y then y &#x3D; 0</li>
<li>if x+y&#x3D;0 then y &#x3D; -x</li>
<li>-(-x)&#x3D;x 逆元的逆元得到本身</li>
</ul>
<p>1.15 命题 关于乘法</p>
<ul>
<li>x \neq 0 and xy&#x3D;xz then y&#x3D;z</li>
<li>x \neq 0 and xy&#x3D;x then y&#x3D;1</li>
<li>x \neq 0 and xy&#x3D;1 then y&#x3D;1&#x2F;x</li>
<li>x \neq 0 , 1(1&#x2F;x)&#x3D;x</li>
</ul>
<p>1.16 命题 x,y,z in F</p>
<ul>
<li>0x&#x3D;0</li>
<li>x\neq 0 and y \neq0 then xy\neq 0</li>
<li>(-x)y&#x3D;-(xy)&#x3D;x(-y)</li>
<li>(-x)(-y)&#x3D;xy</li>
</ul>
<p>1.17 定义 ordered field 有序域</p>
<ul>
<li>field F + ordered set</li>
<li>x + y &lt; x+z if x,y,z in F and y &lt; z</li>
<li>xy &gt; 0 if x in F, y in F, x &gt; 0 and y &gt;0</li>
<li>这里 定义 positive ,negative</li>
</ul>
<p>1.18 命题，因为我们对于实数域很熟，有一些实数域中的结论在 有序域中同样成立，例如</p>
<ul>
<li>if x &gt; 0 then -x &lt; 0,对称也成立</li>
<li>if x &gt; 0 and y &lt; z then xy &lt; xz</li>
<li>if x &lt; 0 and y &lt; z then xy &gt; xz</li>
<li>if x \neq 0 then xx &gt;0,特别的 1(乘法零元) &gt; 0（加法零元）</li>
<li>if 0 &lt; x &lt; y then 0 &lt; 1&#x2F;y &lt; 1&#x2F;x</li>
</ul>
<h3 id="实数域-the-reald-field"><a href="#实数域-the-reald-field" class="headerlink" title="实数域 the reald field"></a>实数域 the reald field</h3><p>本章核心 存在定理: existence theorem</p>
<p>1.19 存在一个 有序域R,有 最小上界性</p>
<ul>
<li>同时包含实数域Q 作为子域。<ul>
<li>这里没有直接说R是啥</li>
<li>子域 是保持两者之间的运算映射一致</li>
<li>R的元叫做 实数, the members of R are called real numbers</li>
<li>具体的R构造见1章附录</li>
</ul>
</li>
</ul>
<p>1.20 </p>
<ul>
<li>archimedean property of R 欧几里德性 x,y in R, x &gt; 0 , then there is a positive integer n such that nx &gt; y<ul>
<li>不成立y是上界，有界，最小上界性 a&#x3D;sup nx, a-x不是最小上界, 存在m使得a-x &lt; mx, a &lt; (m+1)x ,a不是上界，不是最小上界</li>
</ul>
</li>
<li>Q is dense(稠密) in R.  x,y, in R x &lt; y ,exists p in Q such that x &lt; p &lt; y, 任意两个实数之间有有理数<ul>
<li>利用1, n(y-x)&gt;1 划缝，让x,y必然落在 1&#x2F;m切割的不同区间中</li>
</ul>
</li>
</ul>
<p>1.21 $x^n&#x3D;a$ 存在1个正实数解</p>
<ul>
<li>y &#x3D; sup x | x^n &lt; a。 因为上确界性</li>
<li>那么 y^n &#x3D; a, 即是 y^n &lt; a或者 y^n &gt; a都会矛盾（注意不要弄错成 <del>y的n次方都比a小，大于y的n次方都比a大</del></li>
<li>这里的想法和开篇的 y^2&#x3D;2 的想法类似，插入一个 y^n ~ a 之间的数，而且它的n次方是直接可以y表示的<ul>
<li>(y+h)^n-y^n &lt; a-y^n, 0 &lt; h &lt; 1</li>
<li>h(\sum (y+h)^? y^?) &lt; a-y^n</li>
<li>h(\sum (y+1)^{n-1}) &lt; a-y^n</li>
<li>h(n(y+1)^{n-1}) &lt; a-y^n</li>
<li>我们能得到h 关于 a,y,n的 只有乘除加减没有开根的表达式，从而能凑，就能有之间的数，从而就能有矛盾</li>
</ul>
</li>
<li>推论 (ab)^{1&#x2F;n}&#x3D;(a^{1&#x2F;n})(b^{1&#x2F;n})</li>
</ul>
<p>1.22 小数 &#x3D;&gt; 实数</p>
<ul>
<li>无穷小数，看成 逐渐截断的 10的幂次 系数的和 的集合的 sup E</li>
<li>since we shall never use decimals ,we do not enter into a detailed discussion</li>
</ul>
<h3 id="广义实数系-the-extended-real-number-system"><a href="#广义实数系-the-extended-real-number-system" class="headerlink" title="广义实数系 the extended real number system"></a>广义实数系 the extended real number system</h3><p>这里英文是 extended, 多了 正无穷和负无穷两个 符号</p>
<ul>
<li>在 extended 里， 正无穷是 所有的上界，每个非空集合至少一个上界</li>
<li>一些还能用的四则运算</li>
</ul>
<h3 id="复数域-complex-field"><a href="#复数域-complex-field" class="headerlink" title="复数域 complex field"></a>复数域 complex field</h3><p>有序对(a,b)</p>
<ul>
<li>相等 对位相等</li>
<li>复数运算的 新加法，和新乘法</li>
<li>(a,b)+(c,d)&#x3D;(a+c,b+d)</li>
<li>(a,b) * (c,d)&#x3D;(ac-bd,ad+bc)</li>
<li>在新加法乘法的定义下满足 加法5条，乘法5条，交换1条，所以是个 域 field</li>
<li>实数 对应的是第二维为零，实数和复数有相同的运算性质，因此可以看作子域 the real field as a  subfield of the complex field</li>
</ul>
<p>其它记法 a+bi</p>
<ul>
<li>新记法下的运算，实部Re(z) real part，虚部Im(z) imaginary</li>
<li>共轭相关运算 (在普林斯顿那书笔记中有)</li>
<li>$z\bar{z}$ 是实+正，只有&#x3D;0时&#x3D;0</li>
<li>absolute value $|z|&#x3D;\sqrt{z\bar{z}}$</li>
</ul>
<p>Schwarz inequality</p>
<ul>
<li>$|\sum a_i\bar{b_i}|^2 \le (\sum |a_i|^2)(\sum |b_i|^2)$</li>
<li>书上这个神奇的起手怎么想到的真不知道，drop from sky</li>
<li>一个办法 $f(t)&#x3D;\sum |a_i+tb_i|^2$ 这个思路是去找判别式靠，在 高代第10章 就是类似这个思路</li>
</ul>
<h3 id="欧氏空间-Euclidean-spaces"><a href="#欧氏空间-Euclidean-spaces" class="headerlink" title="欧氏空间 Euclidean spaces"></a>欧氏空间 Euclidean spaces</h3><p>n维坐标, 坐标值都是实数</p>
<ul>
<li>线性<ul>
<li>加法 addition of vectors</li>
<li>数乘 , multiplication of a vector by a real number (a scalar)</li>
</ul>
</li>
<li>内积 inner product<ul>
<li>x y &#x3D; sum x_i y_i</li>
<li>范数 norm of x, |x|&#x3D;(x x)^{1&#x2F;2}</li>
</ul>
</li>
<li>性质1.37<ul>
<li>|x|&gt;&#x3D;0</li>
<li>|x| &#x3D;0 if and only if x &#x3D;0</li>
<li>|ax|&#x3D;|a||x|</li>
<li>|x y | &lt;&#x3D; |x| |y| 是 Schwarz inequaliy的结果</li>
<li>|x+y| &lt;&#x3D; |x|+|y| 三角不等式<ul>
<li>|x-z| &lt;&#x3D; |x-y|+|y-z|</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="附录，从有理数域-为了最小上界性-构造出实数域"><a href="#附录，从有理数域-为了最小上界性-构造出实数域" class="headerlink" title="附录，从有理数域 为了最小上界性 构造出实数域"></a>附录，从有理数域 为了最小上界性 构造出实数域</h3><p>对于1.19，要从Q构造出R</p>
<p>Step 1. The members of R will be certain subsets of Q, called cuts. A cut is, by definition, any set S \subset Q with following three properties</p>
<ul>
<li>S is not empty and S \neq Q, 非空 非全，真子集</li>
<li>if p in S, q in Q, and q &lt; p, then q in S, Q中某个元素比S中某个元素小，那么同时在S中<ul>
<li>含有：不在S中的 都比S中的大，否则会在S中</li>
<li>比 不在S中的大的，同样不在S中</li>
</ul>
</li>
<li>if p in S,then p &lt; r for some r in S,每个S中元素能找到更大的, 没有最大化</li>
</ul>
<p>p,q,r表示有理数，S,T,U表示分化 cuts</p>
<p>Step 2. S &lt; T 表示S是T的真子集</p>
<ul>
<li>这里主要是要表达，集合之间，在上述的cuts, 真子集 是一种有序关系<ul>
<li>（注意普通的集合之间的不是“任意两个都有序的”</li>
<li>这里至多 一个&gt;&#x3D;&lt; 成立显然</li>
<li>证明一下至少一个成立，这里用元素属于分类讨论去证明</li>
</ul>
</li>
<li>传递性容易证</li>
<li>因此 所有cuts 集合 构成的集合 是有序集</li>
</ul>
<p>step3 有序集R有最小上界性</p>
<ul>
<li>R&#x3D;{cuts的集合}<ul>
<li>每个cut是 有理数集合 满足step1的性质</li>
</ul>
</li>
<li>那么取任意R非空子集 A</li>
<li>假定B in R是它的上界</li>
<li>令$A_1&#x3D;$ 所有 S in A的并 （cut的并）<ul>
<li>那么要证明 $A_1$ 属于R<ul>
<li>且$A_1&#x3D;\sup A$, 也就是 最小上界性（能在R中找到最小上界</li>
</ul>
</li>
<li>证明 属于R: 也就是证明A_1 满足step1的3条性质,<ul>
<li>元素关系证明非空，$S \subset A \subset B \neq R$ 证明不等</li>
<li>后两条，对于元素p,能找具体的集合S,再在S中找元素q,</li>
</ul>
</li>
<li>证明 是 上确界：<ul>
<li>上界显然</li>
<li>证明 比他小的不是上界，靠元素属于关系 拉扯</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>step4 如果 $S,T \in R$, 定义S+T&#x3D;所有 a+b,a in S,b in T 的元素组成</p>
<ul>
<li>定义 集合的 <code>加</code> 运算</li>
<li>那么证明 加法5条，封闭（证明 step1 cut三条），交换，结合，<ul>
<li>零元($0^*$定义为 所有负有理数组成的集合, 证明相对用互相包含证明)，</li>
<li>逆元 $A\in R,B&#x3D;\lbrace p | \exists r &gt; 0, -p-r\not \in A \rbrace$ 比-p小一点的有理数不在A内，这样的B就是A的逆元</li>
</ul>
</li>
<li>这里核心证明思路都是通过元素属于关系证明的</li>
<li>至此 这样定义下 有了 加法 运算性质</li>
<li>step 5<ul>
<li>基于 加法 和 序 定义的一些性质</li>
<li>如消去律 1.14, a+b&#x3D;a+c 则b&#x3D;c</li>
</ul>
</li>
</ul>
<p>step 6 处理乘法</p>
<ul>
<li>$R^+ &#x3D;${a|$a\in R, a &gt; 0^*$}</li>
<li>先类似加法的方式 通过元素构成定义乘法</li>
<li>从而类似的有了乘法零元: $1^*$</li>
</ul>
<p>step 7 利用 逆元 零元 和 （正数乘法）的定义把乘法的定义扩展到全体R上</p>
<ul>
<li>$A0^*&#x3D;0^*$</li>
<li>至此新的加法和新的乘法都有了</li>
</ul>
<p>step 8 用类似的形式，给现有有理数对应的 “分化”</p>
<ul>
<li>注意现在还是只有有理数，和上面的集合R，（而不是实数）</li>
<li>对于任意$r\in \mathbb{Q}$</li>
<li>$r^*&#x3D;\lbrace p| p&lt;r ,p\in\mathbb{Q}\rbrace$<ul>
<li>验证step1的3条性质,它是一个分化</li>
<li>然后我们需要证明的是 有理数加法$(r_1+r_2)^*$，和上面集合的 新加法$r_1^*+r_2^*$ 同构（&#x3D;） ,乘法也是</li>
</ul>
</li>
</ul>
<p>step 9</p>
<ul>
<li>根据上面 同构</li>
<li>我们把 构造出的R看作实数</li>
</ul>
<p>回顾</p>
<ul>
<li>第1步 完成构造</li>
<li>第2步 证明构造东西的有序性</li>
<li>第3步 证明最小上界性</li>
<li>第4~7步 新的构造中 定义新的加法和乘法</li>
<li>第8~9步 证明现有有理数以及加法乘法运算，与新定义的同构，从而证明了“实数”的构造</li>
</ul>
<hr>
<p>戴德金分割，感觉像在所有有理数中间切分，而其“文字描述下”，和可数性又不冲突，</p>
<ul>
<li>例如 每个有理数按照有理数的可数排列 同样可以贴着“每个有理数”完成切割，但这种情况，你会发现  A&#x3D;{x^2 &lt; 2}, B&#x3D;{x^2&gt;&#x3D;2} 这种“切割”，又不在按可数排列的切割里</li>
<li>在 可数 稠密 下 的 切割，和有限比很怪</li>
<li>而且另一方面，的问题是，和中小学学的：有理数（可以表示成 m&#x2F;n 或者 有限，循环小数），无理数（无限不循环），或者连分数，有理数：有限，无理数：无限。 那这样 A的上确界不在A中，如何能保证取完所有 无理数</li>
</ul>
]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>Walter Rudin 数学分析原理 10 微分形式的积分</title>
    <url>/Math/Principles_of_Mathematical_Analysis_10/</url>
    <content><![CDATA[<p>isbn</p>
<ul>
<li>中文 9787111134176</li>
<li>英文 9787111619543</li>
</ul>
<span id="more"></span>

<h2 id="微分形式的积分-integration-of-differential-forms"><a href="#微分形式的积分-integration-of-differential-forms" class="headerlink" title="微分形式的积分 integration of differential forms"></a>微分形式的积分 integration of differential forms</h2><p>本章致力于积分理论中的欧几里得空间 的几何紧密相关的各方面，</p>
<h3 id="积分-integration"><a href="#积分-integration" class="headerlink" title="积分 integration"></a>积分 integration</h3><p>10.1 定义设$I^k$是$R^k$中的k-方格, 它由满足 $a_i \le x_i \le b_i$的一切, $x&#x3D;(x_1,\cdots,x_k)$组成</p>
<ul>
<li>$I^j$是$R^j$中的$j-$方格, 前j个不等式确定, $f$是$I^k$上的实连续函数</li>
<li>$f&#x3D;f_k$<ul>
<li>$f_{k-1}(x_1,\cdots,x_{k-1})&#x3D;\int_{a_k}^{b_k} f_k(x_1,\cdots,x_{k-1},x_k)d x_k$,</li>
</ul>
</li>
<li>$f_k$在$I^k$上的一致连续性表明$f_{k-1}$在$I^{k-1}$上连续</li>
<li>因此重复这样能得到$I^j$上的连续函数</li>
<li>$f_{j-1}$是$f_j$关于$x_j$在$[a_j,b_j]上的积分$ 这样$k$步以后, 得到一个数$f_0$, 我们就把这个数叫做$f$在$I^k$上的积分，并写成下面这种形式$\int_{I^k} f(x) dx$或 $\int_{I^k}f$</li>
<li>感觉上可能与积分的顺序有关， 用$L(f)$表示一个顺序的积分结果$L’(f)$表示另一个顺序的积分结果</li>
</ul>
<p>10.2 定理 对每个$f\in \mathscr{C}(I^k), L(f)&#x3D;L’(f)$, 也就是连续则积分结果不受到积分顺序影响</p>
<ul>
<li>证明 如果 $h(x)&#x3D;h_1(x_1)\cdots h_k(x_k)$ 那么<ul>
<li>$L(h)&#x3D;\prod \int_{a_i}^{b_i} h_i(x_i) d x_i&#x3D;L’(h)$</li>
<li>而这种要求 h是可以拆分成关于 不同入参x_i的函数的乘积的</li>
<li>令$\mathscr{A}$表示一切 这样的h的集合，那么只要$g\in \mathscr{A}$就必定 $L(g)&#x3D;L’(g)$</li>
<li>$\mathscr{A}$又是$I^k$上函数构成的代数，Stone-Weierstrass定理 能用到这上, (这个定理 真的6 让代数 到连续的性质的)<ul>
<li>令$V&#x3D;\prod (b_i-a_i)$ 如果$f\in \mathscr{C}(I^k)$且$\epsilon &gt; 0$ 必有$g\in \mathscr{A}$ 使得$||f-g|| &lt; \epsilon &#x2F;V$<ul>
<li>其中$||f||&#x3D;\max |f(x)|,x\in I^j$, 于是 $L(f-g)| &lt; \epsilon$, $|L’(f-g)| &lt; \epsilon$</li>
<li>又$|L(f)-L’(f)|&#x3D;|L(f-g)+L’(g-f)| &lt; 2\epsilon$ (因为L,L’是 线性的)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>10.3 定义 $R^k$上一个 (实或复)函数f的 支撑集(support of),是使 $f(x)\neq 0$的一切点的集的闭包，如果f是 a continuous function with compact support, 令$I^k$ be any k-cell which contains the support of f and define $\int_{R^k}f&#x3D;\int_{I^k}f$</p>
<ul>
<li>这样定义的积分显然与$I^k$的选择无关，只要嘉定$I^k$包含f的支撑集</li>
<li>（这support，支撑集，意思是 所有使得值非0的点？？？）</li>
<li>现在试图把在$R^k$上的积分的定义，扩充到带有紧支撑集的连续函数（在某种意义下）的极限函数上去，我们不去讨论在什么条件下能这样推广</li>
<li>正当地解决这问题的地方是Lebesgue积分，目前，只描述一个在Stokes 定理中要用到的极简单的例子</li>
</ul>
<p>10.4 例$Q^k$是由$R^k$中 使得$x_1+\cdots+x_k \le 1$并且 $x_i &gt; 0$的一切点 $x&#x3D;(x_1,\cdots,x_k)$组成的k-单形</p>
<ul>
<li>例如$k&#x3D;3$时，$Q^k$是顶点在 $0,e_1,e_2,e_3$的四面体</li>
<li>如果 $f\in \mathscr{C}(Q^k)$,令$Q^k$外都为0来补充定义, 且定义$\int_{Q^k}f&#x3D;\int_{I^k}f$</li>
<li>这里$I^k$是$x_i\in[0,1]$确定的单位立方体</li>
<li>因为f在I^k上可能不连续，所以 上面定义积分右端的存在性需要证明</li>
<li>另外的还需要证明和k个单积分次序无关</li>
<li>$0 &lt; \delta &lt;1$</li>
<li>$\varphi(t)&#x3D;\frac{1-t}{\delta}, t\in (1-\delta,1]$, 左侧为0，右侧为01</li>
<li>$F(x)&#x3D;\varphi(x_1+\cdots+x_k)f(x)$, 那么$F\in \mathscr{C}(I^k)$</li>
<li>令$y&#x3D;(x_1,\cdots,x_{k-1})$有$x&#x3D;(y,x_k)$,对于每个$y\in I^{k-1}$来说，能使$F(y,x_k)\neq f(y,x_k)$的一切$x_k$的集，或者是空集，或者是长度不超过$\delta$的开区间，因为$0\le \varphi \le 1$所以</li>
<li>$|F_{k-1}(y)-f_{k-1}(y)|\le \delta ||f||,y\in I^{k-1}$</li>
<li>当$\delta \to 0$时， 表示$f_{k-1}$为连续函数序列的一致极限，所以$f_{k-1} \in \mathscr{C}(I^{k-1})$ ,而再进一步积分没有什么问题了</li>
<li>$|\int_{I^k} F(x) dx - \int_{I^k}f(x)dx| \le \delta||f||$, 不论这个k个单积分是按什么次序进行的，这总是正确的，因为$F\in \mathscr{C}(I^k)$ 不论怎么变换积分次序 $\int F$不变，因此$\int f$也是这样的</li>
</ul>
<h3 id="本原映射-primitive-mappings"><a href="#本原映射-primitive-mappings" class="headerlink" title="本原映射 primitive mappings"></a>本原映射 primitive mappings</h3><p>下一个目标是定理$10.9$中所说的变量替换公式,为了 容易懂，先来讨论所谓本原映射 及 单位的分割，</p>
<ul>
<li>本原映射 将是我们对于带有可逆导数的$\mathscr{C}‘$映射的局部的形状有个清晰的图景</li>
<li>单位的分割是使我们能在全局中利用局部信息极为有用的方法</li>
</ul>
<p>10.5 G把开集$E\subset R^n$映入$R^n$内,又设有正整数 m 及实函数g(定义域是E)使得</p>
<ul>
<li>$G(x)&#x3D;\sum_{i\neq m} x_i e_i + g(x) e_m, x\in E$</li>
<li>就把G 叫做 本原映射 primitive mappings, 也就是至多改变一个坐标<ul>
<li>需要注意的是：虽然这里改变的是一个坐标，但是这个被改的坐标的函数g的定义域是在E中 而不是$x_m$的范围</li>
</ul>
</li>
<li>因此可以写作 $G(x)&#x3D;x+[g(x)-x_m]e_m$的形状</li>
<li>如果g在 $a\in E$可微,那么G也在a可微, $G’(a)$的矩阵$[\alpha_{ij}]$的第m行是 $(D_1g)(a),\cdots,(D_mg)(a),\cdots,(D_ng)(a)$</li>
<li>当$j\neq m$时 有$\alpha_{jj}&#x3D;1$</li>
<li>当$i\neq j$时$\alpha_{ij}&#x3D;0$</li>
<li>于是$G$在a出的函数行列式 $J_G(a)&#x3D;\det[G’(a)]&#x3D;(D_mg)(a)$</li>
<li>那么 它 非0时 $G’(a)$可逆</li>
</ul>
<p>10.6 定义 在$R^n$上，只把标准基standard basis的某一对成员交换，而其他成员不变的线性算子B叫做 对换 flip</p>
<ul>
<li>例如$R^4$上交换$e_2$和$e_4$,<ul>
<li>$B(\sum x_ie_i)&#x3D;x_1e_1+x_4e_2+x_3e_3+x_2e_4$</li>
</ul>
</li>
<li>也可以看作交换两个坐标，而不是交换基</li>
<li>后面要用到$R^n$中的投影$P_{0\cdots n}$, 其中$P_m(x)&#x3D;\sum_{1}^m x_ie_i$, 那么$P_m$的值域和零空间分别由$e_1,\cdots,e_m$和$e_{m+1},\cdots,e_n$生成</li>
</ul>
<p>10.7 定理 F把开集$E\subset R^n$映入$R^n$内 的$\mathscr{C}’$映射, $0 \in E, F(0)&#x3D;0, F’(0)$可逆</p>
<ul>
<li>那么 在$R^m$中有一个0点的邻域，在其中</li>
<li>$F(x)&#x3D;B_1\cdots B_{n-1} G_n \circ \cdots \circ G_1(x)$ 这个表示法representation能成立valid</li>
<li>其中$G_i$是在0的某领域中的本原$\mathscr{C}’$映射，$G_i(0)&#x3D;0,G_i’(0)$可逆，而每个$B_i$是对换 或者是单位算子（恒等算子）</li>
<li>简单的说 把F局部地表示成 本原映射与对换的复合</li>
<li>证明:<ul>
<li>令$F&#x3D;F_1$ 假设$1\le m \le n-1$而做下面的归纳假定, $V_m$是0的邻域， $F_m\in \mathscr{C}’(V_m), F_m(0)&#x3D;0, F’<em>m(0)$可逆，并且 $P</em>{m-1}F_m(x)&#x3D;P_{m-1}x,x\in V_m$</li>
<li>那么 $F_m(x)&#x3D;P_{m-1}x+\sum_{i&#x3D;m}^n \alpha_i(x)e_i$<ul>
<li>拆解成 前m-1子空间中的向量，和剩余的正交子空间中的向量和</li>
<li>其中$\alpha_i$是$V_m$中的实$\mathscr{C}’$函数</li>
</ul>
</li>
<li>因此$F’<em>m(0)e_m&#x3D;\sum</em>{i&#x3D;m}^n (D_m\alpha_i)(0)e_i$</li>
<li>因为$F’_m(0)$可逆, 左端非0，所以有一个k($m\le k \le n$)使得$(D_m\alpha_n)(0)\neq 0$成立</li>
<li>令$B_m$是交换$e_m$和$e_k$的对换，如果$m&#x3D;k$则是恒等算子</li>
<li>$G_m(x)&#x3D;x+[\alpha_k(x)-x_m]e_m,x\in V_m$</li>
<li>于是$G_m\in \mathscr{C}’(V_m)$, $G_m$是本原的，并且由于$(D_m\alpha_n)(0)\neq 0$，$G_m’(0)$可逆</li>
<li>因此，反函数定理说明，存在着包含0的开集$U_m \subset V_m$,使得$G_m$是把$U_m$映满0的某邻域$V_{m+1}$的1-1映射, 在$V_{m+1}$中$G_m^{-1}$连续可微，</li>
<li>令$F_{m+1}(y)&#x3D;B_mF_m\circ G^{-1}<em>m(y),y\in V</em>{m+1}$</li>
<li>于是$F_{m+1}\in \mathscr{C}’(V_{m+1}),F_{m+1}(0)&#x3D;0$且由链式求导法$F’_{m+1}(0)$可逆,</li>
<li>当$x\in U_m$时,</li>
<li>$P_mF_{m+1}(G_m(x))&#x3D;P_mB_mF_m(x)$</li>
<li>$&#x3D;P_m(P_{m-1}(x)+\alpha_k(x)e_m+\cdots]$ 按照 正交分解</li>
<li>$&#x3D;P_{m-1}x+\alpha_k(x)e_m$ 投影运算规则</li>
<li>$&#x3D;P_mG_m(x)$ 根据$G_m$定义</li>
<li>因此$P_mF_{m+1}(y)&#x3D;P_my,y\in V_{m+1}$</li>
<li>所以用归纳法得证</li>
<li>因为 $B_mB_m&#x3D;I$, 由于$y&#x3D;G_m(x)$而等价于<ul>
<li>$F_m(x)&#x3D;B_mF_{m+1}(G_m(x)), x\in U_m$</li>
</ul>
</li>
<li>如果取 $m&#x3D;1,\cdots,n-1$ 这公式相继推演，可以在0的某个邻域得到</li>
<li>$F&#x3D;F_1&#x3D;B_1F_2\circ G&#x3D;B_1B_2F_3\circ G_2 \circ G_1 &#x3D; \cdots&#x3D;B_1\cdots B_{n-1} F_n \circ G_{n-1}\circ\cdots\circ G_{1}$，其中$F_n$是本原映射</li>
</ul>
</li>
</ul>
<h3 id="单位的分割-partitions-of-unity"><a href="#单位的分割-partitions-of-unity" class="headerlink" title="单位的分割 partitions of unity"></a>单位的分割 partitions of unity</h3><p>10.8 定理, K 是$R^n$的紧子集，{$V_\alpha$}是K的开覆盖, 那么必有函数$\psi_1,\cdots,\psi_s\in \mathscr{C}(R^n)$使得</p>
<ul>
<li>a. $0\le \psi_i \le 1, x\in R^n, 1\le i \le s$</li>
<li>b. 每个$\psi_i$的支撑集属于某个$V_\alpha$<ul>
<li>时常把 说成是{$\psi_i$}是覆盖$V_\alpha$的从属函数组</li>
</ul>
</li>
<li>c. 对于每个$x\in K$来说,$\psi_1(x)+\cdots+\psi_s(x)&#x3D;1$<ul>
<li>把{$\psi_i$} 叫做单位的分割,</li>
</ul>
</li>
<li>推论 如果 $f\in \mathscr{C}(R^n)$并且f的支撑集位于K内，那么<ul>
<li>$f&#x3D;\sum_{i&#x3D;1}^s \psi_i(x)f(x)$</li>
<li>每个$\psi_i f$的支撑集位于某个$V_\alpha$内</li>
<li>证明:<ul>
<li>对于各每个$x\in K$联系上一个指标$\alpha(x)$, 使得$x\in V_{\alpha(x)}$ ,于是存在着中心在x的开球B(x)及W(x)使得</li>
<li>$\overline{B(x)}\subset W(x) \subset \overline{W(x)} \subset V_{\alpha(x)}$</li>
<li>因为K紧，所以在$K$中存在着点$x_1,\cdots,x_s$使得</li>
<li>$K\subset B(x_1)\cup \cdots \cup B(x_s)$，一方面用紧+所有点开来实现有限，另一方面开的选择控制在先给的某个$V_\alpha$的内部</li>
<li>存在函数$\varphi_1,\cdots,\varphi_s \in \mathscr{C}(R^n)$ 使得在 $B(x_i)$上$\varphi(x)&#x3D;1$, 而在$W(x_i)$之外 $\varphi(x_i)&#x3D;0$, 并且在$R^n$上$0\le \varphi_i(x)\le 1$定义$\psi_1&#x3D;\varphi_1$而且当$i&#x3D;1,\cdots,s-1$时 定义, 这里是为了满足b</li>
<li>$\psi_{i+1}&#x3D;(1-\varphi_1)\cdots(1-\varphi_i)\varphi_{i+1}$</li>
<li>性质a,b是显然的（被构造指定了）</li>
<li>$\psi_1+\cdots+\psi_i&#x3D;1-(1-\varphi_1)\cdots(1-\varphi_i)$</li>
<li>因此$\sum_{i&#x3D;1}^s \psi_i(x)&#x3D;1-\prod_{i&#x3D;1}^s(1-\varphi_i(x)),x \in R^n$</li>
<li>如果$x\in K$那么x属于某个$B(x_i)$因此$\varphi_i(x)&#x3D;1$ 而上面$\prod$为0，证明了c</li>
</ul>
</li>
<li>这个证明的，首先紧做出有限邻域，每个邻域B subset W subset某指定V，另一方面 用B内是1，W外是0，之间可以连续，再利用连续的乘积能保持连续</li>
</ul>
</li>
</ul>
<h3 id="变量代换-change-of-variables"><a href="#变量代换-change-of-variables" class="headerlink" title="变量代换 change of variables"></a>变量代换 change of variables</h3><p>仅限于讨论具有 紧支撑集的连续函数；虽然这对于许多应用来说，是限制太多了（习题19~23）</p>
<p>10.9 定理 设T是把开集 $E\subset R^k$映入 $R^k$内的1-1 $\mathscr{C}’$映射, 并且对于一切$x\in E$, $J_T(x)\neq 0$ 如果$f$是$R^k$上的连续函数，它的支撑集是紧的并且位于$T(E)$内，那么</p>
<ul>
<li>$\int_{R^k} f(y)dy&#x3D;\int_{R^k} f(T(x)) |J_T(x)|dx$</li>
<li>回想一下, $J_T$是T的函数行列式， 根据反函数定理， 由题设$J_T(x)\neq 0$推知$T^{-1}$是$T(E)$上的连续函数，这就保证了 上式右端的被积函数在E中取得紧支撑集（定理4.14: f是把紧度量空间X映入Y的连续度量空间f(X)是紧的）</li>
<li>上式中$J_T(x)$的绝对值的出现，要做些解释，就k&#x3D;1的情况二轮，假设T是把$R^1$映满$R^1$的1-1 $\mathscr{C}’$映射。于是$J_T(x)&#x3D;T’(x)$, 如果T是递增的，那么由定理6.19,6.18对于具有紧支撑集的一切连续函数f，有<ul>
<li>$\int_{R^1}f(y)dy&#x3D;\int_{R^1}f(T(x))T’(x)dx$</li>
</ul>
</li>
<li>如果T是递降的,$T’(x) &lt; 0$，这时如果f在它的支撑集内部是正的话，那么上式左端是正的而右端是负的，所以加绝对值才能得到正确的等式</li>
<li>这问题在于，我们考虑的积分是$R^k$上的一个子集的积分，而我们却没有给这些子集配置方向或定向。等到在曲面上对微分形式积分时，将采用其他的观点</li>
<li>证明：<ul>
<li>如果T是 本原$\mathscr{C}’$映射（见定义10.5），那么上式正确</li>
<li>如果T是 只交换两个坐标的线性映射，上式正确</li>
<li>如果定理对于变换P，Q正确并且S(x)&#x3D;P(Q(x)) 那么</li>
<li>$\int f(z)dz&#x3D;\int f(P(y)) |J_P(y)|dy$</li>
<li>$&#x3D;\int f(P(Q(x))) |J_P(Q(x))| |J_Q(x)|dx$</li>
<li>$&#x3D;\int f(S(x)) |J_S(x)| dx$</li>
<li>因为根据行列式的乘法定理及链导法，可以得到<ul>
<li>$J_P(Q(x))J_Q(x)&#x3D;\det P’(Q(x))\det Q’(x)$</li>
<li>$&#x3D;\det P’(Q(x))Q’(x)$</li>
<li>$&#x3D;\det S’(x)&#x3D;J_s(x)$</li>
<li>所以对于 复合函数也正确</li>
</ul>
</li>
<li>对于每个点$a\in E$有邻域$U\subset E$在U中<ul>
<li>$T(x)&#x3D;T(a)+B_1\cdots B_{k-1}G_k\circ G_{k-1}\circ\cdots\circ G_1(x-a)$ 根据（10.7）</li>
<li>令$V&#x3D;T(U)$那么就当f的支撑集在V中时成立，所以</li>
<li>每个点$y\in T(E)$必在这样的开集$V_y\subset T(E)$里，使得对于支撑集在$V_y$中的一切连续函数f， 上式成立</li>
<li>现令f是具有紧支撑集$K \subset T(E)$的连续函数，因为{$V_y$}覆盖了K，定理10.8的推论说明$f&#x3D;\sum \psi_i f$这里每个$\psi_i$连续，并且每个$\psi_i$的支撑集在某个$V_y$内，这样对于每个$\psi_i f$来说，上式成立，因此有限和也成立</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="微分形式-differential-forms"><a href="#微分形式-differential-forms" class="headerlink" title="微分形式 differential forms"></a>微分形式 differential forms</h3><p>n维 微积分基本定理需要它，通常定理叫做stokes定理，Stokes定理的原始形式，起因于向量分析对电磁学的应用，而且是用向量场vector field的环流curl来叙述的。Green定理及散度divergence定理是另外的特殊情形，这些论题在本章末有简短讨论</p>
<p>stokes定理的稀有特色，在于它只有一个难点，那就是叙述这个定理时，必须用到一些定义的精心制做的结构，这些定义涉及微分形式，它们的倒数，边界以及指向。</p>
<p>直到现在，我们只讨论了开集上定义的多变量函数的倒数，这样做是为了避免在边界点上所遇到的困难，但是现在在紧集上讨论可微函数才方便，所以采取下面的约定</p>
<ul>
<li>说f是紧集$D\subset R^k$到$R^n$内的$\mathscr{C}’$映射(或$\mathscr{C}’’$映射)，就表示存在着开集$W\subset R^k$到$R^n$的$\mathscr{C}’$映射(或$\mathscr{C}’’$映射)g, 使得$D\subset W$并且当$x\in D$时$g(x)&#x3D;f(x)$ </li>
<li>也就是 有包裹的开集W，而在D中是一样的</li>
</ul>
<p>10.10 定义 E是$R^n$中的开集,E中的k-surface曲面 是从紧集$D\subset R^k$到$E$内的映射$\Phi$,(勘误 这里中文书写了个$E^n$)</p>
<ul>
<li>D叫做Phi的参数域, D中的点记成$u&#x3D;(u_1,\cdots,u_k)$</li>
<li>我们限定D或为k-方格, 或k-单形$Q^k$这种简单情况，理由是我们以后要在D上积分，但是还没有讨论在$R^k$的更复杂的子集上的积分，我们将看到，对D的这个限制（今后不再每次明说），在微分形式的最后理论中不会失去重大的一般性no significant loss of generality in the resulting theory of differential forms</li>
<li>我们强调, E中的k-surface曲面的定义是到E中的映射，而不是E的子集，这与我们早先对于曲线的定义(定义6.26)是一致的，其实1-曲面刚好与连续可微曲线是一样的</li>
</ul>
<p>10.11 定义 设E是$R^n$中的开集. E中的 $k\ge 1$ 次微分形式，简称为E中的(k-form in E)是一个用和式$\omega &#x3D;\sum a_{i_1\cdots i_k} (x) dx_{i_1} \cdots d x_{i_k}$, (指标$i_j$各自从1到n独立变换) 作符号表示的函数，它给E中的每个k-surface曲面$\Phi$ 按照规则</p>
<ul>
<li>$\int_{\Phi} \omega &#x3D; \int_D \sum a_{i_1\cdots i_k}(\Phi(u)) \frac{\partial(x_{i_1},\cdots,x_{i_k})}{\partial(u_1,\cdots,u_k)} du$<ul>
<li>是符号$\int_{\Phi}\omega$的定义</li>
</ul>
</li>
<li>规定一个数$\omega(\Phi)&#x3D;\int_{\Phi} \omega$</li>
<li>这里D是$\Phi$的参数域，$\frac{\partial(x_{i_1},\cdots,x_{i_k})}{\partial(u_1,\cdots,u_k)}$是Jacobi行列式</li>
<li>（勘误：中文书上两个地方都写成$a_{i_1}\cdots a_{i_k}$, 这里后面并没有a，因为这里意义是 下标i序列确定的函数a，同时省略号应该是下标级别的不是和a同级别的，这里英文书上都是正确的）</li>
<li>假定$a_{i_1\cdots i_k}$都是E内的实连续函数，如果$\phi_1,\cdots,\phi_n$是$\Phi$的分量, 上式中的函数行列式是由$(u_1,\cdots,u_k)\to (\phi_{i_1}(u),\cdots,\phi_{i_k}(u))$所确定的</li>
<li>像定义10.1中 右端是在D上的积分</li>
<li>如果 函数$a_{i_1 \cdots i_k}$（中文书不对）都属于$\mathscr{C}’$或$\mathscr{C}’’$，那么就说$k-形式$\omega$属于$\mathscr{C}’$或$\mathscr{C}’’$类</li>
<li>E中的 0-form 规定是E中的一个连续函数</li>
<li>这里出现了 $\wedge$也就是$wedge$, 它和 dxdy…的区别是 有顺序性，这个顺序会影响符号，从定义的角度来看，它是一个整体，因为左边就是Jacobi行列式的形式，刚好和行列式的换行会换符号有了联系</li>
</ul>
<p>10.12 例</p>
<ul>
<li>a. 令$\gamma$是$R^3$中的1-曲面($\mathscr{C}’$类曲线)，参数域是$[0,1]$，用$(x,y,z)$代替$(x_1,x_2,x_3)$ 并且置 $\omega&#x3D;xdy+ydx$<ul>
<li>那么$\int_{\gamma}\omega&#x3D;\int_0^1 \gamma_1(t)\gamma_2’(t)+\gamma_2(t)\gamma_1’(t)dt&#x3D;\gamma_1(1)\gamma_2(1)-\gamma_1(0)\gamma_2(0)$</li>
<li>这个例子里，$\int_\gamma \omega$只依赖于 起点$\gamma(0)$与终点$\gamma(1)$,特别的，如果是闭曲线，那么$\int_{\gamma} \omega &#x3D; 0$, 下面将看到，对任何恰当1-form 的$\omega$ 都是对的</li>
<li>1-form的积分时常叫作 线积分</li>
</ul>
</li>
<li>b. <ul>
<li>固定$a&gt;0,b&gt;0$ 定义$\gamma(t)&#x3D;(a\cos t,b\sin t),0 \le t \le 2\pi$</li>
<li>于是$\gamma$是$R^2$中的闭曲线，它的值域是一椭圆</li>
<li>于是$\int_{\gamma} x d y &#x3D; \int_0^{2\pi} ab\cos^2 t dt &#x3D; \pi ab$<ul>
<li>这是$\gamma$所 围成bounded区域的面积,这是Green定理的特殊情形</li>
</ul>
</li>
<li>$\int_{\gamma} y dx&#x3D;-\int_{0}^{2\pi} ab \sin^2 t dt &#x3D; -\pi ab$</li>
</ul>
</li>
<li>c. D是由 $0\le r \le 1,0\le \theta \le \pi, 0 \le \varphi \le 2\pi$确定的3-方格, 定义$\Phi(r,\theta,\varphi)&#x3D;(x,y,z)$这里<ul>
<li>$x&#x3D;r\sin \theta \cos \varphi$</li>
<li>$y&#x3D;r\sin \theta \sin \varphi$</li>
<li>$z&#x3D;r\cos \theta$</li>
<li>于是$J_{\Phi}(r,\theta,\varphi)&#x3D;\partial(x,y,z)&#x2F;\partial(r,\theta,\varphi)&#x3D;r^2\sin \theta$</li>
<li>$\int_{\Phi} dx\wedge dy\wedge dz&#x3D;\int_D J_{\Phi}&#x3D;\frac{4\pi}{3}$</li>
<li>注意这里$\Phi$把D映满$R^3$的闭单位球，在D的内部，这映射是1-1的（但是有些边界点要被 Phi 等同起来），积分 等于$\Phi(D)$的tiji</li>
</ul>
</li>
<li>总结<ul>
<li>$\omega$写的都是 外微分形式（exterior differential forms）有关</li>
<li>例如 $f(x_1,x_2)&#x3D;x_1+2x_2$, $\omega&#x3D;df&#x3D;\frac{\partial{f}}{\partial{x_1}}dx_1+\frac{\partial{f}}{\partial x_2}dx_2&#x3D;dx_1+dx_2$</li>
<li>二维面积 &#x3D; $\int_D dx_{1}\wedge dx_{2}$</li>
<li>幂零性<ul>
<li>例如 $f&#x3D;x_1x_2$(0-forms 即函数)<ul>
<li>$df&#x3D;x_2dx_1+x_1dx_2$</li>
<li>$d(df)&#x3D;d(x_2dx_1+x_1dx_2)&#x3D;(dx_2\wedge dx_1)+(dx_1\wedge dx_2)&#x3D;0$</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>10.13 初等性质 Elementary properties, 设$\omega,\omega_1,\omega_2$是E中的k-form, 当且仅当对于E中的每个k-曲面$\Phi$, $\omega_1(\Phi)&#x3D;\omega_2(\Phi)$时，就写成$\omega_1&#x3D;\omega_2$，特别地,$\omega&#x3D;0$表示对于E中每个 k-surface $\Phi$都有$\omega(\Phi)&#x3D;0$, </p>
<ul>
<li>数乘: c是实数, 那么$c\omega$是由$\int_{\Phi} c\omega&#x3D;\int_{\Phi} c\omega$定义的k-form<ul>
<li>特殊的 -1 或者说逆元素，$-\omega$是由$\int_{\Phi} -\omega&#x3D;-\int_{\Phi} \omega$定义的k-form</li>
</ul>
</li>
<li>和: $\omega_1+\omega_2$是由$\int_{\Phi} \omega_1+\omega_2&#x3D;\int_{\Phi} \omega_1+\int_{\Phi} \omega_2$定义的k-form</li>
<li>考虑k-form, $\omega&#x3D;a(x)d x_{i_1}\wedge \cdots \wedge d x_{i_k}$,<ul>
<li>令$\bar{\omega}$是交换两个 subscripts得到k-form</li>
<li>把这个操作和行列式交换两行联系起来，有$\bar{\omega}&#x3D;-\omega$，对于一切i和j来说， anticommutative relation: $d_{x_i}\wedge d_{x_j}&#x3D;-d_{x_j}\wedge d_{x_i}$<ul>
<li>在研究微分形式时，要格外注意减号的 原因</li>
</ul>
</li>
<li>于是$d x_i \wedge  d x_i&#x3D;0$</li>
<li>换句话说，如果$\omega$ 由上式表达出来，只有下标两两不同all distinct 才可能非0</li>
<li>因此 如果 $k &gt; n$那么在$R^n$的任何开子集中，就只有0 是k-form</li>
</ul>
</li>
</ul>
<p>10.14 基本basic k-forms </p>
<ul>
<li>设$i_1,\cdots,i_k$都是正整数，且$1\le i_1 &lt; i_2 &lt; \cdots &lt; i_k \le n$又设I是k元有序组，简称k-序组，那么我们称I为递增k-指标(increasing k-index), 简单记法 $dx_I&#x3D;dx_{i_1}\wedge \cdots \wedge dx_{i_k}$</li>
<li>这些形式$d x_{I}$叫作$R^n$中的基本k-forms</li>
<li>恰好存在 $\binom{n}{k}$个基本k-forms, (然而我们用不着这个事实)</li>
<li>更重要的是，每个k-forms 能用 基本k-forms 表示出来，有限次两两交换就能变成递增k-指标 J，所以$d x_{j_1}\wedge \cdots \wedge d x_{j_k}&#x3D;\epsilon(j_1,\cdots,j_k)dx_{I}$, 这里$\epsilon(j_1,\cdots,j_k)$是符号函数，它等于1或-1 等于-1的对换次数(逆序对数)幂</li>
<li>有了$\omega$标准表示$\omega&#x3D;\sum_I b_I(x)dx_I$</li>
</ul>
<p>10.15 定理 $\omega&#x3D;\sum_I b_I(x)dx_I$</p>
<ul>
<li>是开集E中的k-form 的标准表示法， 如果在$E$中$\omega&#x3D;0$, 那么 对于每个 递增k-指标I, 以及每个$x\in E$都有$b_I(x)&#x3D;0$</li>
<li>证明:<ul>
<li>假定某个 $v\in E$ 以及某个递增k-指标 J, 使得$b_J(v) &gt; 0$ 来达到矛盾，因为$b_J$连续，所以存在着$h &gt; 0$，它保证坐标满足$|x_i-v_i| \le h$ 的一切$x \in R^n$使得$b_J(x) &gt; 0$, 令D是$R^k$中的这样一个k-方格，当且晋档$u_r \le h$时, $u \in D$ </li>
<li>定义$\Phi(u)&#x3D;v+\sum_{r&#x3D;1}^k u_re_{j_r},u\in D$ 专门设计</li>
<li>于是$\Phi$是E中的k-surface,它的参数域是D，并且对于每个$u\in D$来说$b_J(\Phi(u)) &gt; 0$我们断言$\int_{\Phi} \omega &#x3D; \int_D b_J(\Phi(u)) du$, 因为右端是正的，$\Phi(\omega)$，所以产生矛盾</li>
<li>要证明上面的断言等号，根据$\Phi$的定义$\partial(x_{i_1},\cdots,x_{i_k})&#x2F;\partial(u_1,\cdots,u_k)&#x3D;1$ 代入到$\int_{\Phi} \omega$的定义中</li>
<li>对于其余的 递增k-指标$I\neq J$来说，函数行列式为0，因为它至少有一列元素都是零</li>
<li>这里的想法就是 $\int_{\Phi}\omega$的定义，通过设计$\Phi$让只有J的行列式非零，其它行列式都为0，这样 $\int_{\Phi}\omega &#x3D;\int_D b_J(\Phi(u))du$, 另一方面 通过连续控制右边正，左边根据题目是0，可以得出矛盾</li>
<li>这也说明了表示方法的唯一</li>
</ul>
</li>
</ul>
<p>10.16 基本k-forms的积products</p>
<ul>
<li>I,J是两个 递增p,q-指标</li>
<li>$R^n$中的与$dx_I,dx_J$对应的基本形式的积，是$R^n$中的(p+q)-forms, 用符号$dx_I\wedge dx_J$表示<ul>
<li>定义为$&#x3D;(dx_{i_1}\wedge\cdots\wedge dx_{i_p})\wedge (dx_{j_1}\wedge\cdots\wedge dx_{j_q})$</li>
<li>如果I,J有公共元素，显然结果为0</li>
<li>如果没有公共元素，把$I\cup J$的成员按递增的顺序排列，而将得到的(p+q)-index 写作 $[I,J]$, 那么 $dx_{[I,J]}$是基本(p+q)-forms</li>
<li>断定$dx_I\wedge dx_J&#x3D;(-1)^{\alpha} dx_{[I,J]}$<ul>
<li>这里$\alpha$是$j_t-i_s &lt; 0$的个数(勘误这里中文书上是j_s), 本质上还是逆序对个数</li>
<li>证明: 逐个右移动，逆序对奇偶性&#x3D;两两交换次数奇偶性</li>
</ul>
</li>
</ul>
</li>
<li>性质 结合率<ul>
<li>$(dx_I\wedge dx_J)\wedge dx_K&#x3D;dx_I\wedge(dx_J\wedge dx_K)$</li>
<li>证明: 逐个右移动，逆序对奇偶性&#x3D;两两交换次数奇偶性</li>
</ul>
</li>
</ul>
<p>10.17 乘法</p>
<ul>
<li>$w&#x3D;\sum_I b_I(x) dx_I,\lambda&#x3D;\sum_J c_J(x)d x_J$</li>
<li>定义 乘积为$w \wedge \lambda \sum_{I,J} b_I(x)c_J(x) dx_I\wedge dx_J$</li>
<li>性质<ul>
<li>分配律<ul>
<li>$(\omega_1+\omega_2)\wedge \lambda&#x3D;\omega_1\wedge \lambda+\omega_2\wedge \lambda$</li>
<li>$\omega \wedge (\lambda_1+\lambda_2)&#x3D;\omega \wedge \lambda_1+\omega \wedge \lambda_2$</li>
</ul>
</li>
</ul>
</li>
<li>对于0-forms的f有结合率<ul>
<li>$f\omega &#x3D; \omega f &#x3D; \sum_I f(x) b_I(x)dx_I$</li>
<li>当f是0-forms时，习惯写成$f\omega$不用加中间的$\wedge$</li>
</ul>
</li>
</ul>
<p>10.18 微分 设$\omega$是某开集$E\subset R^n$中的$\mathscr{C}’$类k-form, 现定义微分算子d, 它给每个$\omega$联系上一个(k+1)-forms</p>
<ul>
<li>E中的$\mathscr{C}’$的0-form 恰好是实函数$f\in \mathscr{C}’(E)$</li>
<li>定义 $df&#x3D;\sum_{i&#x3D;1}^n (D_if)(x)dx_i$</li>
<li>如果$\omega&#x3D;\sum b_I(x)dx_I$是k-froms的标准表示, 而对于每个 递增k-指标I, $b_I$是$\mathscr{C}’$类函数，那么<ul>
<li>定义$d\omega&#x3D;\sum_I (db_I(x)) \wedge dx_I$</li>
</ul>
</li>
</ul>
<p>10.19 例 E是$R^n$中的开集, $f\in \mathscr{C}’(E)$, $\gamma$是E中的连续可微函数，其参数域是$[0,1]$,</p>
<ul>
<li>$\int_\gamma df&#x3D;\int_0^1 \sum_{i&#x3D;1}^n (D_if)(\gamma(t))\gamma’_i(t)dt$</li>
<li>根据链导法， $&#x3D;\int_0^1 (f\circ \gamma)’(t)dt&#x3D;f(\gamma(1))-f(\gamma(0))$,</li>
<li>于是对于具有相同始点和相同终点的一切$\gamma$都是相同的，</li>
<li>也注意到， 1-form的xdy不是任何0-form的导数，因为 $d(xdy)&#x3D;dx\wedge dy\neq 0$</li>
</ul>
<p>10.20 定理 设$\omega,\lambda$分别是$R^n$中的开集E中的$\mathscr{C}’$类k-form, m-form 那么</p>
<ul>
<li>$d(\omega \wedge \lambda) &#x3D; (d\omega) \wedge \lambda + (-1)^k \omega \wedge d\lambda&#x3D;0$</li>
<li>如果 $\omega$在$E$中属于$\mathscr{C}’’$类，那么$d^2 \omega &#x3D;0$</li>
<li>证明:<ul>
<li>$\omega&#x3D;fdx_I,\lambda&#x3D;g dx_J$ (因为有线性的可加性，所以研究单个)<ul>
<li>$\omega \wedge \lambda &#x3D; fgdx_I \wedge dx_J$</li>
<li>$d(\omega \wedge \lambda) &#x3D; d(fgdx_I \wedge dx_J)&#x3D;(-1)^\alpha d(fgdx_{[I,J]})$</li>
<li>$&#x3D;(-1)^\alpha (fdg+gdf) \wedge dx_{[I,J]})$</li>
<li>$&#x3D;(fdg+gdf) \wedge dx_I \wedge dx_J$</li>
<li>$&#x3D;(df \wedge dx_I)\wedge (gdx_J) + (-1)^k(fdx_I) \wedge (dg \wedge dx_J)$, 因为交换1-form 和k-form所以(-1)^k</li>
<li>$&#x3D;(d\omega)\wedge (\lambda) + (-1)^k(\omega) \wedge (\lambda)$</li>
<li>得证</li>
</ul>
</li>
<li>0-form的 $f\in \mathscr{C}’’$<ul>
<li>$d^2f&#x3D;d(\sum_{j&#x3D;1}^n (D_jf)(x)dx_j)$</li>
<li>$&#x3D;\sum_{j&#x3D;1}^n d(D_jf) \wedge dx_j$</li>
<li>$&#x3D;\sum_{i,j} (D_{ij}f)(x) dx_i \wedge dx_j$<ul>
<li>因为 定理9.41, $D_{ij}&#x3D;D_{ji}$ 以及$dx_i\wedge dx_j&#x3D;-dx_i\wedge dx_j$, 所以$d^2f&#x3D;0$</li>
</ul>
</li>
<li>$\omega &#x3D; fdx_I$,那么$d\omega&#x3D;(df)\wedge dx_I$<ul>
<li>$d(dx_I) &#x3D; (d1)\wedge dx_I&#x3D;0 \wedge dx_I&#x3D;0$</li>
<li>$d^2f &#x3D; 0$</li>
<li>所以 $d^2\omega &#x3D; (d^2f)\wedge dx_I+df \wedge d^2x_I&#x3D;0+0&#x3D;0$</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>10.21 变量代换, 设E是$R^n$中的开集, T是E到开集$V\subset R^m$内的$\mathscr{C}’$映射,$\omega$是V中的k-形式, 它的标注表示是$\omega&#x3D;\sum_I b_I(y) dy_I$</p>
<ul>
<li>我们用y表示V中的点，x表示E中的点</li>
<li>令$t_1,\cdots,t_m$是T的分量, 如果$y&#x3D;(y_1,\cdots,y_m)&#x3D;T(x)$, 那么$y_i&#x3D;t_i(x)$</li>
<li>这样每个$dt_i&#x3D;\sum_{j&#x3D;1}^{n} (D_jt_i)(x) dx_j$ 是E中的一个1-form</li>
<li>映射T把$\omega$变成$E$中的k-form <ul>
<li>定义 $\omega_T&#x3D;\sum_I b_I(T(x)) dt_{i_1}\wedge \cdots \wedge dt_{i_k}$, 每个I是 递增k-指标</li>
</ul>
</li>
</ul>
<p>10.22 定理, 用10.21中 变量代换 里的 E,T,令$\omega,\lambda$分别为$V$中的k-forms, m-forms那么</p>
<ul>
<li>(a).k&#x3D;m时 $(\omega+\lambda)_T&#x3D;\omega_T+\lambda_T$</li>
<li>(b).$(\omega \wedge \lambda)_T &#x3D; \omega_T \wedge \lambda_T$</li>
<li>(c).当$\omega$属于$\mathscr{C}’$类，T属于$\mathscr{C}’’$类时, $d(\omega_T)&#x3D;(d\omega)_T$</li>
<li>证明<ul>
<li>从定义可以直接得到(a)</li>
<li>$(dy_{i_1}\wedge \cdots \wedge dy_{i_r})<em>T&#x3D;dt</em>{i_1}\wedge \cdots \wedge dt_{i_r}$ 与 i是否递增无关，可证 (b)</li>
<li>如果f是$V$中的 $\mathscr{C}’$类的0-form, 那么<ul>
<li>处理0-form</li>
<li>$f_T(x)&#x3D;f(T(x)),df&#x3D;\sum_i (D_if)(y)dy_i$</li>
<li>链导法:<ul>
<li>$d(f_T)&#x3D;\sum_j (D_jf_T)(x)dx_j$</li>
<li>$&#x3D;\sum_j \sum_i (D_jf)(T(x)) \cdot (D_jt_i)(x)(x)dx_j$</li>
<li>$&#x3D;\sum_i (D_if)(T(x)) dt_i$</li>
<li>$&#x3D;(df)_T$</li>
</ul>
</li>
</ul>
</li>
<li>处理 系数为1的 k-form</li>
<li>如果 $dy_I&#x3D;dy_{i_1}\wedge \cdots \wedge dy_{i_k}$那么$(dy_I)<em>T&#x3D;dt</em>{i_1}\wedge \cdots \wedge dt_{i_k}$, <ul>
<li>因为 $d((dy_I)_T)&#x3D;d^2 y_I &#x3D; 0$</li>
<li>假定$\omega&#x3D;fdy_I$于是<ul>
<li>$\omega_T&#x3D;f_T(x) (dy_I)_T$, 也是10.21的另一种写法 </li>
<li>$d(\omega_T)&#x3D;d(f_T) \wedge (dy_I)_T$, 根据10.20 和 上面&#x3D;0</li>
<li>$&#x3D;(df)_T\wedge (dy_I)_T$, 利用0-form的结果</li>
<li>$&#x3D;((df)\wedge dy_I )_T$, 也是10.21的另一种写法</li>
<li>$&#x3D;(d\omega )_T$, 替换</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>总结一下, $T: U\mapsto V, \omega(y) \in V,\omega$是k-form, 然后用T的变换来替换, 也就是$x\in U$替换$y\in V$, 来得到一个U中的k-form记作$\omega_T$, 这里$U,V$ 都是$R^n,R^m$中的开集。用到的限制有 $T$是$\mathscr{C}’$, 然后如果要计算 微分，先微再换 &#x3D; 先换再微，但需要额外的$\omega$是$\mathscr{C}’$,$T$是$\mathscr{C}’’$, （其实下个定理简单的描述了这个内容）</li>
</ul>
<p>10.23 定理 也就是研究替换的复合</p>
<ul>
<li>设T是开集$E\subset R^n$到开集$V\subset R^m$内的$\mathscr{C}’$映射, S是$V$到开集$W\subset R^p$内的$\mathscr{C}’$映射, $\omega$是$W$中的k-form, 它使 $\omega_S$是V中的k-form，并且$(\omega_S)<em>T$ 及 $\omega</em>{ST}$都是E中的k-form, 这里ST由 $(ST)(x)&#x3D;S(T(x))$定义，那么</li>
<li>$(\omega_S)<em>T&#x3D;\omega</em>{ST}$</li>
<li>证明:<ul>
<li>如果 $\omega$及$\lambda$都是W中的 forms</li>
<li>那么 $((\omega \wedge \lambda)_S)_T &#x3D; (\omega_S\wedge\lambda_S)_T&#x3D;(\omega_S)_T\wedge (\lambda_S)_T$</li>
<li>且$(\omega \wedge \lambda)<em>{ST}&#x3D;\omega</em>{ST} \wedge \lambda_{ST}$</li>
<li>这两个式子的右侧如果 每个相等，那么这两个等式相等，那它们的$\wedge$后$_{ST}$和$(_S)_T$也相等</li>
<li>所以 研究1-form和0-form的单个$\omega$<ul>
<li>0-form 就是普通的代换 显然</li>
<li>研究1-form</li>
<li>$t$是T中分量</li>
<li>$s$是S中分量</li>
<li>$r$是ST中分量</li>
<li>如果$\omega &#x3D; dz_q$<ul>
<li>$\omega_S&#x3D;ds_q&#x3D;\sum_j (D_js_q)(y)dy_j$</li>
<li>$(\omega_S)<em>T&#x3D;\sum</em>{j} (D_js_q)(T(x))dt_j$</li>
<li>$&#x3D;\sum_{j} (D_js_q)(T(x)) \sum_i (D_it_j)(x) dx_i$ 链导法</li>
<li>$&#x3D;\sum_{i} (D_i r_q)(x) dx_i$</li>
<li>$&#x3D;dr_q$</li>
<li>$&#x3D;\omega_{ST}$</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>10.24 定理 设$\omega$是 开集$E\subset R^n$中的k-form, $\Phi$是E中的k-surface, 它的参数域$D\subset R^k$, $\Delta$是$R^k$中的参数域为$D$并且是用$\Delta(u)&#x3D;u(u\in D)$确定的k-surface 那么</p>
<ul>
<li>$\int_{\Phi} \omega &#x3D; \int_{\Delta} \omega_{\Phi}$</li>
<li>证明:<ul>
<li>对于 $\omega&#x3D;a(x)dx_{i_1}\wedge \cdots \wedge dx_{i_k}$</li>
<li>如果$\phi_1,\cdots,\phi_n$是$\Phi$的分量，那么</li>
<li>$\omega_{\Phi}&#x3D;a(\Phi(u)) d\phi_{i_1}\wedge \cdots \wedge d\phi_{i_k}$</li>
<li>要证明本定理, 只需要能够证明 $d\phi_{i_1}\wedge \cdots \wedge d\phi_{i_k} &#x3D; J(u)du_1\wedge \cdots \wedge du_k$<ul>
<li>这里$J(u)$是Jacobi行列式$&#x3D;\partial(\phi_{i_1},\cdots,\phi_{i_k})&#x2F;\partial(u_1,\cdots,u_k)$</li>
<li>$\int_{\Phi}\omega &#x3D; \int_D a(\Phi(u))J(u)du$</li>
<li>$&#x3D;\int_{\Delta} a(\Phi(u)) J(u) du_1\wedge \cdots \wedge du_k&#x3D;\int_{\Delta} \omega_{\Phi}$</li>
</ul>
</li>
<li>证明：<ul>
<li>令 $[A]$ 是k行k列矩阵 , 阵元$\alpha(p,q) &#x3D; (D_q\phi_{i_p})(u)$</li>
<li>那么$d\phi_{i_p}&#x3D;\sum_{q} \alpha(p,q) du_q$</li>
<li>因而$d\phi_{i_1}\wedge \cdots \wedge d\phi_{i_k} &#x3D; \sum \prod \alpha(j,q_j) du_{q_1}\wedge \cdots \wedge du_{q_k}$</li>
<li>由于$du_{q_1}\wedge \cdots \wedge du_{q_k}&#x3D;s(q_1,\cdots,q_k) du_1\wedge \cdots \wedge du_k$</li>
<li>$d\phi_{i_1}\wedge \cdots \wedge d\phi_{i_k} &#x3D; \det[A] du_1\wedge \cdots \wedge du_k$</li>
<li>其中$J(u)&#x3D;\det[A]$</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>10.25 定理 设T是开集,$E\subset R^n$到开集$V\subset R^m$内的$\mathscr{C}’$映射，$\Phi$是E中的k-surface, 它的参数域是$D\subset R^k$, $\omega$是V中的k-form, 那么 </p>
<ul>
<li>$\int_{T\Phi}\omega &#x3D; \int_{\Phi} \omega_T$</li>
<li>证明:<ul>
<li>$\int_{T\Phi}\omega &#x3D;\int_{\Delta} \omega_{T\Phi} &#x3D; \int_{\Delta} (\omega_T)<em>\Phi &#x3D; \int</em>{\Phi} \omega_T$</li>
<li>在$T\Phi$ 映射下 微分形式$\omega$的积分 </li>
<li>其值域中  微分形式 $\omega$ 进行$T\Phi$变量代换的积分</li>
<li>其值域中  微分形式 $(\omega_T)$ 进行$\Phi$变量代换积分</li>
<li>在$\Phi$变换下 微分形式 $\omega_T$的积分</li>
</ul>
</li>
</ul>
<h3 id="单形与链-simplexes-and-chains"><a href="#单形与链-simplexes-and-chains" class="headerlink" title="单形与链 simplexes and chains"></a>单形与链 simplexes and chains</h3><p>10.26 affine simplexes仿射单形，设$f$是把向量空间X映入向量空间Y的映射，如果 f-f(0)是线性的，就称f为仿射映射 affine,换句话说，就是要求存在某个$A\in L(X,Y)$使得</p>
<ul>
<li>$f(x) &#x3D; f(0)+Ax$</li>
<li>如此，要确定$R^k$到$R^n$中的仿射映射affine mapping，只要知道$f(0)$及$f(e_i),1\le i\le k$就行了, 这里 $e_i$是$R^k$中的标准基</li>
<li>定义 标准单形 standard simplex $Q^k$ 为由形如 $u&#x3D;\sum_{i&#x3D;1}^k \alpha_ie_i$ ,而使$\alpha_i \ge 0, 并且$\sum \alpha_i \le 1$的一切$u$组成的集合,</li>
<li>设 $p_0,\cdots,p_k$是$R^n$中的点，所谓 有向oriented 仿射affine k-simplex $\sigma &#x3D;[p_0,\cdots,p_k]$ 是用$Q^k$作为参数域，由仿射映射</li>
<li>$\sigma(\alpha_1e_1+\cdots+\alpha_ke_k)&#x3D;p_0+\sum_{i&#x3D;1}^k \alpha_i(p_i-p_0)$ 给出的$R^n$中的k-surface</li>
<li>注意$\sigma$的本质是$\sigma(0)&#x3D;p_0,\sigma(e_i)&#x3D;p_i$</li>
<li>$\sigma(u)&#x3D;p_0+Au,u\in Q^k,A\in L(R^k,R^n)$</li>
<li>$Ae_i&#x3D;p_i-p_0$</li>
<li>称$\sigma$有向的, 如果$\bar{\sigma}&#x3D;[p_{i_0},\cdots,p_{i_k}]$<ul>
<li>$\bar{\sigma}&#x3D;s(i_0,\cdots,i_k) \sigma$</li>
<li>s&#x3D;1 则同向，s&#x3D;-1反向，注意没有定义 单行的向，定义的是两个单行之间可能存在的关系</li>
</ul>
</li>
<li>当n&#x3D;k时，若A可逆，那么根据det A来定义正向，或负的<ul>
<li>特别的恒等映射 $[0,e_1,\cdots,e_k]$是正向的</li>
</ul>
</li>
<li>特别的 0-单形 定义为有正负号的一个点，写成$\sigma&#x3D;+p_0$或$\sigma&#x3D;-p_0$<ul>
<li>$\int_{\sigma} f&#x3D;\epsilon f(p_0)$, 其中$\epsilon$是上面的+1&#x2F;-1符号</li>
</ul>
</li>
</ul>
<p>10.27 定理 设$\sigma$是开集$E\subset R^n$中的有向仿射k-simplex, $\bar{\sigma}&#x3D;\epsilon \sigma$, 那么 对于E中每个 k-form $\omega$来说</p>
<ul>
<li>$\int_{\bar{\sigma}} \omega &#x3D; \epsilon \int_{\sigma} \omega$</li>
<li>证明:<ul>
<li>对于k&#x3D;0, 与次序无关显然</li>
<li>对于$k\ge 1$, 设$\bar{\sigma}$是交换$p_0,p_j,j\in [1,k]$得到,于是$\epsilon &#x3D; -1$,<ul>
<li>$\bar{\sigma}(u)&#x3D;p_j+Bu, u \in Q^k$<ul>
<li>其中$Be_j&#x3D;p_0-p_j$</li>
<li>$Be_i&#x3D;p_i-p_j,i\neq j$</li>
</ul>
</li>
<li>$Ae_i&#x3D;x_i&#x3D;p_i-p_0, i \in[1,k]$</li>
<li>$Ae_0&#x3D;p_0$</li>
<li>那么B的列向量<ul>
<li>$Be_i&#x3D;p_i-p_j&#x3D;(p_i-p_0)-(p_j-p_0)&#x3D;x_i-x_j,i\neq j, i\in [1,k]$</li>
<li>$Be_j&#x3D;p_0-p_j&#x3D;-x_i$</li>
<li>所以 根据 行列式运算规则,B的列 可以变换得和A的列只有j列取反，那么$\det B&#x3D;-\det A$</li>
</ul>
</li>
</ul>
</li>
<li>那么对于一般的， 总可以拆解成 反复的和$p_0$交换，因此得证</li>
</ul>
</li>
</ul>
<p>10.28 仿射链 affine chains, An affine k-chain $\Gamma$ in an open set $E \subset R^n$ is a collection of finitely many oriented affine k-simplexes $\sigma_1,\cdots, \sigma_r$ in E,这些 k-单形 不必各不相同，于是, 一个 k-单形 可以在$\Gamma$ 中重复出现</p>
<ul>
<li>设$\Gamma$如上, 并设$\omega$是E中的k-forms, 定义</li>
<li>$\int_{\Gamma} \omega &#x3D; \sum_{i&#x3D;1}^r \int_{\sigma_i} \omega$</li>
<li>我们可以把E中的 k-surface $\Phi$看成一个函数, 它的定义域是E中一切 k-forms 的集体，并且它给$\omega$配置一个数 $\int_{\Phi} \omega$, 因为实值函数能够相加，</li>
<li>用记号$\Gamma &#x3D; \sigma_1+\cdots + \sigma_r&#x3D;\sum_{i&#x3D;1}^r \sigma_i$<ul>
<li>必须当心地使用，要害是在于$R^n$里的每个 有向 仿射 k-单形$\sigma$, 作为函数的途径有两种</li>
<li>它们的定义域不同，值域也不同，于是有两种绝然不同的加法运算</li>
<li>本来$\sigma$是定义为$Q^k$上的$R^n-$值 函数, 因此能够 说 $\sigma_1+\sigma_2$是给每个$u\in Q^k$派定 向量$\sigma_1(u)+\sigma_2(u)$的函数$\sigma$, 注意$\sigma$仍然是$R^n$中的有向 仿射 k-单形！这不是这个记号的含义</li>
<li>如果$\sigma_2&#x3D;-\sigma_1$ 也就是 它们顶点集相同，但是方向相反，并且设$\Gamma&#x3D;\sigma_1+\sigma_2$ 那么对于一切$\omega$有$\int_{\Gamma} \omega &#x3D; 0$, 并且我们可以把这件事记成$\Gamma &#x3D; 0$或$\sigma_1+\sigma_2&#x3D;0$, 但并不意味着$\sigma_1(u)+\sigma_2(u)$是$R^n$中的零向量</li>
</ul>
</li>
<li>证明 上面对$E$中每个 k-form 成立</li>
</ul>
<p>10.29 边界 boundaries 当$k\ge 1$时, 规定 有向仿射 k-单形 $\sigma&#x3D;[p_0,\cdots,p_k]$ 的 边界 就是 仿射(k-1)-链</p>
<ul>
<li>$\partial{\sigma} &#x3D; \sum_{j&#x3D;0}^k (-1)^j [p_0\cdots,p_{j-1},p_{j+1},\cdots,p_k]$<ul>
<li>$\sigma_j$以$Q^{k-1}$为参数域</li>
<li>$\sigma_j(u)&#x3D;p_0+Bu$<ul>
<li>$B\in L(R^{k-1},R^n)$ 就是去掉了j列的线性映射</li>
</ul>
</li>
<li>其中$\sigma_0&#x3D;[p_1,\cdots,p_k]$<ul>
<li>$\sigma_0(u)&#x3D;p_1+Cu$定义的,</li>
<li>$Ce_i&#x3D;p_{i+1}-p_1,i\in[1,k-1]$</li>
</ul>
</li>
</ul>
</li>
<li>例如 $\sigma&#x3D;[p_0,p_1,p_2]$那么$\partial \sigma &#x3D; [p_1,p_2]-[p_0,p_2]+[p_0,p_1]&#x3D;[p_0,p_1]+[p_1,p_2]+[p_2,p_0]$ 这与三角形的有向边界的普通概念一致</li>
</ul>
<p>10.30 可微单形及可微链 设$T$是开集$E\subset R^n$到开集$V\subset R^m$内的$\mathscr{C}’’$映射, V不必是 one-to-one 的，如果$\sigma$是E中的 有向仿射k-单形 ，那么复合映射$\Phi &#x3D; T\circ \sigma$有时写成比较简单的形式$T\sigma$ 是V中的以$Q^k$为参数的k-surface, 称$\Phi$为$\mathscr{C}’’$类的有向k-单形</p>
<ul>
<li>V中$\mathscr{C}’’$类的有向k-单形 $\Phi_1,\cdots,\Phi_r$的有限集$\Psi$叫做V中的$\mathscr{C}’’$类的k-链</li>
<li>设$\omega$是V中的k-form 我们定义$\int_{\Psi} \omega &#x3D; \sum_{i&#x3D;1}^r \int_{\Phi_i}\omega$<ul>
<li>并用记号 $\Psi&#x3D;\sum \Phi_i$</li>
</ul>
</li>
<li>如果 $\Game&#x3D;\sum \sigma_i$是仿射链，且如果$\Phi_i&#x3D;T \circ \sigma_i$ 那么又写成$\Psi &#x3D; T\circ \Gamma$ 或写成$T(\sum \sigma_i)&#x3D;\sum T\sigma_i$</li>
<li>有向k-单形 $\Phi&#x3D;T\circ \sigma$的边界$\partial \Phi$定义为 (k-1)-链<ul>
<li>$\partial \Phi &#x3D; T(\partial \sigma)$</li>
<li>为了说明是合理的，如果T是仿射，那么$\Phi&#x3D;T\circ \sigma$是有向仿射k-单形， 这时它是边界定义的推论</li>
<li>如果$\Phi$属于$\mathscr{C}’’$类，$\partial \Phi$就是属于$\mathscr{C}’’$类的，可以直接推知</li>
<li>定义 k-链 $\Psi&#x3D;\sum \Phi_i$的边界$\partial \Psi$为 (k-1)-链</li>
<li>$\partial \Psi&#x3D;\sum \partial \Phi_i$</li>
</ul>
</li>
</ul>
<p>10.31 正向边界 到目前为止，已经把边界与链联系上了，但还没有与$R^n$的子集联系上，关于边界的这种看法，对于Stokes定理的叙述和证明，是最适当不过了，然而在应用中，特别是在$R^2$或$R^3$的应用中，谈某些集合的”有向边界”，也是很通常和方便的</p>
<ul>
<li>设$Q^n$是$R^n$中的标准单形，$\sigma_0$是以$Q^n$为参数域的恒等映射,$\sigma_0$可以看作$R^n$中的正向n-单形，它的边界$\partial \sigma_0$是仿射(n-1)-链 这个链叫做集$Q^n$的正向边界</li>
<li>例如$Q^3$的正向边界是 $[e_1,e_2,e_3]-[0,e_2,e_3]+[0,e_1,e_3]-[0,e_1,e_2]$</li>
<li>令T为$Q^n$到$R^n$中的$\mathscr{C}’’$类 1-1映射，设它的函数行列式是整的（至少在Q^n$内部），设$E&#x3D;T(Q^n)$ 由反函数定理，E是$R^n$中某个开集的闭包，我们定义集$E$的正向边界为(n-1)-链, $\partial T&#x3D;T(\partial \sigma_0)$</li>
<li>并且可以把这个(n-1)-链 记作$\partial E$</li>
<li>在这里显然会有这样的疑问，如果 $E&#x3D;T_1(Q^n)&#x3D;T_2(Q^n)$ 并且如果$T_1,T_2$的函数行列式都是正的，是否必然$\partial T_1&#x3D;\partial T_2$呢？也就是 $\int_{\partial T_1}\omega&#x3D;\int_{\partial T_2} \omega$</li>
<li>是否对于每个 (n-1)-形式$\omega$成立的，答案是肯定的，证明略</li>
<li>设$\Omega &#x3D; E_1\cup \cdots \cup E_r, E_i&#x3D;T_i(Q^n)$ 每个$T_i$与上面的T有同样的性质，$E_i$的内部两两不相交, 那么就把 (n-1)-链 $\partial \Omega &#x3D; \partial T_1+\cdots +\partial T_r$叫做$\Omega$的正向边界</li>
<li>例如: $R^2$中的单位正方形$I^2$是$\sigma_1(Q^2)$与$\sigma_2(Q^2)$的并, 这里$\sigma_1(u)&#x3D;u,\sigma_2(u)&#x3D;e_1+e_2-u$<ul>
<li>因为 这里 它们函数行列式都是$1 &gt; 0$( $\det [1,0;0,1]&#x3D;1,\det [-1,0;0,-1]&#x3D;1$)</li>
<li>$\sigma_1 &#x3D; [0,e_1,e_2],\sigma_2&#x3D;[e_1+e_2,e_2,e_1]$</li>
<li>$\partial \sigma_1&#x3D;[e_1,e_2]-[0,e_2]+[0,e_1]$</li>
<li>$\partial \sigma_2&#x3D;[e_2,e_1]-[e_1+e_2,e_1]+[e_1+e_2,e_1]$</li>
<li>$\partial I^2&#x3D;\partial \sigma_1+\partial \sigma_2&#x3D;[0,e_1]+[e_1,e_1+e_2]+[e_1+e_2,e_2]+[e_2,0]$ 是$I^2$的正向边界</li>
<li>如果$\Phi$是$R^m$中以$I^2$为参数域的2-surface, 那么$\Phi$(当作 2-forms 上的函数) 与2-chain $\Phi\circ \sigma_1+\Phi \circ \sigma_2$相同，于是</li>
<li>$\partial \Phi &#x3D; \partial(\Phi \circ \sigma_1)+\partial(\Phi \circ \sigma_2)&#x3D;\Phi(\partial \sigma_1)+\Phi(\partial \sigma_2) &#x3D; \Phi(\partial I^2)$</li>
<li>如果$\Phi$的参数域是正方形$I^2$，我们不必回到单形$Q^2$,而可以直接从$\partial I^2$得到$\partial \Phi$</li>
</ul>
</li>
</ul>
<p>10.32 例 对于$0\le u \le pi, 0\le v \le 2\pi$</p>
<ul>
<li>定义$\Sigma (u,v)&#x3D;(\sin u \cos v, \sin u\sin v,\cos u)$ 于是$\Sigma$是$R^3$中的2-surface, 它的参数域是长方形$D\subset R^2$,它的值域是$R^3$中的单位球, 它的边界是$\partial \Sigma&#x3D;\Sigma(\partial(D))&#x3D;\gamma_1+\gamma_2+\gamma_3+\gamma_4$, 其中(这里是根据边界定义得到的)</li>
<li>$\gamma_1(u)&#x3D;\Sigma(u,0)&#x3D;(\sin u,0,\cos u)$</li>
<li>$\gamma_2(u)&#x3D;\Sigma(\pi,v)&#x3D;(0,0,-1)$</li>
<li>$\gamma_3(u)&#x3D;\Sigma(\pi-u,2\pi)&#x3D;(\sin u,0,-\cos u)$</li>
<li>$\gamma_4(u)&#x3D;\Sigma(0,2\pi-v)&#x3D;(0,0,1)$</li>
<li>u,v的参数区间是$[0,\pi],[0,2\pi]$</li>
<li>因为$\gamma_2,\gamma_4$是常量，它们的导数是0，因此任何1-forms在其上的积分是0</li>
<li>因为$\gamma_3(u)&#x3D;\gamma_1(\pi-u)$ </li>
<li>直接用 10.11定义 $\int_{\gamma_3}\omega &#x3D; - \int_{\gamma_1}\omega$ 对于任何1-forms $\omega$成立，于是$\int_{\partial \Sigma}\omega &#x3D;0$进而$\partial\Sigma&#x3D;0$</li>
<li>按照地理学术语, $\partial \Sigma$从北极N出发，沿子午线跑到南极S，S停一下又同一子午线回到N，</li>
</ul>
<h3 id="Stokes定理-stokes’-theorem"><a href="#Stokes定理-stokes’-theorem" class="headerlink" title="Stokes定理 stokes’ theorem"></a>Stokes定理 stokes’ theorem</h3><p>10.33 Stokes定理 设$\Psi$是开集$V\subset R^n$中的$\mathscr{C}’’$类的k-链, $\omega$是V中的(k-1)-form, 那么</p>
<ul>
<li>$\int_{\partial \Psi} \omega &#x3D; \int_{\Psi} d\omega$</li>
<li>k&#x3D;m&#x3D;1时，加一个可微的假设，就是微积分基本定理，</li>
<li>k&#x3D;m&#x3D;2时 就是Green定理</li>
<li>k&#x3D;m&#x3D;3是，就是Gauss-Ostrogradsky定理（散度定理divergence theorem</li>
<li>k&#x3D;2,m&#x3D;3的情况，是由Stokes最先发现的(Spivak的书描述了一些历史背景)</li>
<li>证:<ul>
<li>只要对$V$中$\mathscr{C}’’$类的每个 有向k-单形$\Phi$证明</li>
<li>$\int_{\partial \Phi} \omega &#x3D; \int_{\Phi} d\omega$, 那么由10.30 可推出本结果</li>
<li>固定一个$\Phi$,令$\sigma&#x3D;[0,e_1,\cdots,e_k]$, 这样$\sigma$是以$Q^k$为参数域而由恒等映射所确定的 有向仿射k-单形, 因$\Phi$又是定义在$Q^k$上的(定义10.30)，并且$\Phi \in \mathscr{C}’’$, 所以存在包含$Q^k$的开集$E\subset R^k$, 并且存在着$E$到$V$内并使得$\Phi&#x3D;T\circ \sigma$的$\mathscr{C}’’$映射$T$, 由定理10.25和10.22c, <ul>
<li>$\int_{\Phi} d\omega &#x3D; \int_{T\sigma} d\omega &#x3D; \int_{\sigma} (d\omega)<em>T &#x3D; \int</em>{\sigma} d(\omega_T)$</li>
<li>$\int_{\partial \Phi} \omega &#x3D; \int_{\partial (T\sigma)}\omega &#x3D; \int_{T(\partial \sigma)}\omega &#x3D; \int_{\partial \sigma} \omega_T$</li>
</ul>
</li>
<li>因为$\omega_T$是E 中的(k-1)-form， 只要对于特殊的单形 $\sigma$及E中的每个$\mathscr{C}’$类(k-1)-形式$\lambda$来证, $\int_{\sigma} d\lambda &#x3D; \int_{\partial \sigma} \lambda$</li>
<li>如果k&#x3D;1, 有向0-forms的定义说明<ul>
<li>对于$[0,1]$上的每个连续可微函数$f$有关系式$\int_0^1 f’(u)du&#x3D;f(1)-f(0)$</li>
</ul>
</li>
<li>k &gt; 1,固定 整数$r,r \in [1,k]$, 选定$f\in \mathscr{C}’(E)$<ul>
<li>只要对于$\lambda &#x3D; f(x) dx_1\wedge \cdots \wedge dx_{r-1}\wedge dx_{r+1}\wedge\cdots\wedge dx_k$来证明</li>
<li>单形边界是$\partial \sigma &#x3D; [e_1,\cdots,e_k]+\sum_{i&#x3D;1}^k (-1)^i \tau_i$, 这里$\tau_i$是去掉$e_i$的剩余<ul>
<li>令$\tau_0&#x3D;[e_r,e_1,\cdots,e_{r-1},e_{r+1},\cdots,e_k]$</li>
</ul>
</li>
<li>所以$\partial \sigma &#x3D; (-1)^r\tau_0+\sum_{i&#x3D;1}^k(-1)^i\tau_i$<ul>
<li>每个$\tau_i$以$Q^{k-1}$为参数域</li>
</ul>
</li>
<li>如果$x&#x3D;\tau_0(u)$且$u\in Q^{k-1}$那么<ul>
<li>$x_j&#x3D;u_j, j \in [1,r)$</li>
<li>$x_r&#x3D;1-(u_1+\cdots+u_{k-1})$</li>
<li>$x_j&#x3D;u_{j-1}, j \in (r,k]$</li>
</ul>
</li>
<li>如果$1\le i \le k, x&#x3D;\tau_i(u)$且$u\in Q^{k-1}$那么<ul>
<li>$x_j&#x3D;u_j, j \in [1,i)$</li>
<li>$x_i&#x3D;0$</li>
<li>$x_j&#x3D;u_{j-1}, j \in (i,k]$</li>
</ul>
</li>
<li>令$J_i$为由$\tau_i$诱导出来的映射$(u1,\cdots,u_{k-1})\to (x_1,\cdots,x_{r-1},x_{r+1},\cdots,x_k)$的函数行列式<ul>
<li>$i&#x3D;0$ and $i&#x3D;r$时, 上面映射是恒等映射, det &#x3D; 1, 对于其他i来说，有一行是全0，</li>
</ul>
</li>
<li>所以$\int_{\partial \sigma} \lambda &#x3D; (-1)^{r-1}\int_{\tau_0} \lambda + (-1)^r\int_{\tau_r}\lambda$<ul>
<li>$&#x3D;(-1)^{r-1}\int [f(\tau_0(u))-f(\tau_r(u))]du$</li>
</ul>
</li>
<li>另一方面 $d\lambda &#x3D; (D_rf)(x)dx_r\wedge dx_r \wedge dx_1\wedge \cdots \wedge dx_{r-1} \wedge dx_{r+1} \wedge \cdots \wedge dx_k$</li>
<li>$&#x3D;(-1)^{r-1} (D_rf) (x) dx_1\wedge \cdots \wedge dx_{k}$</li>
<li>所以$\int_{\sigma} d \lambda &#x3D; (-1)^{r-1} \int_{Q^k} (D_rf)(x)dx$<ul>
<li>我们先对$x_r$在闭区间$[0,1-(x_1+\cdots+x_{r-1}+x_{r+1}+\cdots+x_k)]$上积分以求值，令$(x_1,\cdots,x_{r-1},x_{r+1},\cdots,x_k)&#x3D;(u_1,\cdots,u_{k-1})$</li>
<li>说明上面两个积分右侧相等 $&#x3D;(-1)^{r-1}\int [f(\tau_0(u))-f(\tau_r(u))]du &#x3D; (-1)^{r-1} \int_{Q^k} (D_rf)(x)dx$</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="闭形式与恰当形式-closed-forms-and-exact-forms"><a href="#闭形式与恰当形式-closed-forms-and-exact-forms" class="headerlink" title="闭形式与恰当形式 closed forms and exact forms"></a>闭形式与恰当形式 closed forms and exact forms</h3><p>10.34 定义 设$\omega$是开集$E\subset R^n$上的k-form, 如果存在着E中的(k-1)-形式$\lambda$ 适合$\omega &#x3D; d\lambda$ 那么就说$\omega$在E中是恰当的</p>
<ul>
<li>如果$\omega$属于$\mathscr{C}’$类并且$d\omega &#x3D;0$，那么$\omega$叫作闭的</li>
<li>定理10.20b 说明,$\mathscr{C}’$类的每个恰当形式是闭形式</li>
<li>在某些集E, 例如在凸集上，逆命题正确， 就是10.39 通常称为Poincare引理，及定理10.40的内容，</li>
<li>然而，例10.36 及 10.37要提出非恰当的闭形式</li>
</ul>
<p>10.35 评注 </p>
<ul>
<li>(a) 要判定一个已知k-form 是否是闭的，只要把$\omega$ 的标准表示中的系数 微分即可，例如，开集$E\subset R^n$上的$f_i\in \mathscr{C}’(E)$时，1-form $\omega &#x3D; \sum_{i&#x3D;1}^n f_i(x) dx_i$ 是闭的，当且仅当对于$1,\cdots,n$中的一切i,j 以及一切$x\in E$，$(D_jf_i)(x)&#x3D;(D_if_j)(x)$成立</li>
<li>注意，这是“点态”条件，它并不蕴含那种依赖于E的形状的整体性质</li>
<li>另一方面，要想证明$\omega$在E中是恰当的，必须证明存在着E上的形式$\lambda$, 满足$d\lambda&#x3D;\omega$, 这就等于在整个E中，而不是局部的，解一组偏微分方程。例如为了$\omega$表达式是恰当的, 就必需求一函数(或0-form) $g\in \mathscr{C}’(E)$ 要它使得$(D_ig)(x)&#x3D;f_i(x), x\in E, 1\le i \le n$, 上面的 点态是这个的必要条件</li>
<li>(b) 设$\omega$是$E$中的恰当exact k-form, 于是存在着E中的 (k-1)-form $\lambda$使$d\lambda &#x3D; \omega$, 而Stokes定理断定, 对于E中的每个$\mathscr{C}’’$类 k-链 $\Psi$<ul>
<li>$\int_{\Psi}\omega &#x3D; \int_{\Psi} d\lambda &#x3D; \int_{\partial \Psi} \lambda$</li>
<li>如果$\Psi_1,\Psi_2$都是这样的链，且它们有相同的边界，那么$\int_{\Psi_1}\omega &#x3D;\int_{\Psi_2} \omega$</li>
<li>特别在E中的每个边界为0的k-链上,E中的 exact k-form的积分维0</li>
<li>作为这件事的一个重要的特殊情况，注意E中的恰当1-form 在E中的闭（可微）曲线上的积分为0</li>
</ul>
</li>
<li>(c)设$\omega$ 是E中的闭 k-form, 于是$d\omega &#x3D;0$ ,并且Stokes定理断定，对于E中属于$\mathscr{C}’’$类的每个(k+1)-chain $\Psi$<ul>
<li>$\int_{\partial \Psi}\omega &#x3D; \int_{\Psi} d\omega &#x3D; 0$</li>
<li>换句话说 E中的闭k-form ,在作为E中(k+1)-chain的边界这样的k-chain上积分为0</li>
</ul>
</li>
<li>(d) 设$\Psi$是E中的(k+1)-chain, $\lambda$是E中的(k-1)-form, 二者都属于$\mathscr{C}’’$类，因为$d^2\lambda &#x3D; 0$把Stokes定理使用两次，$\int_{\partial \partial \Psi}\lambda &#x3D; \int_{\partial \partial \Psi} d\lambda&#x3D;\int_{\Psi} d^2\lambda&#x3D;0$</li>
<li>由此$\partial^2 \Psi &#x3D; 0$ 换句话说 边界的边界是0</li>
</ul>
<p>10.36 例 令$E&#x3D;R^2-\lbrace 0\rbrace$ 为去掉原点的平面，1-form $\eta&#x3D;\frac{xdy-ydx}{x^2+y^2}$ 在E中是闭的. 这极易用微分验证</p>
<ul>
<li>固定$r&gt;0$并定义$\gamma(t)&#x3D;(r\cos t,r\sin t),0\le t\le 2\pi$, 于是$\gamma$是E中的曲线（有向1-form） ,因为$\gamma(0)&#x3D;\gamma(2\pi)$所以$\partial \gamma &#x3D; 0$, 直接计算知道$\int_{\gamma} \eta &#x3D;2\pi \neq 0$</li>
<li>这个例子说明了<ul>
<li>$\eta$不是E中 恰当微分，否则 应该为0</li>
<li>$\gamma$不是E中 任何$\mathscr{C}’’$类 2-chains 的边界，否则它是闭的，积分应为0</li>
</ul>
</li>
</ul>
<p>10.37 例 令$E&#x3D;R^3-\lbrace{0}\rbrace$ 去掉原点的三维空间, 定义$\xi&#x3D;\frac{xdy\wedge dz+ydz\wedge dx+z\dx\wedge dy}{(x^2+y^2+x^2)^{3&#x2F;2}}$</p>
<ul>
<li>这里已经将$(x_1,x_2,x_3)$换写成了$(x,y,z)$ 直接微分就知道$d\xi &#x3D;0$, 所以$\xi$是E中的 闭2-form</li>
<li>令$\Sigma$是 10.32中 所构造的在 E中的2-chain，$\Sigma$是$R^3$中单位球的参数表示, 用10.32的矩形D作为参数域，</li>
<li>$\int_{\Sigma} \xi &#x3D; \int_D \sin u du dv &#x3D; 4\pi \neq 0$</li>
<li>因此 $\xi$不是$E$中的恰当微分(10.32证明了$\partial \Sigma &#x3D;0$),虽然$\partial \Sigma &#x3D;0$,球$\Sigma$也不能是E中任何($\mathscr{C}’’类$) 3-chain的边界</li>
</ul>
<p>10.38 定理，设 $E$ 是 $R^n$ 中的凸开集，$f \in \mathscr{C}’(E)$，$p$ 是整数 $1 \le p \le n$ 且 $(D_j f)(x) &#x3D; 0, (p &lt; j \le n, x \in E)$，那么存在 $F \in \mathscr{C}’(E)$ 使得 $(D_p F)(x) &#x3D; f(x)$，$(D_j F)(x) &#x3D; 0, (p &lt; j \le n, x \in E)$。</p>
<p>证明：<br>把 $x$ 写成 $x &#x3D; (x_{\text{left}}, x_p, x_{\text{right}})$。<br>设 $V$ 是所有 $(x_{\text{left}}, x_p)$ 的集，$V$ 是 $E$ 的摄影，必为 $R^p$ 中的凸开集，因为 $E$ 是凸集，并且<br>$$<br>(D_j F)(x) &#x3D; 0, \quad (p &lt; j \le n, x \in E) \tag{116}<br>$$</p>
<ul>
<li>于是存在$F\in \mathscr{C}’(E)$使得</li>
<li>$(D_pF)(x)&#x3D;f(x), (D_jF)(x)&#x3D;0, (p&lt;j\le n,x\in E)$</li>
<li>证明:<ul>
<li>把x写成$x&#x3D;(x_{left},x_p,x_{right})$</li>
<li>设V是所有$(x_{left},x_p)$的集，V是E的摄影，必为$R^p$中的凸开集，因为E是凸集，并且116 成立，$f(x)$就与$x_{right}$无关，因此存在以V为定义域的函数$\varphi$,对于一切$x\in E$使得$f(x)&#x3D;\varphi(x_{left},x_p)$</li>
<li>如果p&#x3D;1,V是$R^1$中的开区间(可能无界), 取$c\in V$并且定义 $F(x)&#x3D;\int_c^{x_1}\varphi(t)dt, x\in E$</li>
<li>如果$p &gt; 1$令U是能够对于某个$x_p$ 使得$(x’,x_p)\in V$的所有$x_{left}\in R^{p-1}$的集，于是$U$是$R^{p-1}$的凸开集，并且存在函数$a\in \mathscr{C}’(U)$，它对每个$x_{lefh} \in U$ 使得 $(x_{left},\alpha(x_{left}))\in V$ 成立，换句话说$\alpha$的图像在$V$中， 定义$F(x)&#x3D;\int_{\alpha(x_{left})}^{x_p} \varphi(x_{left},t) dt,x\in E$</li>
</ul>
</li>
</ul>
<p>10.39 定理 设$E\subset R^n$是 凸开集, $k \ge 1$, $\omega$是$E$中的$\mathscr{C}’$类 k-form 且$d\omega &#x3D;0$,那么E中必有一个 (k-1)-form $\lambda$ 满足$\omega &#x3D;d\lambda$</p>
<ul>
<li>简单说，凸集的闭形式是恰当的</li>
<li>证明:<ul>
<li>当$p&#x3D;1,\cdots,n$时，用$Y_p$表示由E中的合于一下条件的一切k-form $\omega$构成的集，$\omega$属于$\mathscr{C}’$类，标准表示$\omega &#x3D;\sum_I f_I(x)dx_I$中不含$dx_{p+1},\cdots,dx_n$ 换句话说, 如果有某个$x\in E$使得$f_I(x)\neq 0$就会$I\subset \lbrace 1,\cdots,p\rbrace$</li>
<li>现在对p用归纳法</li>
<li>首先假定$\omega \in Y_1$,于是$\omega &#x3D; f(x) dx_1$,因为$d\omega &#x3D;0$对于$1 &lt; j \le n$, $x\in E$有$(D_jf)(x)&#x3D;0$. 由定理10.38 存在着一个$F\in \mathscr{C}’(E)$使得$D_1F&#x3D;f$而对$1&lt; j \le n$有$D_jF&#x3D;0$. 因此 <ul>
<li>$\omega &#x3D;f(x) dx_1&#x3D;(D_1F)(x)dx_1 &#x3D; dF$成立</li>
</ul>
</li>
<li>取$p &gt; 1$,并做如下归纳假定, 属于$Y_{p-1}$的每个闭 k-forms 是E中的恰当形式.</li>
<li>选$\omega \in Y_{p}$使$d\omega &#x3D; 0$根（118）式<ul>
<li>$\sum_I \sum_{j&#x3D;1}^n (D_jf_I)(x)dx_j\wedge dx_I&#x3D;d\omega &#x3D;0$</li>
</ul>
</li>
<li>考虑满足$p &lt; j \le n$的一个固定的j, 在118式中出现的每个$I$在$\lbrace 1,\cdots,p \rbrace$中,如果$I_1,I_2$是两个这样的 k-指标. 并且设$I_1\neq I_2$，那么$(k+1)-$指标$(I_1,j)$与$(I_2,j)$就不同，所以不能抵消，而由119式推知118中的每个系数满足</li>
<li>$(D_jf_I)(x)&#x3D;0, x\in E, p &lt; j \le n$</li>
<li>现在 在118式中 把含$dx_p$的项集中到一起，并把$\omega$写成<ul>
<li>$\omega &#x3D; \alpha + \sum_{I_0} f_I(x) dx_{I_0}\wedge dx_p, \alpha \in Y_{p-1}$的形式,</li>
<li>每个$I_0$是$\lbrace{1,\cdots,p-1}$中的 递增(k-1)-指标,并且$I&#x3D;(I_0,p)$， 定理10.38 可以提供满足$D_pF_I&#x3D;f_I,D_jf_I&#x3D;0,(p &lt; j \le n)$的函数$F_I\in \mathscr{C}’(E)$</li>
<li>令$\beta&#x3D;\sum_{I_0} F_I(x) dx_{I_0}$</li>
<li>并定义$\gamma &#x3D;\omega - (-1)^{k-1}d\beta$, 因为$\beta$是$(k-1)-$形式,从而$\gamma&#x3D;\omega-\sum_{I_0}\sum_{j&#x3D;1}^p (D_jF_I)(x)dx_{I_0}\wedge dx_j$</li>
<li>$&#x3D;\alpha-\sum_{I_0}\sum_{j&#x3D;1}^{p-1} (D_jF_I)(x)dx_{I_0}\wedge dx_j$</li>
</ul>
</li>
<li>它显然在$Y_{p-1}$中,因为$d\omega &#x3D;0,d^2\beta &#x3D;0$所以必然$d\gamma &#x3D;0$,因此 由归纳假设知道,在E中有某个$(k-1)-$形式$\mu$, 使得$\gamma &#x3D; d\mu$, 如果令$\gamma &#x3D; \mu + (-1)^{k-1}\beta$ 就得到 $\omega&#x3D;d\lambda$</li>
</ul>
</li>
</ul>
<p>10.40 定理 固定k, $1\le k \le n$令$E\subset {R^n}$是开集,其中每个闭$k-$形式是恰当的，再令$T$是把E 映满开集$U\subset R^n$的1-1 $\mathscr{C}’’$映射, 它的逆$S$又属于$\mathscr{C}’’$</p>
<ul>
<li>那么$U$中的每个闭$k-$形式是$U$中的恰当形式</li>
<li>注意定理10.39 每个凸开集E满足本定理的题设，E和U之间的关系可以说成事它们$\mathscr{C}’’-$等价</li>
<li>于是在与凸开集$\mathscr{C}’’-$等价的任意集中，每个闭形式是恰当形式</li>
<li>证明 令$\omega$是$U$中的 k-form 且$d\omega &#x3D;0$,由定理10.22c，$\omega_T$是E中的k-form且$d(\omega_T)&#x3D;0$ 因此 $\omega_T&#x3D;d\lambda$, $\lambda$是E中的(k-1)-form, 由定理10.23及再一次用定理$10.22c$得到$\omega&#x3D;(\omega_T)_S&#x3D;(d\lambda)_S&#x3D;d(\lambda_S)$</li>
<li>因$\lambda_S$ 是U中的(k-1)-form, 所以$\omega$是U中的恰当形式</li>
</ul>
<p>10.41 评注 在应用中，方格时常是比单形更方便的参数域，如果我们的全部论述都基于方格，而不基于单形的话，Stokes定理的证明中出现的计算将会简单些（在Spivak的书中就是这样做的）TODO，</p>
<ul>
<li>我们宁愿要单形的理由是，有向单形的便捷的定义，看来是比方格边界的定义容易些也自然些，又把集 分割成单形（称为三角割分 triangulation）在拓扑学中起着重要的作用，而在拓扑学的某些方面与微分形式之间，又存在着密切的联系， Singer 及Thorpe的书对于这个论题又很好的介绍</li>
<li>因为每个方格能被 triangulated， 我们may regard it as a chain. 对于2维的情形，在例10.32中</li>
<li>Poincare引理(10.39)有许多证明的方法，例如可以参看$Spivak$书，或Fleming的书，</li>
</ul>
<h3 id="向量分析-vector-analysis"><a href="#向量分析-vector-analysis" class="headerlink" title="向量分析 vector analysis"></a>向量分析 vector analysis</h3><p>在本章将结束时，对$R^3$中有关向量分析的定理,做一点应用 这些订立时关于微分形式定理的一些特殊情况，但又是常事以不同的术语来叙述的，所以我们面对的任务是把一种说法 翻译成 另外的说法</p>
<p>10.42 向量场 vector field 令$F&#x3D;F_1e_1+F_2e_2+F_3e_3$ 为开集$E\subset R^3$ 到$R^3$内的连续映射，因为$F$给E的每个点联系上一个向量，所以有时把F叫做向量场，特别在物理中是如此, 联系着每个这样的F，有一个 1-form</p>
<ul>
<li>$\lambda_F&#x3D;F_1dx+F_2dy+F_3dz$</li>
<li>以及一个2-form $\omega_F&#x3D;F_1dy\wedge dz+F_2dz\wedge dx + F_3dx \wedge dy$</li>
<li>以下本章 后续各处，用$(x,y,z)$代替$(x_1,x_2,x_3)$</li>
<li>于是把 向量场,1-form,2-form放在一起研究</li>
<li>that every 1-form lambda in E is lambdaF for some vector field F in E, and that every 2-form omega is omega_F for some vector field F in E</li>
<li>如果$u\in \mathscr{C}’(E)$是实函数，那么 它的 梯度gradient, $\nabla u&#x3D;(D_1u)e_1+(D_2u)e_2+(D_3u)e_3$</li>
<li>今设 F是E中的$\mathscr{C}’$类的向量场，它的 旋度curl $\nabla \times F$ 是在E中由 $\nabla \times F&#x3D;(D_2F_3-D_3F_2)e_1+(D_3F_1-D_1F_3)e_2+(D_1F_2-D_2F_1)e_3$所定义的向量场</li>
<li>而它的散度divergence $\nabla \cdot F$是在$E$中由$\nabla \cdot F&#x3D;D_1F_1+D_2F_2+D_3F_3$定义的实函数</li>
<li>这些 物理量解释，细节，建议看 O. D. Kellogg的书</li>
</ul>
<p>10.43 定理 设$E$是$R^3$中的开集, $u\in \mathscr{C}’’(E)$, G是$E$中$\mathscr{C}’’$类的向量场</p>
<ul>
<li>(a) 如果$F&#x3D;\nabla u$ 所以 $\nabla \times F&#x3D;0$</li>
<li>(b) 如果$F&#x3D;\nabla \times G$那么$\nabla \cdot F&#x3D;0$</li>
<li>此外，如果$E$能$\mathscr{C}’’$等价于凸集，那么(a),(b)的逆命题也成立， 其中要假定F是E中的$\mathscr{C}’$类向量场<ul>
<li>(a’) 如果$\nabla\times F&#x3D;0$那么F是某个$u \in \mathscr{C}’’(E)$的梯度$F&#x3D;\nabla u$</li>
<li>(b’) 如果$\nabla \cdot F&#x3D;0$, 那么F是某个$u\in \mathscr{C}’’(E)$的旋度：$F&#x3D;\nabla \times G$</li>
</ul>
</li>
<li>证明<ul>
<li>与微分形式联系</li>
<li>$F&#x3D;\nabla u$ 当且仅当 $\lambda_F&#x3D;du$</li>
<li>$\nabla \times F&#x3D;0$ 当且仅当 $d\lambda_F&#x3D;0$</li>
<li>$F&#x3D;\nabla \times G$当且仅当$\omega_F&#x3D;d\lambda_G$</li>
<li>$\nabla \cdot F&#x3D;0$当且仅当$d\omega_F&#x3D;0$</li>
<li>证明(a) 如果$F&#x3D;\nabla u$那么$\lambda_F&#x3D;du$, 所以$d\lambda_F&#x3D;d^2u&#x3D;0$,所以$\nabla \times F&#x3D;0$</li>
<li>证明(a’) 设$\nabla \times F&#x3D;0$, 于是$d\lambda_F&#x3D;0$, 由10.40知道是某个0-form 的u是的 $\lambda_f &#x3D; du$ 因此$F&#x3D;\nabla u$</li>
</ul>
</li>
</ul>
<p>10.44 体积元素 k-form $dx_1\wedge \cdots \wedge dx_k$ 叫作$R^k$中的体积元素. 体积e元素时长记作$dV$或$dV_k$, 当$\Phi$是$R^k$中的正向k-surface, 而f是$\Phi$的值域上的连续函数时, 便用</p>
<ul>
<li>$\int_\Phi f(x) dx_1\wedge \cdots \wedge dx_k &#x3D; \int_\Phi f(x) dV_k$</li>
<li>用这个术语的理由非常简单：设$D$是$R^k$中的参数域，如果$\Phi$是$D$到$R^k$的1-1$\mathscr{C}’’$映射, 并带有正的函数行列式$J_{\Phi}$, 那么</li>
<li>$\int_D f(\Phi(u)) J_{\Phi}(u) du &#x3D; \int_{\Phi(D)} f(x) dx$</li>
<li>特别的 当f&#x3D;1时，能计算出体积</li>
<li>特别的k&#x3D;2时，也就是面积，常用$dA$</li>
</ul>
<p>10.45 Green定理 设E是$R^2$中的开集, $\alpha,\beta \in \mathscr{C}’(E)$, $\Omega$ 是E的闭子集，并且$\Omega$有10.31 段中所说的正向边界，那么, $\int_{\partial \Omega}(\alpha dx+\beta dy)&#x3D;\int_{\omega} (\frac{\partial \beta}{\partial x} - \frac{\partial \alpha}{\partial y})dA$</p>
<ul>
<li>证明$\lambda &#x3D;\alpha dx+\beta dy$ 于是</li>
<li>$d\lambda &#x3D;(D_2\alpha)dy\wedge dx + (D_1\beta)dx\wedge dy$</li>
<li>$&#x3D;(D_1\beta - D_2\alpha)dA$</li>
<li>也就是$\int_{\partial \Omega}\lambda &#x3D; \int_{\Omega} d\lambda$</li>
<li>根据Stokes定理上述成立</li>
<li>取$\alpha(x,y)&#x3D;-y,\beta(x,y)&#x3D;x$ 得到$\frac{1}{2}\int_{\partial \Omega} (xdy-ydx)&#x3D;A(\Omega)$</li>
</ul>
<p>10.46 R^3中的面积元素 令$\Phi$是$R^3$中的$\mathscr{C}’$类2-surface, 其参数域$D\subset R^2$ 给每点$(u,v)\in D$结合一个向量</p>
<ul>
<li>$N(u,v)&#x3D;\frac{\partial(y,z)}{\partial(u,v)}\cdot e_1+\frac{\partial(z,x)}{\partial(u,v)}\cdot e_2+\frac{\partial(x,y)}{\partial(u,v)}\cdot e_3$</li>
<li>$(x,y,z)&#x3D;\Phi(u,v)$相对应</li>
<li>如果$f$是$\Phi(D)$ 上的连续函数, f在$\Phi$上的面积分就定义为</li>
<li>$\int_\Phi fdA&#x3D;\int_D f(\Phi(u,v))\cdot |N(u,v)| du dv$</li>
<li>特别的，当f&#x3D;1时，就得到$\Phi$的面积，即<ul>
<li>(132) $A(\Phi)&#x3D;\int_D |N(u,v)| du dv$</li>
</ul>
</li>
<li>下面讨论 是否合理，刻画了向量N的几何特征</li>
<li>设$\Phi&#x3D;\varphi_1e_1+\varphi_2e_2+\varphi_3e_3$, 固定一点$p_0&#x3D;(u_0,v_0)\in D$, 令$N&#x3D;N(p_0)$ 并令$\alpha_i&#x3D;(D_1\varphi_i)(p_0), \beta_i&#x3D;(D_2\varphi_i)(p_0), i&#x3D;1,2,3$</li>
<li>然后让$T\in L(R^2,R^3)$是由$T(u,v)&#x3D;\sum_{i&#x3D;1}^3 (\alpha_iu+\beta_iv) e_i$所定义的线性变换，注意 按照定义9.11, $T&#x3D;\Phi’(p_0)$</li>
<li>现在假定$T$的秩是2（如果rank T&#x3D;1或0，那么N&#x3D;0，下面提到的切平面就退化成一条线或一个点了），于是仿射映射$(u,v)\to \Phi(p_0)+T(u,v)$的值域是一个平面，叫作$\Phi$在$p_0$的切平面tangent plane</li>
<li>带入得到$N&#x3D;(\alpha_2\beta_3-\alpha_3\beta_2)e_1+(\alpha_3\beta_1-\alpha_1\beta_3)e_2+(\alpha_1\beta_2-\alpha_2\beta_1)e_3$</li>
<li>因为$Te_1&#x3D;\sum_{i&#x3D;1}^3\alpha_i e_i,Te_2&#x3D;\sum_{i&#x3D;1}^{3}\beta_i e_i$</li>
<li>所以$N\cdot (Te_1)&#x3D;0&#x3D;N\cdot(Te_2)$, 因此N垂直于perpendicular切平面，所以把它叫做$\Phi$在$p_0$的法向量normal</li>
<li>另一方面$R^3$中 把 $e_1,e_2,e_3$变成$Te_1,Te_2,N$的线性变换的行列式是 $|N|^2 &gt; 0$, 于是3-单形 [0,Te_1,Te_2,N]是正向的</li>
<li>N 的第三个性质，它是前两性质的推论：上面所提到以$|N|^2$为值的行列式，是用$[0,Te_1],[0,Te_2],[0,N]$作为棱的平行六面体的体积，</li>
<li>$[0,N]$垂直于其他两棱，所以以 $0,Te_1,Te_2,T(e_1+e_2)$为顶点的四边形面积是$|N|$</li>
<li>这个四边形是$R^2$中单位正方形，在$T$之下的象，如果E是$R^2$中的矩形，（由T的线性）能推知平行四边形T(E)的面积是</li>
<li>$(140) A(T(E))&#x3D;|N|A(E)&#x3D;\int_{E} |N(u_0,v_0)| du dv$</li>
<li>我们断定，当$\Phi$是仿射映射时， 面积公式正确（f&#x3D;1）的情况</li>
<li>为了证明$A(\Phi)&#x3D;\int_D |N(u,v)|du dv$在一般情况下正确，把D分成许多小矩形，在每个小矩形中取一点$(u_0,v_0)$，并在每个矩形内用相应的切平面代替$\Phi$. 通过140所得到的诸平行四边形面积之和，就是$A(\Phi)$的一个近似值, Finally one can justify 131 from 132 by approximating f by step functions</li>
</ul>
<p>10.47 例 设 $0 &lt; a &lt; b$, a,b都是固定的 K是由</p>
<ul>
<li>$0 \le t \le a,0 \le  u \le 2\pi,0\le v \le 2\pi$ 确定的3-方格</li>
<li>方程<ul>
<li>$x&#x3D;t\cos u$</li>
<li>$y&#x3D;(b+t\sin u)\cos v$</li>
<li>$z&#x3D;(b+t\sin u)\sin v$</li>
</ul>
</li>
<li>描写的是把$R^3$映到$R^2$内的映射$\Psi$,他在K的内部是1-1的，因此$\Psi(K)$是个实心环，函数行列式是<ul>
<li>$J_\Psi &#x3D; \frac{\partial(x,y,z)}{\partial(t,u,v)}&#x3D;t(b+t\sin u)$</li>
</ul>
</li>
<li>它在K上取正值，除非是在面t&#x3D;0上, 如果在K上将$J_\Psi$积分，就得到实心环的体积 $vol(\Psi(K))&#x3D;2\pi^2 a^2b$</li>
<li>现在 考虑2-chain $\Phi&#x3D;\partial\Psi$, $\Psi$把K的两个面u&#x3D;0及$u&#x3D;2\pi$映满同一个柱面带，但指向相反</li>
<li>$\Psi$把面v&#x3D;0及$v&#x3D;2\pi$映满同一个圆盘，但指向相反</li>
<li>$\Psi$把面$t&#x3D;0$映满一个圆,这圆要把0算成2-chain $\partial \Psi$的一部分（相应的函数行列式为0）。 所以$\Psi$ 只不过是当$(141)$中令$t&#x3D;a$时，以正方域$0 \le u \le 2\pi$, $0 \le v \le 2\pi$为参数域D,所得到的一个2-surface</li>
<li>$\Phi$在$(u,v)\in D$的法线是向量$N(u,v)&#x3D;a(b+a\sin u)n(u,v)$</li>
<li>这里$n(u,v)&#x3D;(\cos u)e_1+(\sin u\cos v)e_2+(\sin u \sin v)e_3$</li>
<li>因为$|n(u,v)|&#x3D;1$所以得到$|N(u,v)}&#x3D;a(b+a\sin u)$ 如果把它在D上积分，环面的面积$A(\Psi)&#x3D;4\pi^2 ab$</li>
<li>如果把$N&#x3D;N(u,v)$看成是从$\Psi(u,v)$指向$\Psi(u,v)+N(u,v)$的一个有向线段，那么N指向外，也就是说，从$\Psi(K)$离去，当t&#x3D;a时也如此，因为$J_{\Psi} &gt; 0$</li>
<li>例如，取$u&#x3D;v&#x3D;\frac{\pi}{2},t&#x3D;a$这给出$z$在$\Psi(K)$上的最大值,而对于这样选取的$(u,v),N&#x3D;a(b+a)e_3$,指向上方</li>
</ul>
<p>10.48 $R^3$中1-form的积分 令$\gamma$是开集$E\subset R^3$中的$\mathscr{C}’$曲线，其参数闭区间为$[0,1]$, 就如$10.42$向量场中那样,F是E中的向量场, 再按定义$\lambda_F$，$\lambda_F$在$\gamma$上的积分能按确定的方式写出，我们现在就来描述这种方式</p>
<ul>
<li>对于任何$u\in [0,1]$</li>
<li>$\gamma’(u)&#x3D;\gamma_1’(u)e_1+\gamma_2’(u)’e_2,\gamma_3’(u)e_3$叫作$\gamma$在u的 tangent vector to $\gamma$ at u</li>
<li>定义$t&#x3D;t(t)$为$\gamma’(u)$方向上的单位向量。</li>
<li>于是$\gamma’(u)&#x3D;|\gamma’(u)|t(u)$</li>
<li>$\int_{\gamma} \lambda_F&#x3D;\sum_{i&#x3D;1}^3 \int_0^1 F_i(\gamma(u))\gamma_i’(u)du$</li>
<li>$&#x3D;\int_0^1 F(\gamma(u))\cdot \gamma’(u)du$</li>
<li>$&#x3D;\int_0^1 F(\gamma(u)) \cdot t(u) |\gamma’(u)|du$</li>
<li>有些地方把 $|\gamma’(u)|du$称作弧长元素 element of arc length，常用$ds$表示</li>
<li>$\int_\gamma \lambda_F&#x3D;\int \gamma(F\cdot t)ds$</li>
<li>因为t是 单位 切向量，$F\cdot t$叫作F沿$\gamma$的切线分量</li>
<li>F在$\gamma$的值域上定义，$t$在$[0,1]$上定义，</li>
<li>所以$F\cdot t$必须做适当的解释，$\gamma$是1-1的时候，$t(u)$能换成$t(\gamma(u))$ 这种困难就不出现了</li>
</ul>
<p>10.49 $R^3$中2-form的积分，设$\Phi$是开集$E\subset R^3$中的$\mathscr{C}’$类 2-surface，其参数域$D\subset R^2. F为E中的向量场，并定义$\omega_F$,</p>
<ul>
<li>$\int_\Phi \omega_F&#x3D;\int_{\Phi}(F_1dy\wedge dz+F_2dz\wedge dx+F_3dx\wedge dy)$</li>
<li>$&#x3D;\int_D F_1(\Phi(u,v))\frac{\partial(y,z)}{\partial(u,v)}du dv + F_2(\Phi(u,v))\frac{\partial(z,x)}{\partial(u,v)}du dv + F_3(\Phi(u,v))\frac{\partial(x,y)}{\partial(u,v)}du dv$</li>
<li>$&#x3D;\int_D F(\Phi(u,v))\cdot N(u,v) du dv$</li>
<li>令 $n&#x3D;n(u,v)$是$N(u,v)$方向上的单位向量(如果某个(u,v)\in D,有N(u,v)&#x3D;0）取$n(u,v)&#x3D;e_1$) 于是 $N&#x3D;|N|n$</li>
<li>$&#x3D;\int_D F(\Phi(u,v))\cdot n(u,v) |N(u,v)| du dv$</li>
<li>$\int_{\Phi} \omega_F &#x3D; \int_D (F\cdot n) dA$</li>
</ul>
<p>10.50 Stokes 公式，最原始形式 设$F$是开集$E\subset R^3$中的$\mathscr{C}’$类向量场, $\Phi$是E中的$\mathscr{C}’$类2-surface</p>
<ul>
<li>那么$\int_{\Phi}(\nabla \times F) n dA&#x3D;\int_{\partial \Phi} (\lambda_F \cdot t)ds$</li>
<li>证明: 令$H&#x3D;\nabla \times F$那么$\omega_H&#x3D;d\lambda_F$</li>
<li>因此 $\int_\Phi (\nabla \times F) n dA&#x3D;\int_{\Phi} (H\cdot n)dA&#x3D;\int_{\Phi}\omega_H &#x3D; \int_\Phi d\lambda_F &#x3D;\int_{\partial \Phi} \lambda_F&#x3D;\int_{\partial \Phi}  F \cdot t ds$</li>
<li>这里先用了H的定义，其中的F换作H，主要的一步用了定理10.33，最后用到按照明显的方式从曲线推广到1-chain</li>
</ul>
<p>10.51 散度定理 设F是开集$E\subset R^3$中的$\mathscr{C}’$类向量场，$\Omega$是E的带有正向边界$\partial \Omega$的闭子集，那么</p>
<ul>
<li>$\int_{\Omega} (\nabla \cdot F) dV&#x3D;\int_{\partial \Omega} (F\cdot n) dA$</li>
<li>证明:<ul>
<li>$d\omega_F&#x3D;(\nabla \cdot F)dx\wedge dy \wedge dz &#x3D; (\nabla \cdot F)dV$</li>
<li>因此 根据定理10.33 把它用于2-form $\omega_F$ 得到</li>
<li>$\int_\Omega (\nabla \cdot F)dV&#x3D;\int_{\Omega}d\omega_F&#x3D;\int_{\partial \Omega} \omega_F&#x3D;\int_{\partial \Omega} (F\cdot n) dA$</li>
</ul>
</li>
</ul>
<h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>积分</p>
<p>10.1 定义</p>
<p>想象一个k维的“方块”（叫k-方格），就像一个长方体，只不过维度可以更高。它的边界是用一些不等式（比如x在某个范围里）定义的。如果我们有一个在这方块上连续变化的函数（不会突然跳跃的那种），我们可以通过一步步积分来计算它的总值。比如，先沿着一个方向积分，再沿着另一个方向，依次下去，最后得到一个数，这个数就是函数在这方块上的积分。</p>
<p>10.2 定理</p>
<p>对于这样的<code>连续</code>函数，不管你按什么顺序去积分（比如先x后y，还是先y后x），最后结果都一样。</p>
<ul>
<li>证明方式是 找代数 $\prod g_i(x_i)$, 它因为每个$x_i$之间关系是“独立的”所以 积分顺序对结果不影响</li>
<li>stone-weierstrass，可以在 上述代数 中找到足够近的 g逼近f，那么 在不同 顺序下可以做得足够近，从而每个 分量 也被限制了，从而 $L(f)-L(f’)&#x3D;L(f)-L(g)-L(f’)+L(g)&#x3D;L(f-g)-L(f’-g)$</li>
</ul>
<p>10.3 定义</p>
<p>函数的“支撑集”是指函数值不为零的点集合，再加上这些点的“边界”。如果一个函数的支撑集是有限的（不会无限散开），我们可以用一个包含它的大方块来算积分，结果不会因为方块选得不一样而改变。</p>
<p>10.4 例</p>
<p>有个特殊的形状叫k-单形，比如三维里就是一个四面体（像个三角锥）。如果我们想算一个函数在这上面的积分，可以把它放进一个方块里，外面补零，然后按方块的积分方法来算。结果也不在乎你怎么安排积分顺序。</p>
<p>本原映射</p>
<p>10.5 定义</p>
<p>本原映射是一种简单的变换，它最多只改变一个方向的坐标。比如，一个点在空间里移动，但只有高度变了，其他位置没动。这种变换用一个函数来控制那个改变的方向。</p>
<p>10.6 定义</p>
<p>“对换”就是把两个方向的坐标交换，其他保持不变。比如，把x和y换一下，z不动。</p>
<p>10.7 定理</p>
<p>如果一个变换很“平滑”（可微），而且在某个点附近可以“扭回来”（导数可逆），那么在那个点附近，它可以拆成一系列本原映射和对换的组合。就像复杂的舞蹈可以用几个基本动作拼出来。</p>
<p>单位的分割</p>
<p>10.8 定理</p>
<p>想象一个有限的区域被一堆开集（像气泡一样的区域）覆盖。我们可以造一些平滑的函数，每个函数在一个气泡里“活泼”，外面就“安静”，而且这些函数加起来在整个区域里总和是1。这叫“单位的分割”。</p>
<p>推论：如果一个函数只在这区域里有值，我们可以用这些分割函数把它拆成几块，每块只在一个气泡里活跃。</p>
<p>变量代换</p>
<p>10.9 定理</p>
<p>如果我们用一个平滑的、可逆的变换把一个区域变成另一个区域，算函数在这新区域上的积分时，可以在新区域的参数上算，但要乘一个“缩放因子”（Jacobian的绝对值）。就像地图投影，面积会变，但可以用一个比例调整回来。</p>
<p>微分形式</p>
<p>这一部分是微积分的核心工具，用来处理更高维的积分问题，最终引出Stokes定理。</p>
<p>10.10 定义</p>
<p>k-曲面是从一个k维紧区域（比如方格或单形）映射到更高维空间的东西。k-形式是一种符号表达，像是个“积分模板”，告诉我们在k-曲面上怎么算积分。它会把曲面上的变化（偏导数）考虑进去。</p>
<p>10.11 定义</p>
<p>0-形式就是普通的连续函数。k-形式的积分是按10.10的规则，在k-曲面上算出来的值。</p>
<p>10.12 例</p>
<p>线积分：一条曲线上的积分（比如x dy + y dx），只看起点和终点，结果与路径无关。如果是闭合曲线，积分可能是零。  </p>
<p>面积：某些闭曲线的积分能算出它围起来的面积，比如椭圆。</p>
<p>10.13 初等性质</p>
<p>两个k-形式相等，只要它们在每个k-曲面上的积分一样。  </p>
<p>微分形式有“反交换”性质：换顺序会变号，所以同一个方向重复就抵消成零。  </p>
<p>如果维度k超过空间维度n，k-形式只能是零。</p>
<p>10.14 基本k-形式</p>
<p>基本k-形式是用递增的方向（比如dx1 ∧ dx2）组合成的模板，每个k-形式都可以用这些基本形式拼出来。</p>
<p>10.15 定理</p>
<p>如果一个k-形式的积分总是零，那么它的每个系数（基本形式的“强度”）也必须是零。</p>
<p>10.16 基本k-形式的积</p>
<p>两个基本形式相乘，结果是个更高维的形式。如果有重复方向，结果是零；否则按顺序排好，可能会变个正负号。</p>
<p>10.17 乘法</p>
<p>k-形式可以相乘，结果是更高维的形式，满足分配律和结合律。0-形式（普通函数）乘k-形式就像给它加个“权重”。</p>
<p>10.18 微分</p>
<p>0-形式的微分是它的各个方向的变化率组合起来。  </p>
<p>k-形式的微分是把每个系数微分后，和原来的形式“相乘”。</p>
<p>10.19 例</p>
<p>一个函数在曲线上的微分积分，只取决于起点和终点的值，跟路径没关。这就像爬山，高度差只看两端。</p>
<p>10.20 定理</p>
<p>微分满足“Leibniz律”：两个形式相乘后微分，可以拆成两部分，可能带个正负号。  </p>
<p>如果形式够平滑（二阶可微），它的“二阶微分”总是零。</p>
<p>10.21 变量代换</p>
<p>一个k-形式在变换后，可以用新坐标表达，微分也要跟着变。</p>
<p>10.22 定理</p>
<p>变换后，形式的加法和乘法保持不变。  </p>
<p>如果形式和变换都够平滑，先微分再变换等于先变换再微分。</p>
<p>10.23 定理</p>
<p>变换可以复合：先做一次变换，再做另一次，结果等于直接做总的变换。</p>
<p>10.24 定理</p>
<p>k-形式的积分可以用变换后的形式在参数域上算，结果一样。</p>
<p>10.25 定理</p>
<p>如果变换后再积分，可以先在原区域上算变换后的形式，结果相同。</p>
<p>单形与链</p>
<p>10.26 仿射单形</p>
<p>仿射单形是一个从标准单形（像个三角锥）映射到空间里的形状，用点和线性变化定义。如果有方向，就叫“有向单形”。</p>
<p>10.27 定理</p>
<p>改变单形方向（比如正负号），积分会跟着变号。</p>
<p>10.28 仿射链</p>
<p>仿射链是一堆有向单形的组合，积分是每个单形积分的总和。</p>
<p>10.29 边界</p>
<p>k-单形的边界是它周围的(k-1)-单形组合，带上正负号，像个有向的轮廓。</p>
<p>10.30 可微单形及可微链</p>
<p>可微单形是用平滑变换生成的单形，可微链是一堆这样的单形。它们的边界也跟着定义。</p>
<p>10.31 正向边界</p>
<p>标准单形的边界叫正向边界。如果一个区域是用变换生成的，它的正向边界就是变换后的边界。</p>
<p>10.32 例</p>
<p>球面的边界积分是零，因为它是个闭合形状，起点和终点抵消了。</p>
<p>Stokes定理</p>
<p>10.33 Stokes定理</p>
<p>一个k-链的边界上的积分，等于它内部的微分形式的积分。这是个超级重要的定理，像微积分基本定理的高维版本。</p>
<p>闭形式与恰当形式</p>
<p>10.34 定义</p>
<p>恰当形式：能被某个低一阶形式的微分表示。  </p>
<p>闭形式：自己的微分是零。</p>
<p>10.35 评注</p>
<p>闭形式的边界积分是零。  </p>
<p>恰当形式的闭链积分是零。  </p>
<p>边界的边界总是零。</p>
<p>10.36 例</p>
<p>平面上一个去掉原点的形式是闭的（微分零），但不是恰当的（积分不为零）。</p>
<p>10.37 例</p>
<p>三维空间去掉原点的一个形式也是闭的，但不是恰当的，球面积分不为零。</p>
<p>10.38 定理</p>
<p>在凸区域（没有洞的形状），如果某些方向的变化率为零，可以找到一个函数解释它。</p>
<p>10.39 定理（Poincaré引理）</p>
<p>在凸区域，每个闭形式都是恰当的。</p>
<p>10.40 定理</p>
<p>如果两个区域通过平滑变换等价，一个满足闭形式是恰当的，另一个也满足。</p>
<p>10.41 评注</p>
<p>单形在拓扑学里很有用，但方格在计算上可能更方便。</p>
<p>向量分析</p>
<p>10.42 向量场</p>
<p>向量场是空间里每个点配一个箭头。可以用1-形式（线积分用）和2-形式（面积分用）表示。梯度、旋度、散度是描述它的三种方式。</p>
<p>10.43 定理</p>
<p>梯度的旋度是零，旋度的散度是零。  </p>
<p>在某些简单形状里（像凸区域），反过来也成立。</p>
<p>10.44 体积元素</p>
<p>k-形式的“体积元素”用来算k维空间的体积或面积。</p>
<p>10.45 Green定理</p>
<p>平面区域边界上的线积分等于内部的变化率差的面积分。</p>
<p>10.46 R^3中的面积元素</p>
<p>三维里的面积用曲面上的法向量算，积分是法向量长度乘以函数值。</p>
<p>10.47 例</p>
<p>环面的体积和面积可以用参数化和法向量算出来。</p>
<p>10.48 R^3中1-形式积分</p>
<p>向量场在曲线上的积分是它沿切线方向的分量总和。</p>
<p>10.49 R^3中2-形式积分</p>
<p>向量场在曲面上的积分是它沿法线方向的分量总和。</p>
<p>10.50 Stokes公式</p>
<p>曲面上的旋度积分等于边界上的线积分。</p>
<p>10.51 散度定理</p>
<p>区域内的散度积分等于边界上的法向通量。</p>
<p>这些定理串起来就是微分形式和积分理论的核心，从基本的积分定义到高维的Stokes定理，应用在数学和物理里非常广泛。希望这样解释能让你轻松理解！</p>
]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>Walter Rudin 数学分析原理 11 Lebesgue理论</title>
    <url>/Math/Principles_of_Mathematical_Analysis_11/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="Lebesgue理论"><a href="#Lebesgue理论" class="headerlink" title="Lebesgue理论"></a>Lebesgue理论</h2><h3 id="集函数"><a href="#集函数" class="headerlink" title="集函数"></a>集函数</h3><h3 id="Lebesgue测度的建立"><a href="#Lebesgue测度的建立" class="headerlink" title="Lebesgue测度的建立"></a>Lebesgue测度的建立</h3><h3 id="测度空间"><a href="#测度空间" class="headerlink" title="测度空间"></a>测度空间</h3><h3 id="可测函数"><a href="#可测函数" class="headerlink" title="可测函数"></a>可测函数</h3><h3 id="简单函数"><a href="#简单函数" class="headerlink" title="简单函数"></a>简单函数</h3><h3 id="积分"><a href="#积分" class="headerlink" title="积分"></a>积分</h3><h3 id="与Riemann积分的比较"><a href="#与Riemann积分的比较" class="headerlink" title="与Riemann积分的比较"></a>与Riemann积分的比较</h3><h3 id="复函数的积分"><a href="#复函数的积分" class="headerlink" title="复函数的积分"></a>复函数的积分</h3><h3 id="mathcal-L-2-类的函数"><a href="#mathcal-L-2-类的函数" class="headerlink" title="$\mathcal{L}^2$类的函数"></a>$\mathcal{L}^2$类的函数</h3><p>11.43</p>
]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>Walter Rudin 数学分析原理 2 基础拓扑</title>
    <url>/Math/Principles_of_Mathematical_Analysis_2/</url>
    <content><![CDATA[<p>isbn</p>
<ul>
<li>中文 9787111134176</li>
<li>英文 9787111619543</li>
</ul>
<span id="more"></span>

<h2 id="基础拓扑-Basic-topology"><a href="#基础拓扑-Basic-topology" class="headerlink" title="基础拓扑 Basic topology"></a>基础拓扑 Basic topology</h2><h3 id="有限集、可数集和不可数集"><a href="#有限集、可数集和不可数集" class="headerlink" title="有限集、可数集和不可数集"></a>有限集、可数集和不可数集</h3><p>2.1 A,B 都是 sets, A中x和B中一个元素关联associated, f(x)表示，f is said to be a function from A to B(or mapping of A into B).</p>
<ul>
<li>the set A is called the <code>domain</code> of f(we also say f is defined on A)</li>
<li>and the elements f(x) are called the values of f. the set of all values of f is called the <code>range</code> of f</li>
</ul>
<p>2.2 $E\subset A$, f(E) is defined to be the set of all elements f(x),for x in E. we call f(E) the <code>image</code> of E under f.</p>
<ul>
<li>f(A) is the <code>range</code> of f</li>
<li>$f(A) \subset B$, if f(A)&#x3D;B ,we say that f maps A <code>onto</code> B<ul>
<li>onto is more specific than into</li>
</ul>
</li>
<li><code>inverse image</code> of E under f: $F\subset B,f^{-1}(F)&#x3D;\lbrace x| x\in A,f(x)\in F \rbrace$</li>
<li>for each y in B, if $f^{-1}(y)$ 至多一个, then f is said to be <code>1-1(one-to-one)</code> mapping of A <code>into</code> B<ul>
<li>f is a 1-1 mapping of A into B provided that f(x1) neq f(x2) whenever x1 neq x2</li>
</ul>
</li>
</ul>
<p>2.3 if <code>1-1 mapping</code> A <code>onto</code> B, we say that A and B can be put in 1-1 correspondence</p>
<ul>
<li>or that A and B have the same <code>cardinal number</code> 基数</li>
<li>or, briefly, that A and B are <code>equivalent</code>  等价</li>
<li>写作 A~B<ul>
<li>reflexive 自反性 A~A</li>
<li>symmetric 对称性 A<del>B then B</del>A</li>
<li>transitive 传递性 A<del>B,B</del>C then A~C</li>
<li>同时满足这三个，称作 equivalence relation 等价关系</li>
</ul>
</li>
</ul>
<p>2.4 正整数n, 令$J_n&#x3D;${1,…,n},令$J$表示全体正整数</p>
<ul>
<li>finite有限, A~$J_n$ 对于某个n ，空集合也是有限集合<ul>
<li>infinite 无限： 不是有限</li>
</ul>
</li>
<li>countable 可数, if A ~ J</li>
<li>uncountable 不可数, neither finite nor countable</li>
<li>at most countable if A is finite or countable</li>
</ul>
<p>2.6 有限集无法和它真子集(proper subsets)等价</p>
<ul>
<li>如果一个集合和自己的真子集等价，那么它是无限的</li>
</ul>
<p>2.7 序列 sequence, $f(n)&#x3D;x_n$, 定义在J上的，有时会用下标从0开始</p>
<p>2.8 定理 可数集A的每个无限子集也是可数集</p>
<p>2.9 定义 A, B 是集合, A中任意元素a is associated a subset of B which we denote by $E_a$</p>
<ul>
<li>记作 {E_a}</li>
<li>instead of speaking of sets of sets, we shall sometimes speak of a collection of sets, or a family of sets</li>
<li>union of E_a: $S&#x3D;\cup_{a\in A}E_a$</li>
<li>intersection of E_a: $S&#x3D;\cap_{a\in A}E_a$</li>
<li>注意的是 如果A可数&#x2F;可列，那么可以写成 下标的形式，例如$\cup_{i&#x3D;1}^n$</li>
<li>intersect: $A\cap B$ is not empty<ul>
<li>otherwise they are <code>disjoint</code></li>
</ul>
</li>
</ul>
<p>2.11 一些 交并运算</p>
<p>2.12 可数集的可数并是可数集：斜对角法+定理2.8<br>    - 2.13 {a_i}可数,  由其元素构成的n元组可数<br>        - 有理数可数</p>
<p>2.14 Let A be the set of all sequences whose elements are the digits 0 and 1 then set A is uncountable</p>
<ul>
<li>Cantor 对角矛盾反证法（这在证明无理数不可数时也出现过，</li>
<li>二进制表示法的一个理解</li>
</ul>
<h3 id="度量空间-Metric-space"><a href="#度量空间-Metric-space" class="headerlink" title="度量空间 Metric space"></a>度量空间 Metric space</h3><p>2.15 距离distance: d(p,q)</p>
<ul>
<li>同点0,非同点正</li>
<li>对称性</li>
<li>最近性: d(p,q)&lt;&#x3D;d(p,r)+d(r,q)</li>
<li>distance function 满足上述三个条件，或者称作metric(度量)</li>
</ul>
<p>2.17 segment(a,b) we mean the set of all real numbers x such that a &lt; x &lt; b</p>
<ul>
<li>其它 中括号小括号记法</li>
<li>convex凸: x,y in E,0 &lt; lambda &lt; 1 则 lambda x + (1-lambda) y \in E</li>
</ul>
<p>2.18 度量空间中</p>
<ul>
<li>neighborhood 邻域, 通过 点 半径 距离函数来定义<ul>
<li>例如$R^1$中开区间</li>
<li>$R^2$中圆内部</li>
</ul>
</li>
<li>limit point 极限点, E的极限点p：p的任意邻域有E中非p的点q<ul>
<li>记作 E’</li>
<li>非 limit point, 称作isolated point of E孤立点</li>
<li>closed闭集 every limit point of E in E</li>
</ul>
</li>
<li>interior point内点, 存在r,使得邻域全属于E<ul>
<li>open: 所有点都是内点</li>
</ul>
</li>
<li>complement of E($E^c$) 补集, 通过点的属于来定义</li>
<li>perfect 完全的（完备集？） closed and 所有点都是极限点</li>
<li>bounded, 某点+某半径覆盖所有点</li>
<li>dense 稠密: E在X中稠密，X的每个点都是 E的极限点或E的点</li>
</ul>
<p>2.19 邻域是开集</p>
<p>2.20 极限点任意邻域有无穷多点</p>
<ul>
<li>定义是任意邻域有非自身的点，而有限能取min, </li>
<li>corollay. 有限集没有极限点</li>
</ul>
<p>2.22 并的补 &#x3D; 补的交</p>
<p>2.23 开的补是闭，闭的补是开</p>
<p>2.24 </p>
<ul>
<li>开的任意并是开</li>
<li>闭的任意交是闭</li>
<li>开的有限交是开</li>
<li>闭的有限并是闭<ul>
<li>见普林斯顿那本书的笔记，核心还是有限时有min可取，无限会破坏这个min，从而破坏 “一致性”</li>
<li>$[0,1&#x2F;n)$</li>
</ul>
</li>
</ul>
<p>2.26 closure(E), 闭包</p>
<ul>
<li>$\bar{E}&#x3D;E\cup E’$ ，E和E的极限点集的并<ul>
<li>可以看成对E进行一个运算后的结果</li>
</ul>
</li>
<li>性质<ul>
<li>闭包 是 闭集</li>
<li>$E&#x3D;\bar{E}$当且仅当E是闭集</li>
<li>F是闭集, $E \in F$则 $\bar{E}\subset F$ ，也就是 闭集的子集的极限点不会超出原来的闭集</li>
</ul>
</li>
</ul>
<p>2.28 非空 实数集E 且 bounded above , y &#x3D; sup E , then $y \in \bar{E}$, 也就是从有序集合角度看上去的上确界，是在拓扑角度看上去的闭包中</p>
<p>2.29 开区间在R1上是开集，在R2上不是开集，<code>open relative to</code></p>
<ul>
<li>E subset Y subset X<ul>
<li>开区间 subset R1 subset R2</li>
</ul>
</li>
<li>X 度量空间, Y有着和X同样的度量函数&#x2F;距离函数, 那么可以用 距离函数 定义在Y上的相对开集</li>
</ul>
<p>2.30 theorem 若 $Y\subset X$  , a subset E of Y is open relative to Y if and only if E &#x3D; Y cap G for some open subset G of X</p>
<ul>
<li>利用2.24 开的任意并是开 以及 邻域选点+半径，构造 G&#x3D;cup X中邻域(p,按照Y要求选的半径)</li>
</ul>
<h3 id="紧集-compact-sets"><a href="#紧集-compact-sets" class="headerlink" title="紧集 compact sets"></a>紧集 compact sets</h3><p>2.31 开覆盖open cover: E subset cup E_a</p>
<p>2.32 紧compact: every open cover of K contains a finite subcover</p>
<ul>
<li>任意 开覆盖 有 有限 子覆盖<ul>
<li>注意 任意 而不是存在</li>
<li>后面是 有限</li>
</ul>
</li>
</ul>
<p>2.33 $K\subset Y\subset X$ , K关于X是紧的当且仅当 K关于Y是紧的</p>
<p>2.34 度量空间紧子集是闭集</p>
<ul>
<li>证明其补是开集，找r&#x3D; 1&#x2F;2 距离再三角不等式</li>
</ul>
<p>2.35 紧集的闭子集都是紧集</p>
<ul>
<li>闭子集任意开覆盖 加上 <code>闭子集的补</code> 覆盖紧集，存在一个有限子覆盖，其中不含 闭子集的补的部分覆盖了闭子集</li>
</ul>
<p>2.36 {紧子集} 任意有限交 非空，那么 {紧子集} 的任意交非空</p>
<ul>
<li>反证：k1 中任意点都不存在于所有集合中，其它的补对k1形成开覆盖，紧所有有限个其它的补对k1开覆盖，这些与k1交为空</li>
</ul>
<p>2.37 E是紧集K的无限子集，那么E在K中有极限点</p>
<ul>
<li>反证：如果没有极限点，那么K中所有点可以开一个半径至多含有一个E中的点，从而有有限开覆盖覆盖了无穷多点的E,而每个开覆盖又只覆盖了一个点，</li>
</ul>
<p>2.38 R1中可数闭区间套的可数交非空</p>
<ul>
<li>sup 左端点 显然属于其中</li>
<li>2.39 $R^k$ 中的 可数闭区间套的可数交非空<ul>
<li>每个维度是独立的</li>
</ul>
</li>
</ul>
<p>2.40 每个k-方格(k-cell)是紧集</p>
<ul>
<li>反证法：无限格子套 + 1&#x2F;2 切割长度 + 邻域控制</li>
<li>从而 k-方格 任意开覆盖总是有有限子覆盖，所以紧</li>
</ul>
<p>2.41 heine-borel定理</p>
<ul>
<li>$\mathbb{R}^k$中<ul>
<li>闭+有界</li>
<li>紧</li>
<li>E的每个无限子集 在 E 内有极限点</li>
<li>这三个等价</li>
</ul>
</li>
</ul>
<p>2.42 weierstrass定理 $\mathbb{R}^k$中每个有界无限子集在$\mathbb{R}^k$中有极限点</p>
<h3 id="完备集，完全集perfect-sets"><a href="#完备集，完全集perfect-sets" class="headerlink" title="完备集，完全集perfect sets"></a>完备集，完全集perfect sets</h3><p>2.43 $\mathbb{R}^k$中非空完全集P 不可数</p>
<ul>
<li>无限显然</li>
<li>如果可数，那么有排列</li>
<li>那么按照顺序，构造嵌套邻域（如果 不在上次构造的邻域中，那么跳过这个点），排除上一个点<ul>
<li>这样我们可以构造出 新邻域的闭包 属于 旧邻域，的无限嵌套，相对于P的交也是无限嵌套，</li>
<li>因为每次排除点，认为无限交应该是空，但另一方面嵌套非空紧集无限交非空</li>
</ul>
</li>
</ul>
<p>(勘误?) 这里中英文书感觉，都漏了一步叫做 $K_n &#x3D; \bar{V_n} \cap P$ , $\bar{V_n}$是有界闭集，所以紧</p>
<ul>
<li>$K_n$ 的每个无限子集E, 是 $\bar{V_n}$的 无限子集 &#x3D;&gt; 在$\bar{V_n}$ 中有极限点(2.41), 另一方面E属于P,所以极限点也属于P</li>
<li>所以该极限点属于$K_n$</li>
<li>根据2.41 $K_n$ 紧</li>
<li><a href="https://book.douban.com/subject/1230288/discussion/616834625/">https://book.douban.com/subject/1230288/discussion/616834625/</a></li>
</ul>
<p>2.44 cantor set</p>
<ul>
<li>每次 3等分去掉中间段</li>
<li>无限交是无限多点集合</li>
<li>是紧的</li>
<li>不含任何线段</li>
<li>无孤立点</li>
<li>不可数的0测度集的例子</li>
</ul>
<h3 id="连通集-connected-sets"><a href="#连通集-connected-sets" class="headerlink" title="连通集 connected sets"></a>连通集 connected sets</h3><p>2.45 separated 分开的 $\bar{A}\cap B&#x3D;\varnothing ,A\cap \bar{B}&#x3D;\varnothing$</p>
<ul>
<li>connected: 不是分开的</li>
</ul>
<p>2.47 R1中 connected 当且仅当 x,y in E，那么 x,y之间的in E</p>
]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>Walter Rudin 数学分析原理 3 数列与级数</title>
    <url>/Math/Principles_of_Mathematical_Analysis_3/</url>
    <content><![CDATA[<p>isbn</p>
<ul>
<li>中文 9787111134176</li>
<li>英文 9787111619543</li>
</ul>
<span id="more"></span>

<h2 id="数列与级数-numerical-sequences-and-series"><a href="#数列与级数-numerical-sequences-and-series" class="headerlink" title="数列与级数 numerical sequences and series"></a>数列与级数 numerical sequences and series</h2><h3 id="收敛序列-convergent-sequences"><a href="#收敛序列-convergent-sequences" class="headerlink" title="收敛序列 convergent sequences"></a>收敛序列 convergent sequences</h3><p>3.1 数列收敛converge，能找到p，对于任意给定距离需求，可以通过N来控制 $|a_{n&gt;N}-p|&lt;$距离需求</p>
<ul>
<li>否则  diverge</li>
</ul>
<p>3.2 度量空间X中的序列{p_n}</p>
<ul>
<li>p的任意邻域，可以通过p_n从某处截断 以后的序列全在邻域中</li>
<li>唯一收敛点</li>
<li>收敛则有界</li>
<li>$E\subset X$, E的极限点p,那么E中有一个序列可以收敛到p<ul>
<li>极限点缩小半径构造就好了</li>
</ul>
</li>
</ul>
<p>3.3 复数序列的 四则运算（注意0）</p>
<p>3.4 $\mathbb{R}^k$ 中收敛，需要每个维度收敛，独立性+max(N)</p>
<ul>
<li>加运算，数乘运算，点积运算</li>
</ul>
<h3 id="子序列-subsequences"><a href="#子序列-subsequences" class="headerlink" title="子序列 subsequences"></a>子序列 subsequences</h3><p>3.5 按 不减下标抽取 的序列</p>
<ul>
<li>子序列也是序列，类似定义子序列极限 subsequential limit</li>
</ul>
<p>3.6</p>
<ul>
<li>紧度量空间X的序列p_n,它存在子序列收敛到X中某个点<ul>
<li>证明：序列集合在X中有极限点，极限点+下标增大控制+距离趋于0控制 下 构造序列</li>
</ul>
</li>
<li>$\mathbb{R}^k$每个有界序列含有收敛子序列<ul>
<li>具体到$\mathbb{R}^k$中了，有界能找到紧盒子，紧子集中</li>
</ul>
</li>
</ul>
<p>3.7 度量空间X中 的序列 {p_n}的部分极限组成了X的闭子集</p>
<ul>
<li>和 闭包的闭包 不会有新的点类似的证明思路，还是邻域+三角不等式</li>
</ul>
<h3 id="Cauchy序列-sequences"><a href="#Cauchy序列-sequences" class="headerlink" title="Cauchy序列 sequences"></a>Cauchy序列 sequences</h3><p>3.8 定义Cauchy 序列</p>
<ul>
<li>序列在度量空间X中，对于任意给定距离$\epsilon &gt; 0$，可以用N控制 $d(p_{n&gt;N},p_{m&gt;N}) &lt;\epsilon$</li>
</ul>
<p>3.9 直径， E是度量空间X的子集</p>
<ul>
<li>sup { d(p,q) | p in E, q in E } , 记作 diam E</li>
<li>Cauchy序列也就是说 可以通过N控制 直径，即直径趋于0</li>
</ul>
<p>3.10 定理</p>
<ul>
<li>diam $\bar{E}$ &#x3D; diam E, 闭包不影响直径<ul>
<li>闭包点更多只可能更大，所以证明  diam 闭包 &lt;&#x3D; diam E + 任意数 来证明另一侧，又用到三角不等式</li>
</ul>
</li>
<li>嵌套紧集，且紧集趋于0,那么所有嵌套紧集的可数交为单点集</li>
</ul>
<p>3.11 </p>
<ul>
<li>度量空间中 收敛序列是Cauchy序列</li>
<li>紧度量空间X+Cauchy序列，收敛于X中某个点</li>
<li>$\mathbb{R}^k$中每个Cauchy序列收敛</li>
</ul>
<p>3.12 如果度量空间X中的每个Cauchy序列 在X中 收敛，就说它是完备的 complete</p>
<ul>
<li>all compact metric spaces and all euclidean spaces are complete</li>
<li>不完备例子： 有理数和度量函数 d(x,y)&#x3D;|x-y| ,最开始举例过 到 根号2<ul>
<li>这里也可以看到，逼近根号2的序列，在 这样的 定义下，它是柯西序列，因为它任意两个可以无限的接近，而却不是收敛序列，因为找不到一个 有理数，使得其中的值和这个有理数无限的近</li>
</ul>
</li>
</ul>
<p>3.13 实数序列</p>
<ul>
<li>单调递增  $s_n \le s_{n+1}$</li>
<li>单调递减  $s_n \ge s_{n+1}$</li>
</ul>
<p>3.14 单调序列收敛，当且仅它当有界</p>
<h3 id="上极限和下极限-upper-and-lower-limits"><a href="#上极限和下极限-upper-and-lower-limits" class="headerlink" title="上极限和下极限 upper and lower limits"></a>上极限和下极限 upper and lower limits</h3><p>3.15 对于任意M,有N, $s_{n &gt; N} \le M$, 则$s_n\to -\infty$</p>
<p>3.16 实数扩充 正负无穷，</p>
<ul>
<li>$E$ &#x3D; 所有可能的子序列极限的集合</li>
<li>$s^*&#x3D;\text{sup}E$</li>
<li>$s_*&#x3D;\text{inf}E$</li>
<li>分别 是 序列的上下极限</li>
</ul>
<p>3.17 </p>
<ul>
<li>$s^* \in E$</li>
<li>$x &gt; s^*$ 有正整数N, $s_{n &gt; N} &lt; x$</li>
<li>$s^*$是唯一具有上述两点的数</li>
<li>证明<ul>
<li>正负无穷时</li>
<li>第一条，又是出现几次的 闭包的闭包不会多点， 3.7 类似的思路</li>
<li>有非无穷上界，如果有无穷多个超过x,那么这个新序列的极限 &gt;&#x3D; x 也就 &gt; $s^*$ 与 sup E定义矛盾，</li>
<li>唯一：比它大的不满足属于E, 比它小的不满足第二条因为 邻域可以控制在$x&#x3D;s^*$</li>
</ul>
</li>
</ul>
<p>3.19 n &gt; N时 两个序列保持对应下标一致偏序关系 $s_n \le t_n$那么</p>
<ul>
<li>子序列集合的 上下确界 对应的 $\le$</li>
</ul>
<h3 id="一些特殊序列-some-special-sequences"><a href="#一些特殊序列-some-special-sequences" class="headerlink" title="一些特殊序列 some special sequences"></a>一些特殊序列 some special sequences</h3><ul>
<li>$p &gt; 0$ 时$\lim_{n\to \infty}\frac{1}{n^p}&#x3D;0$</li>
<li>$p &gt; 0$ 时$\lim_{n\to \infty}p^{1&#x2F;n}&#x3D;1$</li>
<li>$\lim_{n\to \infty}n^{1&#x2F;n}&#x3D;1$</li>
<li>$p&gt;0,a\in\mathbb{R},\lim_{n\to \infty}\frac{n^a}{(1+p)^n}&#x3D;0$</li>
<li>$|x|&lt;1, \lim_{n\to\infty}x^n&#x3D;0$</li>
</ul>
<h3 id="级数-series"><a href="#级数-series" class="headerlink" title="级数 series"></a>级数 series</h3><p>3.21 部分和 $s_n&#x3D;\sum_{i&#x3D;1}^n a_i$</p>
<ul>
<li>series diverge级数收敛: 序列 $s_n$ 收敛</li>
</ul>
<p>3.22 Cauchy criterion(3.11)</p>
<ul>
<li>任意epsilon, 可以用N来控制$|\sum_{i&#x3D;n}^m a_i| \le \epsilon$</li>
</ul>
<p>3.23 $a_i$趋于0</p>
<ul>
<li>注意必要非充分</li>
<li>例如 $a_i&#x3D;1&#x2F;i$</li>
</ul>
<p>3.24 非负的级数收敛，当且仅当 s_n 构成有界数列</p>
<p>3.25 比较判别法</p>
<ul>
<li>$|a_n| \le c_n$ 且$\sum c_n$收敛 则$\sum a_n$收敛</li>
<li>$0 \le b_n \le d_n$ 且$\sum b_n$发散，则$\sum d_n$发散</li>
</ul>
<h3 id="非负项级数-series-of-nonnegative-terms"><a href="#非负项级数-series-of-nonnegative-terms" class="headerlink" title="非负项级数 series of nonnegative terms"></a>非负项级数 series of nonnegative terms</h3><p>3.26 $0\le x&lt;1$</p>
<ul>
<li>$\sum_{n&#x3D;0}^\infty x^n&#x3D;\frac{1}{1-x}$</li>
</ul>
<p>3.27 $a_i\ge 0$不增</p>
<ul>
<li>$\sum {a_n}$ 和$\sum_{k} 2^ka_{2^k}$ 同敛散<ul>
<li>1&#x2F;2 右 &lt;&#x3D; 左 &lt;&#x3D; 右</li>
</ul>
</li>
</ul>
<p>3.28 $\sum \frac{1}{n^p}$</p>
<ul>
<li>p &gt; 1  收敛</li>
<li>$p \le 1$ 发散</li>
</ul>
<p>3.29 $\displaystyle \sum_{n&#x3D;2}^{\infty}\frac{1}{n(\log n)^p}$</p>
<ul>
<li>p &gt; 1发散</li>
<li>p &lt;&#x3D; 1 收敛</li>
</ul>
<h3 id="数e"><a href="#数e" class="headerlink" title="数e"></a>数e</h3><p>3.30 $e&#x3D;\sum_{n&#x3D;0}^{\infty} \frac{1}{n!}$</p>
<ul>
<li>$0!&#x3D;1$</li>
</ul>
<p>3.31 定理</p>
<ul>
<li>$\lim_{n\to \infty} (1+\frac{1}{n})^n&#x3D;e$</li>
<li>$s_n$为3.30 的部分和，$t_n$为这里的项<ul>
<li>对$t_n$ 二项式展开， 注意到 $\binom{n}{k}1^{n-k}(1&#x2F;n)^k&#x3D;(1&#x2F;k!)\cdot (&lt;1)$,所以 lim sup t_n \le lim sup s_n &#x3D; e</li>
<li>对任意给定m, 若$n\ge m$ $t_n \ge \sum (1&#x2F;k!)\cdot (&lt; 1)$<ul>
<li>其中右侧  &lt; 1 的部分，在固定m情况下，n趋于无穷时，趋于1</li>
<li>$\lim \inf_{n\to \infty} t_n \ge  s_m$</li>
</ul>
</li>
</ul>
</li>
<li>收敛速度 $e-s_n&#x3D;\frac{1}{(n+1)!}+\frac{1}{(n+2)!}+\cdots$<ul>
<li>$&lt;\frac{1}{(n+1)!}(1+\frac{1}{(n+1)}+\frac{1}{(n+1)^2}+\cdots)$</li>
<li>$&#x3D;\frac{1}{n!n}$</li>
</ul>
</li>
</ul>
<p>3.32 定理 e是无理数</p>
<ul>
<li>反证 e&#x3D;p&#x2F;q</li>
<li>0 &lt; e - s_q &lt; 1&#x2F;(q!q)</li>
<li>0 &lt; q!(e-s_q) &lt; 1&#x2F;q 注意到 中间的是整数</li>
</ul>
<h3 id="根值验敛法与比率验敛法-the-root-and-ratio-tests"><a href="#根值验敛法与比率验敛法-the-root-and-ratio-tests" class="headerlink" title="根值验敛法与比率验敛法 the root and ratio tests"></a>根值验敛法与比率验敛法 the root and ratio tests</h3><p>3.33 root test $b &#x3D; \lim \sup_{n\to \infty} |a_n|^{1&#x2F;n}$</p>
<ul>
<li>b &lt; 1, $\sum a_n$ 收敛</li>
<li>b &gt; 1, $\sum a_n$ 发散<ul>
<li>我们能找到子序列极限是b, 这个子序列的和就已经发散了</li>
</ul>
</li>
<li>b &#x3D; 1 时无结果</li>
</ul>
<p>3.34 ratio test $b&#x3D;\lim \sup_{n\to \infty} |\frac{a_{n+1}}{a_n}|$</p>
<ul>
<li>$b&lt;1$  级数收敛</li>
<li>如果 固定 n_0, n &gt;&#x3D; n_0时 $|\frac{a_{n+1}}{a_n}| \ge 1$ 它发散<ul>
<li>注意的是 上面是b来判断，而这里 lim sup 在 &gt;&#x3D; 1时并不能判断</li>
<li>一个简单的例子就是 $1+1&#x2F;6+1&#x2F;6^2+\cdots$显然是收敛的<ul>
<li>而我们通过一个简单的拆分，每两个均分$1+1&#x2F;12+1&#x2F;12+1&#x2F;72+1&#x2F;72$ 你会发现还是收敛的但是 lim sup &#x3D;1</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>3.37  定理 任意正数序列$a_n$</p>
<ul>
<li>$\lim \inf_{n\to \infty} \frac{a_{n+1}}{a_n}\le \lim \inf_{n\to \infty} a_n^{1&#x2F;n}$</li>
<li>$\lim \sup_{n\to \infty} \frac{a_{n+1}}{a_n}\ge \lim \sup_{n\to \infty} a_n^{1&#x2F;n}$<ul>
<li>证明 令 左侧&#x3D;b, 如果无穷显然，如果有限，可以找到c,使得n &gt; N ,$a_{n+1}&#x2F;a_n \le c$ </li>
<li>$a_{N+t} \le c^ta_{N}$</li>
<li>即 $a_{i} \le c^{i-N}a_{N}$</li>
<li>即 $a_{i}^{1&#x2F;i} \le c (c^{-N}a_{N})^{1&#x2F;i}$</li>
<li>$\lim \sup \le c$</li>
<li>注意对于任意$c &gt; b$ 都成立, 所以 证毕</li>
</ul>
</li>
</ul>
<h3 id="幂级数-power-series"><a href="#幂级数-power-series" class="headerlink" title="幂级数 power series"></a>幂级数 power series</h3><p>3.38 $\sum_{i&#x3D;0}^{\infty} c_iz^i$, 其中 $c_i$ 是复系数, z是复数（一般来说 收敛区域在一个圆内，发散在圆外，圆上的状态多变（这也是为什么有的教材 叫做收敛半径却只有两个正负实数值</p>
<p>3.39 $a&#x3D;\lim \sup_{n\to \infty} |c_n|^{1&#x2F;n}$</p>
<ul>
<li>收敛半径$R&#x3D;1&#x2F;a$</li>
<li>$\lim \sup_{n\to\infty } |c_nz^n|^{1&#x2F;n}&#x3D;|z| \lim \sup_{n\to\infty } |c_n|^{1&#x2F;n}&#x3D;|z|&#x2F;R$, 也就有了上面半径内收敛，半径外发散的性质</li>
</ul>
<h3 id="分部求和法summation-by-parts"><a href="#分部求和法summation-by-parts" class="headerlink" title="分部求和法summation by parts"></a>分部求和法summation by parts</h3><p>3.41 $A_n&#x3D;\sum_{i&#x3D;0}^n a_i$, 令$A_{-1}&#x3D;0$</p>
<ul>
<li>$\sum_{i&#x3D;p}^q a_ib_i&#x3D;\sum_{i&#x3D;p}^q (A_i-A_{i-1})b_i$</li>
<li>$&#x3D; \sum_{i&#x3D;p}^q A_ib_i-\sum_{i&#x3D;p}^qA_{i-1}b_i$</li>
<li>$&#x3D; \sum_{i&#x3D;p}^q A_ib_i-\sum_{i&#x3D;p-1}^{q-1}A_{i}b_{i+1}$</li>
<li>$&#x3D;(\sum_{i&#x3D;p}^q A_i(b_i-b_{i+1})) +A_qb_q-A_{p-1}b_p$</li>
</ul>
<p>在 b单调时很有用</p>
<p>3.42 若</p>
<ul>
<li>$A_n&#x3D;\sum a_n$ 有界</li>
<li>$b_i$ 非严格单调递减且趋于零</li>
<li>那么 $\sum a_nb_n$ 收敛</li>
<li>证明: Cauchy 准则<ul>
<li>|A_i| &lt;&#x3D; M</li>
<li>$|\sum_p^q| &#x3D; |(\sum A_i(b_i-b_{i+1}))+A_qb_q-A_{p-1}b_p|$</li>
<li>$\le M|\sum (b_i-b_{i+1}) + b_q-b_p|\le 2Mb_p$ 也就是 可以通过控制N来控制p从而控制b_p 从而控制直径</li>
</ul>
</li>
</ul>
<p>3.43 交错级数 交替正负号，绝对值非严格单调递减趋于0,那么 收敛</p>
<ul>
<li>也就是 a_i 取正负，b_i取绝对值</li>
</ul>
<p>3.44 $\sum c_n z^n$的收敛半径是1, $c_i$ 不增趋于0,在圆上|z|&#x3D;1 除了z&#x3D;1可能例外，其它点都收敛</p>
<ul>
<li>3.42 $a_n &#x3D; z^n, b_n&#x3D;c_n$ $|A_n|&#x3D;|\sum_{i&#x3D;0}^n z^i|&#x3D;|\frac{1-z^{n+1}}{1-z}|\le \frac{2}{|1-z|}$</li>
</ul>
<h3 id="绝对收敛-absolute-convergence"><a href="#绝对收敛-absolute-convergence" class="headerlink" title="绝对收敛 absolute convergence"></a>绝对收敛 absolute convergence</h3><p>if the series $\sum |a_i|$ converges</p>
<p>3.45 绝对收敛 &#x3D;&gt; ai收敛</p>
<h3 id="级数的加法和乘法-addtion-and-multiplication-of-series"><a href="#级数的加法和乘法-addtion-and-multiplication-of-series" class="headerlink" title="级数的加法和乘法 addtion and multiplication of series"></a>级数的加法和乘法 addtion and multiplication of series</h3><p>3.47 加法和数乘保持运算</p>
<p>3.48 卷积, the product of two given serires</p>
<ul>
<li>$c_n &#x3D; \sum_{i&#x3D;0}^n a_i b_{n-i}$</li>
<li>其 想法  和幂级数 直接相乘，然后对应幂次相等是关联的</li>
</ul>
<p>3.50 </p>
<ul>
<li>$\sum a_n$ 绝对收敛</li>
<li>$A&#x3D;\sum a_n$ </li>
<li>$A^{||}&#x3D;\sum |a_n|$ </li>
<li>$B&#x3D;\sum b_n$ </li>
<li>$\sum c_n&#x3D;\sum (\sum a_ib_{n-i}) &#x3D; AB$</li>
</ul>
<p>也就是 两个收敛数列，其中一个绝对收敛，那么它们的积 为两个收敛值的积</p>
<p>$C_n&#x3D;\sum a_iB_{n-i}$</p>
<p>$&#x3D;\sum a_i(B+d_{n-i})$,其中 $d_{j}&#x3D;B_j-B$</p>
<p>$&#x3D;A_nB+(\sum a_i d_{n-i})$</p>
<p>右侧怎么处理， 注意到随着n增大项会增大，于是想法是，切断成有限和无限，其中有限的通过n增大让它趋于0,而无限项通过3.42的性质，也就是和的上界来趋于0</p>
<p>所以对于任意epsilon, 可以控制N,让$|d_{&gt;N}| \le \epsilon$</p>
<p>$|\sum_n a_{n-i}d_{i}| \le |\sum_{&lt; N} a_{n-i}d_{i}| +|\sum_{N}^n a_{n-i}d_{i}|$ 三角不等</p>
<ul>
<li>左边是有限项，先不管，右边是可以随n变化项, 右边 &lt;&#x3D; $A^{||} \cdot \epsilon$</li>
<li>左边 因为有限，n趋于无穷大时，所有d不变，a在趋于零，所以左边趋于0</li>
<li>所以n 趋于无穷大时 &lt;&#x3D; $0 + A^{||} \cdot \epsilon$,</li>
</ul>
<p>综上 $C_n$ 趋于 AB</p>
<p>3.51 阿贝尔证明了, 若$\sum a_n,\sum b_n, \sum c_n$分别收敛于 A,B,C,且$c_n&#x3D;\sum a_ib_{n-i}$</p>
<ul>
<li>那么 C&#x3D;AB</li>
<li>见8.2章</li>
</ul>
<h3 id="级数的重排"><a href="#级数的重排" class="headerlink" title="级数的重排"></a>级数的重排</h3><p>3.52 下标还是自然数，每个正整数要出现一次，且只出现一次</p>
<ul>
<li>问题：重排后级数保持收敛吗？重排后如果收敛，收敛值相同吗</li>
<li>例子先<ul>
<li>A:1-1&#x2F;2+1&#x2F;3-1&#x2F;4+1&#x2F;5+… 也就是 交错的1&#x2F;i， 交错趋于0 收敛</li>
<li>B:1+1&#x2F;3-1&#x2F;2+1&#x2F;5+1&#x2F;7-1&#x2F;4+… 也就是上面的所有 奇数2个，然后偶数1个</li>
<li>A: &lt; 1-1&#x2F;2+1&#x2F;3 &#x3D;5&#x2F;6 后面只会变小</li>
<li>B: 注意到前3个和也是 5&#x2F;6, 而 1&#x2F;(4k-3)+1&#x2F;(4k-1)-1&#x2F;(2k) &gt; 0, 说明就算收敛 也不会是A, 观察到3项合并也是 ~ $1&#x2F;4k^2$ 也是存在极限的</li>
</ul>
</li>
</ul>
<p>3.54 Riemann 定理</p>
<ul>
<li>收敛且不绝对收敛，则对于 $a \le b$ 一定存在 一个重排，使得重排后的序列， lim inf &#x3D; a, lim inf b</li>
<li>证明 抽取p_n &#x3D; max(0,a_n), q_n&#x3D;min(0,a_n)<ul>
<li>也就是正负项，这两个序列一定都发散</li>
</ul>
</li>
<li>下面我们要做的是让 正负内部顺序保持不变而正负穿插<ul>
<li>+++—+++—</li>
<li>其中每次正要刚好 &gt; b时就切换到负，而负也是刚好 &lt; a时 停止， 这两个都可以达成因为 p,q序列都是发散的</li>
<li>这样 会发现每次 刚好 &gt; b时的值 到b 的距离 &lt;&#x3D; 最后的这个|a_?|, 对于a也是刚好小于|a_?|</li>
<li>因为原序列收敛，所以这个 值是趋于0的，也就是可以控制 N 控制 |a_?| 从而控制上下超出 <code>[a,b]</code> 的距离</li>
</ul>
</li>
</ul>
<p>3.55 $\sum a_n$是绝对收敛的复数项级数，那么$\sum a_n$的每个重排收敛都收敛于同一个和</p>
<ul>
<li>绝对收敛，可以通过N控制 $\sum_{n}^m |a_i|$ 的距离<ul>
<li>而 1….N 在 重排后 最大的下标可以找到，在最大下标以后，同样被控制了距离，也就有了也是绝对收敛</li>
<li>另一方面 设原来部分和s_n, 新的序列b_n,新的部分和t_n, 在t_1…t_p 包含原来的 a_1…a_N, 那么, n &gt; p 时 $|s_n-t_n|$  中 a_1..a_n都被消掉, 剩下的 $|\sum a_i - \sum b_i|$ ,这两部分都控制在 epsilon, 所以是2epsilon中? 更精确的（也可以不用这么精确），a_i,b_i对应原来相同的也会抵消掉，生下的都是原来不同的，所以是epsilon中，不论怎样 都是被控制到任意小，所以 收敛同一个值</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>Walter Rudin 数学分析原理 4 连续性</title>
    <url>/Math/Principles_of_Mathematical_Analysis_4/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="连续性-continuity"><a href="#连续性-continuity" class="headerlink" title="连续性 continuity"></a>连续性 continuity</h2><h3 id="函数的极限-limit-of-functions"><a href="#函数的极限-limit-of-functions" class="headerlink" title="函数的极限 limit of functions"></a>函数的极限 limit of functions</h3><p>4.1 X,Y是度量空间, $E\subset X$,f maps E into Y，p是E的极限点. We write $f(x) \to q$ as $x \to p$, or </p>
<ul>
<li>$\lim_{x\to p} f(x)&#x3D;q$</li>
<li>这里是 可以在度量空间X通过控制p的距离（邻域）$0&lt;d_X(x,p) &lt; \delta$，来控制在度量空间Y中$d_Y(f(x),q) &lt; \epsilon$的距离</li>
<li>注意1: $p\in X$ 不一定$p\in E$, </li>
<li>注意2: 关注的是邻域 不含中心点的 $0 &lt; d_X(x,p)$, 所以 $f(p)\neq \lim_{x\to p}f(x)$ 也是可能的</li>
</ul>
<p>4.2 极限点的函数极限值 与 数列</p>
<ul>
<li>$\lim_{x\to p}f(x)&#x3D;q$ 当且仅当 $\lim_{n\to\infty} f(p_n)&#x3D;q$ 对于E中每个趋于q且$q_n\neq q$的序列成立<ul>
<li>这里要“每个”</li>
<li>右边其实会发现 f(p_n)也是序列,</li>
<li>&#x3D;&gt; 从 X中半径 控制 Y中距离的角度，显然</li>
<li>&lt;&#x3D; 反证&#x2F;逆否，如果不成立，有Y中距离，无法通过X中控制（对X中任意半径 可以找例外点），另一方面它是极限点，所以缩减X中半径，构造出 一个 序列 也不满足，所以</li>
</ul>
</li>
<li>推论极限若存在，则唯一unique</li>
</ul>
<p>4.3 定义函数的四则运算，以及数乘</p>
<p>4.4 定理 函数极限点 与 四则运算</p>
<h3 id="连续函数-continuous-functions"><a href="#连续函数-continuous-functions" class="headerlink" title="连续函数 continuous functions"></a>连续函数 continuous functions</h3><p>在高数中 很多时候是 f(实数) into 实数，而这里X,Y,Z强调了 输入 和 输出 可能是不同的 范围</p>
<p>4.5 X,Y 是度量空间$p\in E\subset X$, f maps E into Y</p>
<ul>
<li>也是通过X中控制半径，来控制Y中到f(p)的距离，另一方面可以看成直径（想象cauchy的感觉）</li>
<li>在点p连续， continuous at p，（必须在p上有定义）</li>
<li>如果 E上每个点都连续，那么f在E上连续</li>
<li>这里 前提没有了<code>4.1的p是E极限点</code><ul>
<li>也就是 如果p是E的孤立点，在上述定义下，我们称它连续</li>
</ul>
</li>
</ul>
<p>4.6在4.5情况下 若p是E的极限点</p>
<ul>
<li>f在点p连续当且仅当 $\lim_{x\to p}f(x)&#x3D;f(p)$, 左边是去心邻域</li>
</ul>
<p>4.7 函数的复合 composition of functions. 连续函数的连续函数是连续的</p>
<ul>
<li>X,Y,Z 是度量空间, $E\subset X$, f maps X into Y, g  maps f(E) into Z</li>
<li>h(x) &#x3D; g(f(x)),或 $h &#x3D;g\circ f$</li>
<li>f在 $p\in E$连续 且 $g$在$f(p)$连续（注意的是） 那么 h在p连续</li>
<li>从范围控制角度可以看到传递过程，也就有标准的描述表达式<ul>
<li>另一方面 这充分但是不必要，例如 <code>f(x)=1, g(y)=[y!=1]</code>, 这样 g中 是不连续的，而h(x)&#x3D;0是连续的</li>
</ul>
</li>
</ul>
<p>4.8 a mapping f of a metric space X into a metric space Y is continuous on X if and only if $f^{-1}(V)$ is open in X for every open set V in Y</p>
<ul>
<li>这里是inverse images 不是反函数</li>
<li>连续+V是Y中开 &#x3D;&gt; 要证明 $f^{-1}(V)$ 每个点是内点。X中每个p, f(p)在V中，V开，所以f(p)是V中内点，存在半径全属于V,因为连续，p存在半径 控制 p附近，使得f(p附近)在f(p)附近（半径内），也就是 p附近的点全映射在V中（也就是inverse images），所以 逆象 每个点是内点</li>
<li>V是Y中开 + $f^{-1}(V)$每个是内点 &#x3D;&gt; 证明f连续。 对于任意p,和半径epsilon，把V取 f(p) 半径epsilon附近所有点，得到的$f^{-1}(V)$是开集，所以可以控制 p的半径，使得全部属于 $f^{-1}(V)$, 这个控制，对应的f(x)在 Y中 只会有更小的epsilon,所以连续</li>
</ul>
<p>4.9 f,g是度量空间X上的复连续函数，f+g,fg,f&#x2F;g(g不为0) 在X上连续</p>
<p>4.10 $f_1,\cdots,f_k$是度量空间X上的实函数, 并且$f(x)&#x3D;(f_1(x),\cdots,f_k(x)),x\in X$</p>
<ul>
<li>$f: X \mapsto \mathbb{R}^k$</li>
<li>f 连续 当且仅当 f_i 都连续</li>
<li>f,g 加法乘法运算 保持连续</li>
</ul>
<p>4.11 $x_1,\cdots,x_k$是$x\in \mathbb{R}^k$的坐标</p>
<ul>
<li>$\Phi_i(x)&#x3D;x_i$ 定义的函数 必然在$\mathbb{R}^k$上连续，因为 夹挤$|\Phi_i(x)-\Phi_i(y)|\le |x-y|$</li>
<li>有 单项式 $\prod x_i^{n_i}$ 在$\mathbb{R}^k$上连续</li>
<li>有 多项式 $\prod c_{n_*} x_i^{n_i}$ 在$\mathbb{R}^k$上连续</li>
<li>分式只要分母不为零则 连续</li>
</ul>
<h3 id="连续性与紧性-continuity-and-compactness"><a href="#连续性与紧性-continuity-and-compactness" class="headerlink" title="连续性与紧性 continuity and compactness"></a>连续性与紧性 continuity and compactness</h3><p>4.13 A mapping f of a set E into $\mathbb{R}^k$ is said to be bounded if there is a real number m such that |f(x)| \le M for all x in E</p>
<p>4.14 suppose f is a continuous mapping of a compact metric space X into a metric space Y then f(X) is compact</p>
<ul>
<li>连续映射 把 紧度量X 映入 度量 Y, f(X)是紧的</li>
<li>proof<ul>
<li>f(X)的任意开覆盖 的 inverse images 在 X中是开覆盖，所以 这些inverse images 因为紧 所有 有有限子覆盖，那么也对应的 f(X)的开覆盖也完成了f(X)的覆盖</li>
<li>这里用到了 $E\subset Y$则 $f(f^{-1}(E))\subset E$</li>
</ul>
</li>
</ul>
<p>4.15 f是把紧度量空间X映入$\mathbb{R}^k$内的连续映射, 那么f(X)是闭的，有界的，因此f是有界的</p>
<ul>
<li>2.41 推出</li>
</ul>
<p>4.16 f是紧度量空间X上的连续实函数，且</p>
<ul>
<li>M &#x3D; sup_{p in X} f(p)</li>
<li>m &#x3D; inf_{p in X} f(p)</li>
<li>那么一定存在两点r,s in X,使得 f(r)&#x3D;M, f(s)&#x3D;m</li>
<li>proof<ul>
<li>4.15 f(X) 有界闭实数集，根据2.28 存在点</li>
</ul>
</li>
</ul>
<p>4.17 suppose f is a continuous 1-1 mapping of a compact metric space X onto a metric space Y. then the inverse mapping $f^{-1}$ defined on Y by</p>
<ul>
<li>$f^{-1}(f(x))&#x3D;x,x\in X$ 也就是 反函数inverse mapping 和  上面inverse images 都是一样的符号，不过这里 1-1 + onto</li>
<li>另外 这个 反函数 是连续的</li>
<li>proof 4.8的 这时把 g&#x3D;f的反函数, f 看成g的inverse images, <ul>
<li>任意 V in X + V开,有 V^c 闭，V^c紧，f(V^c)紧, f(V^c)闭, f(V)&#x3D;f(V^c)^c 开</li>
<li>所以4.8 任意象开，在inverse images中开，所以连续</li>
</ul>
</li>
</ul>
<p>4.18 f把度量空间X映入into 度量空间Y内的映射， uniformly continuous,一致连续， 对于每个目标半径，总存在控制半径，使得任意两个被控制点p,q ，能d(f(p),f(q))距离在目标半径内</p>
<ul>
<li>一致连续，和点连续（以及函数逐点连续） 都是能通过控制输入半径，来控制输出半径范围</li>
<li>区别是， 点连续 是 先选点，然后控制，（所以可以看成也依赖p,不只是依赖点）所以 另一个角度是 f(x,目标半径) 还是 f(目标半径)<ul>
<li>而一致连续是，先控制输入半径后，任意两点。更像函数的整体概念 </li>
<li>一个例子就是 $y&#x3D;x^2$ 连续，但不是一致连续，因为对于给定 y的变化目标，不能通过控制x变化幅度来完成控制</li>
</ul>
</li>
</ul>
<p>4.19 f 是把紧度量空间X映入度量空间  Y内的一个连续映射，那么f在X上一致连续</p>
<ul>
<li>还是利用 邻域 有限子覆盖 和 三角不等式来证明</li>
<li>我们希望 X中p q被限制半径 时，属于 某个同一个邻域，这样，映入Y就是一个邻域内，可以容易的被控制距离<ul>
<li>给定目标半径 epsilon, 倒着看 要Y中 被映的点距离&lt;epsilon，所以建立邻域用epsilon&#x2F;2</li>
<li>所以 对于p in X, 取R(p)邻域使得 在f(p)邻域epsilon&#x2F;2内</li>
<li>那么第二个目标，控制X中距离 delta,能控制到某个同一个邻域内，所以，这里 我们不直接用 R(p),是 p 和 R(p)&#x2F;2作为邻域半径</li>
<li>这样在X中是开覆盖，有有限子覆盖，从而 控制delta &#x3D; min (R(p_i)&#x2F;2), 使得 p q 距离在delta内时，p属于某个邻域p_i，且 q属于p的delta 邻域，也在p_i的R(p_i)邻域中（这里没有&#x2F;2), 所以p,q属于同一个p_i的R(p_i)邻域，映射到 Y中的f(p_i),半径epsilon&#x2F;2的邻域内，从而 映射点距离 &lt; epsilon</li>
</ul>
</li>
</ul>
<p>4.20 E是R1中不紧的集，那么</p>
<ul>
<li>有在E上连续却不是有界的函数</li>
<li>有在E上连续且有界，却没有最大值的函数</li>
<li>若E有界，有在E上连续却不一致连续的函数</li>
</ul>
<p>证明</p>
<ul>
<li>若E有界，因为不紧，E有极限点不属于E, 令x_0,那么$f(x)&#x3D;1&#x2F;(x-x_0)$ 在E上连续且无界，也不一致连续<ul>
<li>对于第二条， $f(x)&#x3D;1&#x2F;(1+(x-x_0)^2)$ 没有最大值 上确界&#x3D;1</li>
</ul>
</li>
<li>若E无界<ul>
<li>第一条 f(x)&#x3D;x</li>
<li>第二条 $f(x)&#x3D;x^2&#x2F;(1+x^2)$</li>
<li>第三条</li>
</ul>
</li>
</ul>
<p>4.21 X是实直线上 $[0,2\pi)$, Y是一切到原点距离为1的点组成的圆，并且f是由f(t)&#x3D;(cos t, sin t)定义的 使X映满Y的映射</p>
<ul>
<li>这个例子X不紧，f连续，一一映射</li>
<li>Y是紧的，$f^{-1}$ 不连续</li>
</ul>
<h3 id="连续性与连通性-continuity-and-connectedness"><a href="#连续性与连通性-continuity-and-connectedness" class="headerlink" title="连续性与连通性 continuity and connectedness"></a>连续性与连通性 continuity and connectedness</h3><p>4.22 if f is a continuous mapping of a metric space X into a metric space Y and if E is a connected subset of X then f(E) is connected</p>
<ul>
<li>连续映射 f(连通性)&#x3D;&gt; 连通性</li>
<li>证明：若 f(E) 不连通，则可以表示为  f(E)&#x3D;A 并 B<ul>
<li>$G&#x3D;E \cap f^{-1}(A)$ 非空</li>
<li>$H&#x3D;E \cap f^{-1}(B)$ 非空</li>
<li>$E &#x3D; G\cup H$</li>
<li>$A\subset \bar{A}$, $G\subset f^{-1}(\bar{A})$，因为f连续，所以 $f^{-1}(\bar{A})$ 是闭集，所以$\bar{G}\subset f^{-1}(\bar{A})$, 有$f(\bar{G})\subset \bar{A}$</li>
<li>$f(H)&#x3D;B$, 而$\bar{A}\cap B&#x3D;\varnothing$ 说明$\bar{G}\cap H$交为空，否则 这两个交中的点，即在A的闭包中，又在B中，</li>
<li>类似的证明另一半</li>
<li>所以E连通时不成立</li>
</ul>
</li>
</ul>
<p>4.23 f是区间<code>[a,b]</code>上的连续是函数, f(a) &lt; f(b) 并且 f(a) &lt; c &lt;f(b), 那么必有一点x in (a,b), f(x) &#x3D; c</p>
<ul>
<li>2.47 <code>[a,b]</code>是连通的</li>
<li>4.22 <code>f([a,b])</code>是连通的</li>
<li>2.47 <code>f([a,b])</code>对应完整的区间</li>
<li>这里稍微注意 实数区间 和 连通的拓扑定义的区别，</li>
<li>没有逆定理</li>
</ul>
<h3 id="间断-discontinuities"><a href="#间断-discontinuities" class="headerlink" title="间断 discontinuities"></a>间断 discontinuities</h3><p>x是f中定义域domain中的一个点，而在这点不连续（极限不等于函数值，或没有极限），称为间断</p>
<p>4.25 f 在$(a,b)$ 定义 ,对于给定$x, a\le x &lt; b$</p>
<ul>
<li>定义 right-hand 右极限, f(x+)&#x3D;q</li>
<li>当且仅当 任意序列 $t_n \in (x,b)$ 且 $t_n\to x$ 都有$f(t_n)\to q$</li>
<li>left-hand limits 类似定义</li>
<li>这感觉上也挺直观 的， 就是正方向来的，还是负方向来的</li>
<li>极限存在当且仅当 左右极限相等</li>
</ul>
<p>4.26 f 在(a,b)上定义, 点x间断，左右极限存在，称作 discontinuity of the first kind, or a simple discontinuity, at x. otherwise the discontinuity is said second kind</p>
<ul>
<li>哎 这 first,second 我很讨厌这种说法，</li>
</ul>
<p>例子</p>
<ul>
<li>f(x) 有理数&#x3D;1,无理数&#x3D;0, 处处 second kind , 因为处处左右极限不存在</li>
<li>f(x) 有理数&#x3D;x,无理数&#x3D;0, 在点0 连续！其它点依然second kind</li>
<li>f(x) x为负&#x3D;-x-2,为正&#x3D;x+2, 在点0 first kind 其它点连续</li>
<li>f(x)&#x3D;sin(1&#x2F;x),点0补充定义&#x3D;0, 点0 second kind ,因为左右极限不存在，其它点连续</li>
</ul>
<h3 id="单调函数-monotonic-functions"><a href="#单调函数-monotonic-functions" class="headerlink" title="单调函数 monotonic functions"></a>单调函数 monotonic functions</h3><p>4.28 f be real on (a,b), monotonically increasing on (a,b) if a &lt; x &lt; y &lt; b implies $f(x) \le f(y)$</p>
<ul>
<li>反过来可以定义单调递减</li>
</ul>
<p>4.29 f在(a,b)单调递增 ????????????</p>
<ul>
<li>$\sup_{a &lt; t &lt; x} f(t)&#x3D;f(x-)\le f(x) \le f(x+)&#x3D;\inf_{x&lt;t&lt;b} f(t)$</li>
<li>此外, $a &lt; x &lt; y &lt; b$那么$f(x+)\le f(y-)$ </li>
<li>?????????????? 没懂书上这个，不是应该证明 任意序列 的，最小上界性，是能找到A,如何证明 A&#x3D;f(x-)<ul>
<li>为啥这里 就能 delta了啊，有办法很近的贴两个点吗</li>
<li>我想不通的是，为啥 单调了，能 控制到x的距离来控制y的距离啊，有办法让 f((a,x))的值 的最大的部分变成孤立点吗？</li>
</ul>
</li>
<li>推论: 单调函数没有第二类间断点</li>
<li>蕴含：单调函数至多在一个可数点集上间断，</li>
</ul>
<p>4.30 f在(a,b)单调, (a,b)中使f间断的点的集至多是可数的</p>
<ul>
<li>设E是所有间断点集，</li>
<li>因为x in E 间断 左右极限不等，f(x-) &lt; f(x+), 取之间某个有理数 r(x)</li>
<li>因此???? E中每个点被分配一个有理数，两两不同，和有理数的子集建立 1-1 映射，所以至多可数</li>
<li>4.31 在(a,b)上其它点连续</li>
</ul>
<h3 id="无限极限与在无穷远点的极限-infinite-limits-and-limits-at-infinity"><a href="#无限极限与在无穷远点的极限-infinite-limits-and-limits-at-infinity" class="headerlink" title="无限极限与在无穷远点的极限 infinite limits and limits at infinity"></a>无限极限与在无穷远点的极限 infinite limits and limits at infinity</h3><p>4.32 在广义实数系中作运算，把4.1 重述</p>
<ul>
<li>任一实数c, x &gt; c的实数x的集叫做$+\infty$ 的一个邻域，记作 $(c,+\infty)$</li>
</ul>
<p>4.33 f是定义在E上的实函数，A与x在广义实数系中. 如果对于A的每个邻域U存在着x的一个邻域V,使V交E不空，且 交中不等于x的点 t, $f(t)\in U$, 我们说$t\to x,f(t)\to A$</p>
<ul>
<li>A和x 是实数时很前面一样，</li>
<li>当 是 广义的，也就是 $+\infty,-\infty$中的，扩展定义成立</li>
</ul>
<p>4.34 f,g定义在E上 $t\to x$时, $f(t)\to A,g(t)\to B$</p>
<ul>
<li>如果极限存在 极限唯一</li>
<li>保持加法</li>
<li>保持乘法</li>
<li>保持除法<ul>
<li>需要注意上面的 保持运算，要避开 无穷大相减 , 0 * 无穷大 这种 未定义的</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>Walter Rudin 数学分析原理 5 微分法</title>
    <url>/Math/Principles_of_Mathematical_Analysis_5/</url>
    <content><![CDATA[<p>isbn</p>
<ul>
<li>中文 9787111134176</li>
<li>英文 9787111619543</li>
</ul>
<span id="more"></span>

<h2 id="微分法-differentiation"><a href="#微分法-differentiation" class="headerlink" title="微分法 differentiation"></a>微分法 differentiation</h2><h3 id="实函数中的导数-the-derivative-of-a-real-function"><a href="#实函数中的导数-the-derivative-of-a-real-function" class="headerlink" title="实函数中的导数 the derivative of a real function"></a>实函数中的导数 the derivative of a real function</h3><p>5.1 Let f be defined (and real-valued) on <code>[a,b]</code>, For any x in <code>[a,b]</code> form the quotient</p>
<ul>
<li>$\phi(t)&#x3D;\frac{f(t)-f(x)}{t-x}, a &lt; t &lt; b,t\neq x$</li>
<li>define: $f’(x)&#x3D;\lim_{t\to x} \phi(t)$ 需要右侧存在， called the derivative导函数 of f </li>
<li>如果 $f’(x)$ 在点x定义, 称f is differentiable at x, 如果 逐点 differentiable, 则称E上 differentiable</li>
<li>类似的，可以在点讨论 导函数左右极限，可以引出左导数右导数</li>
</ul>
<p>5.2 f定义在<code>[a,b]</code>上, 如果f在点$x\in[a,b]$可微, 那么f在x点连续</p>
<ul>
<li>f(t)-f(x)&#x3D;f’(x) (t-x), 可微左边f’(x)对于给定x是常数，所以 趋于0</li>
</ul>
<p>5.3 定理 f和g定义在$[a,b]$上，并且都在点$x\in[a,b]$可微，那么 加法，乘法，除法 也可微并且有</p>
<ul>
<li>(f+g)’&#x3D;f’+g’</li>
<li>(fg)’&#x3D;f’g+fg’</li>
<li>(f&#x2F;g)’&#x3D;f’&#x2F;g-fg’&#x2F;g^2</li>
</ul>
<p>5.5 链式</p>
<ul>
<li>(f(g(x)))’&#x3D;f’(g(x)) g’(x)</li>
<li>这里前面是 f的导函数，在点g(x)处的导数值</li>
</ul>
<h3 id="中值定理-mean-value-theorems"><a href="#中值定理-mean-value-theorems" class="headerlink" title="中值定理 mean value theorems"></a>中值定理 mean value theorems</h3><p>5.7 f是定义在度量空间X上的实值函数，称f在点$p\in X$取得局部极大值，如果存在着$\delta &gt; 0$</p>
<ul>
<li>当$d(p,q) &lt; \delta$时,且$q\in X$时，有$f(q)\le f(p)$</li>
<li>类似的定义局部极小值</li>
</ul>
<p>5.8 f定义在$[a,b]$上, $x\in [a,b]$如果f在x点取得局部极大值,$f’(x)$存在,$f’(x)&#x3D;0$,</p>
<ul>
<li>proof 也就是左导数 &lt;&#x3D;0, 右导数&gt;&#x3D;0,要相等只能&#x3D;0</li>
</ul>
<p>这里中文原书第3版,2004.1(2024.4 重印 第一版)，有错误，漏掉了g（勘误），英文版是对的</p>
<p>5.9 f和g是<code>[a,b]</code>上连续实函数，在(a,b)中可微，那么便有一点$x\in(a,b)$ 使得</p>
<ul>
<li>$[f(b)-f(a)]g’(x)&#x3D;[g(b)-g(a)]f’(x)$</li>
<li>并不要求在断电上可微</li>
<li>$h(t)&#x3D;[f(b)-f(a)]g(t)-[g(b)-g(a)]f(t)$,</li>
<li>h在 闭区间上连续，在开区间上可微，且 $h(a)&#x3D;h(b)$<ul>
<li>只需要证明存在一点 $h’(t)&#x3D;0$, 若为常数则每点满足</li>
<li>若有点 大于端点，4.16（紧度量空间上连续函数 存在点使f能取到最大值），所以最大值点能取到，且导数为0</li>
<li>若有点 小于端点 类似的</li>
<li>这叫 一般中值定理generalized mean value theorem</li>
</ul>
</li>
<li>注意 在值域是复数域时会失效 稍后的 5.17</li>
</ul>
<p>5.10 更常用的退化中值定理</p>
<ul>
<li>f(b)-f(a)&#x3D;(b-a)f’(x), 也就是g(x)&#x3D;x</li>
</ul>
<p>5.11 f在(a,b)可微</p>
<ul>
<li>f’(x) &gt;&#x3D;0 单调递增</li>
<li>f’(x) &#x3D;0 常函数</li>
<li>f’(x) &lt;&#x3D;0 单调递减</li>
</ul>
<h3 id="导数的连续性-the-continuity-of-derivatives"><a href="#导数的连续性-the-continuity-of-derivatives" class="headerlink" title="导数的连续性 the continuity of derivatives"></a>导数的连续性 the continuity of derivatives</h3><p>$f(x)&#x3D;x^2sin(1&#x2F;x),f(0)&#x3D;0$是 处处导数存在，但导函数不连续的函数</p>
<p>5.12 f是<code>[a,b]</code>上的实值可微函数，再设 $f’(a) &lt; \lambda &lt; f’(b)$, 那必有一点 $f’(x)&#x3D;\lambda$</p>
<ul>
<li>$g(t)&#x3D;f(t)-\lambda t$</li>
<li>g’(a) &lt; 0 , g’(b) &gt; 0,所以 分别存在$g(t_1) &lt; g(a),g(t_2) &lt; g(b)$, 也就是存在点 小于左端点，存在点小于右端点</li>
<li>所以在极小值点x（4.16可达到）， g’(x)&#x3D;0,从而可以取到</li>
<li>而这个性质，并没有要求导函数连续，只需要f处处可微</li>
<li>推论 f在<code>[a,b]</code>上可微，那么f’在<code>[a,b]</code>上便不能有<code>简单间断</code>, <ul>
<li>但是 f’很可能有第二类间断</li>
</ul>
</li>
</ul>
<h3 id="L’Hospital-法则-rule"><a href="#L’Hospital-法则-rule" class="headerlink" title="L’Hospital 法则 rule"></a>L’Hospital 法则 rule</h3><p>洛必达法则, 在求极限时时常用到</p>
<p>5.13 假设是函数f和g在(a,b)内可微，而且对于所有$x\in(a,b),g’(x)\neq 0$,这里 $-\infty \le a &lt; b \le \infty$ </p>
<ul>
<li>已知 $x\to a$时, $\frac{f’(x)}{g’(x)}\to A$</li>
<li>如果$x\to a$时, $f(x)\to 0,g(x)\to 0$</li>
<li>那么 $x\to a$时, $\frac{f(x)}{g(x)}\to A$</li>
<li>也就是 在某点，函数导数之比有极限，且原函数均趋于0,那么原函数之比也趋于这个极限<ul>
<li>对于 原函数 均趋于无穷时，也有这个</li>
</ul>
</li>
<li>proof, 证明思路: <ul>
<li>任意q_1满足 A &lt; q_1，能找到c_1, 使得所有x满足  a &lt; x &lt; c_1 有 f(x)&#x2F;g(x) &lt; q_1, 这里通过5.9找存在点</li>
<li>从另一侧 , q_2 &lt; A,也能 a &lt; x &lt; c_2 使得 q_2 &lt; f(x)&#x2F;g(x)</li>
<li>从而 可以控制 x与a的距离 来 控制 f(x)&#x2F;g(x)与A的距离，也就是趋于A</li>
</ul>
</li>
</ul>
<h3 id="高阶导数-Derivatives-of-higher-order"><a href="#高阶导数-Derivatives-of-higher-order" class="headerlink" title="高阶导数 Derivatives of higher order"></a>高阶导数 Derivatives of higher order</h3><p>5.14 导数本身是一种函数，直接导数定义为1阶导数，n阶导数是对于n-1阶导数的 求导函数，</p>
<ul>
<li>需要注意 求的时候，需要 上一阶在那一点可微</li>
<li>记作 $f^{(n)}$</li>
</ul>
<h3 id="Taylor定理-Taylor’s-theorem"><a href="#Taylor定理-Taylor’s-theorem" class="headerlink" title="Taylor定理 Taylor’s theorem"></a>Taylor定理 Taylor’s theorem</h3><p>5.15 suppose f is a real function on <code>[a,b]</code>, n是正整数, $f^{(n-1)}$在$[a,b]$上连续， $f^{(n)}$在$(a,b)$出处存在,$\alpha,\beta$在$[a,b]$是不同的点</p>
<ul>
<li>$P(t)&#x3D;\sum_{k&#x3D;0}^{n-1} \frac{f^{(k)}(\alpha)}{k!}(t-\alpha)^k$ </li>
<li>那么存在处于$\alpha,\beta$之间的点x, $f(\beta)&#x3D;P(\beta)+\frac{f^{(n)}(x)}{n!}(\beta-\alpha)^n$ &lt;—要证明</li>
<li>n&#x3D;1时是中值定理</li>
<li>说明f能被 n-1次多项式逼近</li>
<li>如果知道 $|f^{(n)}(x)|$上界，还能做误差估计</li>
<li></li>
<li>令$M&#x3D;\frac{f(\beta)-P(\beta)}{(\beta-\alpha)^n}$</li>
<li>令$g(t)&#x3D;f(t)-P(t)-M(t-\alpha)^n$<ul>
<li>$g^{(n)}(t)&#x3D;f^{(n)}(t)-n!M$</li>
<li>这里 如果有x $g^{(n)}(x)&#x3D;0$,那么 $M&#x3D;\frac{f^{(n)}(x)}{n!}$, 再根据M的令，可以证明 上面要证明的存在性</li>
<li>根据M定义，带入显然$g(\beta)&#x3D;0$</li>
<li>根据P的定义，$g^{(m&#x3D;0\cdots n-1)}(\alpha)&#x3D;(f^{(m)}-P^{(m)})(x) - M((x-\alpha)^n)^{(m)} |_{x&#x3D;\alpha}$<ul>
<li>$&#x3D;0-0&#x3D;0$</li>
</ul>
</li>
<li>这里之间 ，因为不知道$\alpha,\beta$大小</li>
<li>$\alpha,\beta$之间存在点$x_1,g’(x_1)&#x3D;0$</li>
<li>$\alpha,x_1$之间存在点$x_2,g^{(2)}(x_2)&#x3D;0$</li>
<li>如此</li>
<li>$\alpha,x_{n-1}$之间存在点$x_n,g^{(n)}(x_n)&#x3D;0$</li>
</ul>
</li>
</ul>
<h3 id="向量值函数的微分法-Differentiation-of-vector-valued-functions"><a href="#向量值函数的微分法-Differentiation-of-vector-valued-functions" class="headerlink" title="向量值函数的微分法 Differentiation of vector-valued functions"></a>向量值函数的微分法 Differentiation of vector-valued functions</h3><p>5.16 考虑f是在<code>[a,b]</code>上的复值函数</p>
<ul>
<li>5.1 导数定义一样</li>
<li>5.2 导数存在 则连续 也类似</li>
<li>5.3 导函数 四则运算的 也一样</li>
<li>$f_1,f_2$分别是$f$的实部和虚部<ul>
<li>$f(t)&#x3D;f_1(t)+f_2(t)$</li>
<li>f在点x可微，当且仅当 $f_1,f_2$ 可微</li>
<li>实值的极限是控制距离&#x2F;半径，复数里也是控制 半径，或者范数norm</li>
</ul>
</li>
<li>更一般的，$f$把$[a,b]$映入into $\mathbb{R}^k$<ul>
<li>5.1 同样定义$f’(x)$, 但注意$f’(x)$不是实数，而是$\mathbb{R}^k$中的一个点<ul>
<li>$\lim_{t\to x} |\frac{f(t)-f(x)}{t-x}-f’(x)|&#x3D;0$, 这里的绝对值符号 用的是norm 范数</li>
</ul>
</li>
<li>$f’&#x3D;(f’_1,\cdots,f’_k)$那么f可微，当且仅当 所有$f_i$可微</li>
<li>5.2 存在连续也类似</li>
<li>5.3 四则运算，其中函数的乘积 用内积替换，再多个数乘</li>
</ul>
</li>
<li>而者也有 不满足 的 例如 中值定理，L’Hospital</li>
</ul>
<p>5.17 中值定理失效例子 $f(x)&#x3D;e^{ix}&#x3D;\cos x+i\sin x$</p>
<ul>
<li>作为复指数幂的定义</li>
<li>$f(2\pi)-f(0)&#x3D;1-1&#x3D;0$<ul>
<li>$f’(x)&#x3D;ie^{ix}$</li>
<li>$|f’(x)|&#x3D;1$ 范数</li>
<li>所以中值定理失效<ul>
<li>回顾中值定理，的感觉是构造函数 两端&#x3D;0，中间连续可取到，而极值点的导数&#x3D;0,另外，极值点的导数&#x3D;0是通过，点左右导数 一侧 &gt;&#x3D;0, 另一侧 &lt;&#x3D;0</li>
<li>而这里，值在复数上连续，首先没有所谓的极值点。</li>
<li>这种甚至在3维中可以画图，正好输入是实数轴，复平面垂直实轴，看起来像弹簧的形状，而变换的感觉就是物理中绳子挂着小球转圈，绳子给小球的向心拉力，让小球做圆周运动，所以等大向心</li>
<li>$(f(a)-f(b))&#x2F;(a-b)$ 如果要看到空间中,向一条直直向量</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>5.18 L’Hospital失效例子</p>
<ul>
<li>$(0,1)$, $f(x)&#x3D;x,g(x)&#x3D;x+x^2e^{i&#x2F;x^2}$</li>
<li>$\lim_{x\to 0} \frac{f(x)}{g(x)}&#x3D;1$</li>
<li>$\lim_{x\to 0} \frac{f’(x)}{g’(x)}&#x3D;0$ , $g’(x)_{x\to 0}\neq 0$</li>
</ul>
<p>5.19 $f: [a,b] \mapsto\mathbb{R}^k$ 连续映射, $(a,b)$内可微</p>
<ul>
<li>存在$x \in (a,b)$ , $|f(b)-f(a)|\le (b-a)|f’(x)|$</li>
<li>proof $z&#x3D;f(b)-f(a)$<ul>
<li>令$\phi(t)&#x3D;z \cdot f(t), a\le t\le b$, 这里 定义时用的 向量z 与 向量f(t)的点积</li>
<li>这样$\phi(t)$是$[a,b]$上 连续的实值函数</li>
<li>根据中值定理 存在 $\phi(b)-\phi(a)&#x3D;(b-a)\phi’(x)&#x3D;(b-a) z \cdot f’(x)$<ul>
<li>另一方面$\phi(b)-\phi(a)&#x3D;z\cdot f(b)-z\cdot f(a)&#x3D;z \cdot(f(b)-f(a))&#x3D;z\cdot z&#x3D;|z|^2$</li>
<li>$|z|^2&#x3D;(b-a)z\cdot f’(x)\le (b-a) |z| |f’(x)|$, 使用 Schwarz不等式</li>
<li>证毕</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Riemann-Stieltjes-积分integral"><a href="#Riemann-Stieltjes-积分integral" class="headerlink" title="Riemann-Stieltjes 积分integral"></a>Riemann-Stieltjes 积分integral</h2><p>先讨论区间上实值函数的积分，</p>
<ul>
<li>后面推广到区间上的复值和向量值函数的积分</li>
<li>10～11章 再讨论在不是区间上的积分</li>
</ul>
]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>Walter Rudin 数学分析原理 6 Riemann-Stieltjes积分</title>
    <url>/Math/Principles_of_Mathematical_Analysis_6/</url>
    <content><![CDATA[<p>isbn</p>
<ul>
<li>中文 9787111134176</li>
<li>英文 9787111619543</li>
</ul>
<span id="more"></span>

<h2 id="Riemann-Stieltjes-积分integral"><a href="#Riemann-Stieltjes-积分integral" class="headerlink" title="Riemann-Stieltjes 积分integral"></a>Riemann-Stieltjes 积分integral</h2><p>先讨论区间上实值函数的积分，</p>
<ul>
<li>后面推广到区间上的复值和向量值函数的积分</li>
<li>10～11章 再讨论在不是区间上的积分</li>
</ul>
<h3 id="积分的定义和存在性-definition-and-existence-of-the-integral"><a href="#积分的定义和存在性-definition-and-existence-of-the-integral" class="headerlink" title="积分的定义和存在性 definition and existence of the integral"></a>积分的定义和存在性 definition and existence of the integral</h3><p>6.1 let <code>[a,b]</code> be a given interval. by a partition P of [a,b] we mean a finite set of points $x_0,\cdots,x_n$ where</p>
<ul>
<li>$a &#x3D; x_0 \le x_1 \le \cdots \le x_{n-1} \le x_n&#x3D;b$</li>
<li>令 $\Delta x_i&#x3D;x_i-x_{i-1}$</li>
<li>假设f is a bounded real function defined on [a,b]. Corresponding to each partition P of [a,b] we put</li>
<li>$M_i&#x3D;\sup f(x)$ $x_{i-1}\le x \le x_i$ 每个区间上确界</li>
<li>$m_i&#x3D;\inf f(x)$ $x_{i-1}\le x \le x_i$ 每个区间下确界<ul>
<li>$U(P,f)&#x3D;\sum_{i&#x3D;1}^n M_i\Delta x_i$  这个和不小于原来的 面积, 上和 上积分</li>
<li>$L(P,f)&#x3D;\sum_{i&#x3D;1}^n m_i\Delta x_i$ 这个和不大于原来的 面积，下和 下积分</li>
<li>$\bar{\int_a^b} f dx &#x3D; \inf U(P,f)$ 上和的下确界, 称作 upper Riemann integrals of f</li>
<li>$\underline{\int}_a^b f dx &#x3D; \sup L(P,f)$ 下和的上确界 ,称作 lower Riemann integrals of f (这个tex怎么打啊??</li>
<li>over <code>[a,b]</code></li>
<li>如果 upper &#x3D; lower ,那么 称f is Riemann-integrable on [a,b] ,  $f\in \mathscr{R}$ ,, (mathscr)<ul>
<li>记作$\int_a^b f(x) dx$</li>
<li>因为假设 $f$ is a bounded real function, 所以存在$m,M$, 使得$m \le f([a,b])\le M$</li>
<li>$m(b-a)\le L(P,f)\le U(P,f) \le M(b-a)$ 注意的是，这个条件 并不要求 黎曼积分存在，这是描述f上下界与 下和 上和 的大小关系<ul>
<li>也就是有界函数f,上积分和下积分都有定义</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>6.2 设g是<code>[a,b]</code> 上一个单调递增函数，g(a),g(b)有限，所以g在[a,b]上有界, 对于a,b的每个分割法P</p>
<ul>
<li>$\Delta g_i&#x3D;g(x_i)-g(x_{i-1}) \ge 0$</li>
<li>$U(P,f,g)&#x3D;\sum_{i&#x3D;1}^n M_i \Delta g_i$</li>
<li>$L(P,f,g)&#x3D;\sum_{i&#x3D;1}^n m_i \Delta g_i$</li>
<li>定义 $\bar{\int}<em>a^b f d g&#x3D;\inf</em>{P} U(P,f,g)$</li>
<li>定义 $\underline{\int}_a^b f d g&#x3D;\sup_P L(P,f,g)$<ul>
<li>如果相等记作 $\int_a^b f(x)dg(x)$ , 或 $\int_a^b fdg$， 注意结果和x无关，这里x只表示两个函数入参一致和从a到b, x换成y也相同的结果</li>
<li>也就是[a,b]上f关于g的Riemann-Stieltjes 积分</li>
<li>f关于g在Riemann意义上可积，记作$f\in\mathscr{R}(g)$</li>
</ul>
</li>
</ul>
<p>6.3 partition $P^*$ is a refinement(加细，细分) of P, if $P^* \supset P$ (P的每个切割点都在$P^*$)中, </p>
<ul>
<li>$P^*&#x3D;P_1\cup P_2$, say $P^*$ is their common refinement 共同加细</li>
</ul>
<p>6.4 </p>
<ul>
<li>$L(P,f,g)\le L(P^*,f,g)$</li>
<li>$U(P^*,f,g)\le U(P,f,g)$</li>
<li>加细 让 上和 下和 有更靠近的趋势</li>
<li>proof 每次多加一个点的角度考虑，另一方面，对于细分的一个具体 $[x_{i-1},x_i]$可以看成是未切分而有上下界（bounded f,6.1而加细，看成是切分，同样可以证明</li>
</ul>
<p>6.5 $\underline{\int}_a^b fdg&#x3D;\bar{\int}_a^b fdg$</p>
<ul>
<li>proof $P^{*}&#x3D;P_1\cup P_2$<ul>
<li>$L(P_1,f,g)\le L(P^*,f,g) \le U(P^*,f,g)\le U(P_2,f,g)$</li>
<li>对于任意给定$P_1$遍历$P_2$<ul>
<li>$L(P_1,f,g)\le \bar{\int}_a^bfdg$</li>
<li>再遍历所有$P_1$得证</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>6.6  $f\in\mathscr{R}$ on $[a,b]$ if and only if for every $\epsilon &gt; 0$ there exists a partition P such that</p>
<ul>
<li>$U(P,f,g)-L(P,f,a) &lt; \epsilon$</li>
<li>也就是任意目标上下界距离，可以通过 给定具体分化来达成</li>
<li>这里注意到 虽然任意近了，但是分化之间的关联没有，而分化之间管理，通过上面的加细动作可以完成</li>
<li>距离 到 更小距离时， 记老分化$P_0$, 新分化$P_1$,而 我们取$P_1’&#x3D;P_0\cup P_1$ 这样 同时满足了更小距离，也满足了值的不等式串联k<ul>
<li>$L(P_0,f,g)\le L(P_1’,f,g) \le U(P_1’,f,g)\le U(P_0,f,g)$</li>
</ul>
</li>
<li>不过这里证明的 还是按照 上面6.2的 存在的定义来证明</li>
<li>这个充要 之后证明会用到，也就是证明大和小和的差距可以任意小</li>
</ul>
<p>6.7</p>
<ul>
<li>epsilon 在P成立<ul>
<li>那么对P加细后依然成立</li>
<li>$\sum_{i&#x3D;1}^n |f(s_i)-f(t_i)|\Delta g_i &lt; \epsilon$ 其中$s_i,t_i$是$[x_{i-1},x_i]$内任意点,  每段里面 差$\le M_i-m_i$ </li>
<li>如果 $f\in\mathscr{R}(g)$  那么 $|\sum_{i&#x3D;1}^n f(t_i)\Delta g_i -\int_a^b f d g| &lt; \epsilon$<ul>
<li>$L(P,f,g) \le \sum f(t_i)\Delta g_i \le U(P,f,g)$</li>
<li>$L(P,f,g) \le \int fdg \le U(P,f,g)$</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>6.8 if f is continuous on [a,b] then $f\in \mathscr{R}(g) on [a,b]$</p>
<ul>
<li>取$\eta [g(b)-g(a)] &lt; \epsilon$</li>
<li>4.19 f 是 一致连续, 存在 $\delta$控制 x,t距离时 $|f(x)-f(t)|&lt;\eta$, (这里用到了 “一致连续”)<ul>
<li>所以 如果划分P的所有$\Delta x_i &lt; \delta$，那么每个划分区间中 $M_i-m_i\le eta$</li>
<li>$U(P,f,g)-L(P,f,g)&#x3D;\sum_{i&#x3D;1}^n(M_i-m_i)\Delta g_i\le \eta \sum_{i&#x3D;1}^n\Delta g_i&#x3D;\eta[g(b)-g(a)] &lt; \epsilon$</li>
<li>也就有 $f\in \mathscr{R}(g)$</li>
</ul>
</li>
</ul>
<p>6.9 $[a,b]$上 f单调monotonic，g单调连续(本来g就要单调递增), $f\in \mathscr{R}(g)$</p>
<ul>
<li>假设单增（单减类似）</li>
<li>切割 直接 (g(b)-g(a))&#x2F;n的g的值来切割x,也就是 $\Delta g_i &#x3D; g(x_i)-g(x_{i-1})&#x3D;(g(b)-g(a))&#x2F;n$</li>
<li>这样$U-L&#x3D;\Delta \sum {M_i-m_i}&#x3D;\Delta \sum f(x_i)-f(x_{i-1})&#x3D;\Delta (f(b)-f(a)) &lt; \epsilon$ 可通过控制n来控制</li>
</ul>
<p>6.10 $[a,b]$上f有界， f有限多个点 不连续，这些点的对应位置g是连续的，那么$f\in \mathscr{R}(g)$</p>
<ul>
<li>M&#x3D; sup |f|</li>
<li>E&#x3D;f的不连续点, n&#x3D;|E|点个数</li>
<li>对于任意epsilon</li>
<li>每个点不连续点切割邻域，保证<ul>
<li>邻域内g连续</li>
<li>任意两个邻域之间不覆盖</li>
<li>邻域内g的增量 &lt; epsilon &#x2F; n</li>
</ul>
</li>
<li>对于邻域外的点, <code>[a,b]</code>去掉所有邻域是 紧的，f在上面一致连续，存在 控制$x$范围$\delta$控制$f$变化范围$&lt; \epsilon$，所以邻域外的点按照不超过$\delta$切割</li>
<li>$U-L&#x3D;\sum (M_i-m_i) \Delta g_i$<ul>
<li>$&#x3D;(\sum_\delta (M_i-m_i)\Delta g_i)+(\sum_{\epsilon&#x2F;n} (M_i-m_i)\Delta g_i)$ 分别为邻域外的点和邻域内的点</li>
<li>邻域外的点 $\le (\sum_\delta \epsilon \Delta g_i) \le (\sum \epsilon \Delta g_i) &#x3D; \epsilon (g(b)-g(a))$</li>
<li>邻域内的点 $\le (\sum_{\epsilon &#x2F;n} 2M \Delta g_i) \le 2M \epsilon$</li>
<li>这里 $M,g(b),g(a)$都是定值，因此可以任意小</li>
</ul>
</li>
<li>那么 反例:</li>
<li>f,g 在 $[-1,1]$上定义,$g(x) &#x3D; \text{sign}(x)$, 也就是取符号，-1,0,1 满足单调性</li>
<li>$f &#x3D; 2g$</li>
<li>容易看出在非零点的 划分不影响，着重看零点的划分<ul>
<li>$[x_1,0][0,x_2], x_1&lt;0&lt;x_2$</li>
<li>$U(P,f,g) - L(P,f,g)$ 在这两个划分里的贡献是 $\sum (M_i-m_i) \Delta g_i$<ul>
<li>$&#x3D; (0-(-2))\cdot (0-(-1)) + (2-0)\cdot (1-0)$ </li>
<li>$&#x3D; 4 &gt; 0$ 也就是 与具体的$x_1,x_2$选取无关，这里的距离不会趋于无穷小</li>
</ul>
</li>
</ul>
</li>
<li>对于 高等数学中，一般来说 我们的 $g(x)&#x3D;x$</li>
</ul>
<p>6.11 $[a,b]$上 $f\in \mathscr{R}(g)$ , $m\le f\le M$,$\phi$在$[m,M]$上连续，并且在$[a,b]$上 $h(x)&#x3D;\phi(f(x))$,那么在$[a,b]$上$h\in\mathscr{R}(g)$</p>
<ul>
<li>也就是$[a,b]$上  复合函数： 连续(黎曼可积) 是 黎曼可积 的</li>
<li>和6.10类似的思路</li>
<li>$U(P,\phi,g)-L(P,\phi,g)&#x3D;(\sum_A (M_i-m_i)\Delta g_i)+(\sum_B (M_i-m_i)\Delta g_i)$<ul>
<li>这里 $M,m$是关于$\phi$的</li>
<li>我们希望一边是通过控制 $M_i-m_i$的范围，另一边是通过控制$\sum \Delta g_i$的范围<ul>
<li>这样一边是 $范围 \cdot (g(b)-g(a))$另一边是 $2K \cdot 范围$, 其中$|\phi|\le K$</li>
</ul>
</li>
<li>按照这个思路 如何控制$M_i-m_i$的范围呢?<ul>
<li>$\phi$ 一致连续，可以控制 f的距离$\delta$ 控制 $\phi$的距离</li>
<li>所以如果 切割P能控制 f的距离$\delta$ 就可以 控制 $\phi$的距离</li>
</ul>
</li>
<li>对于没有控制的段，有 段内距离 $&gt;\delta$<ul>
<li>$\delta \sum_{没有控制到f的切割段} \Delta g_i &lt; U(P,f,g)-L(P,f,g) &#x3D;$任意值, 因为f是关于g黎曼可积</li>
<li>所以这里任意值，可以取$\delta\epsilon$或者 $\frac{\delta \epsilon}{2K}$， 书上用的是$\delta^2$且$\delta &lt; \epsilon$, 不过这都不影响，因为$\delta$的值是 控制f 能控制 phi 在delta内的，所以这里任何$h(\epsilon,\delta,K)$都是可以的, 最终向上针对目标尽量仅有$\epsilon$</li>
<li>从而 控制了$\sum \Delta g_i$<ul>
<li>这部分 的控制相对难想一点</li>
</ul>
</li>
</ul>
</li>
<li>所以又变成 $\epsilon(g(b)-g(a))+2K\epsilon$ 根据任意性可控</li>
</ul>
</li>
<li>11.33(b)给出什么样的函数 恰好 黎曼可积</li>
</ul>
<h3 id="积分的性质-properties-of-the-integral"><a href="#积分的性质-properties-of-the-integral" class="headerlink" title="积分的性质 properties of the integral"></a>积分的性质 properties of the integral</h3><p>6.12 定理</p>
<ul>
<li>如果在$[a,b]$ 上$f_1\in \mathscr{R}(g)$且$f_2\in \mathscr{R}(g)$那么 $f_1,f_2\in \mathscr{R}(g)$, 对于任意常数$c$有$cf\in\mathscr{R}(g)$<ul>
<li>$\int_{a}^b (f_1+f_2)dg&#x3D;\int_{a}^bf_1dg+\int_a^bf_2dg$<ul>
<li>$L(f_1)+L(f_2)\le L(f)\le U(f)\le U(f_1)+U(f_2)$</li>
</ul>
</li>
<li>$c\int_{a}^b fdg&#x3D;\int_{a}^b cfdg$</li>
<li>也就是 四则运算中的 加（减）和 数乘，的保持</li>
</ul>
</li>
<li>$[a,b]$上$f_1(x)\le f_2(x)$那么 $\int_a^bf_1dg\le \int_a^b f_2dg$ 也就是有序性</li>
<li>$a&lt;c&lt;b$ 那么在$[a,c],[c,b]$上$f\in\mathscr{R}(g)$且$\int_a^c fdg+\int_c^bfdg&#x3D;\int_a^bfdg$ 拆分及分段</li>
<li>$|f(x)|\le M$, 那么$|\int_a^b fdg|\le M[g(b)-g(a)]$</li>
<li>$f\in \mathscr{R}(g_1),f\in \mathscr{R}(g_2)$那么$f\in \mathscr{R}(g_1+g_2)$, 并且 $\int_a^b f d(g_1+g_2)&#x3D;\int_a^bfdg_1+\int_a^bfdg_2$ 拆解”积”的部分</li>
</ul>
<p>6.13 </p>
<ul>
<li>$fg\in \mathscr{R}(g)$<ul>
<li>6.11 复合 的黎曼可积，因为$\phi(x)&#x3D;x^2 \in\mathscr{R}(\alpha)$, 所以若 $f\in\mathscr{R}(\alpha)$则$f^2&#x3D;\phi(f)\in\mathscr{R}(\alpha)$</li>
<li>$fg&#x3D;1&#x2F;4((f+g)^2-(f-g)^2)$得证</li>
</ul>
</li>
<li>勘误 这里中文版又打错了<ul>
<li>$|f|\in\mathscr{R}(g)$且$|\int_a^bfdg|\le \int_a^b |f|dg$</li>
<li>$\phi(x)&#x3D;|x|\in\mathscr{R}(\alpha)$</li>
<li>左侧&#x3D;$\int f$或$-\int f$,也就是 $c\int f$,其中$c&#x3D;1$或$c&#x3D;-1$</li>
<li>左侧$&#x3D;c\int f&#x3D;\int cf \le$右侧, （因为6.12中有序性的保持$cf \le |f|$)</li>
</ul>
</li>
</ul>
<p>6.14 单位阶跃函数I的定义是</p>
<ul>
<li>$I(x)&#x3D;[x &gt; 0]$</li>
</ul>
<p>6.15 $a&lt;s&lt;b$, f在$[a,b]$上有界, f在s点连续,而$\alpha(x)&#x3D;I(x-s)$ 那么</p>
<ul>
<li>$\int_a^bfd\alpha&#x3D;f(s)$</li>
<li>这里$\alpha(x)&#x3D;[x&gt;s]$, f在s连续，根据 定义 大小和都是 $\sum m_i&#x2F;M_i\Delta \alpha_i$ 的形式，那么这里$\Delta\alpha_i$要非零的部分只有含有s点及正向邻域的区间<ul>
<li>也就是任意切割如果没有在s切断，那么细分到s有了$[s,s+ds]$ 只有这个有贡献, f在s点连续, 可以控制ds来控制$m_i,M_i$到$f(s)$的距离，所以，这$m_i,M_i$的距离也可以任意被控制，</li>
</ul>
</li>
<li>6.16 $c_n\ge 0,\sum c_n$ 收敛, {$s_n$}是$(a,b)$之内一串不同的点,且$\alpha(x)&#x3D;\sum_{n&#x3D;1}^{\infty} c_nI(x-s_n)$, $f在[a,b]$上连续<ul>
<li>$\int_a^bfd\alpha&#x3D;\sum_{n&#x3D;1}^{\infty}c_n f(s_n)$</li>
<li>比较收敛法，对于每个x收敛，$\alpha(x)$显然单调的$\alpha(a)&#x3D;0,\alpha(b)&#x3D;\sum c_n$</li>
<li>任意$\epsilon &gt;0$,可以控制$N$满足$\sum_{N+1}^{\infty} c_n &lt; \epsilon$<ul>
<li>从而 拆成$\alpha_1&#x3D;\sum_{n&#x3D;1}^N,\alpha_2&#x3D;\sum_{n&#x3D;N+1}^{\infty}$<ul>
<li>前一半 有限的运算能得到$\sum_{n&#x3D;1}^Nc_nf(s_n)$ 勘误这里写成i了</li>
<li>后一半，利用f的有限M,和控制的epsilon，</li>
<li>于是 $|\int_a^b fd\alpha -\sum_{n&#x3D;1}^Nc_nf(s_n)|\le M\epsilon$ 其中N可以任意更大，可以趋于无穷，右边是任意目标</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>6.17 若$\alpha$单调递增在$[a,b]$上$\alpha’\in\mathscr{R}$，设$f$是$[a,b]$上的有界实函数,于是$f\in\mathscr{R}(\alpha)$当且仅当$f\alpha’\in\mathscr{R}$, 这时候</p>
<ul>
<li>$\int_a^b fd\alpha&#x3D;\int_a^bf(x)\alpha’(x)dx$ 也就是建立变量dx和$d\alpha$的关系</li>
<li>6.6 $f\in \mathscr{R}(\alpha)$则任意$\epsilon &gt; 0$存在分法$U(P,\alpha’)-L(P,\alpha’)&lt;\epsilon$<ul>
<li>中值定理$t_i\in[x_{i-1},x_i]$使得$\Delta\alpha_i&#x3D;\alpha’(t_i)\Delta x_i$</li>
</ul>
</li>
<li>6.7(b) 若$s_i\in[x_i,x_i]$那么$\sum |\alpha’(s_i)-\alpha’(t_i)|\Delta x_i&lt;\epsilon$</li>
<li>令$M&#x3D;\sup |f(x)|$ </li>
<li>$\sum f(s_i)\Delta \alpha_i&#x3D;\sum f(s_i)\alpha’(t_i)\Delta x_i$</li>
<li>$|\sum f(s_i)\Delta \alpha_i - \sum f(s_i)\alpha’(s_i)\Delta x_i|$ 绝对值不等式<ul>
<li>$&#x3D;|\sum f(s_i)\alpha’(t_i)\Delta x_i- \sum f(s_i)\alpha’(s_i)\Delta x_i|$</li>
<li>$&#x3D;|\sum f(s_i)(\alpha’(t_i)-\alpha’(s_i))\Delta x_i|$</li>
<li>$\le M\epsilon$</li>
<li>对于$s_i$的一切选取法</li>
<li>$\sum f(s_i)\Delta \alpha_i\le U(P,f\alpha’)+M\epsilon$ 根据绝对值不等式</li>
<li>所以 $U(P,f,\alpha)\le U(P,f\alpha’)+M\epsilon$,或者说右边的 $\alpha_{right}(x)&#x3D;x$</li>
<li>同样 根据绝对值不等式 $U(P,f\alpha’)\le U(P,f,\alpha)+M\epsilon$, ？？？为啥要这样搞，上面绝对值不等式说明可以任意靠近不就好了吗？哦 意思是绝对值 里面是$\sum$ 不能直接换成$U$, 这里转出来说明两个U可以无限接近</li>
<li>从而 证明 两个的上积分（大和）可以任意接近，所以相对。类似的可以证明下和</li>
</ul>
</li>
</ul>
<p>6.18 评注 Stieltjes积分方法所固有的普遍性和适应性</p>
<ul>
<li>如果$\alpha$是纯跃阶函数，那么就变成6.16 形式本质是有限或无限的级数</li>
<li>如果$\alpha$有可积的导数，就变成普通的Riemann积分（大多数教材教的）<ul>
<li>例子 惯性矩 $\int x^2 dm$,质量函数$m$的导数是密度$\rho$, $x^2\rho dx$</li>
</ul>
</li>
</ul>
<p>6.19 换元</p>
<ul>
<li>$\varphi(x)$是严格递增的连续函数，它把闭区间$[A,B]$ onto $[a,b]$假设$\alpha$在$[a,b]$上单调递增，而且在$[a,b]$上$f\in\mathscr{R}(\alpha)$在$[a,b]$上</li>
<li>$\beta(y)&#x3D;\alpha(\varphi(y)),g(y)&#x3D;f(\varphi(y))$,那么$g\in\mathscr{R}(\beta)$ 且</li>
<li>$\int_A^B gd\beta &#x3D;\int_a^bfd\alpha$ （要证明</li>
<li>证明:<ul>
<li>$\varphi: [A,B]\mapsto [a,b]$且严格单调递增</li>
<li>$[a,b]$的分法P有$[A,B]$的分发Q对应，其中分割点通过$\varphi$ 保持对应$y_i&#x3D;\varphi(x_i \in[A,B])\in [a,b]$</li>
<li>$U(Q,g,\beta)&#x3D;\sum g(x_i)\Delta \beta_i &#x3D; \sum f(y_i&#x3D;\varphi(x_i))\Delta \alpha_i(\varphi(x_i))&#x3D;U(P,f,\alpha)$, 这里 $f,g$都要取到区间最小值，所以选择$x_i$始终可以一样</li>
<li>上界类似 $L(Q,g,\beta)&#x3D;L(P,f,\alpha)$ 这里的感觉是，不同的 入参的 切割点，而不同的切割点下 $\sum$每一段的取值情况$g_i&#x3D;f_i,\Delta \alpha_i &#x3D;\Delta \beta_i$</li>
<li>两边的划分 都可以足够靠近 它们分别的 积分定义，所以证明了两边相等</li>
</ul>
</li>
<li>特殊的$\alpha(x)&#x3D;x,\beta&#x3D;\varphi$ 假设$[A,B]$上$\varphi’\in\mathscr{R}$,<ul>
<li>$\int_a^b f(x)dx&#x3D;\int_a^b f(x)\alpha’(x)dx$ 利用 特殊的$\alpha’(x)&#x3D;1$</li>
<li>$&#x3D;\int_a^b fd\alpha$ 根据6.17</li>
<li>$&#x3D;\int_A^B f(\varphi(y)) d \varphi$ 根据6.19</li>
<li>$&#x3D;\int_A^Bf(\varphi(y))\varphi’(y)dy$ 根据6.17</li>
</ul>
</li>
</ul>
<h3 id="积分与微分-integration-and-differentiation"><a href="#积分与微分-integration-and-differentiation" class="headerlink" title="积分与微分 integration and differentiation"></a>积分与微分 integration and differentiation</h3><p>在实函数内，在某种意义上是互逆运算, we shall show that integration and differentiation are , in a certain sense, inverse operations</p>
<p>6.20 $[a,b]$上$f\in\mathscr{R}$ 对于$a\le x\le b$令$F(x)&#x3D;\int_a^x f(t)dt$, 那么$F$在$[a,b]$上连续, 如果$f$又在$[a,b]$上$x_0$点连续,那么$F$在该点可微且$F’(x_0)&#x3D;f(x_0)$</p>
<ul>
<li>黎曼可积，有界，被M控制，$|F(y)-F(x)|\le M(y-x)$ 可以控制入参距离来控制结果的距离（实际上是一致连续）</li>
<li>$|\frac{F(t)-F(s)}{t-s}-f(x_0)|&#x3D;|\frac{1}{t-s}\int_s^t[f(u)-f(x_0)]du|$, 其中$s &lt; x_0 &lt; t$<ul>
<li>目标很明确，要能通过控制$x_0$邻域来控制上面表达式能任意小,f的连续 让 |f(u)-f(x_0)|可被控制，根据6.12d 上面的也可以被控制</li>
</ul>
</li>
</ul>
<p>6.21 微积分基本定理 the fundamental theorem of calculus</p>
<ul>
<li>$[a,b]$上f黎曼可积, $F$ on $[a,b]$可导,且F’&#x3D;f那么</li>
<li>$\int_a^b f(x) dx&#x3D;F(b)-F(a)$</li>
<li>分析学里等号不是“等号，一样的意思，而更多是定义下的值相等“<ul>
<li>所以这里还是证明左右两边可以任意接近</li>
</ul>
</li>
<li>这里和6.20不太一样的前提，上面是通过f和黎曼积分定义出的F,这样定义出的F的导数会等于原来对应点f的值<ul>
<li>而6.21是说，F‘&#x3D;f和，也就是F不是通过f定义出来的，要证明的的是 黎曼积分的结果 &#x3D; 端点的总变化量</li>
<li>再或者说6.20的F是一个 特殊的积分结果 F(a)&#x3D;0</li>
<li>而这里F 是一个不定积分的某个具体F</li>
</ul>
</li>
<li>6.7c: 对于给定距离指标$\epsilon &gt;0$,对于分割P, 上下和的距离满足该指标$U-L &lt; \epsilon$，那么每个区间任取$s_i,t_i$得到$\sum |f(s_i)-f(t_i)|\Delta\alpha_i &lt;\epsilon$ 也满足这个指标，并且 $|\sum f(t_i)\Delta \alpha_i - \int_a^b fd\alpha|&lt;\epsilon$ 也就是划分的和的结果，和黎曼积分的值的距离也满足这个指标</li>
<li>这里 根据中值定理，因为$t_i$可以任意选取，我们要最终得到$F(b)-F(a)$,我们希望中间是$F(x_i)-F(x_{i-1})&#x3D;f(t_i)\Delta  x_i$ 而这个根据中值定理可以取到</li>
</ul>
<p>6.22 分部积分integration by parts 假定F和G 都是$[a,b]$上的可微函数. $F’&#x3D;f\in \mathscr{R}$且$G’&#x3D;g\in\mathscr{R}$ Then</p>
<ul>
<li>$\int_a^b F(x)g(x)dx&#x3D;F(b)G(b)-F(a)G(a)-\int_a^bf(x)G(x)dx$</li>
<li>proof<ul>
<li>put H(x)&#x3D;F(x)G(x)<ul>
<li>注意到$H’\in\mathscr{R}$(根据6.13)</li>
</ul>
</li>
<li>然后把H带入6.21 就证明完毕</li>
</ul>
</li>
</ul>
<h3 id="向量值函数的积分-integration-of-vector-valued-functions"><a href="#向量值函数的积分-integration-of-vector-valued-functions" class="headerlink" title="向量值函数的积分 integration of vector-valued functions"></a>向量值函数的积分 integration of vector-valued functions</h3><p>6.23 $f: [a,b]\mapsto \mathbb{R}^k$</p>
<ul>
<li>同样是Stieltjes的方法，如果$\alpha$在$[a,b]$上单调递增，那么$f\in \mathscr{R}(\alpha)$</li>
<li>$\int_a^b fd\alpha&#x3D;(\int_a^b f_1d\alpha,\cdots,\int_a^b f_k d\alpha)$ 也就是每个维度的$f_i$的stieltjes积分</li>
<li>性质，显然<ul>
<li>6.12 （向量中没有偏序关系，所以一些值不等式的先跳过<ul>
<li>a 加法和数乘成立</li>
<li>c 积分的分段成立</li>
<li>e 关于$\alpha$的拆分成立</li>
</ul>
</li>
<li>6.17 关于$d\alpha$和$dx$的转化 成立</li>
<li>6.20 变成了每个分量的 $F_i$ 成立</li>
<li>6.21 向量分量的微积分基本定理<ul>
<li>6.24: $\int_a^b f(t)dt&#x3D;F(b)-F(a)$ 写起来和6.21看着一样，不过不同的是，这里的f,F上面是$[a,b]\to\mathbb{R}$的，而这$[a,b]\to \mathbb{R}^k$</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>6.25 $f\in\mathscr{R}(\alpha)$那么$|f|\in\mathscr{R}(\alpha)$ 且$|\int_a^b fd\alpha|\le \int_a^b|f|d\alpha$</p>
<ul>
<li>$|f|&#x3D;(\sum f_i^2)^{1&#x2F;2}$ norm<ul>
<li>$f_i\in\mathscr{R},x^2连续,f_i^2\in\mathscr{R},\sum f_i^2\in\mathscr{R},\sqrt{x}连续,f\in\mathscr{R}$</li>
<li>勘误 书上这里f漏了一个加粗（表示向量）</li>
<li>对于左边norm内的用y表示 $y&#x3D;\int_a^bfd\alpha$, 其中$y_i&#x3D;\int f_i d\alpha$</li>
<li>$|y|^2&#x3D;\sum y_i^2&#x3D;\sum y_i \int f_i d\alpha&#x3D;\int (\sum y_if_i)d\alpha$<ul>
<li>schwarz不等式 $\sum y_if_i(t) \le |y||f(t)| ,(a\le t \le b)$</li>
<li>$|y|^2\le \int |y||f(t)|d\alpha&#x3D;|y|\int |f(t)|d\alpha$ <ul>
<li>y&#x3D;0那么显然</li>
<li>否则两边同时除以$|y|$ 得证</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="可求长曲线-rectifiable-curves"><a href="#可求长曲线-rectifiable-curves" class="headerlink" title="可求长曲线 rectifiable curves"></a>可求长曲线 rectifiable curves</h3><p>k&#x3D;2 也就是$\mathbb{R}^2$ 情况 研究复变量 解析函数</p>
<p>6.26 将闭区间$[a,b]$ 映入$\mathbb{R}^k$的映射$\gamma$叫做$\mathbb{R}^k$里的曲线.为了重视参数区间$[a,b]$，也可以说$\gamma$是$[a,b]$上的曲线</p>
<ul>
<li>假如$\gamma$是一对一的，$\gamma$就称作弧</li>
<li>假如$\gamma(a)&#x3D;\gamma(b)$就说$\gamma$是闭曲线</li>
<li>这里定义的“曲线”是 映射， 而不是点集。 结合着$\mathbb{R}^k$里每个曲线$\gamma$总有$\mathbb{R}^k$的一个子集，即$\gamma$的值域，不同的曲线 可能有 相同的值域</li>
<li>对于分法P配置一个数 $\Lambda(P,\gamma)&#x3D;\sum_{i&#x3D;1}^n |\gamma(x_i)-\gamma(x_{i-1})|$ ，也就是切割点的距离和，那么这里Lambda就是按照切割下的折线长<ul>
<li>这就好多了（之前 各种树上都是 $\sqrt{1+dx^2}$ 总感觉怪怪的</li>
<li>$\Lambda(\gamma)&#x3D;\sup \Lambda(P,\gamma)$<ul>
<li>如果$\Lambda &lt; \infty$ 那么$\gamma$就是可求长的</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>6.27 假如$\gamma’$在$[a,b]$上连续，$\gamma$便是可求长的，而且</p>
<ul>
<li>$\Lambda(\gamma)&#x3D;\int_a^b |\gamma’(t)| dt$</li>
<li>证明：<ul>
<li>这里用 左右互相 大于等于来证明</li>
<li>正向<ul>
<li>6.24 : $|\gamma(x_i)-\gamma(x_{i-1})|&#x3D;|\int_{x_{i-1}}^{x_i}\gamma’(t)dt|$ , 这里是切割段 端点的 向量变化 的 norm &#x3D; 导数的向量积分的norm</li>
<li>6.25：$\le \int_{x_{i-1}}^{x_i} |\gamma’(t)|dt$</li>
<li>对于每个分法P: $\Lambda(P,\gamma)\le \int_a^b |\gamma’(t)|dt$</li>
<li>$\Lambda(\gamma)&#x3D;\sup \Lambda(P,\gamma)\le \int_a^b |\gamma’(t)|dt$</li>
</ul>
</li>
<li>反向<ul>
<li>$\epsilon &gt; 0$ 既然$\gamma’$在$[a,b]$上一致连续,便有$|s-t|&lt;\delta$ 时$|\gamma’(s)-\gamma’(t)|&lt;\epsilon$，也就是$\delta$控制距离能控制$\gamma’$的距离</li>
<li>对于任意满足上面$\delta$控制切割力度的划分P $|\gamma’(t)|\le|\gamma’(x_i)|+\epsilon$ 绝对值不等式</li>
<li>$\int_{x_{i-1}}^{x_i}|\gamma’(t)|dt\le |\gamma’(x_i)|\Delta x_i+\epsilon\Delta x_i$</li>
<li>$&#x3D;|\int_{x_{i-1}}^{x_i}[\gamma’(t)+\gamma’(x_i)-\gamma’(t)] dt|+\epsilon\Delta x_i$</li>
<li>$\le|\int_{x_{i-1}}^{x_i} \gamma’(t)dt|+|\int_{x_{i-1}}^{x_i}[\gamma’(x_i)-\gamma’(t)] dt|+\epsilon\Delta x_i$ 三角不等式</li>
<li>$\le|\gamma’(x_i)-\gamma’(x_{i-1})|+2\epsilon\Delta x_i$  </li>
<li>即 $\int_a^b |\gamma’(t)|dt\le \Lambda(P,\gamma)+2\epsilon(b-a)$</li>
<li>$\le \Lambda(\gamma)+2\epsilon(b-a)$</li>
<li>右侧epsilon是任意的</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<blockquote>
<p>小总结</p>
</blockquote>
<p>这积分 虽然是riemann引入，但是前面通过stieltjes的方法来研究，为后面特殊称Riemann也好，变量替换也好，分部积分也好，研究积分基本定理也好，提供了更好看的基础。</p>
]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>Walter Rudin 数学分析原理 7 函数序列与函数项极限</title>
    <url>/Math/Principles_of_Mathematical_Analysis_7/</url>
    <content><![CDATA[<p>isbn</p>
<ul>
<li>中文 9787111134176</li>
<li>英文 9787111619543</li>
</ul>
<span id="more"></span>

<h2 id="函数序列与函数项级数-sequences-and-series-of-functions"><a href="#函数序列与函数项级数-sequences-and-series-of-functions" class="headerlink" title="函数序列与函数项级数 sequences and series of functions"></a>函数序列与函数项级数 sequences and series of functions</h2><p>这一章里 只限于讨论复值函数。</p>
<p>注意力：调换两个极限过程时出现的若干问题（when limit processes are interchanged）</p>
<h3 id="主要问题的讨论-discussion-of-main-problem"><a href="#主要问题的讨论-discussion-of-main-problem" class="headerlink" title="主要问题的讨论 discussion of main problem"></a>主要问题的讨论 discussion of main problem</h3><p>7.1, n&#x3D;1,2, {$f_n$}是一个定义在集E上的函数序列，再假设${f_n(x)}$对于每个$x\in E$收敛，可由</p>
<ul>
<li>$f(x)&#x3D;\lim_{n\to\infty} f_n(x)$确定一个函数f</li>
<li>称$f_n$在$E$上收敛,f是{$f_n$}的极限limit 或 极限函数limit function</li>
<li>{$f_n$} converges to f pointwise on E, 在E上逐点收敛到f</li>
<li>类似的 $f(x)&#x3D;\sum_{n&#x3D;1}^{\infty} f_n(x), x\in E$, 说f是 级数$\sum f_n$的和. f is called the sum of the series $\sum f_n$</li>
<li>那么研究什么呢，例如 连续性，可微性，可积 这些性质能否保持，导数的关系<ul>
<li>例如连续性: <ul>
<li>点连续 $\lim_{t\to x}f(t)&#x3D;f(x)$</li>
<li>是否保持连续性 $\lim_{t\to x}\lim_{n\to \infty}f_n(t)&#x3D;?&#x3D;\lim_{n\to\infty} \lim_{t \to x}f_n(t)$  或者说这个次序是否影响结果</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>7.2 一些极限的次序是不能交换的，一些是与极限顺序无关的</p>
<ul>
<li>$s_{m,n}&#x3D;\frac{m}{m+n}$</li>
<li>显然交换 极限顺序一个是0,一个是1,不等</li>
<li>我在想 这个从感觉上的</li>
</ul>
<p>7.3 连续函数的收敛级数 可能不连续</p>
<ul>
<li>$f_n(x)&#x3D;\frac{x^2}{(1+x^2)^n}$</li>
<li>$f(x)&#x3D;\sum_{n&#x3D;0}^{\infty}f_n(x)$<ul>
<li>在x&#x3D;0是f(x)&#x3D;0</li>
<li>在其它点，逐点收敛到$f(x)&#x3D;1+x^2$</li>
</ul>
</li>
</ul>
<p>7.4 $f_m(x)&#x3D;\lim_{n\to\infty} (\cos m! \pi x)^{2n}$</p>
<ul>
<li>所以 $f_m(x)&#x3D;[m!x \in \mathbb{Z}]$ 也就是判定m!x是否为整数</li>
<li>$f(x)&#x3D;\lim_{m\to \infty} f_m(x)$</li>
<li>对于每个 无理数x, f(x)&#x3D;0</li>
<li>对于每个有理数x&#x3D;p&#x2F;q, 当m&gt;&#x3D;q时， m!x是整数，所以f(x)&#x3D;1（逐点）</li>
<li>哦，这样也构造出了 Dirichlet函数 ，有点意思</li>
<li>处处间断，它不是黎曼可积的</li>
</ul>
<p>7.5 导数不同样收敛的例子</p>
<ul>
<li>x是实数, n&#x3D;1,2,3,…</li>
<li>$f_n(x)&#x3D;\frac{\sin nx}{\sqrt{n}}$</li>
<li>$f(x)&#x3D;\lim_{n\to \infty} f_n(x)&#x3D;0$</li>
<li>$f’(x)&#x3D;0$</li>
<li>$f’_n(x)&#x3D;\sqrt{n}\cos nx$ 而这个 不收敛到f’(例如点x&#x3D;0), 这个 $\sqrt{n}$ ，不为0</li>
</ul>
<p>7.6 积分不能保持的例子 极限和积分交换后结果不同 $0\le x\le 1$令$f_n(x)&#x3D;n^2x(1-x^2)^n$</p>
<ul>
<li>$\lim_{n\to \infty}f_n(x)&#x3D;0$</li>
<li>$\lim_{n\to \infty} \int_0^1 f_n(x)dx&#x3D;\lim_{n\to \infty} \frac{n^2}{2n+1} \to +\infty$</li>
<li>类似的<ul>
<li>$\lim_{n\to \infty} nx(1-x^2)^n&#x3D;0$</li>
<li>$\lim_{n\to \infty} \int_0^1 nx(1-x^2)^n dx&#x3D;\lim_{n\to \infty} \frac{n}{2n+1} \to 1&#x2F;2$</li>
</ul>
</li>
</ul>
<h3 id="一致收敛性-uniform-convergence"><a href="#一致收敛性-uniform-convergence" class="headerlink" title="一致收敛性 uniform convergence"></a>一致收敛性 uniform convergence</h3><p>上面这个例子的问题导致了 交换运算顺序受到了限制，我觉得从计算机的视角函数就是函数名和参数虽然上面写作$f_n(x)$在计算机的习惯上可以写成$f(n,x)$, 而这样变成二元函数以后，其实这种 顺序会导致不同，感觉上是更不容易相同的，$f(n,x)&#x3D;sign(\lfloor x\rfloor-n)$ 这样甚至可以对角线上是0,一种顺序是1,一种顺序是-1</p>
<p>7.7 对于$\epsilon &gt; 0$有整数N,使得$n\ge N$时，对于一切$x\in E$ 有 $|f_n(x)-f(x)|\le \epsilon$</p>
<ul>
<li>这里 和 逐点的区别是，这里的N与点的选取是无关的，要所有点满足 结果的距离限制。</li>
<li>而前面的逐点收敛，是先选点，关于点有$N(x,\epsilon)$ 来控制$f_n$和$f$的距离</li>
<li>而显然 $N(x,\epsilon)$可以用$N(\epsilon)$表示，也就是说 一致收敛 一定 逐点收敛，</li>
<li>哦  我写完这段，才看到书上也写了区别的讲解</li>
</ul>
<p>7.8 类似的，上面的定义是 半径形式，那么自然有直径形式也就是Cauchy准则</p>
<ul>
<li>当且仅当 任意$\epsilon &gt;0$存在$N$使得任意$n,m \ge N$，任意$x$有$|f_n(x)-f_m(x)| \le \epsilon$ </li>
<li>有的时候 我好想用r和2r,是我的问题吗，这样的“感受会更舒服”，虽然不是更简洁</li>
<li>证明<ul>
<li>7.7 -&gt; 7.8 取epsilon&#x2F;2就好</li>
<li>7.8 -&gt; 7.7 相对复杂，要用紧度量空间 cauchy列的性质 3.11 这里逐点收敛于一个具体值，那么这些逐点收敛的具体值串起来就是它逐点收敛于某个函数，记作$f(x)$, 再证明一致性就好</li>
</ul>
</li>
</ul>
<p>7.9 假设 $\lim_{n\to\infty} f_n(x)&#x3D;f(x),x\in E$</p>
<ul>
<li>令 $M_n&#x3D;\sup_{x\in E} |f_n(x)-f(x)|$</li>
<li>当且仅当$n\to \infty$时$M_n\to 0$</li>
<li>就是7.7换了个写法，还是能通过控制n来控制所有点 到 逐点收敛函数的距离最大值</li>
</ul>
<p>7.10 weierstrass</p>
<ul>
<li>{$f_n$}是定义在$E$上的函数序列, $f_n(x)\le M_n$, 如果$\sum M_n$收敛，那么$\sum f_n$便在$E$上一致收敛</li>
<li>看起来的感觉像比较判别法，但比较判别法直接只能控制界限，而如果配合cauchy列（也就是直径），那么能控制直径的界限，也就能一致收敛了</li>
</ul>
<h3 id="一致收敛性与连续性-uniform-convergence-and-continuity"><a href="#一致收敛性与连续性-uniform-convergence-and-continuity" class="headerlink" title="一致收敛性与连续性 uniform convergence and continuity"></a>一致收敛性与连续性 uniform convergence and continuity</h3><p>7.3的例子 给到了连续函数 的逐点极限 可能不连续， </p>
<p>7.11 定理 假设在度量空间内的集E上$f_n$一致收敛于f,</p>
<ul>
<li>设x是E的极限点， </li>
<li>在假设$\lim_{t\to x}f_n(t)&#x3D;A_n$ (是$f_n$在x的极限)</li>
<li>那么{$A_n$}收敛,并且 $\lim_{t\to x}f(t)&#x3D;\lim_{n\to \infty} A_n$ (上述极限随着n也收敛，且与逐点收敛函数f 在x点极限相同)</li>
<li>也就是 在x点 保持点极限 $\lim_{t\to x}\lim_{n\to \infty} f_n(t)&#x3D;\lim_{n\to \infty}\lim_{t\to x} f_n(t)$<ul>
<li>因为研究点连续 就是 极限&#x3D;点值，但点值容易研究，上面先抛开点研究点极限</li>
<li>在此基础上，再有$f_n$点x连续,那就是$f_n(x)&#x3D;A_n$，那么就有  点连续</li>
</ul>
</li>
<li>emmm 这里书上 $|f_n(t)-f_m(t)|&lt;\epsilon$到$|A_n-A_m|&lt;\epsilon$ 直接$t\to x$取到极限了?<ul>
<li>感觉 给定epsilon, 控制N任意 $|f_n(t)-f_m(t)|&lt;\epsilon&#x2F;3$, 对于取得n,m ,可以控制t与x距离 $|A_n-A_m|\le |A_n-f_n|+|f_n-f_m|+|f_m-A_m| &lt; 3\epsilon&#x2F;3$ </li>
<li>总之可以控制$A_i$的距离,从而{$A_i$}是Cauchy列 有极限 A</li>
<li>$|f(t)-A| \le |f(t)-f_n(t)|+|f_n(t)-A_n|+|A_n-A|$， 这个表达式对任意n成立<ul>
<li>一致连续 对于一切t 可以用N控制 第一段 $\epsilon&#x2F;3$</li>
<li>$A_n$收敛 存在N 控制 第三段 $\epsilon&#x2F;3$</li>
<li>在上述n选定后 得到 $|f(t)-A| \le 2\epsilon&#x2F;3 + |f_n(t)-A_n|$, 注意的是这里 右侧的里面的 函数和常数是被n固定了的</li>
<li>最后 目标是证明 控制t和x距离能控制 $f(t)$和A的距离，那么 最后这个就是 控制t和x距离控制 中间段的 距离 ，从而控制了3段的距离</li>
</ul>
</li>
<li>也就是 一致收敛 则 $\lim_{t\to x}f(t)&#x3D;\lim_{n\to \infty} A_n$<ul>
<li>$\lim_{t\to x}(\lim_{n\to\infty}f_n(t))&#x3D;\lim_{t\to x}f(t)&#x3D;\lim_{n\to \infty} A_n&#x3D;\lim_{n\to \infty} (\lim_{t\to x}f_n(t))$</li>
</ul>
</li>
</ul>
</li>
<li>7.3 的例子$f(x)&#x3D;\sum \frac{x^2}{(1+x^2)^n}$ 在点0邻域没有一致收敛，因为右边的值要逐点趋于1,但是如果先给定了n, x越趋于0,右侧值可以趋于0</li>
</ul>
<p>7.12 {$f_n$}在E上连续函数的序列，在E上$f_n$一致收敛到f,那么f在E上连续</p>
<ul>
<li>是7.11 的直接推论，</li>
</ul>
<p>7.13 K紧</p>
<ul>
<li>{$f_n$}是K上连续函数序列</li>
<li>{$f_n$}是K上逐点收敛于连续函数f</li>
<li>$f_n(x)\ge f_{n+1}(x)$， 单调性</li>
<li>那么 $f_n\to f$是一致的</li>
<li>证明:<ul>
<li>$g_n&#x3D;f_n-f$连续的,</li>
<li>$g_n\to 0$逐点收敛到0函数</li>
<li>要证明一致收敛到0函数，</li>
<li>$\epsilon &gt; 0$, 设$K_n \subset E$是使得$g_n(K_n)\ge \epsilon$ 的一切$x\in E$的集，$g_n(K_n)$连续，根据4.8(紧 的闭的 原像闭)，所以$K_n$闭</li>
<li>$g_n$单调递减，所以$K_n \supset K_{n+1}$ 嵌套闭集，存在点或为空，对于任意x, 存在充分大的n使得 $x\not\in \cap K_n$ 所以 $\cap K_n$是空的，</li>
<li>所以 存在 N使得 $\cap K_n$是空的 （因为对于紧集 嵌套闭集 任意有限交非空 会导致 可数交非空）</li>
</ul>
</li>
<li>这里的 紧性 必不可少，$f_n(x)&#x3D;\frac{1}{nx+1}, x\in(0,1)$ 趋于0,但不是一致收敛<ul>
<li>没有紧性，上面的$K_n$ 不一定是嵌套闭集，虽然$\cap K_n$无限交是空的，但是无法得到存在有限交是空的</li>
</ul>
</li>
</ul>
<p>7.14 X 是度量空间, $\mathscr{C}(X)$  就表示 以X为定义域的复值complex-valued连续continuous 有界bounded 函数的集 (mathscr{C})</p>
<ul>
<li>4.15 $f(X紧) \mapsto \mathbb{R}^k$, f连续则 $f(X)$ 闭+有界. 所以 如果X紧 上面 值域中有界性是多余的</li>
<li>定义范数 $||f||&#x3D;\sup_{x\in X} |f(x)|$ 范数norm上确</li>
<li>f有界,那么 $||f|| &lt; \infty$</li>
<li>$f(x)&#x3D;0$时才有 $||f||&#x3D;0$</li>
<li>若$h&#x3D;f+g$, $|h(x)|\le|f(x)|+|g(x)|\le ||f||+||g||$<ul>
<li>$||f+g|| \le ||f||+||g||$</li>
</ul>
</li>
<li>定义$d(f,g)&#x3D;||f-g||$, 为距离函数， 那么上面范数不等式 满足 度量空间3条件（只有自己到自己&#x3D;0，对称，任意c(X)都有 d(a,b) &lt;&#x3D; d(a,c)+f(c,b), 通过 f&#x3D; a-c, g&#x3D;c-b, 带入即可</li>
<li>这样$\mathscr{C}(X)$是度量空间</li>
<li>$\mathscr{C}(X)$的度量来说，序列{$f_n$} 收敛于f,当且仅当$f_n$在X上一致收敛于f</li>
<li>$\mathscr{C}$的闭子集有时叫作 一致闭 的</li>
<li>集$\mathscr{A}\subset \mathscr{C}(X)$的闭包叫作它的 一致闭包 等等</li>
</ul>
<p>7.15 上边说的 度量 使得$\mathscr{C}(X)$变成了完备度量空间complete metric space</p>
<ul>
<li>证明 设 {$f_n$} 是$\mathscr{C}(X)$里的Cauchy序列,<ul>
<li>也就是 可以通过 N来控制 $||f_n-f_m||$的直径，根据7.8 它存在具体的f, 一致收敛于它。（一致收敛是因为|| ||的定义是 sup ||</li>
<li>7.12 (连序函数列+一致收敛) ，收敛于连续的f</li>
<li>一致收敛 存在n 使得$|f(x)-f_n(x)|&lt;1$ 对于所有x成立，$f_n$有界,从而 $f$有界</li>
<li>所以$f\in\mathscr{C}(X)$</li>
<li>因为一致收敛于f, $n\to \infty$时$||f-f_n||\to 0$</li>
</ul>
</li>
<li>这里 就是要证明 complete ，什么是complete, 也就是 cauchy 收敛，且收敛于 空间中的元素<ul>
<li>那么就是要证明 1. 元素在空间中，2收敛到该元素</li>
<li>那么首先找到f,然后有 f的定义域+连续+有界，从而证明f在空间中，</li>
<li>最后再（一致收敛 是 函数的定义）到 ($\mathscr{C}(X)$中的距离的收敛)</li>
</ul>
</li>
</ul>
<h3 id="一致收敛性与积分-uniform-convergence-and-integration"><a href="#一致收敛性与积分-uniform-convergence-and-integration" class="headerlink" title="一致收敛性与积分 uniform convergence and integration"></a>一致收敛性与积分 uniform convergence and integration</h3><p>7.16 $[a,b]$上$f_n\in\mathscr{R}(\alpha)$,一致收敛到f 那么</p>
<ul>
<li>$f\in\mathscr{R}(\alpha)$ 同样黎曼可积</li>
<li>$\int_a^b f d\alpha &#x3D; \lim_{n\to\infty} \int_a^b f_n d\alpha$ 保持积分结果</li>
<li>证明<ul>
<li>令 $\epsilon_n&#x3D;\sup |f_n(x)-f(x)|$ 通过一致收敛保证</li>
<li>有 $f_n-\epsilon_n \le f\le f_n+\epsilon_n$</li>
<li>$\int_a^b (f_n-\epsilon_n)d\alpha \le L(f) \le U(f) \le \int_a^b (f_n+\epsilon_n)d\alpha$<ul>
<li>因为任意划分P，$f_n-\epsilon_n$的下积分 小于等于 f的下积分，两边都取sup，左边是可积所以左边&#x3D;积分结果，右边则是f的下积分</li>
<li>上积分类似</li>
</ul>
</li>
<li>$0\le U(f)-L(f)\le 2\epsilon_n [\alpha(b)-\alpha(a)]$ 可以任意小，从而f上下积分相等，所以关于$\alpha$黎曼可积</li>
<li>$|\int_a^b f d\alpha -\int_a^b f_nd\alpha|\le \epsilon_n[\alpha(b)-\alpha(a)]$ 证明积分距离任意小即相等</li>
</ul>
</li>
<li>推论: $[a,b]$上<ul>
<li>$f(x)&#x3D;\sum_{n&#x3D;1}^{\infty} f_n(x)$ 在$[a,b]$上一致收敛</li>
<li>$\int_a^b fd\alpha&#x3D;\sum_{n&#x3D;1}^{\infty}\int_a^b f_n d\alpha$</li>
<li>也就是 这个级数可以逐项积分, 上面的 积分和求和顺序在 有限项时可以交换的，而上面的性质是 $\sum_n \int f_i &#x3D; \int \sum_n f_i \to \int f$</li>
</ul>
</li>
</ul>
<h3 id="一致收敛性与微分-uniform-convergence-and-differentiation"><a href="#一致收敛性与微分-uniform-convergence-and-differentiation" class="headerlink" title="一致收敛性与微分 uniform convergence and differentiation"></a>一致收敛性与微分 uniform convergence and differentiation</h3><p>前面7.5 说明{f_n}一致收敛到f，并不能$f’_n\to f’$ 需要更强假设</p>
<p>7.17 {$f_n$}是$[a,b]$上的可微函数序列，$[a,b]$上有某点$x_0$使得{$f_n(x_0)$} 收敛, 如果$f’_n$在$[a,b]$上一致收敛，那么</p>
<ul>
<li><p>{$f_n$}便在$[a,b]$上一致收敛于某函数f ,并且</p>
</li>
<li><p>$f’(x)&#x3D;\lim_{n\to\infty}f’_n(x)$</p>
</li>
<li><p>证明:</p>
<ul>
<li>$x_0$点f收敛，可以控制N, $|f_n(x_0)-f_m(x_0)|&lt;\epsilon&#x2F;2$</li>
<li>$f’$一致收敛，可以控制N,任意t, 有$|f’_n(t)-f’_m(t)| &lt; \frac{\epsilon}{2(b-a)}$</li>
<li>5.19 $f: [a,b] \mapsto \mathbb{R}^k$ 且可微 k则 $|f(b)-f(a)|\le (b-a) |f’(x)|$<ul>
<li>$|(f_n(x)-f_m(x))-(f_n(t)-f_m(t))|\le |x-t|\cdot|f’_n(p)-f’_m(p)|, (其中(x-p)(t-p)&lt; 0) \le |x-t| \frac{\epsilon}{2(b-a)} \le \frac{\epsilon}{2}$ 对于任意$x,t \in[a,b]$</li>
</ul>
</li>
<li>$|f_n(x)-f_m(x)|\le |(f_n(x)-f_m(x))-(f_n(x_0)-f_m(x_0))|+|f_n(x_0)-f_m(x_0)| \le \epsilon$ 可以被控制</li>
<li>从而 证明了 {$f_n$}一致收敛</li>
<li>接下来 证明导数 保持，也就是根据导数定义 任意接近</li>
<li>对于定点x, 令 $\phi_n(t)&#x3D;\frac{f_n(t)-f_n(x)}{t-x}$, $\phi(t)&#x3D;\frac{f(t)-f(x)}{t-x}$</li>
<li>那么$\lim_{t\to x}\phi_n(t)&#x3D;f’_n(x)$</li>
<li>$|\phi_n(t)-\phi_m(t)| \le \frac{\epsilon}{2(b-a)}$ 根据上面，说明收敛 且 $t\neq x$时一致收敛（能与点无关 的控制距离）</li>
<li>根据$\phi$定义, $\lim_{n\to \infty} \phi_n\to \phi$ 一致的成立<ul>
<li>7.11 $\lim_{t\to x}\lim_{n\to\infty}f_n(t)&#x3D;\lim_{n\to \infty} \lim_{t\to x}f_n(t)$</li>
<li>$f’(x)&#x3D;\lim_{t\to x}\phi(t)&#x3D;\lim_{t\to x}\lim_{n\to\infty} \phi_n(t)&#x3D;\lim_{n\to\infty}\lim_{t\to x} \phi_n(t)&#x3D;\lim_{n\to \infty} f’_n(x)$</li>
<li>细看这一串等号，两头的 是 导数的定义<ul>
<li>第二个等号 需要 $f_n$收敛</li>
<li>第三个等号 需要 $\phi_n$一致收敛到$\phi$</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>注 如果$f’_n$连续，7.16 + 微积分基本定理，可以更容易证明</p>
</li>
</ul>
<h3 id="7-18-实轴上确有处处不可微的实连续函数"><a href="#7-18-实轴上确有处处不可微的实连续函数" class="headerlink" title="7.18 实轴上确有处处不可微的实连续函数"></a>7.18 实轴上确有处处不可微的实连续函数</h3><p>there exists a real continuous function on the real line which is nowhere differentiable</p>
<ul>
<li>$\varphi(x)&#x3D;|x|, -1\le x\le 1$<ul>
<li>$\varphi(x+2)&#x3D;\varphi(x)$</li>
<li>$|\varphi(s)-\varphi(t)|\le |s-t|$ ，在$\mathbb{R}^1$上连续</li>
</ul>
</li>
<li>$f(x)&#x3D;\sum_{n&#x3D;0}^{\infty} (\frac{3}{4})^n \varphi(4^nx)$<ul>
<li>7.10 被 $M_n&#x3D;(3&#x2F;4)^n$ 控制，所以$f(x)$ 一致收敛</li>
<li>7.12 连续+一致收敛 &#x3D;&gt; f连续</li>
<li>固定实数x和正数m,令$\delta_m&#x3D;\pm \frac{1}{2}4^{-m}$<ul>
<li>这里正负号选取使得 $4^mx$与$4^m(x+\delta_m)$ 之间没有整数 （因为 这是$4^mx$ 的1&#x2F;2半径的单侧邻域一定能做到</li>
<li>令$\displaystyle \gamma_n&#x3D;\frac{\varphi(4^n(x+\delta_m))-\varphi(4^nx)}{\delta_m}$ <ul>
<li>$n&gt;m$时，增量是偶数，所以分子为0</li>
<li>$0\le n \le m$ 时, 分子变化 不大于增量， $|\gamma_n| \le 4^n$</li>
<li>$|\frac{f(x+\delta_m)-f(x)}{\delta_m}|&#x3D;|\sum (3&#x2F;4)^n\gamma_n|$ 根据定义</li>
<li>$&#x3D;|\sum_{n&#x3D;0}^m (3&#x2F;4)^n\gamma_n|$ 根据$\gamma性质$</li>
<li>$\ge 3^m - \sum_{n&#x3D;0}^{m-1} 3^n$ 这里用 三角不等式，但是注意要证明 导数不被控制，所以希望是 &gt;&#x3D;, 那么 |a+b+c|+|-b|+|-c|&gt;&#x3D;|a| 这样去使用</li>
<li>$&#x3D;\frac{1}{2}(3^m+1)$ </li>
<li>也就是 $m \to \infty$时$\delta_m\to 0, \gamma_n \to \infty$  导数的判断函数趋于无穷</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>类似的 Weierstrass 函数。它由德国数学家卡尔·魏尔斯特拉斯（Karl Weierstrass）于1872年构造，用来证明连续性和可微性并不等价。其形式通常如下：$W(x)&#x3D;\sum_{n&#x3D;0}^{\infty} a^n \cos(b^n\pi x)$ 同样是 幂次 与 周期 的级数和<ul>
<li>$0 &lt; a &lt; 1$控制振幅衰减</li>
<li>$b$正奇数控制频率</li>
<li>$ab &gt; 1+\frac{3}{2}\pi$ 保证函数不可微</li>
<li>连续性: 一致收敛 -&gt; 连续</li>
<li>不可微性：$b^n$导致震荡频率的快速增加，振幅衰减不足以抵消频率的增长，任何点的差的商会剧烈振荡，无法趋于确定的极限</li>
</ul>
</li>
</ul>
<h3 id="等度连续的函数族-equicontinuous-families-of-functions"><a href="#等度连续的函数族-equicontinuous-families-of-functions" class="headerlink" title="等度连续的函数族 equicontinuous families of functions"></a>等度连续的函数族 equicontinuous families of functions</h3><p>从3.6 每个有界complex numbers序列，必有收敛的子序列，关于函数序列是否同样类似结论</p>
<p>7.19 {$f_n$} 定义在$E$上的函数序列，</p>
<ul>
<li>逐点有界：对于每个给定$x\in E$, {$f_n(x)$}是有界的，也就是说：如果存在着 一个定义在E上的有限值函数$\phi$使得$|f_n(x)| &lt; \phi(x)$</li>
<li>一致有界：存在M, $|f_n(x)| &lt; M$</li>
<li>逐点有界，$E_1\subset E$,且$E_1$可数, 存在子序列{$f_{n_k}$} 对于每个$x\in E_1$收敛</li>
</ul>
<p>7.20 例 $f_n(x)&#x3D;\sin nx, x\in[0,2\pi]$</p>
<ul>
<li>设数列{$n_k$}使得{$\sin n_k x$}对于每个$x\in[0,2\pi]$收敛，这时候，必然</li>
<li>$\lim_{k\to \infty} (\sin n_kx-\sin n_{k+1}x)&#x3D;0, x\in[0,2\pi]$ </li>
<li>$\lim_{k\to \infty} (\sin n_kx-\sin n_{k+1}x)^2&#x3D;0, x\in[0,2\pi]$ </li>
<li>根据11.23 有界收敛序列积分的Lebesgue定理，<ul>
<li>$\lim_{k\to \infty} \int_0^{2\pi} (\sin n_k x-\sin n_{k+1} x)^2dx &#x3D;0$</li>
<li>但是 $\int_0^{2\pi} (\sin n_k x-\sin n_{k+1} x)^2dx &#x3D;2\pi$ 矛盾</li>
</ul>
</li>
</ul>
<p>7.21 即使序列在一个紧集上一致有界，收敛序列 不一定 有一致收敛的子序列。</p>
<ul>
<li>7.6 表明 有界函数序列可以收敛 而 不一致有界。但是有界函数序列的一致收敛性包着一致有界性</li>
<li>$x\in[0,1] f_n(x)&#x3D;\frac{x^2}{x^2+(1-nx)^2}$</li>
<li>$|f_n(x)| \le 1$ 在$[0,1]$上一致有界</li>
<li>$\lim_{n\to\infty} f_n(x)&#x3D;0$ 收敛到0函数</li>
<li>但是 $f_n(1&#x2F;n)&#x3D;1$， 所以没有子序列能在$[0,1]$上一致收敛</li>
<li>紧+一致有界+收敛序列 依然不一定找到 一致收敛子序列</li>
</ul>
<p>7.22 等度连续： f定义在度量空间X内集合E上的函数, $\mathscr{F}$是f的族. 说$\mathscr{F}$在E上等度连续，就是说对于每个$\epsilon &gt; 0$存在一个$\delta &gt; 0$只要$d(x,y) &lt; \delta$, $x\in E,y\in E,f\in \mathscr{F}$ 就能使得</p>
<ul>
<li>$|f(x)-f(y)|&lt;\epsilon$</li>
<li>这里$d$表示$X$的度量</li>
<li>回顾一下<ul>
<li>点连续，对于函数，给定定义域中的点，能控制点邻域半径，控制值域变化</li>
<li>一致连续，对于函数，能控制邻域半径，对于任意点，控制值域变化</li>
<li>等度连续，能控制邻域半径，对于任意 点 和 函数族中的函数，控制值域变化。 根据顺序，显然等度连续在具体的f上是一致连续的</li>
<li>或者 全部加上$\mathscr{F}$中讨论<ul>
<li>点连续的控制函数是$\delta(f,x,\epsilon)$</li>
<li>一致连续的控制函数是$\delta(f,\epsilon)$</li>
<li>等度连续的控制函数是$\delta(\epsilon)$</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>7.23 {$f_n$}是在 可数集E 上逐点有界的复值函数序列，那么{$f_n$}便有子序列{$f_{n_k}$}使得{$f_{n_k}(x)$}对于每个$x\in E$收敛</p>
<ul>
<li>设 {$x_i$} 是E的点排列成的序列，(用到了可数集的性质)</li>
<li>{$f_n(x_1)$} 有界，便存在着一个子序列 使得 $f_{1,k} (x_1)$ 收敛</li>
<li>$S_i: f_{i,1\cdots\infty}$ 的序列，满足性质<ul>
<li>$S_i$是$S_{i-1}$的子序列，保持顺序</li>
<li>满足上面的 收敛，即{$f_{i,k\to \infty}(x_i)$ }收敛</li>
</ul>
</li>
<li>$S: f_{i,i}$ 构成的序列，那么 S的后缀 是$S_n$的子序列 （对角线方法）<ul>
<li>所以$n\to \infty$时{$f_{n,n}(x_i)$}对于每个$x_i$都收敛</li>
</ul>
</li>
</ul>
<p>7.24 K紧度量空间, $f_n\in \mathscr{L}(K)$ 且{$f_n$}在K上一致收敛，那么{$f_n$}在K上等度连续</p>
<ul>
<li>要证明 控制$d(x,y)$能控制 $|f_i(x)-f_i(y)|$</li>
<li>如果 i在有限集里，因为$f_i$紧+连续&#x3D;&gt; 一致连续，每个函数可以控制 d来控制f变化，有限集里可以取min</li>
<li>而对于 i 在无限集里，因为$f_i$ 一致收敛，考虑cauchy列, 可以控制 N 控制 $||f_n-f_m||$的距离<ul>
<li>$|f_n(x)-f_n(y)|\le |f_n(x)-f_m(x)|+|f_m(x)-f_m(y)|+|f_m(y)-f_n(y)|$<ul>
<li>而中间的 又不可控制了，而m如果钦定成N也成立</li>
<li>$|f_n(x)-f_n(y)|\le |f_n(x)-f_N(x)|+|f_N(x)-f_N(y)|+|f_N(y)-f_n(y)|$</li>
<li>这样两边是 一致收敛产生的控制，中间是 一致连续产生的控制，从而 都可被控制，等度连续</li>
</ul>
</li>
</ul>
</li>
<li>紧+一致收敛 &#x3D;&gt; 等度连续</li>
</ul>
<p>7.25 K紧, $f_n\in\mathscr{L}(K)$ 而且{$f_n$}在K上逐点有界 又 等度连续，那么</p>
<ul>
<li>{$f_n$}在K上一致有界<ul>
<li>等度连续，控制$d(x,y) &lt; \delta$ 使得 $|f_n(x)-f_n(y)|&lt;\epsilon$ , 有的时候右边也想写成d, $D(f_n(x),f_n(y))$</li>
<li>K紧，所有点的$(p_i,\delta)$邻域组成的覆盖 有 有限子覆盖，所以有有限各点$p_1,\cdots,p_r$  每个x至少被一个$p_i$邻域覆盖</li>
<li>逐点有界，$p_i$ 有限个数，$|f_n(p_i)| &lt; M &#x3D; \max(M_i)$, 三角不等式一下每个$x$到$p_i$距离，$|f_n(x)|&lt;M+\epsilon$ 即一致有界</li>
</ul>
</li>
<li>{$f_n$}含有一致收敛的子序列<ul>
<li>2习题25, E是K的可数稠密子集</li>
<li>7.23 说明 存在子序列$f_{n_k}$使得 对于每个$x\in E$收敛，记作$g_i&#x3D;f_{n_i}$</li>
<li>证明 $g_i$在K上一致收敛<ul>
<li>所有邻域$V(x,\delta)$是$K$的一个开覆盖（因为稠密）,其中$\delta$的选取和上面一样 是等度连续控制所有$|f_n(x)-f_n(y)|&lt;\epsilon$</li>
<li>因为紧，可以有限个邻域$V(x_i,\delta)$完成K的覆盖</li>
<li>$g_i$对于x收敛，可以控制N,$|g_i(x_s)-g_j(x_s)|&lt;\epsilon$</li>
<li>$|g_i(x)-g_j(x)|\le|g_i(x)-g_i(x_s)|+|g_i(x_s)-g_j(x_s)|+|g_j(x_s)-g_j(x)|$<ul>
<li>中间被 可数集E中 的函数子序列 控制</li>
<li>两边是 等度连续的控制</li>
<li>从而$g_i$ 一致收敛</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>也就是：紧+逐点有界+等度连续 &#x3D;&gt; 一致有界+一致收敛的子序列<ul>
<li>和7.21 相比 一致有界+收敛 都完成不了的，这里可以了，怎么说呢，其实我挺喜欢 这个 三角，或者说距离不等式的<ul>
<li>$|g_i(x)-g_j(x)|\le|g_i(x)-g_i(x_s)|+|g_i(x_s)-g_j(x_s)|+|g_j(x_s)-g_j(x)|$</li>
<li>本质上就是希望能被控制，而变成分析每一部分被控制所需要的条件，因为这里也不是充要，只是充分性，我觉得可以把问题前移，再来依次满足每个被控制的要求</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Stone-Weierstrass定理-theorem"><a href="#Stone-Weierstrass定理-theorem" class="headerlink" title="Stone-Weierstrass定理 theorem"></a>Stone-Weierstrass定理 theorem</h3><p>7.26 f是$[a,b]$上的一个连续复函数，那么便有多项式$P_n$的序列使得$\lim_{n\to\infty}P_n(x)&#x3D;f(x)$</p>
<ul>
<li>在$[a,b]$ 一致的成立，f如果是实函数，$P_n$可以是实多项式</li>
<li>Weierstrass最初发现的定理的形式</li>
<li>不是一般性 设f在$[0,1]$ 上, $f(0)&#x3D;f(1)&#x3D;0$ 因为，如果不满足只需要缩放空间，和减去一个 直线 即可变形<ul>
<li>在$[0,1]$外 f(x)&#x3D;0</li>
</ul>
</li>
<li>那么 要证明这样的f能作为一致收敛的极限</li>
<li>$Q_n(x)&#x3D;c_n(1-x^2)^n \ge 0$, 其中$c_n$是常数 使得$\int_{-1}^1Q_n(x)dx&#x3D;1$ 或者说$c_n&#x3D;\frac{1}{\int_{-1}^1 (1-x^2)^n dx}$<ul>
<li>$\int_{-1}^1 (1-x^2)^n dx&#x3D;2\int_{0}^1 (1-x^2)^n dx$</li>
<li>$\ge 2\int_{0}^{1&#x2F;\sqrt{n}} (1-x^2)^n dx$</li>
<li>$\ge 2\int_{0}^{1&#x2F;\sqrt{n}} (1-nx^2) dx$ 邻域性质(导数分析都可以证明)</li>
<li>$&#x3D;\frac{4}{3\sqrt{n}} &gt; \frac{1}{\sqrt{n}}$</li>
<li>即$c_n &lt;\sqrt{n}$</li>
</ul>
</li>
<li>对于 任意 $\delta &gt; 0$ 当$x\in[\delta,1]$时 $Q_n(x)\le \sqrt{n}(1-x^2)^n\le \sqrt{n}(1-\delta^2)^n$ 所以 右侧与x无关，$Q_{n\to \infty}\to 0$一致的成立<ul>
<li>$P_n(x)&#x3D;\int_{-1}^1 f(x+t)Q_n(t)dt, x\in[0,1]$<ul>
<li>$&#x3D;\int_{-x}^{1-x}f(x+t)Q_n(t)dt$ 利用f(x)在$[0,1]$值为0</li>
<li>$&#x3D;\int_0^1 f(t)Q_n(t-x) dt$</li>
<li>是关于 x的多项式，所以{$P_n$} 是关于x的多项式序列，如果f是实的，那么它也是实的</li>
</ul>
</li>
</ul>
</li>
<li>$\epsilon &gt; 0$然后取$\delta &gt;0$使得$|y-x| &lt; \delta$时有$|f(y)-f(x)|&lt;\frac{\epsilon}{2}$</li>
<li>令 $M&#x3D;\sup |f(x)|$</li>
<li>$|P_n(x)-f(x)|&#x3D;|\int_{-1}^1 [f(x+t)-f(x)]Q_n(t)dt|$, 注意这里t是积分变量所以f(x)在积分中是常数角色</li>
<li>$\le \int_{-1}^1 |f(x+t)-f(x)|Q_n(t)dt$</li>
<li>这里怎么切分，切分称积分段$[-1,-\delta,\delta,1]$<ul>
<li>那么中间的，控制$\delta$ 能控制 $\le \int_{-\delta}^{\delta} (&lt;\epsilon&#x2F;2) Q_n dt \le \epsilon&#x2F;2 (0,1) \le \epsilon&#x2F;2$</li>
<li>那么两端的利用 2M控制 $|f-f|$, 而n趋于无穷大时，上面$Q_{n\to \infty}\to 0$ 一致成立 来控制</li>
</ul>
</li>
</ul>
<p>7.27 实例，引理</p>
<ul>
<li>在每个闭区间$[-a,a]$上，必有实多项式$P_n$的序列, such that $P_n(0)&#x3D;0$ and such that $\lim_{n\to \infty} P_n(x)&#x3D;|x|$ 在$[-a,a]$上一致uniformly的成立</li>
<li>根据7.26 有 $P^*_n(x)$ 满足一致收敛于|x|<ul>
<li>要达到 函数列所有 $P_n(0)&#x3D;0$</li>
<li>那么 取$P_n&#x3D;P^*_n-P^*_n(0)$</li>
</ul>
</li>
</ul>
<p>7.28  a family $\mathscr{A}$ of complex functions defined on a set E is said to be an algebra(代数) ，如果满足以下</p>
<ul>
<li>加法封闭 $f+g\in\mathscr{A}$</li>
<li>乘法封闭 $fg\in\mathscr{A}$</li>
<li>数乘封闭 $cf\in \mathscr{A},c\in \mathbb{C}$, scalar multiplication</li>
<li>类似可以定义 实函数 的 代数</li>
<li>一致闭 的代数：<ul>
<li>如果满足 $f_n\in \mathscr{A}$ 在E上$f_n\to f$一致收敛， 则 $f\in \mathscr{A}$, 也就是 对于一致收敛封闭，</li>
</ul>
</li>
<li>例如<ul>
<li>所有多项式的集是一个代数</li>
<li>Weierstrass定理可以叙述为$[a,b]$上的连函数的集是$[a,b]$上多项式集的一致闭包，（因为上面证明的就是人连续函数能找到多项式序列 来一致收敛</li>
</ul>
</li>
</ul>
<p>7.29 设$\mathscr{B}$是有界函数的代数$\mathscr{A}$的一致闭包，那么$\mathscr{B}$是 一致闭 的代数</p>
<ul>
<li>$f,g\in\mathscr{B}$  因为一致闭包，分别有 一致收敛序列 $f_n,g_n \in \mathscr{A}$ ??? 代数闭包的某个性质？</li>
<li>$f_n,g_n$有界函数 所以满足 加法 乘法 数乘 还是有界函数，并且 收敛于 对应的f+g,fg,cf, 且一致收敛，从而$\mathscr{B}$是一致 闭的</li>
</ul>
<p>7.30 $\mathscr{A}$是集E上的函数族，</p>
<ul>
<li>说$\mathscr{A}$能分离E的点separate points on E，就是说对应于每对不同的点$x_1,x_2\in E$总有一个函数$f\in\mathscr{A}$使得$f(x_1)\neq f(x_2)$<ul>
<li>这里并不是一一映射，而是 任给不同的点，总能找到 函数 使这两点结果不同</li>
<li>例如下面偶多项式集合 任意-x,x “总”是相同</li>
<li>作为另一个例子 $f_{m,n}(x)&#x3D; m|x|当 x \ge 0,n|x| 当x \le 0$, 看起来 除了0,所有y都有两个x,但 根据上面的顺序，先任意$x_1,x_2$,  总能找到使之不同的函数</li>
<li>但这个例子 点0是消失的</li>
</ul>
</li>
<li>if to each $x\in E$ there corresponds a function $g\in \mathscr{A}$ such that $g(x)\neq 0$ we say that $\mathscr{A}$ vanishes at no point of E<ul>
<li>也就是每个x,能找到g,使得g(x)非0,（逆命题就是存在x 所有g,都是g(x)&#x3D;0)</li>
</ul>
</li>
<li>The algebra of 所有多项式 in 一元变量 在$R^1$上显然有这些性质</li>
<li>作为 反例 所有偶多项式的集合，不能分离点因为 f(-x)&#x3D;f(x)</li>
</ul>
<p>7.31 E上函数的代数$\mathscr{A}$能分离E的点+不在E的点消失。$x_1,x_2\in E$且不等,$c_1,c_2$是常数</p>
<ul>
<li>那么$\mathscr{A}$ 含有一个f, $f(x_1)&#x3D;c_1,f(x_2)&#x3D;c_2$</li>
<li>证明:<ul>
<li>能分离点 取g</li>
<li>不消失取 h,k</li>
<li>$u&#x3D;gk-g(x_1)k$</li>
<li>$v&#x3D;gh-g(x_2)h$</li>
<li>显然<ul>
<li>$u(x_1)&#x3D;v(x_2)\neq 0$</li>
<li>$u(x_2)\neq 0,v(x_1)\neq 0$</li>
<li>$f&#x3D;\frac{c_1v}{v(x_1)}+\frac{c_2u}{u(x_2)}$ 有需要的性质</li>
<li>其实还是待定系数法的感觉 f &#x3D; c_1(x_1点&#x3D;1,x_2点&#x3D;0的函数)+c_2(x_2点&#x3D;1,x_1点&#x3D;0的函数) 反过去构造</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>7.32 $\mathscr{A}$紧K上的实连续函数的代数。$\mathscr{A}$能分离K,不在K的点消失，那么</p>
<ul>
<li>$\mathscr{A}$的 uniform closure一致闭包 $\mathscr{B}$由K上的所有实连续函数组成</li>
<li>证明：<ul>
<li>第一步， $f\in\mathscr{B}$则$|f|\in\mathscr{B}$<ul>
<li>证明：</li>
<li>令$a&#x3D;\sup |f(K)|$</li>
<li>再给定$\epsilon &gt; 0$，根据7.27(可以0次幂系数为0 多项式一致收敛 到|x|),存在$c_1,\cdots,c_n$使得<ul>
<li>$|\sum_{i&#x3D;1}^n c_iy^i -|y|| &lt; \epsilon, -a\le y\le a$ ， 这里的y表示 取遍$[-a,a]$所有值成立，因为$7.27$</li>
</ul>
</li>
<li>因为$\mathscr{B}$是代数 所以$g&#x3D;\sum_{i&#x3D;1}^n c_i f^i \in \mathscr{B}$, 代数中的运算封闭性<ul>
<li>这里要注意的是， 虽然列了n项但并不表示 $g_n$, 因为7.27 证明的多项式序列中没有对项数进行讨论，这里表示的只是某个$g_i$ 有n项</li>
<li>另一个注意的是$c_i$的值是在不同的g中是不同的$c_{i,g_k}\neq c_{j,g_k}$</li>
<li>写得再 具体一点是 $g_i&#x3D;\sum_{j&#x3D;1}^{n_i} c_{i,j} f^j$</li>
</ul>
</li>
<li>$|g-|f||&lt;\epsilon$ 这里 $f$的每个值 都是$[-a,a]$ 中的点，所以 成立 且 一致成立<ul>
<li>这里说明$|f|$是 可以被一致收敛</li>
<li>而$\mathscr{B}$是一致闭的，所以$|f|\in\mathscr{B}$</li>
</ul>
</li>
</ul>
</li>
<li>第二步, 感觉这些步骤可以单独提出来变成推论<ul>
<li>$\max(f,g)\in \mathscr{B},\min(f,g)\in \mathscr{B}$</li>
<li>$\max(f,g)&#x3D;(f+g)&#x2F;2+|f-g|&#x2F;2$</li>
<li>$\min(f,g)&#x3D;(f+g)&#x2F;2-|f-g|&#x2F;2$</li>
<li>更一般的 $\max(f_n,\cdots,f_n) \in \mathscr{B}$</li>
</ul>
</li>
<li>第三步 这里用到了 能分离 和 点消失<ul>
<li>对于任意 给定 K上连续f, $x_0 \in K$, $\epsilon &gt; 0$,便存在着一个函数$g_x\in \mathscr{B}$满足$g_x(x_0)&#x3D;f(x_0)$且$g_x(t) &gt;f(t)-\epsilon, t\in K$</li>
<li>也就是 指定点相等，所有位置大于 下邻域</li>
<li>7.31 对于每个点 $y\in E$, $h_y\in \mathscr{B}$ 使得它和f在x,y点相等<ul>
<li>$h_y$是连续的，存在 y的邻域 $h_y(y) &gt; f(x)-\epsilon$</li>
<li>K紧， 所有y的邻域构成的开覆盖，有限子覆盖，有限了，就可以对这些$h_y$取max,从而构造出了，x点相等其它点$&gt; f(t)-\epsilon$的$\mathscr{B}$中的函数</li>
</ul>
</li>
</ul>
</li>
<li>第四步<ul>
<li>给定K上连续实函数f, $\epsilon &gt; 0$，存在$h\in \mathscr{B}$ 使得 $|h(x)-f(x)|&lt;\epsilon$ <ul>
<li>也就是 f可以找到 函数列{h} 一致收敛到，也就是f 属于$\mathscr{B}$ 一致闭，也就和命题一致</li>
</ul>
</li>
<li>证明：<ul>
<li>类似第3步，不过这次是x的邻域，能$g_x(x) &lt; f(x)+\epsilon$</li>
<li>同样利用 紧和覆盖，把上面 满足$g(t) &gt; f(t)-\epsilon$的 这次用 min来构造出一个新的 连续的 在 $(f(x)-\epsilon,f(x)+\epsilon)$之间的函数</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>7.33 这个在复代数 complex algebras中不成立, </p>
<ul>
<li>习题21，反例counterexample<ul>
<li>$K$是复平面单位圆，也就是 所有$|z|&#x3D;1$的$z$</li>
<li>$\mathscr{A}$是$f(e^{i\theta})&#x3D;\sum_{n&#x3D;0}^N c_ne^{in\theta}$ 其中$\theta$是实数</li>
<li>仍有K上的连续函数不属于$\mathscr{A}$的一致闭包</li>
<li>这个复分析和函数代数的经典问题 经典反例，丢给grok3,tongyi,deepseek都有不错的结果<ul>
<li>证明：<ul>
<li>能分离点, f(x)&#x3D;x 可证</li>
<li>不在K的点消失, $|f(x)&#x3D;x| &#x3D; 1 \neq 0$</li>
</ul>
</li>
<li>理解一下，首先这是傅里叶项，但是缺少负n，另外也是上面条件中需要共轭闭包没有满足</li>
<li>构造反例：其实直接就是构造一个共轭，负频率<ul>
<li>$f(x)&#x3D;\bar{x}$ 即 $f(e^{i\theta})&#x3D;e^{-i\theta}$ 证明它K上连续的</li>
<li>$P_n\to \bar{x}$</li>
<li>$\sup_{\theta} |P_n-\bar{x}| &lt; \epsilon$</li>
<li>$\int_0^{2\pi} P_n(e^{i\theta})e^{i\theta} d\theta &#x3D; 0\neq 2\pi &#x3D; \int_0^{2\pi} e^{-i\theta}e^{i\theta} d\theta$</li>
<li>不存在 一致收敛的函数列</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>增加性质 A self-adjoint 自伴的，那么在 复代数 也成立</li>
<li>自伴的: $f\in \mathscr{A}$则$\bar{f} \in \mathscr{A}$</li>
<li>紧K,复连续，自伴，能分离K的点，不在K点消失的代数$\mathscr{A}$，那么它的一致闭包$\mathscr{B}$ 由$K$上的所有复连续函数组成</li>
<li>也就是说 $\mathscr{A}$在$\mathscr{C}(K)$中稠密<ul>
<li>$\mathscr{A}_R$是K上 属于$\mathscr{A}$的所有实函数的集</li>
<li>$f&#x3D;u+iv \in \mathscr{A}$其中$u,v$ 是实的, $\mathscr{A}$是自伴的, $u&#x3D;\frac{f+\bar{f}}{2} \in \mathscr{A}_R$</li>
<li>$\mathscr{A}_R$可分离K的点： 对于$x_1\neq x_2$,存在f,使得$f(x_1)&#x3D;1,f(x_2)&#x3D;0$, u在这两点也不等</li>
<li>$\mathscr{A}_R$不在K的点消失：$x\in K$, 不消失, 有g,使得$g(x)\neq 0$, 有复数$\lambda$使得$\lambda g(x) &gt; 0$, 令$f&#x3D;\lambda g$, 对应$u(x)&gt;0$, 也就满足任意x存在u，$u(x)\neq 0$</li>
<li>$\mathscr{A}_R$ 满足 7.32 说明 K上的每个实连续函数 必定在$\mathscr{A}_R$的一致闭包中，进而在$\mathscr{B}$中,<ul>
<li>f是K上复连续函数,$f&#x3D;u+iv$</li>
<li>因为$u,v\in\mathscr{B}$所以$f\in\mathscr{B}$</li>
</ul>
</li>
</ul>
</li>
<li>这里中文书的“合于”听起好绕口，英文书上就是 then (性质) for some (条件)</li>
</ul>
<p>回顾</p>
<ul>
<li>最开始 对于$[a,b]$上任意 复连续函数， 希望用多项式列，一致收敛</li>
<li>接下来希望讨论 连续函数之间的结构，于是建立连续函数代数（加法封闭，乘法封闭，数乘封闭）</li>
<li>增加 能分离（给任意不同点 存在函数 使对应点值不同），不消失（给任意点，存在函数 对应点值非0）两个条件</li>
<li>从而 紧K + 连续函数的代数的一致闭包 由所有实连续函数组成</li>
<li>而对于复函数，需要多一个共轭封闭的前提条件</li>
</ul>
]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>Walter Rudin 数学分析原理 8 一些特殊函数</title>
    <url>/Math/Principles_of_Mathematical_Analysis_8/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="一些特殊函数-some-special-functions"><a href="#一些特殊函数-some-special-functions" class="headerlink" title="一些特殊函数 some special functions"></a>一些特殊函数 some special functions</h2><h3 id="幂级数-power-series"><a href="#幂级数-power-series" class="headerlink" title="幂级数 power series"></a>幂级数 power series</h3><p>$f(x)&#x3D;\sum_{n&#x3D;0}^{\infty}c_n x^n$， 在0点展开</p>
<p>更一般 $f(x)&#x3D;\sum_{n&#x3D;0}^{\infty}c_n (x-a)^n$ 在a点展开</p>
<p>这些都称作解析函数 analytic functions</p>
<ul>
<li>限制x实值，（不会遇到 3.39 收敛圆）而是面向收敛区间</li>
</ul>
<p>8.1 假设对于 $|x| &lt; R$级数$\sum_{n&#x3D;0}^{\infty} c_nx^n$收敛</p>
<ul>
<li>令$f(x)&#x3D;\sum_{n&#x3D;0}^{\infty} c_nx^n, |x| &lt; R$</li>
<li>那么 任意$\epsilon &gt; 0$, $f(x)$在$[-R+\epsilon,R+\epsilon]$上一致收敛，在(-R,R)连续，可微，且</li>
<li>$f’(x)&#x3D;\sum_{n&#x3D;1}^{\infty} nc_nx^{n-1}, |x|&lt; R$</li>
<li>证明<ul>
<li>$|c_nx^n|\le |c_n(R-\epsilon)^n|$<ul>
<li>$\sum c_n(R-\epsilon)^n$ 绝对收l敛(3.39 收敛半径内绝对收敛)，由7.10（被值控制，值收敛，则一致收敛） $f_n$ 一致收敛</li>
</ul>
</li>
<li>根据收敛半径 $R$ 的定义，而导函数中$R&#x3D;\sup \lim_{n\to\infty} \sqrt[n]{nc_n} &#x3D;\sup \lim_{n\to\infty} \sqrt[n]{c_n}$ ，所以 幂级数 和 幂级数导数 的定义域相同</li>
<li>幂级数导数在$[-R-\epsilon,R+\epsilon]$一致收敛，7.17(一致收敛与微分保持)，可证明 收敛到导数</li>
<li>对于任意 $x&lt;R$ 能找到$\epsilon$</li>
<li>连续性 5.2 可微则连续</li>
</ul>
</li>
<li>推论<ul>
<li>$(-R,R)$内有任意阶的导数</li>
<li>特别的$f^{(k)}(0)&#x3D;k!c_k$</li>
<li>注意的是 这里看上去 f 与 ($c_k$列) 构成一一对应关系，但这里有前提是0的邻域收敛，如果一个在邻域收敛但是任然任意阶可导的函数的反向是不能得到原函数的 <ul>
<li>$f(x)&#x3D;e^{-\frac{1}{x^2}}, f(x)&#x3D;0(当x&#x3D;0)$ 它任意阶导系数为0</li>
</ul>
</li>
</ul>
</li>
<li>补充 在一个端点 例如x&#x3D;R 如果也收敛，那么也连续</li>
</ul>
<p>这类的东西好想画2x2的方格，每次都是“冂”形状的证明路径</p>
<p>8.2 $\sum c_n$收敛, 令$f(x)&#x3D;\sum_{n&#x3D;0}^{\infty}c_n x^n, x\in(-1,1)$</p>
<ul>
<li>Abel 定理</li>
<li>$\lim_{x\to 1} f(x)&#x3D;\sum_{n&#x3D;0}^{\infty} c_n$</li>
<li>$s_n&#x3D;\sum_n c_i, s_{-1}&#x3D;0$</li>
<li>$\sum_{i&#x3D;0}^m c_i x^i&#x3D;\sum_{i&#x3D;0}^m (s_i-s_{i-1}) x^i&#x3D;(1-x)\sum_{i&#x3D;0}^{m-1}s_ix^i +s_mx^m$</li>
<li>$|x|&lt;1$让$m\to \infty$, 便有$f(x)&#x3D;\lim_{m\to\infty} \sum_{i&#x3D;0}^m c_ix^i&#x3D;(1-x)\sum_{n&#x3D;0}^{\infty} s_nx^n$, 这里用到了$s_m$是收敛的 所以末项 &#x3D;$常数邻域 * (&lt;1)^\infty &#x3D;0$</li>
<li>$s&#x3D;\lim {s_{n\to\infty}}&#x3D;\sum c_n$</li>
<li>$|f(x)-s|&#x3D;|(1-x)\sum_{n&#x3D;0}^{\infty}(s_n-s)x^n|$ 因为$(1-x)\sum_{n&#x3D;0}^{\infty} x^n&#x3D;1$</li>
<li>$\le (1-x)\sum_{n&#x3D;0}^N |s_n-s||x|^n+\epsilon&#x2F;2$ 这里N是 根据epsilon选的，用来控制 无穷段$|s_n-s|$的距离</li>
<li>在此情况下，通过控制1的邻域$1-\delta$,使得 左侧可以任意小， 所以总体能被控制，所以在这个邻域里 $f(x)$可以任意近，从而证明</li>
</ul>
<p>8.3 设有二重序列{$a_{ij}$} 设$b_{i}&#x3D;\sum_{j&#x3D;1}^{\infty}|a_{ij}|$</p>
<ul>
<li>并且$\sum b_{i}$收敛</li>
<li>那么$\sum_{i&#x3D;1}^{\infty} \sum_{j&#x3D;1}^{\infty} a_{ij}&#x3D;\sum_{j&#x3D;1}^{\infty} \sum_{i&#x3D;1}^{\infty} a_{ij}$</li>
<li>令E是点$x_{0}\dots$组成的可数集，且$x_{\infty}\to x_{0}$ (强行取和令</li>
<li>$f_{i}(x_{0})&#x3D;\sum_{j&#x3D;1}^{\infty}a_{ij}$</li>
<li>$f_{i}(x_{n &gt; 0})&#x3D;\sum_{j&#x3D;1}^{n}a_{ij}$</li>
<li>$g(x)&#x3D;\sum_{i&#x3D;1}^{\infty}f_{i}(x)$, 根据7.11 可以交换lim顺序 g在$x_{0}$连续</li>
<li>那么$\sum_{i&#x3D;1}^{\infty} \sum_{j&#x3D;1}^{\infty} a_{ij}$</li>
<li>$&#x3D;\sum_{i&#x3D;1}^{\infty}f_{i}(x_{0})$</li>
<li>$&#x3D;g(x_0)$</li>
<li>$&#x3D;\lim_{ n \to \infty }g(x_{n})$， 使用在$x_{0}$连续</li>
<li>$&#x3D;\lim_{ n \to \infty }\sum_{i&#x3D;1}^{\infty}f_{i}(x_{n})$</li>
<li>$&#x3D;\lim_{ n \to \infty }\sum_{i&#x3D;1}^{\infty}\sum_{j&#x3D;1}^{n}a_{ij}$</li>
<li>$&#x3D;\lim_{ n \to \infty }\sum_{j&#x3D;1}^{n}\sum_{i&#x3D;1}^{\infty}a_{ij}$</li>
<li>$\sum_{j&#x3D;1}^{\infty} \sum_{i&#x3D;1}^{\infty} a_{ij}$</li>
<li>这里 f,g以及$x_i$的点列真的 凭空而来，却通过 $x_{\infty}\to x_{0}$ 来让g在点连续完成证明</li>
</ul>
<p>8.4 设 $f(x)&#x3D;\sum_{n&#x3D;0}^{\infty}c_{n}x^n$</p>
<ul>
<li>在$|x|&lt; R$内收敛, 若f便可以在x&#x3D;a附近展称幂级数， 在$|x-a|&lt;R-|a|$中收敛，且</li>
<li>$f(x)&#x3D;\sum_{n&#x3D;0}^{\infty} \frac{f^{(n)}(a)}{n!}(x-a)^n$</li>
<li>也就是 幂级数，可以在收敛半径内的点a, 新的半径内 展开</li>
<li>$f(x)&#x3D;\sum_{n&#x3D;0}^{\infty}c_{n}[(x-a)+a]^n$</li>
<li>$&#x3D;\sum_{n&#x3D;0}^{\infty}c_{n} \sum_{m&#x3D;0}^{n} \binom{n}{m}a^{n-m}(x-a)^m$</li>
<li>$&#x3D;\sum_{m&#x3D;0}^{\infty}<a href="x-a"> \sum_{n&#x3D;m}^{\infty} \binom{n}{m}c_{n}a^{n-m}</a>^m$</li>
<li>这里 要证明 顺序变换是 正当的validity</li>
<li>根据8.3 要证明$\sum_{n&#x3D;0}^{\infty} \sum_{m&#x3D;0}^{n}|c_{n} \binom{n}{m}a^{n-m}(x-a)^m|$ 收敛<ul>
<li>$&#x3D;\sum_{n&#x3D;0}^{\infty} |c_{n}|(|x-a|+|a|)^n$ 是收敛</li>
</ul>
</li>
</ul>
<p>8.5 级数$\sum a_{n}x^n, \sum b_{n}x^n$在开区间$S&#x3D;(-R,R)$中收敛，S里有些x使得 $\sum_{n&#x3D;0}^{\infty}a_{n}x^n&#x3D;\sum_{n&#x3D;0}^{\infty}b_{n}x^n$</p>
<ul>
<li>这样的所有x的集合是E,若E有极限点 属于 S,则$a_{n}&#x3D;b_{n}$</li>
<li>证明:<ul>
<li>$c_{n}&#x3D;a_{n}-b_{n}$令$f(x)&#x3D;\sum_{n&#x3D;0}^{\infty}c_{n}x^n, x\in S$</li>
<li>E上$f(x)&#x3D;0$</li>
<li>A&#x3D;E的极限点集</li>
<li>B&#x3D;S-A</li>
<li>因为极限点性质，B是开集</li>
<li>对于任意A中的点$x_0$ , 根据8.4 在此点展开，那么若有非零系数，设非零系数最小幂次是k次，记作$d_k$，那么 $\frac{f(x)}{(x-x_{0})^k}(x_{0})&#x3D;d_{k}$, 从而f的一个去心邻域内 全非零$f(x_{1}\in x_{0}邻域) (x_{1}-x_0)^k \cdot d_k邻域$ 和极限点 矛盾</li>
<li>说明 每个A中点$x_0$的一个邻域 $f(x)&#x3D;0$,从而 这个邻域 属于A, 所以A是开集，而S&#x3D;A并B, A和B均开，S是连通的，那么B为空，所以S&#x3D;A&#x3D;E，得证</li>
</ul>
</li>
</ul>
<h3 id="指数函数与对数函数-the-exponential-and-logarithmic-functions"><a href="#指数函数与对数函数-the-exponential-and-logarithmic-functions" class="headerlink" title="指数函数与对数函数 the exponential and logarithmic functions"></a>指数函数与对数函数 the exponential and logarithmic functions</h3><p>$E(z)&#x3D;\sum_{n&#x3D;0}^{\infty} \frac{z^n}{n!}\dots(25)$</p>
<p>比值判敛法说明这个级数对于一切复数z收敛， </p>
<p>用3.50</p>
<p>$E(z)E(w)&#x3D;\sum \frac{z^n}{n!} \sum \frac{w^m}{m!}&#x3D; \sum_{n&#x3D;0}^{\infty} \sum_{k&#x3D;0}^{n} \frac{z^kw^{n-k}}{k!(n-k)!}$ 考虑 n+m的和的角度来统计</p>
<p>$&#x3D;\sum_{n&#x3D;0}^{\infty} \frac{1}{n!} \sum_{k&#x3D;0}^{n} \binom{n}{k} z^kw^{n-k} &#x3D; \sum_{n&#x3D;0}^{\infty} \frac{(z+w)^n}{n!}$</p>
<p>也就是 $E(z)E(w)&#x3D;E(z+w)$, 这个 在不加严格适用范围的角度看就是 $e^ze^w&#x3D;e^{z+w}$, 所以章节里是指数函数</p>
<ul>
<li>$E(z)E(-z)&#x3D;E(z-z)&#x3D;E(0)&#x3D;1$ emmm这不是带入0,而是 上面过程中 倒数第二个式子，注意对z+w的结果&#x3D;0时的特殊讨论？ 还是在这个情况下$(\epsilon)^0&#x3D;1$ </li>
<li>一切z,有$E(z) &gt;0$, </li>
<li>$E(+\infty)\to +\infty$</li>
<li>$E(-\infty)\to 0$</li>
<li>在$[0,\infty)$单调 $\to$ 在$(-\infty,0]$单增，全单增， 由E的定义</li>
<li>$E’(z)&#x3D;E(z)$</li>
<li>$E( \sum z_{i} )&#x3D;\prod E(z_{i})$</li>
<li>$E(1)&#x3D;e$ 前面e的定义</li>
<li>$E(n)&#x3D;e^n$ 加法扩展</li>
<li>$E(p&#x2F;q)&#x3D;e^{p&#x2F;q}$ , 到正有理数</li>
<li>$E(-p&#x2F;q)&#x3D;e^{-p&#x2F;q}$ 到全体有理数</li>
<li>$e^x&#x3D;\sup e^p,p &lt; x,p\in \mathbb{Q}&#x3D;E(x)$ 到实数…(35)</li>
</ul>
<p>8.6 $R^1$上 按照 (25)（35定义了$e^x$</p>
<ul>
<li>一切x 连续且可微</li>
<li>$(e^x)’&#x3D;e^x$</li>
<li>$e^x &gt; 0$ 严格递增</li>
<li>$e^{x+y}&#x3D;e^xe^y$</li>
<li>$e^{+\infty }&#x3D;+\infty,e^{-\infty}&#x3D;0$</li>
<li>任何n, $\lim_{ x \to \infty }x^ne^{-x}&#x3D;0$<ul>
<li>$e^x&gt; \frac{x^{n+1}}{(n+1)!}$</li>
<li>$x^ne^{-x}&lt; \frac{(n+1)!}{x}$</li>
<li>指数比x的任意幂次都更快趋于 $+\infty$</li>
</ul>
</li>
<li>严格递增 且可微，存在反函数L（严格递增且可微）<ul>
<li>$E(L(y))&#x3D;y, L(E(x))&#x3D;x$</li>
<li>$L’(E(x))E(x)&#x3D;1$<ul>
<li>$L’(y)&#x3D;\frac{1}{y}$</li>
<li>$L(1)&#x3D;0$</li>
<li>$L(y)&#x3D;\int_{1}^y \frac{1}{x} dx$</li>
</ul>
</li>
<li>$L(uv)&#x3D;L(u)+L(v)$</li>
<li>$x^n&#x3D;E(nL(x))$<ul>
<li>同样是 整数&#x3D;&gt;有理数&#x3D;&gt;实数</li>
</ul>
</li>
<li>$x^a&#x3D;e^{a\log x}$</li>
<li>$(x^a)’&#x3D;ax^{a-1}$</li>
<li>$\lim_{ x \to +\infty }x^{-a}\log x&#x3D;0$  比任何正数次幂增长都慢，</li>
</ul>
</li>
</ul>
<p>	</p>
<h3 id="三角函数-the-trigonometric-functions"><a href="#三角函数-the-trigonometric-functions" class="headerlink" title="三角函数 the trigonometric functions"></a>三角函数 the trigonometric functions</h3><p>$C(x)&#x3D;\frac{1}{2}[E(ix)+E(-ix)]$</p>
<p>$S(x)&#x3D;\frac{1}{2i}[E(ix)-E(-ix)]$</p>
<p>证明分别和 $\cos x,\sin x$一致</p>
<ul>
<li>$E(\bar{x})&#x3D;\bar{E(x)}$</li>
<li>$E(ix)&#x3D;C(x)+iS(x)$ 这一切都建立在E的对于一切复数z收敛的前提下</li>
<li>$x$实数时，C,S分别为实部和虚部$|E(ix)|^2&#x3D;E(ix)\overline{E(ix)}&#x3D;E(ix)E(-ix)&#x3D;1$</li>
<li>$|E(ix)|&#x3D;1$, 即$C^2+S^2&#x3D;1$</li>
<li>$C(0)&#x3D;1,S(0)&#x3D;0$</li>
<li>$C’(x)&#x3D;-S(x),S’(x)&#x3D;C(x)$</li>
<li>存在$C(x)&#x3D;0$</li>
<li>$x_{0}$是使得$C(x_{0})&#x3D;0$最小正数, 定义$\pi &#x3D; 2x_{0}$??????这……..那就是看成首次定义这个常数值，圆周率，也挺好，从数分里面，e和pi都被 更数学化的定义了</li>
<li>能得到 关于$2x_{0}&#x3D;\pi$ 的一些表达式</li>
<li>$E(\pi i)&#x3D;-1,E(2\pi i)&#x3D;1$</li>
<li>$E(z+2\pi i)&#x3D;E(z)$</li>
<li>研究顺序 定义，端点，范数，导数，零点，周期</li>
</ul>
<p>8.7 </p>
<ul>
<li>$E$ 是以$2\pi i$为周期的周期函数, wow！！！</li>
<li>C,S是以$2\pi$为周期的周期函数</li>
<li>$0&lt;t&lt;2\pi$ ,$E(it)\neq 1$<ul>
<li>证明: $0&lt; t &lt; \frac{\pi}{2}$<ul>
<li>$E(it)&#x3D;x+iy$说明$0 &lt; x &lt;1,0 &lt; y &lt; 1$</li>
<li>$E(4it)&#x3D;(x+iy)^4&#x3D;x^4-6x^2y^2+y^4+4ixy(x^2-y^2)$</li>
<li>若为实数，则$x^2-y^2&#x3D;1$,由$C^2+S^2&#x3D;1$所以$x^2+y^2&#x3D;\frac{1}{2}$, $E(4it)&#x3D;-1$</li>
</ul>
</li>
</ul>
</li>
<li>z是复数, $|z|&#x3D;1$, 在$[0,2\pi)$存在着唯一t,使得$E(it)&#x3D;z$<ul>
<li>唯一: $E(it_{1})(E(it_{2}))^{-1}\neq 1$</li>
<li>存在$z&#x3D;x+iy$, 而$C$在$[0,2\pi)$连续可取得，且$C^2+S^2&#x3D;1$</li>
</ul>
</li>
<li>推论<ul>
<li>$\gamma(t)&#x3D;E(it),0\leq t\leq 2\pi$简单闭合曲线，是平面上单位圆$\gamma’(t)&#x3D;iE(it)$</li>
<li>长度$\int_{0}^{2\pi} |\gamma ‘(t)|dt&#x3D;2\pi$ 单位圆周长</li>
</ul>
</li>
<li>这些 性质 都是E的定义和C,S的定义而没有直接几何概念</li>
</ul>
<h3 id="复数域的代数完备性-the-algebraic-completeness-of-the-complex-field"><a href="#复数域的代数完备性-the-algebraic-completeness-of-the-complex-field" class="headerlink" title="复数域的代数完备性 the algebraic completeness of the complex field"></a>复数域的代数完备性 the algebraic completeness of the complex field</h3><p>代数上复数域是完备的：任何复系数，不是常数多项式，必有复数根</p>
<p>complex field is algebraically complete: every nonconstant polynomial with complex coefficients has a complex root</p>
<p>8.8 $P(z)&#x3D;\sum_{k&#x3D;0}^{n}a_{k}z^k$, 必有某个复数z使 $P(z)&#x3D;0$</p>
<ul>
<li>不妨设最高次系数&#x3D;1(否则全部系数除以最高次系数), $a_{n}&#x3D;1$</li>
<li>$\mu&#x3D;\inf |P(z)|$</li>
<li>若$|z|&#x3D;R$ 那么<ul>
<li>$|P(z)| \ge R^n[1-|a_{n-1}R^{-1}-\dots-|a_{0}|R^{-n}]$ 三角不等式 和 范数</li>
<li>随着$R\to +\infty$ 右侧 $\to +\infty$, 也就是 $|z|&gt;R_{0}$ 右侧$|P(z)|&gt;\mu$ ， 因为$|P|$在以0为圆形$R_0$为半径圆面上连续，这里是圆面也就是$|z|\le R_{0}$的所有点</li>
<li>4.16 紧度量空间 连续是函数（这里是|P|) 存在点 取到 sup和inf,所以 能有$P(z_{0})&#x3D;\mu$</li>
<li>接下来证明$\mu &#x3D; 0$</li>
<li>反证 $Q(z)&#x3D;\frac{P(z+z_{0})}{P(z_{0})}$ ，Q是（非 常数多项式），$Q(0)&#x3D;1$，且一切z有$|Q(z)|\ge_{1}$</li>
<li>$Q(z)&#x3D;1+\sum_{i&#x3D;k}^n b_{i}z^i$其中$b_{k}\neq {0},b_{n}\neq {0}$</li>
<li>根据8.7 存在实数$\theta$使得$e^{ik\theta}&#x3D;- \frac{|b_{k}|}{b_{k}}$ 这个作用是扭到实数轴上</li>
<li>取$r&gt;0$且$r^k|b_{k}|&lt;1$<ul>
<li>有$|1+b_{k}r^ke^{ik\theta}|&#x3D;1-r^k|b_{k}|$</li>
<li>$|Q(re^{i\theta})|\le 1-r^k(|b_{k}|-r|b_{k+1}|-\dots-r^{n-k}|b_{n}|)$<ul>
<li>r足够小时且可取到，右侧 括号内可以为正，从而 严格小于1,矛盾</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Fourier级数-fourier-series"><a href="#Fourier级数-fourier-series" class="headerlink" title="Fourier级数 fourier series"></a>Fourier级数 fourier series</h3><p>8.9 三角多项式是形如 $f(x)&#x3D;a_{0}+\sum_{n&#x3D;1}^{N}(a_{n}\cos nx+b_{n}\sin nx)$, x为实数的有限和，其中$a_{i},b_{i}$都是复数</p>
<ul>
<li>也可以写作$f(x)&#x3D;\sum_{n&#x3D;-N}^{N}c_{n}e^{inx}$, 显然每个三角多项式以$2\pi$为周期<ul>
<li>是实多线式当且$c_{-n}&#x3D;\overline{c_{n}}$</li>
</ul>
</li>
<li>$\frac{1}{2\pi} \int_{-\pi}^{\pi} e^{inx} dx$ 在$n&#x3D;0$时为1,其它整数时为0</li>
<li>$c_{m}&#x3D;\frac{1}{2\pi} \int_{-\pi}^{\pi} f(x)e^{-imx} dx$ 或者从正交性理解, 当$|m| \ge N$时 结果为0， 称作Fourier系数</li>
<li>定义三角级数形如 $\sum_{-\infty}^{\infty}c_{n}e^{inx}$, 部分和是上面$\sum_{-N}^{N}$的形式</li>
<li>称作 f的傅里叶级数</li>
<li>研究这样级数与f的关系</li>
<li>起源于物理问题，振动理论和热传导理论，Fourier所写的 热的解析理论</li>
</ul>
<p>8.10  正规正交系 orthonormal</p>
<ul>
<li>$[a,b]$上$\phi_{n}$ 列 满足</li>
<li>$\int_{a}^b \phi_{n}(x)\overline{\phi_{m}(x)} , dx&#x3D;0,n\neq m$ 正交， 称作正交系 orthogonal system of functions on $[a,b]$</li>
<li>加上$\int_{a}^b \phi_{n}\overline{\phi_{n}}, dx&#x3D;1$ 也就是normal, 一起就是orthonormal</li>
<li>例如 $[-\pi,\pi]$上函数 $(2\pi)^{- 1&#x2F;2}e^{inx}$</li>
<li>若$\phi_{n}$是$[a,b]$上正规正交系，且 $c_n&#x3D;\int_{a}^b f(t)\overline{\phi_{n}(t)} dt$ 称作 f关于$\phi_{n}$的第n个Fourier系数<ul>
<li>$f(x)\sim \sum_{n&#x3D;1}^{\infty}c_{n}\phi_{n}(x)$ 称作f关于$\phi$的傅里叶级数</li>
<li>这里$\sim$仅表示按照上述计算的，并不蕴含 级数收敛的任何性质</li>
</ul>
</li>
<li>另外注意8.9的形式 下标有正负，而这里 作为函数列，下标没有负，甚至没有规定 具体的函数列内的顺序</li>
</ul>
<p>8.11 $\phi_{n}$是$[a,b]$上的正规正交系，令$s_{n}(x)&#x3D;\sum_{m&#x3D;1}^{n}c_{m}\phi_{m}(x)$ 是f的Fourier级数的第n个部分和</p>
<ul>
<li>$t_{n}(x)&#x3D;\sum_{m&#x3D;1}^{n}\gamma_{m}\phi_{m}(x)$</li>
<li>有 $\int_{a}^b |f-s_{n}|^2 , dx \leq \int_{a}^b |f-t_{n}|^2 , dx$ 这里是我们建立的 评价函数，评价逼近的最佳，越小越佳，而用的是均方 也就是差值平方的均值</li>
<li>当且仅当$\gamma_{m}&#x3D;c_{m}$时 等号 才成立</li>
<li>也就是说 所有$t_{n}$ 中$s_n$是 对于f的最佳均方逼近 gives the best possible mean square approximation to f</li>
<li>也就是要证明 在上述给定评价下，$s_n$ 最好，而$t_{n}$是 和 $s_{n}$的 级数的元素结构相同，但系数不同的方案</li>
<li>证明: <ul>
<li>有$\int f \bar{t_{n}}&#x3D;\int f \sum \bar{\gamma_{m}}\bar{\phi_{m}}&#x3D;\sum c_{m}\bar{\gamma_{m}}$</li>
<li>有$\int |t_{n}|^2&#x3D;\int t_{n}\bar{t_{n}}&#x3D;\int \sum \gamma_{m}\phi_{m}\sum \bar{\gamma_{k}}\bar{\phi_{k}}&#x3D;\sum |\gamma_{m}|^2$</li>
<li>$\int |f-t_{n}|^2&#x3D;\int |f|^2-\int f \bar{t_{n}}-\int \bar{f}t_{n}+\int |t_{n}|^2$</li>
<li>$&#x3D;\int |f|^2 -\sum c_{m}\bar{\gamma}<em>{m} - \sum \bar{c}</em>{m}\gamma_{m}+\sum \gamma_{m}\bar{\gamma}_{m}$ 带入上面的</li>
<li>$&#x3D;\int |f|^2 - \sum |c_{m}|^2 + \sum |\gamma_{m}-c_{m}|^2$<ul>
<li>那么 最后这个 $\ge 0$ 在$\gamma_{m}&#x3D;c_{m}$时取到</li>
</ul>
</li>
</ul>
</li>
<li>也有$\int |f-s_{n}|^2&#x3D;\int |f|^2 - \sum |c_{m}|^2 \ge 0$<ul>
<li>即$\int_{a}^b|s_{n}(x)|^2 dx&#x3D;\sum |c_{m}|^2 \leq \int_{a}^b |f(x)|^2dx$</li>
<li>前面是 $\phi$正规正交性 和 $s_n$定义得到的</li>
</ul>
</li>
</ul>
<p>8.12 上面最后式子中是$\sum_{1}^n$</p>
<ul>
<li>现在把n趋于$+\infty$</li>
<li>Bessel不等式 $\sum_{n&#x3D;1}^{\infty}|c_{n}| \le \int_{a}^b |f(x)|^2 , dx$</li>
<li>其中$c_{n}$是 上面方式得到的，</li>
<li>特别的$\lim_{ n \to \infty } c_{n}&#x3D;0$</li>
</ul>
<p>8.13 三角级数Trigonometric serires，将要考虑函数以$2\pi$为周期,在$[-\pi,\pi]$上 Riemann可积分，因此在每个有界闭 上科技，那么f的Fourier级数便是</p>
<ul>
<li>$\sum_{-\infty}^{\infty} c_{n}e^{inx}$ 或者说关于 $e^{inx}$的正交系的 Fourier级数, 注意不normal, 乘上$\frac{1}{\sqrt{ 2\pi }}$才normal</li>
<li>其中N项是$s_{N}(x)&#x3D;\sum_{-N}^Nc_{n}e^{inx}$</li>
<li>$\sum_{-N}^N |c_{n}|^2\le \frac{1}{2\pi}\int_{-\pi}^\pi |f(x)|^2 , dx$</li>
</ul>
<p>Dirichlet 核kernel</p>
<ul>
<li>$\displaystyle D_N(x)&#x3D;\sum_{n&#x3D;-N}^{N}e^{inx}&#x3D;\frac{\sin(( N+ \frac{1}{2} )x ） }{\sin\left( \frac{x}{2} \right)}$<ul>
<li>后面通过 $(e^{ix}-1)D_{N}(x)&#x3D;e^{i(N+1)x}-e^{-iNx}$两边同时乘以$e^{- ix&#x2F;2}$ 得到</li>
</ul>
</li>
<li>$s_{N}(x)&#x3D;\sum_{-N}^{N} \frac{1}{2\pi}\int_{-\pi}^\pi f(t)e^{-int}dte^{inx}$</li>
<li>$&#x3D;\frac{1}{2\pi}\int_{-\pi}^\pi f(t) \sum_{-N}^{N} e^{in(x-t)} , dt$</li>
<li>$&#x3D;\frac{1}{2\pi}\int_{-\pi}^\pi f(t) D_{N}(x-t) , dt$</li>
<li>$&#x3D;\frac{1}{2\pi}\int_{-\pi}^\pi f(x-t) D_{N}(t) , dt$</li>
</ul>
<p>8.14 Fourier逐点收敛</p>
<ul>
<li>如果对于点x, 有常数$\delta &gt;0, M &lt; \infty$ 对于所有$t\in (-\delta,\delta)$</li>
<li>$|f(x+t)-f(x)|\le M|t|$</li>
<li>便一定有 $\lim_{ N \to \infty } s_{N}(f;x)&#x3D;f(x)$</li>
<li>证明:<ul>
<li>$g(t)&#x3D; \frac{f(x-t)-f(x)}{\sin\left( \frac{t}{2} \right)}$<ul>
<li>补充定义$g(0)&#x3D;0$</li>
</ul>
</li>
<li>$\frac{1}{2\pi}\int <em>{-\pi}^\pi D</em>{N}(x) , dx &#x3D;1$</li>
<li>$s_{N}(f;x)-f(x)&#x3D;\frac{1}{2\pi}\int <em>{-\pi}^\pi (f(x-t)-f(x))D</em>{N}(t)  , dt$<ul>
<li>$&#x3D;\frac{1}{2\pi}\int_{-\pi}^\pi g(t) \sin\left( \left( N+\frac{1}{2} \right)t \right) , dt$</li>
<li>$&#x3D;\frac{1}{2\pi}(\int [g(t)\cos\left( \frac{t}{2} \right)]\sin(Nt)dt+\int [g(t)\sin\left( \frac{t}{2} \right)]\cos(Nt)dt )$ </li>
<li>左边方括号里 $\le \frac{M| t|}{\tan \frac{t}{2}}$ 有界</li>
<li>右边方括号里 $\le M| t|$ 有界</li>
<li>而这两个积分 可以看成8.12 中 方括号中关于，sinNt,cosNt 的取系数，所以会趋于0（注意并不是因为N 变大而趋于0（虽然也是），而是因为列趋于无穷而趋于0）</li>
</ul>
</li>
<li>所以 逐点收敛到f</li>
</ul>
</li>
<li>推论： 某个some segment J 区间内J内一切x, f(x)&#x3D;0,那么每个$x\in J$ ,$\lim s_{N}(f;x)&#x3D;0$<br>  - 另一个表述，x邻域neighborhood的一切t, $f(t)&#x3D;g(t)$ 那么$N\to \infty$时<br>  - $s_{N}(f;x)-s_{N}(g;x)&#x3D;s_{N}(f-g;x)\to 0$<br>  - 局部化定理 localization theorem<br>      - {$s_{N}(f;x)$}序列 的behaviour, as far as convergence is concerned, depends only on the values of f in some (arbitrarily small)neighborhood of x<br>      - 两个Fourier series 可能在one interval有相同的 behavior,但是 在other interval 完全不同的behave<br>      - 而幂级数 8.5 开区间中 两个幂级数相等的点还有极限点会让两个幂级数相等<br>          - 而 Fourier级数没有这个性质</li>
</ul>
<p>8.15 f连续 以$2\pi$为周期，且$\epsilon &gt;0$那么便有一个三角多项式P,对一切实数x 有$|P(x)-f(x)|&lt;\epsilon$</p>
<ul>
<li>$x\to e^{ix}$ 把$R^1$上的f映射到 单位圆T上的函数</li>
<li>三角多项式，形成一个复数自伴代数$\mathscr{A}$ 能分离T上的点，不在T的点消失，T紧，那么$\mathscr{A}$在$\mathscr{C}(T)$内稠密，得证</li>
</ul>
<p>8.16 Parseval 定理 f,g都是 Riemann可积 且周期为$2\pi$的函数</p>
<ul>
<li>$f(x)\sim \sum c_{n}e^{inx},g(x) \sim \sum \gamma_{n}e^{inx}$</li>
<li>那么 $\lim_{ N \to \infty } \frac{1}{2\pi}\int_{-\pi}^{\pi} |f(x)-s_{N}(f;x)|^2dx&#x3D;0$ 书上勘误s好几个写成大写了<ul>
<li>均平方 趋于0</li>
</ul>
</li>
<li>令 $||h||_{2}&#x3D;(\frac{1}{2\pi}\int _{-\pi}^\pi |f(x)|^2 dx)^{1&#x2F;2}$<ul>
<li>勘误 中文书 这里开始$\epsilon &lt;0$了</li>
<li>$||f-s_N(f)||<em>2$ 拆成$f-h,h-s</em>{N}(h),s_{N}(h)-s_{N}(f)$<ul>
<li>第一个 对于 f黎曼可积，那么根据6章习题12 有，一个合适的分法下 有连续函数h(在该分法下每段变成首位不变线段)，g在上下和在f上下和之间，那么$||f-h||_{2} &lt; \epsilon$</li>
<li>第二个 根据8.15 存在三角多项式P 和$||P-h||_2 &lt; \epsilon$<ul>
<li>8.11 $s_N$是最优 均方，那么能找到更优的 幂次比P更大的 $s_{N}(h)$, 使得$||h-s_{N}(h)||<em>{2} \leq ||h-P||</em>{2} &lt; \epsilon$</li>
</ul>
</li>
<li>第三个$&#x3D;||s_{N}(h-f)||<em>{2}$ 根据8.11 $\le ||h-f||</em>{2} &lt;\epsilon$</li>
<li>再加上三角不等式6章练习11</li>
</ul>
</li>
</ul>
</li>
<li>$\frac{1}{2\pi}\int <em>{-\pi}^\pi f(x)\overline{g(x)} dx &#x3D; \sum</em>{-\infty}^{\infty} c_{n}\bar{\gamma}_{n}$<ul>
<li>$\frac{1}{2\pi}\int <em>{-\pi}^\pi |f(x)|^2 dx &#x3D; \sum</em>{-\infty}^{\infty} |c_{n}|^2$</li>
<li>这两个也就是上面的 方法 不过用$s_{N}(f)$来替换f,最后schwarz不等式</li>
<li>$|\int f \bar{g}-\int s_{N}(f)\bar{g}|\leq \int |f-s_{N}(f)||g| \leq \left( \int |f-s_{N}|^2 \int |g|^2 \right)^{1&#x2F;2}$</li>
</ul>
</li>
</ul>
<h3 id="Gamma函数-the-gamma-functions"><a href="#Gamma函数-the-gamma-functions" class="headerlink" title="Gamma函数 the gamma functions"></a>Gamma函数 the gamma functions</h3><p>与阶乘有密切的关系，时常在分析学的医疗不道德地方出现。 </p>
<ul>
<li>延伸阅读 P.J.Davis: Amer.Math.Monthly 1959年</li>
<li>Artin的书</li>
</ul>
<p>以下也可以看作习题</p>
<p>8.17 定义 $0 &lt; x &lt; \infty$时</p>
<ul>
<li>$\Gamma(x)&#x3D;\int_{0}^{\infty}t^{x-1}e^{-t} , dx$</li>
<li>对于这些x,该积分收敛</li>
<li>有几个玩法<ul>
<li>$\int_{0}^1 x^n \log xdx$ 用分部积分 最后换元</li>
<li>$\int_{0}^\infty e^{-ct}dt&#x3D;\frac{1}{c}$ 对于常数成立，现在把c换成y 然后n次导，最后取点1</li>
<li>还是上面式子, c用1-x代换，右边&#x3D;$\sum x^i$，然后 与x相关展开称幂级数，认为 同幂次的 系数相等，而系数就是这个表达式</li>
</ul>
</li>
</ul>
<p>8.18 定理 $(0,\infty)$ 定义域上</p>
<ul>
<li>$\Gamma(x+1)&#x3D;x\Gamma(x)$ 分部积分可证明</li>
<li>$\Gamma(n+1)&#x3D;n!$, 根据$\Gamma(1)&#x3D;1$归纳法可证明</li>
<li>$\log\Gamma$ 是凸的<ul>
<li>6.章习题10 Holder不等式</li>
<li>$\Gamma\left( \frac{x}{p}+ \frac{x}{q} \right)\leq \Gamma(x)^{1&#x2F;p}\Gamma(y)^{1&#x2F;q}$<br>8.19 Bohr与Mollerup发现, these 3 properties characterize $\Gamma$ completely</li>
</ul>
</li>
<li>即 如果满足上述性质 正值函数，那么 这样的函数 $f&#x3D;\Gamma$</li>
<li>也就是证明是满足上述性质的唯一函数</li>
<li>证明：<ul>
<li>注意到 第一条，所以只用关心(0,1)上的性质</li>
<li>$\varphi&#x3D;\log f$<ul>
<li>有 $\varphi(x+1)&#x3D;\varphi(x)+\log x$<ul>
<li>对于$x\in(0,1)有 $\varphi(n+1+x)&#x3D;var(x)+\log[x(x+1)\dots(x+n)]$</li>
</ul>
<p>		</p>
</li>
<li>$\varphi(1)&#x3D;0$ 且$\varphi$是凸的<ul>
<li>对于正整数 $\varphi(n+1)&#x3D;\log(n!)$</li>
</ul>
</li>
<li>凸的: 对于$x\in(0,1)$<ul>
<li>$\frac{\varphi(n+1)-\varphi(n)}{(n+1)-n}\le \frac{\varphi(n+1+x)-\varphi(n+1)}{(n+1+x)-(n+1)} \le \frac{\varphi(n+2)-\varphi(n+1)}{(n+2)-(n+1)}$</li>
<li>$\log n\le \frac{\varphi(n+1+x)-\varphi(n+1)}{x} \le \log(n+1)$</li>
<li>乘x减去$\log n$</li>
<li>$0 \leq \varphi(x)-\log\left[  \frac{n!n^x}{x(x+1)\dots(x+n)} \right] \leq x \log\left( 1+ \frac{1}{n} \right)$<ul>
<li>最右，n趋于无穷时趋于0 证明了唯一性？</li>
<li>得到了$\Gamma(x)&#x3D;\lim_{ n \to \infty } \frac{n!n^x}{x(x+1)\dots(x+n)}$</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>好吧 这是证明唯一性了，还是想说如果没有定义式有办法得到吗</li>
</ul>
<p>8.20 这中文翻译beta就翻译了个B，离谱。Beta函数,第一欧拉积分</p>
<ul>
<li>$Beta(x,y)&#x3D;\int_{0}^1 t^{x-1}(1-t)^{y-1}dt&#x3D;\frac{\Gamma(x)\Gamma(y)}{\Gamma(x+y)}$ 这里 也一定程度上 说明为了好看，那更需要委屈一下上面的$\Gamma(n+1)&#x3D;n$而不是$\Gamma(n)&#x3D;n$</li>
<li>$B(1,y)&#x3D;\frac{1}{y}$</li>
<li>对于每个固定y是x的凸函数</li>
<li>$B(x+1,y)&#x3D;\frac{x}{x+y}B(x,y)$<ul>
<li>证明分部积分</li>
</ul>
</li>
<li>$\Gamma(x)&#x3D;\frac{\Gamma(x+y)}{\Gamma(y)}B(x,y)$</li>
</ul>
<p>8.21 一些推论 $t&#x3D;\sin^2\theta$</p>
<ul>
<li>$2\int_{0}^{\pi&#x2F;2} (\sin\theta)^{2x-1}(\cos\theta)^{2y-1}&#x3D;\frac{\Gamma(x)\Gamma(y)}{\Gamma(x+y)}$</li>
<li>特别的$\Gamma\left( \frac{1}{2} \right)&#x3D;\sqrt{ \pi }$</li>
<li>另一方面 $\Gamma(x)&#x3D;2\int_{0}^{\infty}s^{2x-1}e^{-s^2}ds$<ul>
<li>$\int_{-\infty}^{\infty}e^{-s^2}ds&#x3D;\Gamma\left( \frac{1}{2} \right)&#x3D;\sqrt{ \pi }$</li>
</ul>
</li>
<li>$\displaystyle \Gamma(x)&#x3D;\frac{2^{x-1}\left( \Gamma\left( \frac{x}{2} \right) \Gamma\left( \frac{x+1}{2} \right) \right)}{\Gamma\left( \frac{1}{2} \right)}$ …… ???? how</li>
</ul>
<p>8.22 stirling 公式</p>
<ul>
<li>$\displaystyle \lim_{ x \to \infty } \frac{\Gamma(x+1)}{\left( \frac{x}{e} \right)^x \sqrt{ 2\pi x }}&#x3D;1$</li>
<li>对于很大的x可以估算</li>
<li>证明 令u&#x3D;t&#x2F;x-1<ul>
<li>$\Gamma(x+1)&#x3D;x^{x+1}e^{-x}\int_{-1}^{\infty} [(1+u)e^{-u}]^x , dx$</li>
<li>$(1+u)e^{-u}&#x3D;e^{-\frac{u^2}{2} h(u)}$</li>
<li>$h(u)&#x3D;\frac{2}{u^2}[u-\log (1+u)]$<ul>
<li>$h(0)&#x3D;1$定义</li>
<li>h连续函数，从无穷递降到0</li>
</ul>
</li>
<li>$s&#x3D;\frac{u}{\sqrt{ \frac{2}{x} }}$</li>
<li>$\Gamma(x+1)&#x3D;x^xe^{-x}\sqrt{ 2x }\int_{-\infty}^\infty g_{x}(s) ds$<ul>
<li>$g_{x}(s)&#x3D;e^{-s^2h(s \sqrt{ x&#x2F;2 })}$当$s &gt; -\sqrt{ \frac{x}{2} }$</li>
<li>$g_{x \to \infty}(s)\to e^{-s^2}$逐点收敛</li>
<li>$[-A,A]$中上面收敛是一致的</li>
<li>s &lt; 0 时 $0 &lt; g_x(s) &lt; e^{-x^2}$</li>
<li>s &gt; 0且x &gt; 1时, $0 &lt; g_x(s) &lt; g_1(s)$</li>
<li>$\int_{0}^\infty g_{1}(s) , ds &lt; \infty$</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>Walter Rudin 数学分析原理 9 多元函数</title>
    <url>/Math/Principles_of_Mathematical_Analysis_9/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="多元函数-functions-of-several-variables"><a href="#多元函数-functions-of-several-variables" class="headerlink" title="多元函数 functions of several variables"></a>多元函数 functions of several variables</h2><p>主要讨论 euclidean n-space $R^n$ 中</p>
<h3 id="线性变换-linear-transformations"><a href="#线性变换-linear-transformations" class="headerlink" title="线性变换 linear transformations"></a>线性变换 linear transformations</h3><p>9.1 </p>
<ul>
<li>向量空间vector space，加法封闭，scalar数乘封闭</li>
<li>线性组合linear combination，张成 生成span<ul>
<li>每一个 生成 是向量空间</li>
</ul>
</li>
<li>线性无关independent, $\sum c_{i}x_{i}&#x3D;0$可推出 所有$c_{i}&#x3D;0$ （任一个不能被其它线性表出）</li>
<li>空间X 含有由r个向量，组成无关集，不含r+1个向量的无关集，X是r维， dim X &#x3D; r</li>
<li>X的一个无关子集 能 span X,那么 这个子集称作一个基</li>
<li>{$e_1,\dots,e_{n}$称作$\mathbb{R}^n$的标准基 standard basis</li>
</ul>
<p>9.2 dim span{$x_1,…,x_r$} $\le r$</p>
<ul>
<li>生成空间dim &lt;&#x3D; 向量个数</li>
<li>S&#x3D;上述向量，生成X, S是r元（不一定无关）</li>
<li>Q&#x3D; 个数r+1，且是无关, $y_1 \dots$</li>
<li>$S_i&#x3D;$ S中去掉最后i个，（这些去掉的可以由Q中表出，因此Q中要取i？？？？个？？？？？？？ ）<ul>
<li>没看懂 如何控制i个替换 且 保持span不变的？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？？</li>
<li>大概 S去掉i个，用Q中i个替换，那么 如果保持span X不变, Q中$_{i+1}$ 可以被线性表出，</li>
<li>必定有$S_i$中必定有 $x_{k}$ 是 $S_i$并$y_{i+1}$ 的其余元的线性组合<ul>
<li>反证: 所有$x_k$都不能这样表出，那么S中系数为0, 则 Q无关会使得 无方案,( 这里 系数为0的意思是，每个$x_i$ )</li>
<li>因此 至少有个可以表出，可以表出，则剔除掉</li>
</ul>
</li>
</ul>
</li>
<li>推论dim $R^n&#x3D;n$<ul>
<li>证明 9.2 $\leq$</li>
<li>标准基 $\geq$</li>
</ul>
</li>
</ul>
<p>9.3 dim X&#x3D; n情况下</p>
<ul>
<li>X的n个向量的集合E能生成X,当且仅当E是无关的<ul>
<li>E并y 是 相关<ul>
<li>如果E无关 y则可被表示，所以X被生成</li>
<li>如果E相关，E可去掉一个元素不改变生成 而 dim X &#x3D; n &lt; E的向量个数 矛盾</li>
</ul>
</li>
</ul>
</li>
<li>X必定有基，每个基n个向量组成<ul>
<li>dim的定义是最大无关集向量个数，所以 能找到n个向量无关集，上面一条说明这个无关集是基</li>
</ul>
</li>
<li>任何小于r维的无关组可以扩充成基<ul>
<li>小于时， 总存在一个 不可被表出的可以添加</li>
</ul>
</li>
</ul>
<p>9.4 线性变换 linear transformation</p>
<ul>
<li>向量空间X 到 向量空间 Y的一个映射A</li>
<li>满足</li>
<li>$A(x_1+x_2)&#x3D;Ax_{1}+Ax_{2}$</li>
<li>$A(cx)&#x3D;cAx$</li>
<li>如果 A是线性的，时常把A(x)写作Ax</li>
<li>$x&#x3D;\sum c_{i}x_{i}$ 分解下的线性变换<ul>
<li>$Ax&#x3D;\sum c_{i}Ax_{i}$</li>
</ul>
</li>
<li>X到X的线性变换， 一般叫做linear operators on X</li>
<li>把X映满 则A可逆，还可定义逆映射，也是线性的</li>
</ul>
<p>9.5 A是可逆的，当且仅当 值域是$X$全体</p>
<ul>
<li>A基 可逆 需要线性无关，也是基，值域是全体</li>
</ul>
<p>9.6 </p>
<ul>
<li>$L(X,Y)$ 是X到Y 全体线性变换构成的集合<ul>
<li>L(X)是L(X,X)的简写</li>
<li>线性变换的集合 是线性的</li>
</ul>
</li>
<li>A in L(X,Y), B in L(Y,Z) 那么AB的复合 (BA) in L(X,Z)</li>
<li>A in L(R^n,R^m)<ul>
<li>norm A: $||A|| &#x3D; \sup |Ax|$, $|x| \leq 1$<ul>
<li>这意味着，范数 是单位球面上所有向量经过 A 变换后长度的最大值。换句话说，范数表示了 A 将向量拉伸到多大。</li>
</ul>
</li>
<li>$|Ax|\le ||A|| \cdot|x|$</li>
</ul>
</li>
</ul>
<p>9.7</p>
<ul>
<li>A in L(R^n,R^m), 则 $||A|| &lt; \infty$且 为 一致连续映射</li>
<li>$||A+B||\leq||A||+||B||$, $||cA||&#x3D;|c|\cdot ||A||$<ul>
<li>$||A-B||$ 作为距离，构成度量空间</li>
<li>从范数理解也可以理解，对于球面上 能拉到最大的原始，如果相同那么拉的结果 还要检查三角不等式，如果原来每个都没有同时拉最大，同样三角不等式而且三角不等式的两个值更小</li>
</ul>
</li>
<li>$A \in L(R^n,R^m), B \in L(R^m,R^n)$ 则 $||BA|| \leq ||B||,||A||$</li>
<li>证明：<ul>
<li>按标准基展开x $|Ax|&#x3D;|A \sum c_{i}x_{i}|&#x3D;|\sum c_{i}Ae_{i}|\leq \sum |c_{i}||Ae_{i}| \leq \sum |Ae_{i}| &lt; \infty$</li>
<li>一致连续 $|Ax-Ay| \leq ||A||, |x-y|$</li>
<li>$|(A+B)x|&#x3D;|Ax+Bx|\leq |Ax|+|Bx|\leq (||A||+||B||)|x| \leq ||A||+||B||$, $|x|\le 1$, 同时取 sup得证</li>
<li>$|(BA)x|&#x3D;|B(Ax)|\leq||B|||Ax|\leq||B||||A|||x|$</li>
</ul>
</li>
</ul>
<p>9.8 $\Omega$为$R^n$上所有可逆 算子的集合</p>
<ul>
<li>$A \in \Omega,B \in L(R^n)$ 且 $||B-A|| \cdot ||A^{-1}|| &lt; 1$<ul>
<li>则 $B \in \Omega$ emmm 可以判断可逆！？</li>
</ul>
</li>
<li>$\Omega$是$L(R^n)$的开子集，and the mapping $A \to A^{-1}$ is continuous on $\Omega$</li>
<li>证明<ul>
<li>$||A^{-1}||&#x3D;\frac{1}{\alpha}$, $||B-A||&#x3D;\beta$ 那么$\beta&lt;\alpha$</li>
<li>$\alpha |x|&#x3D;\alpha |A^{-1}Ax| \leq a ||A^{-1}|| |Ax|&#x3D;|Ax| \leq |(A-B)x|+|Bx| \leq \beta |x| + |Bx|$</li>
<li>即 $(\alpha-\beta)|x| \le |Bx|$<ul>
<li>有x非0时 Bx 非0,所以 核空间只有0向量，B是可逆的，哇哦！！！</li>
</ul>
</li>
<li>$(\alpha-\beta)|B^{-1}y|\leq|BB^{-1}y|&#x3D;|y|$<ul>
<li>即$||B^{-1}|| \leq(\alpha-\beta)^{-1}$</li>
<li>$||B^{-1}-A^{-1}||\leq||B^{-1}||\cdot||A-B||\cdot||A^{-1}||\leq \frac{\beta}{\alpha(\alpha-\beta)}$</li>
<li>说明 $B\to A$时$\beta\to{0}$ $B^{-1}\to A^{-1}$ 说明的反函数的映射是连续的，可以控制 可逆矩阵的距离 从而 控制其逆矩阵的距离，这里距离是上面的norm(B-A)</li>
</ul>
</li>
</ul>
</li>
<li>有了 可逆是开，那么当有可逆矩阵时能找到邻域内全是可逆矩阵</li>
</ul>
<p>9.9 矩阵 matrix</p>
<ul>
<li>amazing ！！！ 现在才讲矩阵 </li>
<li>$x_i$,$y_{i}$分别是X,Y的基</li>
<li>$A \in L(X,Y)$ 确定一组$a_{ij}$<ul>
<li>满足$Ax_{j}&#x3D;\sum_{i&#x3D;1}^{m}a_{ij}y_{i}, 1 \leq j\leq n$, 需要注意的是A是变换，这里的$a_{ij}$会随着选择的 基不同 而不同，不只是会随着A变</li>
<li>把这些 $a_{ij}$ 写成m行n列的，叫做矩阵$[A]$<ul>
<li>这里 A表示变换, $[A]$表示矩阵</li>
</ul>
</li>
<li>可以说 A的值域 由 $[A]$ 的列向量生成的</li>
<li>对于X中任意向量$x&#x3D;\sum c_{i}x_{i}$<ul>
<li>$Ax&#x3D;\sum_{i&#x3D;1}^{m}\left( \sum_{j&#x3D;1}^{n} a_{ij}c_{j} \right)y_{i}$</li>
</ul>
</li>
</ul>
</li>
<li>定义 $[B][A]&#x3D;[BA]$ 乘法运算，根据 变换的符合来定义 矩阵的复合<ul>
<li>也就是 给定基下，B的矩阵 与 A的矩阵 的 复合 &#x3D; BA复合变换 的矩阵</li>
</ul>
</li>
<li>虽然上述理论可以选择基，后续处理，考虑使用$R^n$的标准基</li>
<li>$|Ax|^2&#x3D;\sum_{i}\left( \sum_{j}a_{ij}c_{j} \right)^2 \leq \sum_{i}\left( \sum_{j}a_{ij}^2 \cdot \sum_{j}c_{j}^2 \right)$这里又是Schwarz不等式<ul>
<li>$&#x3D;\sum_{i,j} a_{ij}^2 |x|^2$</li>
<li>所以 $||A||\leq \sqrt{ \sum_{i,j} a_{ij}^2}$</li>
<li>如果用$B-A$代替上面的A, 说明矩阵中，某些$a_{ij}$ 是 参变量是连续函数时，A也是连续的，因为 这些参变量 连续可以控制 右侧的大小，反过来控制 $||B-A||$的大小</li>
</ul>
</li>
</ul>
<h3 id="微分法-Differentiation"><a href="#微分法-Differentiation" class="headerlink" title="微分法 Differentiation"></a>微分法 Differentiation</h3><p>9.10 前言</p>
<ul>
<li>在实数里用的 $\lim_{ h \to 0 }\frac{f(x+h)-f(x))}{h}$<ul>
<li>$f(x+h)-f(x)&#x3D;f’(x)h+r(h)$</li>
<li>余项r(h) 很小 $\lim_{ h \to 0 } \frac{r(h)}{h}&#x3D;0$</li>
<li>we can therefore regard the derivative of f at x, not as a real number,but as the linear operator on $R^1$ that takes h to f’(x)h</li>
<li>注意 每个实数a 都能引出$R^1$上的线性算子，所说的这个算子，只是用a去乘， </li>
<li>conversely, every linear function that carries $R^1$ to $R^1$ is multiplication by some real number.<ul>
<li>正是 $R^1$与$L(R^1)$之间的这个1-1对应关系</li>
</ul>
</li>
<li>其次考虑$f: R^1 \mapsto R^m$<ul>
<li>导数被定义为 $\lim_{ h \to 0 } \left[ \frac{f(x+h)-f(x)}{h} -y \right]&#x3D;0,y \in R^m$<ul>
<li>如果y存在, $f(x+h)-f(x)&#x3D;hy+r(h)$</li>
<li>其中 $h\to 0$时 $r(h)&#x2F;h \to 0$</li>
<li>主项是 $h\in R^1$到$hy\in R^m$的线性变换</li>
<li>$f’$ 看成$L(R^1,R^m)$的一员</li>
<li>或者说 $\lim_{ h \to 0 } \frac{f(x+h)-f(x)-f’(x)h}{h}&#x3D;0$</li>
<li>等价的 $\lim_{ h \to 0 } \frac{|f(x+h)-f(x)-f’(x)h|}{|h|}&#x3D;0$</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>9.11 E是$R^n$中的开集, $f$把E映入$R^m$内, $x\in E$, 如果存在$A\in L(R^n,R^m)$ 使得</p>
<ul>
<li>$\lim_{ h \to 0 } \frac{|f(x+h)-f(x)-Ah|}{|h|}&#x3D;0$</li>
<li>那么 称f在x可微，且 记作 $f’(x)&#x3D;A$</li>
<li>显然 $h\in R^n$, 开集+足够小 &#x3D;&gt; x+h属于E &#x3D;&gt; f(x+h)有定义, 分子绝对值内 $\in R^m$</li>
</ul>
<p>9.12 唯一性问题，就像之前 实数中，会考虑 左导数右导数一样，而这里的h感觉上是以球面的所有点，以半径趋于0</p>
<ul>
<li>唯一性 思想就是做差，</li>
<li>对于每个h $\frac{|B(th)|}{|th|}\to 0, t\to 0$</li>
</ul>
<p>9.14 A’(x)&#x3D;A</p>
<ul>
<li>A(x+h)-Ax&#x3D;Ah</li>
</ul>
<p>9.15 E是$R^n$的开集，f把E映入$R^m$内, f在$x_0\in E$可微，g把包含 f(E)的一个开集映入$R^k$内, g在$f(x_0)$可微, F(x)&#x3D;g(f(x))</p>
<ul>
<li>$F’(x_0)&#x3D;g’(f(x_{0}))f’(x_{0})$</li>
<li>根据定义 证明足够近</li>
</ul>
<p>9.16 偏导数, 开集$E\subset R^n$映入$R^m$的函数f, $e_i,u_i$分别是标准基</p>
<ul>
<li>$f(x)&#x3D;\sum_{i&#x3D;1}^{m} f_{x} u_{i}, x\in E$</li>
<li>$f_i(x)&#x3D;f(x)\cdot u_{i}$</li>
<li>$\frac{\partial}{\partial x_{j}}(f_{i})(x)&#x3D;\lim_{ t \to 0 } \frac{f_{i}(x+te_{j})-f_{i}(x)}{t}$</li>
</ul>
<p>如果已知f在某点x可微，那么，它的各个偏导数必在x处存在，并且它们能完全决定线性变换$f’(x)$</p>
<p>9.17 设f把开集$E \subset R^n$映入$R^m$内，f在点$x\in E$可微，那么$D_{j}f_{i}(x)$存在，且</p>
<ul>
<li>$f’(x)e_{j}&#x3D;\sum_{i&#x3D;1}^m (D_{j}f_{i})(x)u_{i}$</li>
<li>证明:<ul>
<li>固定j, f在x可微</li>
<li>$f(x+te_j)-f(x)&#x3D;f’(x)(te_{j})+r(te_{j})$</li>
<li>$\lim_{ t \to 0 } \frac{f(x+te_{j})-f(x)}{t}&#x3D;f’(x)e_{j}$</li>
<li>$\lim_{ t \to 0 } \sum_{i&#x3D;1}^m \frac{f_{i}(x+te_{j})-f_{i}(x)}{t}u_{i}&#x3D;f’(x)e_{j}$<ul>
<li>t趋于0时，每个商有极限4.10, 因此每个偏导存在</li>
</ul>
</li>
</ul>
</li>
<li>推论<ul>
<li>$[f’(x)]$ 是关于上述标准基的$f’(x)$的表现矩阵，那么$f’(x)e_{j}$是$[f’(x)]$ 的第j个列向量</li>
<li>$h&#x3D;\sum h_{j}e_{j}$</li>
<li>$f’(x)h&#x3D;\sum_{i&#x3D;1}^{m}\left[ \sum_{j&#x3D;1}^{n} (D_{j}f_{i})(x) h_{j} \right]u_{i}$</li>
</ul>
</li>
</ul>
<p>9.18 $\gamma$把$(a,b) \subset R^1$映入开集 $E \subset R^n$可微映射</p>
<ul>
<li>也就是可微曲线</li>
<li>f是域E上的实值可微函数</li>
<li>$g(t)&#x3D;f(\gamma(t))$</li>
<li>$g’(t)&#x3D;\sum f’(\gamma(t))\gamma’(t)$ 行矩阵乘上列矩阵 得到1x1的矩阵 也就是当个数</li>
<li>$g’(t)&#x3D;\sum_{i}^{n} (D_{i}f)(\gamma(t))\gamma’_{i}(t)$  </li>
<li>定义 梯度nabla $(\nabla f)(x)&#x3D;\sum_{i&#x3D;1}^{n}(D_{i}f)(x)e_{i}$ 是一个行矩阵</li>
<li>因为$\gamma’(t)&#x3D;\sum_{i&#x3D;1}^{n}\gamma’<em>{i}(t)e</em>{i}$ 按 标准基表示</li>
<li>所以 $g’(t)&#x3D;(\nabla f)(\gamma (t))\cdot \gamma’(t)$  行矩阵 x 列矩阵<ul>
<li>$\gamma(t)&#x3D;x+tu, |u|&#x3D;1$, x,u都是向量</li>
<li>$\gamma’(t)&#x3D;u$</li>
<li>$g’(0)&#x3D;(\nabla f)(x+0u)\cdot u$</li>
<li>$g(t)-g(0)&#x3D;f(\gamma(t))-f(\gamma(0))&#x3D;f(x+tu)-f(x)$</li>
<li>$\lim_{ t \to 0 } \frac{f(x+tu)-f(x)}{t}&#x3D;\lim_{ t \to 0 }\frac{g(t)-g(0)}{t}&#x3D;g’(0)&#x3D;(\nabla f)(x)\cdot u$</li>
<li>注意这里 $\gamma$ 设计，称作沿着向量u方向的方向导数，记作 $(D_{u}f)(x)$</li>
<li>如果固定f,x ，变动u,那么u和 $(\nabla f)(x)$方向一致时 值最大，（当然梯度可能为0）</li>
<li>$u&#x3D;\sum u_{i}e_{i}$</li>
<li>$(D_{u}f)(x)&#x3D;\sum_{i&#x3D;1}^n (D_{i}f)(x)u_{i}$</li>
</ul>
</li>
</ul>
<p>9.19 f把凸开集$E \subset R^n$映入$R^m$内, f在E内可微，并有对每个$x\in E$使得</p>
<ul>
<li>$||f’(x)|| \leq M$有存在的M, 那么$|f(b)-f(a)| \leq M|b-a|$</li>
<li>$\gamma(t)&#x3D;(1-t)a+tb$</li>
<li>凸， $\gamma(t)\in E$</li>
<li>$g(t)&#x3D;f(\gamma(t))$</li>
<li>$g’(t)&#x3D;f’(\gamma(t))\gamma’(t)&#x3D;f’(\gamma(t))(b-a)$</li>
<li>$|g’(t)|\leq ||f’(\gamma(t))|| |b-a| \leq M|b-a|$</li>
<li>根据5.19 $|f(b)-f(a)|&#x3D;|g(1)-g(0)|\leq (1-0)|g’(t)|\leq M|b-a|$</li>
<li>推论， 如果一切$x\in E$有$f’(x)&#x3D;0$ 那么$f$是常值函数</li>
</ul>
<p>9.20 定义 f是$E \subset R^n$到$R^m$内的可微映射, 如果$f’$是把E 连续的 into $L(R^n,R^m)$，那么称f在E内连续可微 continuously differentiable</p>
<ul>
<li>更明确， $|x-y|&lt;\delta$时 $||f’(y)-f’(x)||&lt;\epsilon$</li>
<li>$f$是$\mathscr{C}’$-mapping 或 者$f\in \mathscr{C’}(E)$</li>
</ul>
<p>9.21 f的所有偏导数在E上存在且连续 &lt;&#x3D;&gt; $f\in \mathscr{C}’(E)$</p>
<ul>
<li>证明</li>
<li>&lt;&#x3D;<ul>
<li>根据9.17 $(D_{j}f_{i})(x)&#x3D;(f’(x)e_{j})\cdot u_{i}$</li>
<li>$|(D_{j}f_{i})(y)-(D_{j}f_{i})(x)| &#x3D; | (f’(y)-f’(x))e_{j}\cdot u_{i}|$</li>
<li>$\leq | (f’(y)-f’(x))e_{j}|$</li>
<li>$\leq ||f’(y)-f’(x)||$ 这个 是可被控制的，那么 $D_jf_i$也是可以被控制的 连续</li>
</ul>
</li>
<li>&#x3D;&gt;<ul>
<li>只考虑m&#x3D;1的情况（因为 m有限， 每个维度 如果都连续（可被控制距离），那么 norm下 也可以被控制距离）</li>
<li>$|(D_{j}f)(y)-(D_{j}f)(x)|&lt; \frac{\epsilon}{n}$</li>
<li>$h&#x3D;\sum h_{j}e_{j}, |h| &lt; r$</li>
<li>$v_0， v_k&#x3D;\sum_{i&#x3D;1}^{k} h_{i}e_{i}, |v_{k}|&lt; r$</li>
<li>$f(x+h)-f(x)&#x3D;\sum_{j&#x3D;1}^{n} [f(x+v_{j})-f(x+v_{j-1})]$, S是凸的，所以 可以取到位于球内<ul>
<li>$f(x+v_j)-f(x+v_{j-1})&#x3D;f’(x+v_{j-1}+\theta_{j}h_{j}e_{j})h_{j}e_{j}&#x3D;(D_{j}f)(x+v_{j-1}+\theta_{j}h_{j}e_{j})h_{j}$</li>
</ul>
</li>
<li>$|f(x+h)-f(x)-\sum_{j&#x3D;1}^n h_{j}(D_{j}f)(x)|\leq \frac{1}{n}\sum_{j&#x3D;1}^n |h_{j}|\epsilon \leq |h| \epsilon$</li>
</ul>
</li>
</ul>
<h3 id="凝缩原理-the-contraction-principle"><a href="#凝缩原理-the-contraction-principle" class="headerlink" title="凝缩原理 the contraction principle"></a>凝缩原理 the contraction principle</h3><p>中断 微分的讨论</p>
<p>在任何完备度量空间都有效的 不动点定理</p>
<p>反函数定理的证明中用到</p>
<p>9.22 X是度量为d的度量空间， $\phi$ 把X映入X内,并且存在 $c&lt; 1$, 对一切x,y有$d(\phi(x),\phi(y))\leq cd(x,y)$</p>
<ul>
<li>那么称$\phi$是X到X内的一个凝缩函数，(is said to be a contraction of X into X)</li>
</ul>
<p>9.23 X是完备度量空间, $\phi$是X到X内的凝缩函数，那么存在着唯一合于$\phi(x)&#x3D;x$的$x\in X$</p>
<ul>
<li>换句话 phi 有唯一不动点，唯一性 显然，否讨论这两点的 距离 不满足上述 $d(\phi(x),\phi(y)) \leq cd(x,y)$</li>
<li>存在性，任意点$x_{0}$, 构造点列$x_{n+1}&#x3D;x_{n}$</li>
<li>相邻距离 &lt;&#x3D; c 上一个相邻距离 &lt;&#x3D; $c^n$ 最初相邻距离<ul>
<li>$d(x^n,x^m) \leq 关于c的等比和 * 最初距离$ 显然有限，而等比的首项，可以通过N控制</li>
<li>点列收敛</li>
<li>柯西序列，X完备，存在x &#x3D; lim X_n</li>
<li>phi 在X上连续（一致连续），所以 f(x)&#x3D;lim f( X_n)&#x3D;lim X_{n+1}&#x3D;x</li>
</ul>
</li>
</ul>
<h3 id="反函数定理-The-inverse-function-theorem"><a href="#反函数定理-The-inverse-function-theorem" class="headerlink" title="反函数定理 The inverse function theorem"></a>反函数定理 The inverse function theorem</h3><p>粗略的说，反函数定理说的是，一个连续可微映射f,在使线性变换f’(x)可逆的点x的邻域内是可逆的</p>
<p>9.24 f把开集E subset $R^n$映入$R^n$内的$\mathscr{C}’$映射, 对于某个a in E, f’(a)可逆，且b&#x3D;f(a) 那么</p>
<ul>
<li>$R^n$存在开集U及V,使得a in U, b in V, f在U上是1-1的，且f(U)&#x3D;V </li>
<li>若g是f的逆，在V内由 g(f(x))&#x3D;x确定，那么$g \in \mathscr{C}‘(V)$</li>
<li>注意 这里，x,y是n维向量</li>
<li>证明 写成分量形式，限制在a和b的足够小的邻域内，这样能用y_i把x_i接出来，这组解是唯一的，且是连续可微的<ul>
<li>令 f’(a)&#x3D;A, 选取 lambda使得 $2 \lambda ||A^{-1}||&#x3D;1$</li>
<li>因为f’在a连续，必有以a为中心的开球 U subset E,使得 $||f’(x)-A|| &lt; \lambda$ 勘误中文书这里有个莫名其妙的 导数符号<ul>
<li>这里用的是 9.8 ||B-A|| ||A^{-1}|| &lt; 1 且A可逆，则 B可逆，这里 通过 ||f’(x)-A|| ||A^{-1}|| &lt; lambda ||A^{-1}|| &#x3D; 1&#x2F;2 &lt; 1 来完成前提条件</li>
<li>再用f’连续，可逆集是开集所以可逆邻域内都可逆，来取得邻域内的U, （这里lambda 这里有点多于后面会用到</li>
</ul>
</li>
<li>给每个y 配置一个函数$\varphi(x)&#x3D;x+A^{-1}(y-f(x))$<ul>
<li>注意 f(x)&#x3D;y当且仅当x是$\varphi$的不动点</li>
<li>因为$\varphi’(x)&#x3D;I-A^{-1}f’(x)&#x3D;A^{-1}(A-f’(x))$</li>
<li>$||\varphi’(x)||\leq \frac{1}{2}$</li>
<li>根据9.19 有$|\varphi(x_{1})-\varphi(x_{2})|\leq \frac{1}{2} |x_{1}-x_{2}|$</li>
<li>满足凝缩原理的 &lt;&#x3D; 的前提条件，所以至多一个不动点 $\varphi(x)&#x3D;x$ 也就是$y&#x3D;f(x)$，是1-1映射</li>
<li>换句话说 如果f(x) 不是1-1映射，那么 如果两个x映射到同一个y,在那个y对应 $\varphi_y$ 下 这两个点 都是$\varphi_{y}$的不动点</li>
</ul>
</li>
<li>$V&#x3D;f(U)$, 取$x_{0}\in U$， $y_{0}&#x3D;f(x_{0})$, B 是半径$r &lt; r_{U}$，$x_0$为中心的开球<ul>
<li>B的闭包一定在U内</li>
<li>目标证明V开集，也就是 只要 $|y-y_{0}|&lt; \lambda r$就必定$y \in V$ </li>
<li>取定y</li>
<li>$|\varphi(x_{0})-x_{0}|&#x3D;|A^{-1}(y-y_{0})| &lt; ||A^{-1}|| \lambda r &#x3D;\frac{r}{2}$</li>
<li>对于 $x \in \bar{B}$ 有 $|\varphi(x)-x_{0}|\leq|\varphi(x)-\varphi(x_{0})|+|\varphi(x_{0})-x_{0}| &lt; \frac{1}{2} |x-x_{0}|+\frac{r}{2}\leq r$ 因此$\varphi(x) \in B$ </li>
<li>满足 凝缩原理的 自身 到 自身的条件</li>
<li>结合上面两个， $\varphi$ 是凝缩函数, $\bar{B}$作为$R^n$的闭子集，必是完备集，存在$\varphi_{y}$的不动点, 而这个不动点x，$f(x)&#x3D;y$</li>
<li>$y \in f(\bar{B}) \subset f(U)&#x3D;V$ 也就是V是开集，综上 1-1映射 以及 U,V都是开</li>
</ul>
</li>
<li>性质二的证明：<ul>
<li>y in V, y+k in V, x in U, x+h in U 且 y+k&#x3D;f(x+h)</li>
<li>$\varphi(x+h)-\varphi(x)&#x3D;h+A^{-1}[f(x)-f(x+h)]&#x3D;|h-A^{-1}k|\leq \frac{1}{2} |(x+h)-x|&#x3D;\frac{1}{2} |h|$<ul>
<li>因此 $|A^{-1}k| \geq \frac{1}{2} |h|$</li>
<li>$|h| \leq 2 ||A^{-1}|| |k| &#x3D;\frac{1}{\lambda} |k|$</li>
</ul>
</li>
<li>上面有$f’(x)$有逆，记作B （这个B 是 线性代数意义里的 逆矩阵也就是 $f’(x)B&#x3D;I$</li>
<li>$\frac{|g(y+k)-g(y)-B|}{|k|}&#x3D;\frac{|h-Bk|}{|k|}&#x3D;\frac{|(Bf’(x))h-B(f(x+h)-f(x))|}{|k|}&#x3D;\frac{|-B(f(x+h)-f(x)-f’(x)h)|}{|k|}$</li>
<li>$\leq \frac{||B||}{\lambda} \frac{|(x+h)-f(x)-f’(x)h|}{|h|} \to 0$</li>
<li>证明了 逆函数的导数 &#x3D; 原函数导数的逆矩阵： $g’(y)&#x3D;T$<ul>
<li>也就是 导数的矩阵，从矩阵的逆，与逆函数的导数 之间得到的是同样的矩阵</li>
</ul>
</li>
<li>最后 g是 把V映满U的连续映射（因为g可微），</li>
<li>f’是U到L的所有可逆元集 中的连续映射</li>
<li>$g\in \mathscr{C}’(V)$</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>9.25 f是开集E subset $R^n$到$R^n$内的$\mathscr{C}’$映射, $f’(x)$在每个$x \in E$ 可逆，对于每个开集$W \subset E$, $f(W)$是$R^n$的开子集</p>
<ul>
<li>换句话说 f是E到$R^n$内的开映射</li>
<li>因为每个x可逆，有邻域 是1-1的，局部1-1的，</li>
</ul>
<h3 id="隐函数定理-the-implicit-function-theorem"><a href="#隐函数定理-the-implicit-function-theorem" class="headerlink" title="隐函数定理 the implicit function theorem"></a>隐函数定理 the implicit function theorem</h3><p>如果f是 plane 平面上 连续可微实函数，函数 f 在点$(a,b)$满足 $f(a,b)&#x3D;0$</p>
<ul>
<li>且 $\frac{\partial}{\partial y}(f) \neq 0$ 那么在(a,b)的某个邻域内， 方程 f(x,y)&#x3D;0 能把y用x解出</li>
<li>$\frac{\partial}{\partial x}f \neq 0$ 就能在(a,b) 附近把x解出，用y表示<ul>
<li>偏导不等于0,可以考虑 $f(x,y)&#x3D;x^2+y^2-1$</li>
</ul>
</li>
</ul>
<p>9.26 $x \in R^n, y \in R^m$</p>
<ul>
<li>$(x,y) \in R^{n+m}$ 向量拼接</li>
<li>$A(h,k)&#x3D;A_{x}h+A_{y,k}, A \in L(R^{n+m},R^n),A_{x}\in L(R^n,R^n),A_{y}\in  L(R^m,R^n)$</li>
</ul>
<p>9.27 若 $A_{x}$可逆, 那么 每个$k \in R^m$ 有唯一h使得 $A(h,k)&#x3D;0$</p>
<ul>
<li>$h&#x3D;-(A_{x})^{-1}A_{y}k$ 计算出</li>
<li>证明： 线性代数的解情况的知识</li>
</ul>
<p>9.28 f 是开集$E \subset R^{n+m}$ 到$R^n$ 内的$\mathscr{C}’$映射，在某点(a,b) in E使得 f(a,b)&#x3D;0</p>
<ul>
<li>令 $A&#x3D;f’(a,b)$， 且假定$A_x$可逆</li>
<li>存在开集 $U \subset R^{n+m}$及 $W \subset R^m$, 有$(a,b) \in U,b\in W$ 有以下性质<ul>
<li>对于每个W中y,有唯一x 使得 (x,y) in U 且 f(x,y)&#x3D;0, </li>
<li>把这些映射定义称 g(y),那么 g是W到$R^n$内的$\mathscr{C}’$ 映射， $g(b)&#x3D;a$</li>
<li>$f(g(y),y)&#x3D;0$</li>
<li>$g’(b)&#x3D;-(A_x)^{-1}A_y$</li>
</ul>
</li>
<li>$f(x,y)&#x3D;0 \in R^n$ 可以写成含有n+m个变量的n个方程组的方程</li>
<li>A_x可逆的假定，意味 在(a,b)的值确定 $R^n$ 内的一个可逆线性算子</li>
<li>证明:<ul>
<li>定义 F(x,y) &#x3D; (f(x,y),y)</li>
<li>那么 F是把E映射到 $R^{n+m}$内的$\mathscr{C}’$ 映射, we claim that(断定) F’(a,b)是 可逆<ul>
<li>因为 f(a,b)&#x3D;0 所以 f(a+h,b+k)&#x3D;A(h,k) + r(h,k)余项</li>
<li>F(a+h,b+k)-F(a,b)&#x3D;(f(a+h,b+k),k)</li>
<li>&#x3D;(A(h,k),k)+(r(h,k),0)  右边这块，根据 余项的 趋于0的 性质判断 也是 余项</li>
<li>所以 F’(a,b)是R^{n+m}上的线性算子，它把(h,k)映射成 (A(h,k),k)</li>
<li>如果 它是0向量，那么 A(h,k)&#x3D;0 且 k&#x3D;0</li>
<li>而9.27 说明 h&#x3D;0</li>
<li>因此 F’(a,b)是1-1的也是可逆的 （9.5 线性变换的 核 只有0,那么 为1-1的）</li>
</ul>
</li>
<li>那么 可以对F(导函数连续 + 点 导函数可逆)使用反函数定理 得到 (a,b) in U, (f(a,b)&#x3D;0,b) in V, F把U映满V,且1-1<ul>
<li>注意 这里 U,V都是上面 9.24 的邻域，并不是所有 (0,b) 构成的集合！，因为显然的 所有(0,b)构成的集合不是开集，因为邻域半径 会让前面0有非零的 点</li>
<li>下面找 W, 令W是 适合$(0,y) \in V$的一切$y \in R^m$的集，注意$b\in W$</li>
<li>开集：V开集 显然 W开</li>
<li>存在性：W中的每个y,存在 (x,y) in U， (0,y)&#x3D;F(x,y) 这个x使得 f(x,y)&#x3D;0</li>
<li>唯一性：若 同一个y,还有 $f(x_{1},y)&#x3D;0$, 那么能推得 F中也相等，而F是1-1的说明 只存在唯一的x</li>
</ul>
</li>
<li>具体表达式：<ul>
<li>对于 y in W, 定义 g(y)  使得 g(y),y in U, f(g(y),y)&#x3D;0<ul>
<li>于是 F(g(y),y)&#x3D;(f(g(y),y),y)&#x3D;(0,y)</li>
</ul>
</li>
<li>令G是V映满U的映射，且是F的逆，$G \in \mathscr{C}’$<ul>
<li>(g(y),y)&#x3D;G(0,y) 我们用“同样的 对应关系“的G 但缩减了值域，而这样的G和新定义的g是同样的映射，所以g也 $g \in \mathscr{C}’$</li>
</ul>
</li>
<li>令 $\Phi(y)&#x3D;(g(y),y)$<ul>
<li>$\Phi’(y)k&#x3D;(g’(y)k,k)$</li>
</ul>
</li>
<li>W中 $f(\Phi(y))&#x3D;f(g(y),y)&#x3D;0$<ul>
<li>$f’(\Phi(y))\Phi’(y)&#x3D;0$ 常函数导数为0</li>
<li>y&#x3D;b时， $\Phi(y)&#x3D;(a,b)$ 且 $f’(\Phi(y))&#x3D;A$ 所以$A\Phi’(b)&#x3D;0$</li>
</ul>
</li>
<li>对于$R^m$中每个k 有 $(A_{x}g’(b)+A_{y})k&#x3D;A_{x}g’(b)k+A_{y}k&#x3D;A(g’(b)k,k)&#x3D;A\Phi’(b)k&#x3D;0$</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>写成f,g的分量形式</p>
<ul>
<li>$\sum_{j&#x3D;1}^{n} (D_{j}f_{i})(a,b)(D_{k}g_{j})(b)&#x3D;-(D_{n+k}f_{i})(a,b)$</li>
<li>$\displaystyle \sum_{j&#x3D;1}^{n} (\frac{\partial f_{i}}{\partial x_{j}})(\frac{\partial g_{j}}{\partial y_{k}})&#x3D;-(\frac{\partial f_{i}}{\partial y_{k}})$</li>
<li>以$\frac{\partial g_{j}}{\partial y_{k}}$  为为质量，有n个线性方程组</li>
</ul>
<p>9.29 例子：来个例子感受一下</p>
<ul>
<li>n &#x3D; 2, m &#x3D; 3 </li>
<li>$f_{1}(x_{1},x_{2},y_{1},y_{2},y_{3})&#x3D;2e^{x_{1}}+x_{2}y_{1}-4y_{2}+3$</li>
<li>$f_{2}(x_{1},x_{2},y_{1},y_{2},y_{3})&#x3D;x_{2}\cos x_{1}-6x_{1}+2y_{1}-y_{3}$</li>
<li>$f&#x3D;(f_{1},f_{2})$即$f(x,y)&#x3D;(f_{1}(x,y),f_{2}(x,y))$ </li>
<li>a&#x3D;(0,1)，b&#x3D;(3,2,7)</li>
<li>带入得此时 f(a,b)&#x3D;0</li>
<li>关于标准基，A&#x3D;f’(a,b)的矩阵为</li>
<li>$[A]&#x3D;\left[ \frac{\partial}{\partial x_{i}}(f_{j}) \frac{\partial}{\partial y_{i}}(f_{j}) \right]$</li>
<li>$[A]&#x3D;\left[2e^{x_{1}},y_{1},x_{2},-4,0;-x_{2}\sin x_{1}-6;\cos x_{1},2,0,-1 \right]|_{(x,y)&#x3D;(a,b)}$</li>
<li>$[A]&#x3D;\left[2,3,1,-4,0;-6,1,2,0,-1 \right]$</li>
<li>$[A_{x}]&#x3D;[2,3;-6,1]$ 列向量无关，可逆,</li>
<li>在b某个邻域存在 $\mathscr{C}’$的g 使得 $g(b&#x3D;(3,2,7))&#x3D;a&#x3D;(0,1)$且$f(g(y),y)&#x3D;0$</li>
<li>$[(A_{x})^{-1}]&#x3D;[A_{x}]^{-1}&#x3D;\frac{1}{20}[1,-3;6,2]$</li>
<li>$h&#x3D;\frac{\partial}{\partial y_{i}}(g_{j})|<em>{y&#x3D;b} k&#x3D;g’(b)k&#x3D;-[A</em>{x}^{-1}A_{y}]k&#x3D;\left[ \frac{1}{4}, \frac{1}{5}, - \frac{3}{20}; - \frac{1}{2}, \frac{6}{5}, \frac{1}{10} \right] k$</li>
<li>这样我们求得了 g在b点邻域里 关于y的偏导值</li>
</ul>
<h3 id="秩定理-the-rank-theorem"><a href="#秩定理-the-rank-theorem" class="headerlink" title="秩定理 the rank theorem"></a>秩定理 the rank theorem</h3><p>虽不如 反函数 和 隐函数 重要</p>
<p>我们也把它算作是 连续可微映射 F在一点x的局部性质，与线性变换F’(x)在x点附近的局部性质相似，</p>
<p>9.30 A in L(X,Y), null space of A(零空间) 记作 $\mathscr{N}(A)$, 是使Ax&#x3D;0的所有组成的集，显然 $\mathscr{N}(A)$ 是X中的向量空间</p>
<ul>
<li>A的值域(range of A) $\mathscr{R}(A)$ 是Y中的向量空间</li>
<li>A 的 秩rank定义为 $\mathscr{R}(A)$的维数</li>
<li>$L(R^n)$的可逆元，恰好是那些为n的元， 恰好是那些秩为n的元（定理9.5）</li>
<li>如果 A的秩是0,那么一切x ，Ax&#x3D;0, A的零空间是X全体</li>
</ul>
<p>9.31 projections 射影，投影， 如果 $P^2&#x3D;P$ 幂等，就说P是X里的摄影</p>
<ul>
<li>更明确说 任意x, 有 P(Px)&#x3D;Px</li>
<li>P把每个向量固定在它的值域$\mathscr{R}(P)$中</li>
<li>性质:</li>
<li>P是投影，那么X中每个x能唯一拆解称来自 $\mathscr{R}(P),\mathscr{N}(P)$中的两个向量之和<ul>
<li>x_1 &#x3D; Px</li>
<li>x_2 &#x3D; x-x_1 in Null(P)<ul>
<li>Px_2&#x3D;Px-Px_1&#x3D;Px-PPx&#x3D;0</li>
</ul>
</li>
<li>唯一性 证明以下x_1唯一性就好了，<ul>
<li>对于任意拆分，x_1是在投影里，有Px_1&#x3D;x_1</li>
<li>$Px&#x3D;Px_1+Px_2&#x3D;x_1+0$</li>
<li>x_1只能为Px</li>
</ul>
</li>
</ul>
</li>
<li>X是有限维向量，X_1 是X内的一个向量空间，那么在X中存在着P, $\mathscr{R}(P)&#x3D;X_{1}$<ul>
<li>也就是有恰好投影到 指定子向量空间的</li>
<li>0维显然</li>
<li>根据9.3 在X_1任意选一组基，在X中扩充到X的基<ul>
<li>那么 P(X中的坐标，按照X中扩充基 分解)&#x3D;只留X_1中的基</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>9.32 m,n,r 非负整数  $m \ge r$ , $n \ge r$, F把开集$E \subset R^n$ 映入 $R^m$ 内的 $\mathscr{C}’$ 映射, 对于每个$x \in E$ , $F’(x)$的秩是$r$</p>
<ul>
<li>固定$a \in E$, 令$A&#x3D;F’(a)$, 设A的值域是$Y_1$, P是$R^m$中的射影，其值域也是$Y_{1}$, $Y_{2}$是P的零空间</li>
<li>那么 $R^n$中存在着 开集 U及V, $a \in U \subset E$, 并且存在着把映满U的1-1 $\mathscr{C}’$映射H(onto 逆也是 $\mathscr{C}’$), 使得<ul>
<li>$F(H(x))&#x3D;Ax+\varphi(Ax), x \in V$ 其中$\varphi$是把 $A(V) \subset Y_1$映入 $Y_2$内的 $\mathscr{C}’$映射</li>
</ul>
</li>
</ul>
<p>证明:</p>
<ul>
<li>若 r&#x3D;0, 那么 $F’(x)&#x3D;0$对一切x成立，那么F是常函数，显然<ul>
<li>a的某领域U内</li>
<li>这时 V&#x3D;U, H(x)&#x3D;x, $\varphi(0)&#x3D;F(a)$</li>
<li>$F(H(x))&#x3D;F(x)&#x3D;0+\varphi(0)&#x3D;F(a)$</li>
</ul>
</li>
<li>若 r&gt;0, $\dim Y_1 &#x3D; r$, $Y_1$有基 {$y_1,…,y_r$}, A可逆,因此选$R^n$中的r个基$z_1,…,z_r$使得$Az_i&#x3D;y_i$<ul>
<li>因此 A的’逆’有 $A^{-1}(\sum c_i y_i)&#x3D;\sum c_i z_i$<ul>
<li>书上这里是S，来表示这个逆运算，需要注意的是A这里是f’(a) 它甚至可能不是方阵，然后我们这里$S&#x3D;A^{-1}$, 而我们能做的是什么，其实就是秩为r的矩阵，完成了 行空间 到 列空间的 1-1 的r维映射，所以这里S我们只是这个1-1映射的逆向而已，那么</li>
<li>$A^{-1}$的 接受的参数 只有列空间$Y_1$中的！！！</li>
<li>再细致的<ul>
<li>$AA^{-1}y&#x3D;y,y\in Y_1$, 这是成立的</li>
<li>$A^{-1}Ax &#x3D;?&#x3D;x , Ax\in Y_1$, 这是不一定的, 因为x可能不在行空间里</li>
</ul>
</li>
</ul>
</li>
<li>$G(x)&#x3D;x+A^{-1}P[F(x)-Ax],x\in E$, 这是一个E到$R^n$内的$\mathscr{C}’$映射<ul>
<li>$G’(x)&#x3D;I+A^{-1}P[F’(x)-A]$</li>
<li>$G’(a)&#x3D;I+A^{-1}P[F’(a)-A]&#x3D;I+A^{-1}P[0]&#x3D;I$ 恒等算子</li>
<li>由于G是1-1的，根据反函数定理 所以G是U到$R^n$内V的1-1 $\mathscr{C}’$映射, G的逆$H&#x3D;G^{-1}$也是$\mathscr{C}’$</li>
</ul>
</li>
<li>因为PA&#x3D;A,所以 $AA^{-1}PA&#x3D;A$</li>
<li>$AG(x)&#x3D;Ax+P[F(x)-Ax]&#x3D;PF(x),x \in E$</li>
<li>$PF(H(x))&#x3D;AG(H(x))&#x3D;Ax,x\in V$</li>
<li>定义$\Psi(x)&#x3D;F(H(x))-Ax,x \in V$<ul>
<li>$P\Psi(x)&#x3D;0$ 所以$\Psi(x) \in Y_2$</li>
<li>因为V是开集，显然A(V)是它的值域 $R(A)&#x3D;Y_1$的开子集</li>
</ul>
</li>
<li>下面要证明 存在$A(V)$到$Y_2$的$\mathscr{C}’$映射$\varphi$<ul>
<li>$\varphi(Ax)&#x3D;\Psi(x),x\in V$</li>
<li>若$x_1,x_2\in V, Ax_1&#x3D;Ax_2$ 那么 $\Psi(x_1)&#x3D;\Psi(x_2)$<ul>
<li>证明</li>
<li>$\Phi(x)&#x3D;F(H(x)),x \in V$ 因为对于每个$x \in V$, $H’(x)$的秩是n, 对于每个$x \in U$, $F’(x)$的秩是r</li>
<li>$\Phi’(x)$的秩 &#x3D; $F’(H(x))H’(x)的秩&#x3D;r$</li>
<li>固定$x \in V$, 令$M$是$\Phi’(x)$的值域, 那么$M \subset R^m,\dim M&#x3D;r$, </li>
<li>根据上面 $P\Phi’(x)&#x3D;A$</li>
<li>因此P把M 映满 $\mathscr{R}(A)&#x3D;Y_1$, 因为M与$Y_1$同维，所以P（在M上时）是1-1的</li>
<li>设$Ah&#x3D;0$, 于是 $P\Phi’(x)h&#x3D;0$, 但$\Phi’(x) h \in M$且P在M上是1-1的,所以$\Phi’(x)h&#x3D;0$</li>
<li>即 如果$x\in V$且$Ah&#x3D;0$那么$\Psi’(x)h&#x3D;0$</li>
<li>令$h&#x3D;x_2-x_1$，且定义$g(t)&#x3D;\Psi(x_1+th), 0\le t \le 1$</li>
<li>V凸的（如果不是可以缩小成凸的），所以$g’(t)&#x3D;\Psi’(x_1+th)h&#x3D;0, x_1+th\in V$</li>
<li>所以$\Psi(x_1)&#x3D;g(0)&#x3D;g(1)&#x3D;\Psi(x_2)$</li>
</ul>
</li>
<li>上面的性质说明 $\Psi(x)$的值 可以只依赖于$Ax$ 因此定义$\varphi(Ax)&#x3D;\Psi(x)$ 是函数</li>
</ul>
</li>
<li>接下来证明$\varphi$是$\mathscr{C}’$</li>
<li>固定$y_0\in A(V)$再固定$x_0\in V$使$Ax_0&#x3D;y_0$ 因为V是开集, $y_0$必在$Y_1$中有邻域W,凡是$y\in W$时 $x&#x3D;x_0+A^{-1}(y-y_0) \in V$<ul>
<li>$Ax&#x3D;Ax_0+AA^{-1}(y-y_0)&#x3D;y$</li>
<li>$\varphi(y)&#x3D;\varphi(Ax)&#x3D;\Psi(x)&#x3D;\Psi(x_0+A^{-1}(y-y_0)), y \in W$</li>
<li>这说明W中$\varphi \in \mathscr{C}’$</li>
<li>由于$y_0$是任意的，所以$\varphi$是$\mathscr{C}’$</li>
<li>证毕</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>知乎: <a href="https://zhuanlan.zhihu.com/p/694698914">https://zhuanlan.zhihu.com/p/694698914</a></p>
<p><img data-src="https://pic1.zhimg.com/v2-936b201950593b84de42ffbe6feb5eae_1440w.jpg"></p>
<p>图感觉不完全对</p>
<ul>
<li>G，H是互逆的，G: U-&gt;V, H: V-&gt;U</li>
<li>$A&#x3D;F’(a)$,但是映射的是$R^n$ 到$Y_1$,<ul>
<li>其中 A的逆$S&#x3D;A^{-1}$ 是 $Y_1 \to R^n$中的r维A的行空间</li>
<li>$Y_1,Y_2$应该画成正交形式的</li>
</ul>
</li>
</ul>
<p>来说一说 关于映射F的几何意义</p>
<ul>
<li>如果$y \in F(U)$那么有某个$x\in V$,使得$y&#x3D;F(H(x))$</li>
<li>$Py&#x3D;Ax$</li>
<li>$y&#x3D;Py+\varphi(Py), y\in F(U)$<ul>
<li>说明y被它的投影所确定</li>
<li>如果把P限制在F(U)内，P就是把F(U)映满A(V)的1-1映射</li>
</ul>
</li>
<li>因此$F(U)$是r维曲面surface，在A(V)的每个点的 上面 恰好有一个F(U)的一个点，也可以把F(U)当成$\varphi$的图像</li>
<li>如果像证明中那样$\Phi(x)&#x3D;F(H(x))$那么说明$\phi$的水平集 level sets（在这个集上，Phi的值是一个给定的值attains a given value）恰好是A在V中的水平集,这些集（A的水平集）都是平坦flat的，因为他们都是向量空间Nullspace(A)的平移与V的交<ul>
<li>dim N(A)&#x3D;n-r</li>
</ul>
</li>
<li>F在U中的水平集level sets,是Phi在V中的平坦水平集在H之下的像，于是它们是U中的n-r维曲面</li>
</ul>
<hr>
<p>$F(x)&#x3D;AG(x)+\varphi(AG(x)), x \in U$</p>
<ul>
<li>G: U到V的1-1映射, E到$R^n$内的$\mathscr{C}’$映射</li>
<li>$\varphi$是$A(V)$到$Y_2$的$\mathscr{C}’$映射</li>
<li>G怎么来的:<ul>
<li>这样想, $F:E\to R^m$, 那么拆解值域成 正交结构<ul>
<li>$F(x)&#x3D;PF(x)+(F(x)-PF(x))$</li>
<li>左边 PF(x)在$Y_1$中，右边的括号在$Y_2$中</li>
<li>另一方面希望 $F(x)&#x3D;F(a)+F’(a)(x-a)+r(x-a)$ 同样按照正交拆解</li>
<li>$F(x)&#x3D;A(x-a+A^{-1}PF(a))+(F(a)-PF(a)) + r(x-a)$<ul>
<li>这里出现了A的逆，要合理化就是 去找对应的1-1的r维映射的逆</li>
<li>注意同上，$A^{-1}$只能接受$Y_1$中的元素</li>
</ul>
</li>
<li>所以$G(x)&#x3D;x-a+A^{-1}PF(a)$这样的形式, 一方面我们希望$AG(x)&#x3D;PF(x)$ 同样的正交分解部分相等<ul>
<li>这里神奇的一点就是 $Aa &#x3D; AA^{-1}PAa$</li>
<li>$G(x)&#x3D;x-A^{-1}PAa+A^{-1}PF(a)$</li>
<li>$G(x)&#x3D;x+A^{-1}P(F(a)-Aa)$ 结构上就和上面一样了, 而这里a换成x满足 $AG(x)&#x3D;PF(x)$,</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>$\varphi$的部分<ul>
<li>根据拆解 $F(x)-PF(x)&#x3D;\varphi(AG(x))$，希望这个成立</li>
<li>到 nullspace(P)的 $Y_2$是显然的，因为 拆解就是 正交拆解</li>
<li>那么 只和 $AG(x)$有关，和$\mathscr{C}’$这两个证明，<ul>
<li>后一个的感官上更显然，F,P,A,G 都是 ，这里是复合运算</li>
<li>前一个,$F(x)-PF(x)$,注意到$PF(x)&#x3D;AG(x)$,所以需要证明的是 $F(x)$只和$AG(x)$有关, F(x)只和x有关，A可逆，G可逆，所以F只和AG(x)<ul>
<li>其中G可逆，需要反函数定理</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="行列式-determinants"><a href="#行列式-determinants" class="headerlink" title="行列式 determinants"></a>行列式 determinants</h3><p>行列式与方阵有关的数，行列式是0的充要条件是相应的算子不可逆</p>
<p>9.33 如果($j_1,…,j_n$)是正整数的有序n元组（有序的n个正整数</p>
<ul>
<li>$s(j_1,…,j_n)&#x3D;\prod_{p&lt;q} sgn(j_q-j_p)$<ul>
<li>右边是符号函数</li>
<li>换句话说 是 -1的 逆序对个数的幂次</li>
</ul>
</li>
<li>设[A]是$R^n$上线性算子A关于标准基的矩阵, i行j列 阵元是 $a(i,j)$,</li>
<li>定义 $\det[A]&#x3D;\sum s(j_1,\cdots,j_n)\prod a(i,j_i)$<ul>
<li>遍历所有$j_i$的排列方法</li>
</ul>
</li>
<li>把[A]表示成列向量 $[A]&#x3D;(x_1,\cdots,x_n)$<ul>
<li>那么$\det [A]&#x3D;\det(x_1,\cdots,x_n)$ 是一个实函数</li>
<li>定义域是 $R^n$中一切有序n元组所组成的集</li>
</ul>
</li>
</ul>
<p>9.34 </p>
<ul>
<li>I是恒等算子,$det[I]&#x3D;det(e_1,\cdots,e_n)&#x3D;1$</li>
<li>如果$x_j$外其它列向量保持不变， det便是$x_j$的线性函数</li>
<li>det[A]&#x3D;-det[A交换某两列]</li>
<li>[A]如果两列相等那么 det[A]&#x3D;0</li>
<li>这个在MIT的线代课程里面，前三条是定义，而9.33是靠这三条推出的公式,这里第4条 完全可以由2,3 条得到</li>
<li>这里是9.33 是定义，而要推这些性质，这个两个角度看，前三条也是可以看做核心性质了</li>
</ul>
<p>9.35</p>
<ul>
<li>$\det([B][A])&#x3D;\det[B]\det[A]$</li>
<li>证明:</li>
<li>定义 $\Delta_B(a_1,\cdots,a_n)&#x3D;\Delta_B[A]&#x3D;\det([B][A])&#x3D;\det(Ba_1,\cdots,Ba_n)$</li>
<li>因此$\Delta_B$也有9.34的2-4条性质,可以把$a_i$拆解成标准基的表示,并利用线性性拆出</li>
<li>$\Delta_B[A]&#x3D;\sum (\prod a(i_j,j)) \Delta_B(e_{i_1},\cdots,e_{i_n})$</li>
<li>其中右侧 $\Delta_B(e_{i_1},\cdots,e_{i_n})&#x3D;t(i_1,\cdots,i_n)\Delta_B(e_1,\cdots,e_n)&#x3D;t(i_1,\cdots,i_n)\det[B]$<ul>
<li>这里t需要 里面是1~n的某个排列 才非零，是1或-1, 而当非0时，对应的是$s(i_1,\cdots,i_n)$</li>
<li>和前面结合即是 $\det[A]$</li>
</ul>
</li>
</ul>
<p>9.36 定理 $R^n$上的线性算子A可逆的充要条件是 $\det[A]\neq 0$</p>
<ul>
<li>可逆 $\det[A]\det[A^{-1}]&#x3D;\det[AA^{-1}]&#x3D;\det[I]&#x3D;1$ 所以一定不为0</li>
<li>不可逆, 列线性相关(定理9.5), 因此有一列可被其它列表示，构造变换值不变 &#x3D; 0</li>
</ul>
<p>9.37 评注, e,u都是基, 每个线性算子（MIT叫线性变换），能确定两个方阵$[A],[A]_U$,</p>
<ul>
<li>$Ae_j&#x3D;\sum_i a_{ij}e_i$</li>
<li>$Au_j&#x3D;\sum_i c_{ij}u_i$</li>
<li>来确定它们的阵的元素 $a_{ij},c_{ij}$</li>
<li>如果$u_j&#x3D;Be_j&#x3D;\sum_i b_{ij}e_i$, 那么</li>
<li>$Au_j&#x3D;\sum_k c_{kj}u_k&#x3D;\sum_k c_{kj}Be_k&#x3D;\sum_k c_{kj}\sum_i b_{ik}e_i&#x3D;\sum_i (\sum_k b_{ik}c_{kj})e_i$</li>
<li>$Au_j&#x3D;ABe_j&#x3D;A\sum_k b_{kj}e_k&#x3D;\sum_i (\sum_k a_{ik}b_{kj})e_i$</li>
<li>所以 $\sum_{k} b_{ik}c_{kj}&#x3D;\sum_k a_{ik}b_{kj}$ 因为上面是分解的正交基<ul>
<li>即 $[B][A]_U&#x3D;[A][B]$</li>
<li>B可逆, $\det[B]\neq 0$,</li>
<li>$\det[A]_U&#x3D;\det[A]$</li>
</ul>
</li>
<li>因此 线性算子 的矩阵 的行列式，与构成的基无关，所以可以称作线性算子的行列式<ul>
<li>这里MIT里的 一个是变换，而一个变换的指定基下的矩阵 的行列式，还是在描绘 这个基下各个 基向量的拉伸放缩翻转的整体情况</li>
</ul>
</li>
</ul>
<p>9.38 函数行列式, f把开集$E\subset R^n$映入$R^n$内，并且f在点$x\in E$ 可微, 线性算子 f’(x) 的行列式，叫做f在x的函数行列式 记作</p>
<ul>
<li>$J_f(x)&#x3D;\det f’(x)$</li>
<li>若 $(y_1,\cdots,y_n)&#x3D;f(x_1,\cdots,x_n)$ 又可以用记号<ul>
<li>$\frac{\partial(y_1,\cdots,y_n)}{\partial(x_1,\cdots,x_n)}$</li>
</ul>
</li>
<li>在反函数定理中, 需要的就是$J_f(x)\neq 0$</li>
</ul>
<h3 id="高阶导数-derivatives-of-higher-order"><a href="#高阶导数-derivatives-of-higher-order" class="headerlink" title="高阶导数 derivatives of higher order"></a>高阶导数 derivatives of higher order</h3><p>9.39 定义 f是定义在开集 $E\subset R^n$的实函数, 其偏导数是$D_1f,\cdots,D_nf$如果, 每个$D_jf$也可微,那么f的二阶偏导数定义为</p>
<ul>
<li>$D_{ij}f&#x3D;D_iD_jf$</li>
<li>如果所有这些$D_{ij}f$都在E内连续, 就说 f在 E内属于 $\mathscr{C}’’$ 类，或者$f\in \mathscr{C}’’(E)$</li>
<li>对于向量映射，如果$f:R^n\mapsto R^m$ 每个分量都是$\mathscr{C}’’$类的，就说$f$属于$\mathscr{C}’’$类的</li>
<li>注意的是，习题27，即使$D_{ij}f$和$D_{ji}f$都存在，也不一定相等，但是如果它们都连续，那么它们一定相等<ul>
<li>习题27: $f(x,y)&#x3D;\frac{xy(x^2-y^2)}{x^2+y^2}$, 其中在(0,0)补充定义为0</li>
</ul>
</li>
</ul>
<p>9.40 定理 设f定义在开集 $E\subset R^2$中，并且$D_1f$及$D_{21}f$在E的每个点处存在，设$Q\subset E$是闭矩形，它的边与坐标轴平行，并且$(a,b)$及$(a+h,b+k)$是它的opposite vertices, $h\neq 0,k \neq 0$</p>
<ul>
<li>令 $\Delta(f,Q)&#x3D;f(a+h,b+k)-f(a+h,b)-f(a,b+k)+f(a,b)$</li>
<li>那么Q内存在一点$(x,y)$使 $\Delta(f,Q)&#x3D;hk(D_{21}f)(x,y)$</li>
<li>注意到 hk &#x3D; Q的面积，而上面定义的意义是 x&#x3D;a+h位置的值变化 减去 x&#x3D;a位置的值变化？或者是y&#x3D;b+k位置的值变化 减去 y&#x3D;b位置的值变化</li>
<li>证明:<ul>
<li>令 $u(t)&#x3D;f(t,b+k)-f(t,b)$ 也就是在x&#x3D;t位置的值变化</li>
<li>$\Delta(f,Q)&#x3D;u(a+h)-u(a)$</li>
<li>$&#x3D;hu’(x)$ 因为 $D_1$存在，以及中值原理</li>
<li>$&#x3D;h[(D_1f)(x,b+k)-(D_1f)(x,b)]$</li>
<li>$&#x3D;h[k(D_{21}f)(x,y)]$</li>
</ul>
</li>
</ul>
<p>9.41 设f定义在开集 $E\subset R^2$上,又设$D_1f,D_2f,D_{21}f$在E的每个点上存在，且$D_{21}f$在 点(a,b)连续，那么$D_{12}f$在(a,b)上存在且等</p>
<ul>
<li>证明:<ul>
<li>令 $A&#x3D;(D_{21}f)(a,b)$</li>
<li>对于任意$\epsilon &gt; 0$如果$Q$是像在定理9.40中那样的矩形, h及k充分小, 那么一切$(x,y)\in Q$有<ul>
<li>$|A-(D_{21}f)(x,y)| &lt; \epsilon$</li>
<li>$|A-\frac{\Delta(f,Q)}{hk}| &lt; \epsilon$</li>
<li>固定h，令$k\to 0$,因为$D_2f$在E中存在, 由上面这个不等式有</li>
<li>$|\frac{(D_2f)(a+h,b)-(D_2f)(a,b)}{h} - A|\le \epsilon$</li>
<li>因为$\epsilon$是任意的, 足够小$h\neq 0$成立的，得证</li>
</ul>
</li>
</ul>
</li>
<li>推论  $f\in \mathscr{C}’’(E)$则$D_{21}f&#x3D;D_{12}f$</li>
</ul>
<h3 id="积分的微分法-differentiation-of-integrals"><a href="#积分的微分法-differentiation-of-integrals" class="headerlink" title="积分的微分法 differentiation of integrals"></a>积分的微分法 differentiation of integrals</h3><p>$\varphi$是二元函数, 它对其中一变元可积分，另一个变元可微分，问题是能否交换顺序保持结果相等</p>
<ul>
<li>$\frac{d}{dt} \int_a^b \varphi(x,y)dx &#x3D; \int_a^b \frac{\partial}{\partial t}(\varphi) (x,t) dx$</li>
<li>习题28有不等的反例</li>
<li>$\varphi_t(x)&#x3D;\varphi(x,t)$记作固定t后的关于x的一元函数</li>
</ul>
<p>9.42  设</p>
<ul>
<li>$a\le x \le b, c\le t \le d$, $\varphi(x,t)$有定义<ul>
<li>矩形内有定义</li>
</ul>
</li>
<li>$\alpha$是$[a,b]$上的递增函数<ul>
<li>相对黎曼可积的前提条件</li>
</ul>
</li>
<li>对于$t\in[c,d]$, $\varphi_t \in \mathscr{R}(\alpha)$<ul>
<li>每个第二个变量固定，第一个变量黎曼可积</li>
</ul>
</li>
<li>$c &lt; s &lt;d$每个$\epsilon &gt; 0$有$\delta &gt; 0$使得一切$x\in [a,b]$及一切$t \in (s-\delta,s+\delta)$ 有$|(D_2\varphi)(x,t)-(D_2\varphi)(x,s)| &lt; \epsilon$<ul>
<li>第二个变量的偏导 在 矩形上固定第一个变量后，逐点连续</li>
<li>只要$D_2\varphi$在定义$\varphi$的那个矩形上连续，这个就一定成立</li>
</ul>
</li>
<li>定义 $f(t)&#x3D;\int_a^b \varphi(x,t) d\alpha(x), c\le t\le d$<ul>
<li>第三条 断言一切t，这个积分都存在</li>
</ul>
</li>
<li>那么 $(D_2\varphi)_s \in \mathscr{R}(\alpha), f’(s)$存在 并且 $f’(s)&#x3D;\int_a^b (D_2\varphi)(x,s)d\alpha(x)$</li>
<li>证明:<ul>
<li>$\Psi(x,t)&#x3D;\frac{\varphi(x,t)-\varphi(x,s)}{t-s}$</li>
<li>其中$0 &lt; |t-s| &lt; \delta$ 据定理 5.10, 对应于每个$(x,t)$在s与t之间有数u，使得$\Psi(x,t)&#x3D;(D_2\varphi)(x,u)$</li>
<li>$|\Psi(x,t)-(D_2\varphi)(x,s)|&lt;\epsilon$<ul>
<li>$t\to s$时， $[a,b]$上有一致地有 $\Psi_t \to (D_2\varphi)_s$,</li>
</ul>
</li>
<li>注意 $\frac{f(t)-f(s)}{t-s}&#x3D;\int_a^b \Psi(x,t) d\alpha(x)$</li>
<li>因为每个$\Psi_t \in \mathscr{R}(\alpha)$</li>
<li>所以这里核心还是 直接展开 $f’$和$D_2\varphi$ 也就是两个 导的表达来完成证明</li>
</ul>
</li>
</ul>
<p>9.43 当然也能证明把9.42中 $[a,b]$换成 $(-\infty,\infty)$时所得的类似的定理，只是看个例子</p>
<ul>
<li>$f(t)&#x3D;\int_{-\infty}^{\infty} e^{-x^2} \cos(xt)dx$</li>
<li>$g(t)&#x3D;-\int_{-\infty}^{\infty} xe^{-x^2} \sin(xt)dx$</li>
<li>其中$-\infty &lt; t \infty$ 两个积分都存在（绝对收敛）</li>
<li>注意g是从f把被积式对t微分得来的，我们断定f可微小且 f’(t)&#x3D;g(t)<ul>
<li>证明:</li>
<li>$\beta &gt; 0$那么 $\frac{\cos(\alpha+\beta)-\cos \alpha}{\beta} + \sin \alpha &#x3D;\frac{1}{\beta} \int_{\alpha}^{\alpha+\beta} (\sin \alpha - \sin t) dt$<ul>
<li>因为$|\sin \alpha - \sin t | \le |t-\alpha|$,右端绝对值 最大是$\beta &#x2F; 2$,</li>
<li>$\beta &lt; 0$时类似处理</li>
<li>因此 所有$\beta$, 有$|\frac{\cos(\alpha+\beta)-\cos \alpha}{\beta} + \sin \alpha| \le |beta|$</li>
<li>等于0时左侧补充定义为0</li>
</ul>
</li>
<li>固定t且固定h, $\alpha &#x3D; xt,\beta &#x3D;xh$</li>
<li>$|\frac{f(t+h)-f(t)}{h}-g(t)|\le |h|\int_{-\infty}^{\infty} x^2 e^{-x^2} dx$, h趋于0时 证明了 $f’(t)&#x3D;g(t)$</li>
</ul>
</li>
<li>再前进一步，f分部积分<ul>
<li>$f(t)&#x3D;2\int_{-\infty}^{\infty} xe^{-x^2} \frac{\sin(xt)}{t}dx$</li>
<li>于是$tf(t)&#x3D;-2g(t)$也就有微分方程</li>
<li>$2f’(t)+tf(t)&#x3D;0$</li>
<li>解微分方程以及$f(0)&#x3D;\sqrt{\pi}$ 有$f(t)&#x3D;\sqrt{\pi} exp(-\frac{t^2}{4})$</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>(p-1)!+1 = 0 (mod p) Wilson&#39;s theorem 威尔逊定理</title>
    <url>/Math/Wilson_s_theorem/</url>
    <content><![CDATA[<h1 id="威尔逊定理"><a href="#威尔逊定理" class="headerlink" title="威尔逊定理"></a>威尔逊定理</h1><p>Wilson’s theorem</p>
<h1 id="显然"><a href="#显然" class="headerlink" title="显然"></a>显然</h1><p>当然如果要</p>
<p>(x-1)!+1 是 x 的倍数,那么x一定是质数, 否则, 阶乘部分就是x的倍数</p>
<h1 id="下证-如果是质数-则成立"><a href="#下证-如果是质数-则成立" class="headerlink" title="下证 如果是质数 则成立"></a>下证 如果是质数 则成立</h1><span id="more"></span>

<p>首先 1..p-1 是 模p的所有余项</p>
<p>集合$A &#x3D; {1,2,\cdots,p-1}$</p>
<p>任意$i \in A$ 存在唯一$j \in A, i \cdot j &#x3D; 1 (\bmod p)$ ,j 是 i 的逆元 ( 通过 相同的i,不同的j的乘积不同,又乘积以后也是所有余项,可得存在唯一i的逆元)</p>
<p>令 $x &#x3D; (p-1)!$</p>
<p>那么 $x^2 &#x3D; 1(\bmod p)$</p>
<p>因为 对于任意i, 不论i的逆元是 i本身,还是与i不同,都是唯一存在的,且i不同则j不同,所以 i(1~p-1)与i的逆元两两配对</p>
<p>可得$x &#x3D; 1(\bmod p)$或 $x&#x3D;p-1 (\bmod p)$ , 可以假设 $x &#x3D; p - a$ 然后 $(p-a-1)(p-a+1) &#x3D; 0 (\bmod p)$ 得到</p>
<p>我们也能得到只有 $1^2 &#x3D; 1 (\bmod p), (p-1)^2 &#x3D; 1 (\bmod p)$</p>
<p>$(p-1)! &#x3D; 1\cdot 1 \cdot (p-1) &#x3D; p-1  &#x3D; -1 (mod p)$, 因为除了p-1, 其它的两两配对</p>
<p>得证</p>
]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>牛顿恒等式</title>
    <url>/Math/newton_identities/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>TLDR: 更系统的内容 在 高等代数 7.10 多项式环-对称多项式</p>
<h2 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h2><p>$x&#x3D;1$</p>
<p>$x^2&#x3D;?$</p>
<p>$x^m&#x3D;?, m \ge 1, m \in \mathbb{Z}$</p>
<h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><p>$x+y&#x3D;1$</p>
<p>$x^2+y^2&#x3D;2$</p>
<p>$x^3+y^3&#x3D;?$</p>
<p>$x^m+y^m&#x3D;?, m \ge 2, m \in \mathbb{Z}$</p>
<h2 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h2><p>$x+y+z&#x3D;1$</p>
<p>$x^2+y^2+z^2&#x3D;2$</p>
<p>$x^3+y^3+z^3&#x3D;3$</p>
<p>$x^4+y^4+z^4&#x3D;?$</p>
<p>$x^m+y^m+z^m&#x3D;?, m \ge 3, m \in \mathbb{Z}$</p>
<h2 id="问题n"><a href="#问题n" class="headerlink" title="问题n"></a>问题n</h2><p>$\sum_{i&#x3D;0}^n x_i&#x3D;1$</p>
<p>$\sum_{i&#x3D;0}^n x_i^2&#x3D;2$</p>
<p>$\cdots$</p>
<p>$\sum_{i&#x3D;0}^n x_i^n&#x3D;n$</p>
<p>$\sum_{i&#x3D;0}^n x_i^{n+1}&#x3D;?$</p>
<p>$\sum_{i&#x3D;0}^n x_i^{m}&#x3D;?, m \ge n, m \in \mathbb{Z}$</p>
<hr>
<p>TLDR</p>
<p>例如3阶 已知</p>
<p>$S_i&#x3D;x^i+y^i+z^i$</p>
<p>$c_0&#x3D;n$</p>
<p>$\displaystyle c_k&#x3D;-\frac{\sum_{i&#x3D;1}^k S_i c_{k-i}}{k}, k\le n$</p>
<p>例如 3阶 $X&#x3D;[-\frac{c_1}{c_0},-\frac{c_2}{c_0},-\frac{c_3}{c_0};1,0,0;0,1,0]$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[V,D]=eig(X) % D是对角特征值矩阵，V是特征向量对应位置组成的矩阵</span><br></pre></td></tr></table></figure>

<p>$x^k+y^k+z^k &#x3D; S_k  &#x3D; [1;0;0] * V * D^{k-3} * V^{-1} * [3;2;1]$</p>
<span id="more"></span>

<h2 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR"></a>TLDR</h2><p><a href="https://baike.baidu.com/item/%E7%89%9B%E9%A1%BF%E6%81%92%E7%AD%89%E5%BC%8F/1285642">https://baike.baidu.com/item/%E7%89%9B%E9%A1%BF%E6%81%92%E7%AD%89%E5%BC%8F/1285642</a></p>
<p>$F(x)&#x3D;0$的$n$个根$x_1,\cdots,x_n$</p>
<p>$S_k&#x3D;\sum_{i&#x3D;1}^n x_i^k$</p>
<p>对于 $k &gt; n$, $\sum_{i&#x3D;0}^n C_iS_{k-n}&#x3D;0$ 也就是 按照幂次逐步上升的系数 是常系数</p>
<p>对于 $k\in[1,n], (\sum_{i&#x3D;0}^{k-1}C_iS_{k-i})+kC_k&#x3D;0$ 表明和上面系数对应，且如果知道所有$C_{&lt;i}$可以这样求得$C_i$</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>以上面的问题为例, 我们可以求得 $x+y+z,xy+yz+zx,xyz$的值</p>
<p>也就意味着$0&#x3D;(x-a)(x-b)(x-c)&#x3D;x^3-(a+b+c)x^2+(ab+bc+ca)x-abc$ 这样对应到3次方程的3个根</p>
<p>不妨写作 $C_0x^3+C_1x^2+C_2x+C_3&#x3D;0$</p>
<p>那么同时乘上$x^k$ 有 $C_0x^{3+k}+C_1x^{2+k}+C_2x^{1+k}+C_3x^k&#x3D;0$</p>
<p>$S_k&#x3D;x_0^k+x_1^k+x_2^k$ 是加和关系，所以 $S$也满足这个式子</p>
<hr>
<p>$f(x)&#x3D;\prod_{i}^n (x-a_i)&#x3D;\sum_{i&#x3D;0}^n c_ix^{n-i}$</p>
<p>$f’(x)&#x3D;\sum_i^n \frac{f(x)}{x-a_i}$ 不展开求导</p>
<p>分解 $x^{k+1}f’(x)&#x3D;(\sum_{i&#x3D;0}^k s_ix^{k-i})f(x)+g(x)$ , 这里是按 多项式除法，左边是被除，<code>f(x)</code>是除，f左边是商(系数), g(x)是余数,所以g(x)的最高幂次小于n</p>
<p>$x^{k+1}f’(x)&#x3D;x^{k+1}\sum_{i&#x3D;0}^n \frac{f(x)}{x-a_i}$</p>
<p>$\displaystyle &#x3D;\sum_{i&#x3D;0}^n \frac{x^{k+1}f(x)}{x-a_i}$</p>
<p>$\displaystyle &#x3D;\sum_{i&#x3D;0}^n \frac{x^{k+1}-a_i^{k+1}+a_i^{k+1}}{x-a_i}f(x)$</p>
<p>$\displaystyle &#x3D;\sum_{i&#x3D;0}^n \frac{x^{k+1}-a_i^{k+1}}{x-a_i}f(x)+\sum_{i&#x3D;0}^n \frac{a_i^{k+1}}{x-a_i}f(x)$  这里对应了上面的多项式除法表达式</p>
<p>对于商 $\displaystyle \sum_{i&#x3D;0}^n \frac{x^{k+1}-a_i^{k+1}}{x-a_i} &#x3D; \sum_{i&#x3D;0}^n \sum_{j&#x3D;0}^k a_i^jx^{k-j}$</p>
<p> $\displaystyle &#x3D; \sum_{j&#x3D;0}^k \sum_{i&#x3D;0}^n  a_i^jx^{k-j}$ 交换积分顺序</p>
<p> $\displaystyle &#x3D; \sum_{j&#x3D;0}^k S_j x^{k-j}$ </p>
<p>综上 $\displaystyle x^{k+1}f’(x) &#x3D; (\sum_{j&#x3D;0}^k S_j x^{k-j})f(x) + g(x)$ </p>
<hr>
<p>根据  $\displaystyle x^{k+1}f’(x) &#x3D; (\sum_{j&#x3D;0}^k S_j x^{k-j})f(x) + g(x)$ </p>
<p>研究$x^n$的系数</p>
<p>对于 $k\le n-1$, </p>
<p>左边 $x^{k+1}(c_{k}x^{n-k})’ &#x3D; (n-k)c_kx^{n}$</p>
<p>右侧 $\displaystyle &#x3D; \sum_{i&#x3D;0}^k S_i x^{k-i} c_{k-i}x^{n-(k-i)}$, $g(x)$中不含$x^n$的项</p>
<p> $\displaystyle &#x3D;\sum_{i&#x3D;0}^k S_i c_{k-i}x^{n}$</p>
<p> $\displaystyle (n-k)c_k&#x3D;\sum_{i&#x3D;0}^k S_i c_{k-i}$</p>
<p>注意到 $S_0&#x3D;\sum x_i^0 &#x3D; \sum 1&#x3D;n$,所以右侧$\displaystyle &#x3D; (\sum_{i&#x3D;1}^k S_i c_{k-i}) + nc_k$</p>
<p>综上 $\displaystyle -kc_k&#x3D;\sum_{i&#x3D;1}^k S_i c_{k-i}$</p>
<p>综上 $\displaystyle c_k&#x3D;-\frac{\sum_{i&#x3D;1}^k S_i c_{k-i}}{k}, k\le n-1$</p>
<hr>
<p>类似的$k\ge n$ 同样研究$x^n$的系数</p>
<p>左边&#x3D;0</p>
<p>右侧 $\displaystyle &#x3D; \sum_{i&#x3D;k-n}^k S_i x^{k-i} c_{k-i}x^{n-(k-i)}$, $g(x)$中不含$x^n$的项</p>
<p> $\displaystyle &#x3D;\sum_{i&#x3D;k-n}^k S_i c_{k-i}x^{n}$, 也就是上面的不变的结论</p>
<p>取$k&#x3D;n$有</p>
<p> $\displaystyle \sum_{i&#x3D;0}^n S_i c_{n-i}&#x3D;0$, </p>
<p>注意到$S_0&#x3D;n$,同样满足上面的公式，综上 $\displaystyle c_k&#x3D;-\frac{\sum_{i&#x3D;1}^k S_i c_{k-i}}{k}, k\le n$ 可以算出所有$c_{0\to n}$, (注$(c_{n-0}x^0)’&#x3D;0$ 所以也很自然)</p>
<hr>
<p>回到题目</p>
<p>$c_0&#x3D;n&#x3D;3$</p>
<p>$\displaystyle c_1&#x3D;-\frac{\sum_{i&#x3D;1}^1S_1c_{1-i}}{1}&#x3D;-\frac{1*3}{1}&#x3D;-3$</p>
<p>$\displaystyle c_2&#x3D;-\frac{\sum_{i&#x3D;1}^2S_1c_{2-i}}{2}&#x3D;-\frac{1*(-3)+2*3}{2}&#x3D;-\frac{3}{2}$</p>
<p>$\displaystyle c_3&#x3D;-\frac{\sum_{i&#x3D;1}^3S_1c_{3-i}}{3}&#x3D;-\frac{1*(-3&#x2F;2)+2*(-3)+3*3}{3}&#x3D;-\frac{1}{2}$</p>
<p>$c_0S_k+c_1S_{k-1}+c_2S_{k-2}+c_3S_{k-3}&#x3D;0$</p>
<p>$S_k&#x3D;S_{k-1}+\frac{1}{2}S_{k-2}+\frac{1}{6}S_{k-3}$</p>
<p>$x^4+y^4+z^4&#x3D;1 * 3+ \frac{1}{2} * 2 +\frac{1}{6} * 1 &#x3D; \frac{25}{6}$</p>
<p>$x^5+y^5+z^5&#x3D;1 * \frac{25}{6}+ \frac{1}{2} * 3 +\frac{1}{6} * 2 &#x3D; 6$</p>
<p>$[S_k;S_{k-1};S_{k-2}] &#x3D; [1,1&#x2F;2,1&#x2F;6;1,0,0;0,1,0] * [S_{k-1};S_{k-2};S_{k-3}]$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X=[1,1/2,1/6;1,0,0;0,1,0];</span><br><span class="line">[V,D] = eig(X)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">D =</span><br><span class="line"></span><br><span class="line">   1.4308 + 0.0000i   0.0000 + 0.0000i   0.0000 + 0.0000i</span><br><span class="line">   0.0000 + 0.0000i  -0.2154 + 0.2647i   0.0000 + 0.0000i</span><br><span class="line">   0.0000 + 0.0000i   0.0000 + 0.0000i  -0.2154 - 0.2647i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">V = 这里V不是正交矩阵，但是 是特征向量矩阵</span><br><span class="line"></span><br><span class="line">   0.7609 + 0.0000i   0.0223 + 0.1073i   0.0223 - 0.1073i</span><br><span class="line">   0.5318 + 0.0000i   0.2027 - 0.2490i   0.2027 + 0.2490i</span><br><span class="line">   0.3717 + 0.0000i  -0.9407 + 0.0000i  -0.9407 + 0.0000i</span><br><span class="line"></span><br><span class="line">[S_k;S_&#123;k-1&#125;;S_&#123;k-2&#125;]  = V * D^&#123;k-3&#125; * V^&#123;-1&#125; * [3;2;1]</span><br></pre></td></tr></table></figure>


<p>$x^k+y^k+z^k &#x3D; S_k  &#x3D; [1;0;0] * V * D^{k-3} * V^{-1} * [3;2;1]$</p>
]]></content>
      <categories>
        <category>代数</category>
      </categories>
      <tags>
        <tag>高等代数</tag>
        <tag>线性代数</tag>
        <tag>newton_identities</tag>
      </tags>
  </entry>
  <entry>
    <title>数论基础 一 整数的可除性</title>
    <url>/Math/number_theory_1/</url>
    <content><![CDATA[<p>ISBN 9787040364729</p>
<span id="more"></span>

<h1 id="整除，带余数除法"><a href="#整除，带余数除法" class="headerlink" title="整除，带余数除法"></a>整除，带余数除法</h1><div class="note no-icon success"><p>定义1: $a,b$是整数,$b\ne 0$, 若存在整数$c$使得$a&#x3D;bc$,则$b|a$,否则$b \nmid a$</p>
</div>

<p>性质:</p>
<ul>
<li>$b\ne 0$,$c$唯一</li>
<li>$b|a,a|e \Rightarrow b|e$</li>
<li>$b\ne 0$,所有的倍数为$0,\pm b,\pm 2b,\pm 3b,\cdots$</li>
<li>$a\ne 0,b|a \Rightarrow |b| \le |a|$</li>
<li>$b|a_1,b|a_2 \Rightarrow b|m_1a_1+m_2a_2, (\forall m_1,m_2)$</li>
</ul>
<div class="note no-icon success"><p>定义2: $p &gt; 1$且仅有$1|p,p|p$,则$p$为素数，自然数分为$1$,素数,合数</p>
</div>

<p>定理1: $p | d \Rightarrow p\le \sqrt{|d|}$</p>
<p>定理2: 素数无穷多个(反正法假设有最大,构造$\prod p_i +1$)</p>
<p>定理3: $a&gt;1$则$a$可以被表示成多个素数之积 每次最小因子必定素数，递降法</p>
<p>定理4(带余数除法): $a,b &gt;0$存在唯一一对$(q,r),r\in[0,b)$使得$a&#x3D;qb+r$, 通过对数轴$[kb,(k+1)b)$的切割</p>
<p>定理5(算术基本定理): $p|ab,p \nmid a \Rightarrow p | b$,其中$p$是质数</p>
<p>定理5.1(算术基本定理): $p|a_1a_2\cdots$其中$p$是质数,则存在某个$i$让$p | a_i$</p>
<p>定理6(算术基本定理): $n&gt;1$ $n$有素数的唯一分解(同定理3), 推论$n$的因子的对应质数的幂次不大于$n$中对应质数的幂次</p>
<h1 id="最大公约数-最小公倍数"><a href="#最大公约数-最小公倍数" class="headerlink" title="最大公约数,最小公倍数"></a>最大公约数,最小公倍数</h1><div class="note no-icon success"><p>定义3: 对于$a_1,a_2,\cdots a_k$最大的$d$,满足$\forall i, d|a_i$, $d$称作为最大公约数,记作$\gcd(a_1,a_2,\cdots,a_k) &#x3D; d$,当$d&#x3D;1$时称作互素</p>
</div>

<div class="note no-icon success"><p>定义4: 对于$a_1,a_2,\cdots a_k$最小的$l$,满足$\forall i, a_i|l$, $l$称作为最小公倍数,记作$\mathrm{lcm}(a_1,a_2,\cdots,a_k) &#x3D; l$</p>
</div>

<p>定理7: $b_1,\cdots,b_k$的任意公倍数,都是最小公倍数的倍数,(反证法 $l’&#x3D;kl+r,r\in[1,l)$ 则$r$小于$l$也是公倍数 矛盾)</p>
<p>推论3: $\mathrm{lcm}(a_1,\cdots,a_n,b_1,\cdots,b_m) &#x3D; \mathrm{lcm}(\mathrm{lcm}(a_1,\cdots,a_n),\mathrm{lcm}(b_1,\cdots,b_m))$, (通过左右互为倍数证明)</p>
<p>定理8: $a_1,\cdots,a_k$的任意公共因数一定是它们最大公因数的因数,(反证$d &lt; \mathrm{lcm}(d_1,d) | a_i$)</p>
<p>推论4: $\mathrm{gcd}(a_1,\cdots,a_n,b_1,\cdots,b_m) &#x3D; \mathrm{gcd}(\mathrm{gcd}(a_1,\cdots,a_n),\mathrm{gcd}(b_1,\cdots,b_m))$, (通过左右互为倍数证明)</p>
<p>定理9: $m &gt; 0, \mathrm{lcm}(mb_1,mb_2)&#x3D; m \cdot \mathrm{lcm}(b_1,b_2)$, 同样是左右互为倍数来证明</p>
<p>推论5: $d|b_1,d|b_2,\mathrm{lcm}(\frac{b_1}{d},\frac{b_2}{d})&#x3D;\frac{1}{d}\mathrm{lcm}(b_1,b_2)$</p>
<p>定理10: $m&gt;0,\mathrm{gcd}(mb_1,mb_2)&#x3D; m \cdot \mathrm{gcd}(b_1,b_2)$</p>
<p>推论6: $d|b_1,d|b_2,\mathrm{gcd}(\frac{b_1}{d},\frac{b_2}{d})&#x3D;\frac{1}{d}\mathrm{gcd}(b_1,b_2)$</p>
<p>定理11: $\mathrm{gcd}(a,b)\mathrm{lcm}(a,b)&#x3D;ab$, 直接拆成质数表示最好证明</p>
<p>定理12(辗转相除法的基础): $a,b,r$不全为$0$,则$a&#x3D;qb+r,r\in[0,b)$则$\mathrm{gcd}(a,b)&#x3D;\mathrm{gcd}(b,r)$, (通过任取因数左右互推证明), 推论$\mathrm{gcd}(a,b) | (ax+by)$</p>
<p>定理13: $a,b$不全为$0$, $(x_0,y_0)$让$ax+by$取到最小正整数, 则$\mathrm{gcd}(a,b) &#x3D; ax_0+by_0$, 又是两侧互为倍数的证明, </p>
<p>推论7: 上面证明了总存在$x_0,y_0$让$ax+by$取到$\mathrm{gcd}(a,b)$</p>
<p>定理14: $\mathrm{gcd}(a,c)&#x3D;1$则$\mathrm{gcd}(ab,c)&#x3D;\mathrm{gcd}(b,c)$ 把右侧最大公约数拆出来证明</p>
<p>推论8: $\mathrm{gcd}(a,b)&#x3D;1 \Rightarrow \mathrm{gcd}(ab,d)&#x3D;\mathrm{gcd}(a,d)\mathrm{gcd}(b,d)$，把右侧最大公约数拆出来证明</p>
<p>定理15: $\mathrm{gcd}(a,c)&#x3D;1,c|ab \Rightarrow c|b$, 用定理14</p>
<h1 id="辗转相除法-Euclid-算法"><a href="#辗转相除法-Euclid-算法" class="headerlink" title="辗转相除法, Euclid 算法"></a>辗转相除法, Euclid 算法</h1><p>就是基于定理12不断下降</p>
<p>$(P_1,Q_1)&#x3D;(1,q_1), P_1a-Q_1b&#x3D;(-1)^{1-1}r_1$, 已知$r_i &#x3D; q_{i+2}r_{i+1}+r_{i+2}$</p>
<p>希望有 $P_ia-Q_ib&#x3D;(-1)^{i-1}r_i$</p>
<p>直接展开</p>
<p>$P_ia-Q_ib&#x3D;(-1)^{i-1}r_i &#x3D; (-1)^{i-1} (q_{i+2}r_{i+1}+r_{i+2})$</p>
<p>$&#x3D; (-1)^{i-1} (q_{i+2}(P_{i+1}a-Q_{i+1}b)(-1)^i+(P_{i+2}a-Q_{i+2}b)(-1)^{i+1})$</p>
<p>$&#x3D; (P_{i+2}-q_{i+2}P_{i+1})a-(Q_{i+2}-q_{i+1}Q_{i+1})b$</p>
<p>所以对应相等</p>
<p>$P_i &#x3D; q_iP_{i-1}+P_{i-2}$</p>
<p>$Q_i &#x3D; q_iQ_{i-1}+Q_{i-2}$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回的 [x,y,z] 满足 a*x+b*y=z=gcd(a,b)</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">array&lt;T,3&gt; <span class="title">exgcd</span><span class="params">(T a,T b)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(b==<span class="number">0</span>) <span class="keyword">return</span> &#123;<span class="number">1</span>,<span class="number">0</span>,a&#125;;</span><br><span class="line">  <span class="keyword">auto</span> [x,y,z] = <span class="built_in">exgcd</span>(b,a%b);</span><br><span class="line">  <span class="keyword">return</span> &#123;y,x-(a/b)*y,z&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> a=<span class="number">31</span>,b=<span class="number">7</span>;</span><br><span class="line">  <span class="keyword">auto</span> [x,y,z] = <span class="built_in">exgcd</span>(a,b);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d*%d+%d*%d=%d\n&quot;</span>,a,x,b,y,z);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注: 这里的$(x,y)$不是唯一的,因为每当$x$增加$\frac{b}{\mathrm{gcd}(a,b)}$,对应$y$同时减少$\frac{a}{\mathrm{gcd}(a,b)}$即可,等式依然成立</p>
<h1 id="一次不定方程-ax-by-x3D-c"><a href="#一次不定方程-ax-by-x3D-c" class="headerlink" title="一次不定方程 $ax+by&#x3D;c$"></a>一次不定方程 $ax+by&#x3D;c$</h1><p>定理17 $\gcd(a,b) &#x3D; c$则有解,$(x_0,y_0)$是一组解则$(x_0+\frac{b}{\mathrm{gcd}(a,b)}t,y_0-\frac{a}{\mathrm{gcd}(a,b)}t)$是所有解</p>
<p>推论9: 和$\frac{a}{\mathrm{gcd}(a,b)}x+\frac{b}{\mathrm{gcd}(a,b)}y&#x3D;\frac{c}{\mathrm{gcd}(a,b)}$ 同解</p>
<h1 id="函数-x-x"><a href="#函数-x-x" class="headerlink" title="函数[x],{x}"></a>函数<code>[x]</code>,<code>&#123;x&#125;</code></h1><p>设$x$为任意实数, $[x] \le x$表示不超过$x$的最大整数,$\lbrace x\rbrace &#x3D; x-[x]$</p>
<p>性质</p>
<ul>
<li>$x\ge y \Rightarrow [x]\ge [y]$</li>
<li>$x-1&lt;[x]\le x, 0\le \lbrace x \rbrace &lt; 1$</li>
<li>$n$为整数,$[n+x]&#x3D;n+[x],\lbrace n+x \rbrace &#x3D; \lbrace x \rbrace$</li>
</ul>
<p>引理1: 实数$x &gt; 0$,$a$正整数,$[\frac{x}{a}]$个不超过$x$且是$a$的倍数的整数, (找a的最大整数倍)</p>
<p>定理18: 在$n!$的标准分解式中,素数$p\le n$的指数$\displaystyle  &#x3D; [\frac{n}{p}]+[\frac{n}{p^2}]+\cdots&#x3D;\sum_{r&#x3D;1}^{\infty} [\frac{n}{p^r}]$</p>
<p>推论10(Legendre’s formula): $\displaystyle n!&#x3D;\prod_{p\le n} p^{\sum_{r&#x3D;1}^{\infty} [\frac{n}{p^r}]}$</p>
<p>定理19: $\prod_{i&#x3D;1}^{k} \frac{a+i}{i}$ 必定是整数, (一个是这就是$\binom{a+k}{k}$,用上面相关的就是直接讨论$\le k$质因子的幂次,$[\frac{a+k}{p^r}]\ge [\frac{a}{p^r}]+[\frac{k}{p^r}]$)</p>
<p>推论11: $n&#x3D;s_1+s_2+\cdots+s_k, \frac{n!}{s_1!s_2!\cdots s_k!}$是整数, (一样)</p>
<p>定理20: $p$为素数,则任意$x$有$p|x^p-x$, (归纳$x$,$x&#x3D;0$时成立,$(x+1)^p-(x+1) &#x3D; x^p-x + \binom{p}{\cdots}(\cdots)$</p>
<h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="8-有无穷多形如4m-3的素数，有无穷多形如6m-5的素数"><a href="#8-有无穷多形如4m-3的素数，有无穷多形如6m-5的素数" class="headerlink" title="8. 有无穷多形如4m+3的素数，有无穷多形如6m+5的素数"></a>8. 有无穷多形如4m+3的素数，有无穷多形如6m+5的素数</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>和证明素数无限多一样的想法，如果有限个则全部乘起来，</p>
<p>4m+3,讨论末尾是+3还是+1,如果是+3,则再+4,如果是+1,则再+2, 注意到得到的数是4k+3形式的,又和已知的都互质，但是如果分解不可能全分解成4k+1的，因子它会分解出一个4k+3形式的质数</p>
<p>6m+5,讨论末尾是+5还是+1,如果是+5,则再+6,如果是+1,则再+4, 一样的(6m+1)形式的乘积也得不到6m+5,</p>

</details>

<h2 id="19-2-nmid-m-Rightarrow-gcd-2-m-1-2-n-1-x3D-1"><a href="#19-2-nmid-m-Rightarrow-gcd-2-m-1-2-n-1-x3D-1" class="headerlink" title="19. $2 \nmid m \Rightarrow \gcd(2^m-1,2^n+1)&#x3D;1$"></a>19. $2 \nmid m \Rightarrow \gcd(2^m-1,2^n+1)&#x3D;1$</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>令$d &#x3D; gcd(2^m-1,2^n+1)$, 若$d \ne 1$,则$d &#x3D; 2k+1$</p>
<p>$2^m\equiv 1 \pmod d$</p>
<p>$2^n \equiv -1 \pmod d$</p>
<p>$2^{\mathrm{gcd}(m,n)} &#x3D; 2^{\mathrm{gcd}(m,2n)} &#x3D; 2^{xm+2ny} &#x3D; (2^{m})^{x}(2^{2n})^y \equiv 1^x1^y \equiv 1 \pmod d$</p>
<p>$2^n &#x3D; (2^{\mathrm{gcd}(m,n)})^{\frac{n}{\mathrm{gcd}(m,n)}} \equiv 1^{\frac{n}{\mathrm{gcd}(m,n)}}\equiv 1 \pmod d$</p>
<p>对于$d&#x3D;2k+1$矛盾</p>

</details>

<h2 id="27-证明-frac-2m-2n-m-n-m-n-是整数"><a href="#27-证明-frac-2m-2n-m-n-m-n-是整数" class="headerlink" title="27. 证明$\frac{(2m)!(2n)!}{m!n!(m+n)!}$是整数"></a>27. 证明$\frac{(2m)!(2n)!}{m!n!(m+n)!}$是整数</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>还是要用到Legendre’s formula, 也就是要证明$v_p((2m)!(2n)!)-v_p(m!n!(m+n)!)\ge 0$ for any prime $p$, </p>
<p>也就是要证明 $[2x]+[2y] \ge [x]+[y]+[x+y]$</p>
<p>$[2([x]+\lbrace x\rbrace)]+[2([y]+\lbrace y\rbrace)] \ge [[x]+\lbrace x\rbrace]+[[y]+\lbrace y\rbrace]+[[x]+\lbrace x\rbrace+[y]+\lbrace y\rbrace]$</p>
<p>$[2\lbrace x\rbrace]+[2\lbrace y\rbrace] \ge [\lbrace x\rbrace]+[\lbrace y\rbrace]+[\lbrace x\rbrace+\lbrace y\rbrace]$</p>
<p>$[2\lbrace x\rbrace]+[2\lbrace y\rbrace] \ge [\lbrace x\rbrace+\lbrace y\rbrace]$, 右侧取$0$则左侧始终成立,右侧取$1$,至少一个$\ge \frac{1}{2}$, 同样成立</p>

</details>

<h2 id="28-k-为正整数-n-可以唯一表示成-n-x3D-lm-k-其中-l-没有任何-k-次方因子"><a href="#28-k-为正整数-n-可以唯一表示成-n-x3D-lm-k-其中-l-没有任何-k-次方因子" class="headerlink" title="28. $k$为正整数,$n$可以唯一表示成$n&#x3D;lm^k$,其中$l$没有任何$k$次方因子"></a>28. $k$为正整数,$n$可以唯一表示成$n&#x3D;lm^k$,其中$l$没有任何$k$次方因子</h2><p>$p$的幂次$w$唯一表示 $w &#x3D; qk+r$</p>
<p>28.2 实数$A &gt; 0$则$\displaystyle \sum_{1\le z \le A}’ [ \sqrt[k]{\frac{A}{z}}] &#x3D; [A]$, 其中$\sum’$表示无$k$次方因子的$z$求和</p>
<details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>首先$A&#x3D;zm^k$ 才会让左侧内部 $\displaystyle \sqrt[k]{\frac{A}{z}}$为正整数, 因此$\displaystyle [\sqrt[k]{\frac{A}{z}}]&#x3D;[\sqrt[k]{\frac{[A]}{z}}]$ (A与它的整部之间不会有其它的值让整个为正整数, 或者说对于给定$k$, 它的整部不变时对应的A的区间的端点都是整数,且除了最初的$z$,后续的都是)</p>
<p>$A&#x3D;0$时显然, 所以只需要证明对于 任意正整数$A$, 有$\displaystyle \sum_{1\le z \le A}’ [ \sqrt[k]{\frac{A}{z}}] &#x3D; A$</p>
<p>对$A$进行归纳,</p>
<p>当$A &#x3D; 1$时, 左侧$&#x3D;1&#x3D;$右侧, 成立</p>
<p>若$A+1$ 的质数最高幂次 $&lt; k$, 对于$z \le A$时有$\displaystyle [\sqrt[k]{\frac{A}{z}}]&#x3D;[\sqrt[k]{\frac{A+1}{z}}]$, (和上面把有理数变整数一样的原理)</p>
<p>$\displaystyle A+1 &#x3D; \sum_{1\le z \le A}’ [ \sqrt[k]{\frac{A}{z}}] + [ \sqrt[k]{\frac{A+1}{A+1}}] &#x3D; \sum_{1\le z \le A}’ [ \sqrt[k]{\frac{A+1}{z}}] + [ \sqrt[k]{\frac{A+1}{A+1}}] &#x3D; \sum_{1\le z \le A+1}’ [ \sqrt[k]{\frac{A+1}{z}}]$</p>
<p>若$A+1$ 的质数最高幂次 $\ge k$, 则$A+1 &#x3D; z_0m^k$(唯一表示),且$z_0 &lt; A$</p>
<p>对于$z_0$有 $\displaystyle [\sqrt[k]{\frac{A}{z_0}}]+1&#x3D;[\sqrt[k]{\frac{A+1}{z_0}}]$<br>对于其它$z \ne z_0, z \le A$,有 $\displaystyle [\sqrt[k]{\frac{A}{z_0}}]&#x3D;[\sqrt[k]{\frac{A+1}{z_0}}]$</p>
<p>$\displaystyle A+1 &#x3D; \sum_{1\le z \le A, z\ne z_0}’ [ \sqrt[k]{\frac{A}{z}}] + [ \sqrt[k]{\frac{A}{z_0}}]+1 &#x3D; \sum_{1\le z \le A, z\ne z_0}’ [ \sqrt[k]{\frac{A+1}{z}}] + [ \sqrt[k]{\frac{A+1}{z_0}}] &#x3D; \sum_{1\le z \le A+1}’ [ \sqrt[k]{\frac{A+1}{z}}]$</p>

</details>

<h2 id="30-Beatty定理，1926-alpha-beta-gt-0-数列-alpha-x-alpha-y-没有公共正整数-且组成全体自然数的充要条件-alpha-beta-无理数且-frac-1-alpha-frac-1-beta-x3D-1"><a href="#30-Beatty定理，1926-alpha-beta-gt-0-数列-alpha-x-alpha-y-没有公共正整数-且组成全体自然数的充要条件-alpha-beta-无理数且-frac-1-alpha-frac-1-beta-x3D-1" class="headerlink" title="30(Beatty定理，1926). $\alpha,\beta &gt; 0$ 数列$[\alpha x],[\alpha y]$ 没有公共正整数 且组成全体自然数的充要条件$\alpha,\beta$无理数且$\frac{1}{\alpha}+\frac{1}{\beta}&#x3D;1$"></a>30(Beatty定理，1926). $\alpha,\beta &gt; 0$ 数列$[\alpha x],[\alpha y]$ 没有公共正整数 且组成全体自然数的充要条件$\alpha,\beta$无理数且$\frac{1}{\alpha}+\frac{1}{\beta}&#x3D;1$</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p><a href="https://proofwiki.org/wiki/Beatty%27s_Theorem">https://proofwiki.org/wiki/Beatty%27s_Theorem</a></p>
<p>$\Leftarrow :$</p>
<p>反正法: 若存在$k&#x3D;[\alpha x]&#x3D;[\beta y]$</p>
<p>即$k &lt; \alpha x &lt; k+1,k &lt; \beta y &lt; k+1$</p>
<p>$k&#x3D;\frac{k}{\alpha} + \frac{k}{\beta} &lt; x+y &lt; \frac{k+1}{\alpha} + \frac{k+1}{\beta} &#x3D; k+1$</p>
<p>矛盾.</p>
<p>若有$k$同时无法被表示, 找$[\alpha (x-1)] &lt; k &lt; [\alpha x]$</p>
<p>即 $\alpha x &gt; k+1,\alpha (x-1) &lt; k$</p>
<p>$\alpha (x-1) &lt; k &lt; \alpha x-1$</p>
<p>同理 $\beta (y-1) &lt; k h&lt; \beta y-1$</p>
<p>$x+y-2&#x3D;x-1+y-1 &lt; k &lt; x-\frac{1}{\alpha} + y-\frac{1}{\beta} &#x3D; x+y-1$</p>
<p>矛盾.</p>
<p>证必</p>
<p>$\Rightarrow :$</p>
<p>设$\alpha &lt; \frac{p}{q}$则,$[\alpha] &lt; [2\alpha] &lt; \cdots &lt; [q\alpha] &lt; p$ 因为要两两不等所以$[1,p-1]$ 中至少(小于关系并没有描绘精确程度)出现$q$个</p>
<p>所以$[1,p-1]$中至多有$p-1-q$个在是$[\beta y]$中,$(p-q)\beta$ 一定在$[1,p-1]$外</p>
<p>那么$(p-q)\beta \ge [(p-q)\beta] \ge p$ 即$\beta \ge \frac{p}{p-q}$</p>
<p>那么极限保号$\displaystyle \beta \ge \lim_{\frac{p}{q}\to \alpha} \frac{p}{p-q}&#x3D;\lim_{\frac{p}{q}\to \alpha} \frac{\frac{p}{q}}{\frac{p}{q}-1} &#x3D; \frac{\alpha}{\alpha-1}$<br>从另一侧$\alpha &gt; \frac{p}{q}$, 极限也会得到$\beta \le \frac{\alpha}{\alpha-1}$, 于是有$\frac{1}{\alpha}+\frac{1}{\beta}&#x3D;1$</p>
<p>证无理数: $[q\frac{p}{q}]&#x3D;p&#x3D;[(p-q)\frac{p}{p-q}]$</p>

</details>]]></content>
      <categories>
        <category>数论</category>
        <category>数论基础</category>
      </categories>
      <tags>
        <tag>数论基础</tag>
        <tag>辗转相除</tag>
        <tag>gcd</tag>
        <tag>lcm</tag>
        <tag>归纳法</tag>
        <tag>exgcd</tag>
        <tag>Beatty’s theorem</tag>
        <tag>Legendre’s formula</tag>
      </tags>
  </entry>
  <entry>
    <title>数论基础 二 数论函数</title>
    <url>/Math/number_theory_2/</url>
    <content><![CDATA[<p>ISBN 9787040364729</p>
<span id="more"></span>

<h1 id="数论函数举例"><a href="#数论函数举例" class="headerlink" title="数论函数举例"></a>数论函数举例</h1><div class="note no-icon success"><p>定义1: 在全体正整数上定义的函数是数论函数</p>
</div>

<p>$u(n)&#x3D;1 , n\ge 1$, $u\circ U &#x3D; [x]$</p>
<p>$e(n)&#x3D;n , n\ge 1$</p>
<p>$\displaystyle I(n)&#x3D;\left\lbrace \begin{array}{lc} 1, n &#x3D; 1\\ 0,n&gt;1 \end{array}\right.$,$I&#x3D;\mu * u$</p>
<p>$\displaystyle d(n)&#x3D;\sum_{d|n} 1 &#x3D;n$的质数因子的幂次+1的乘积(因子个数函数), $d&#x3D;u * u$, 也就有了$u&#x3D;d * \mu$</p>
<p>$\Omega(n) &#x3D;$质数因子幂次和(重复的统计质因子个数)</p>
<p>$\omega(n) &#x3D;$不同质数因子个数</p>
<p>$\displaystyle \sigma_\lambda(n)&#x3D;\sum_{d|n} d^\lambda$ 正除数的幂和函数$\sigma &#x3D; e * u$</p>
<p>$\displaystyle \phi(n)&#x3D;\sum_{1\le d \le n,\gcd(d,n)&#x3D;1} 1$ 所有不超过$n$和$n$互素的正整数个数,Euler函数,$\phi&#x3D;\mu * e&#x3D;n\prod_{d|n}(1-\frac{1}{p})$</p>
<p>$\mathrm{M\ddot{o}bius}$函数 $\mu(n) &#x3D;\left\lbrace \begin{array}{lc}1,&amp; n&#x3D;1 \\ (-1)^s, &amp; n&#x3D;p_1p_2\cdots p_s, p_i&lt;p_{i+1} \\ 0,&amp; \text{others}\end{array}\right.$</p>
<p>$\mathrm{Mangoldt}$函数$\Lambda(n)&#x3D;\left\lbrace\begin{array}{lc} \log p,&amp;n&#x3D;p^k,k\ge 1 \\ 0, &amp;others\end{array}\right.$</p>
<p>$\displaystyle \log n&#x3D;\sum_{d|n}\Lambda(d)$, 这样得到另一种表达方式$\displaystyle \Lambda(n)&#x3D;\sum_{d|n}\mu(d)\log{\frac{n}{d}}&#x3D;\mu * \log&#x3D;-\sum_{d|n}\mu(d)\log d$</p>
<p>$\mathrm{Liouville}$函数$\lambda(n) &#x3D; (-1)^{\Omega(n)}&#x3D; [n\text{ is square}] * \mu$</p>
<h1 id="Dirichlet-乘积-x2F-卷积"><a href="#Dirichlet-乘积-x2F-卷积" class="headerlink" title="Dirichlet 乘积 &#x2F;卷积"></a>Dirichlet 乘积 &#x2F;卷积</h1><div class="note no-icon success"><p>定义2: $f(n),g(n)$是两个数论函数,$h&#x3D;f * g$称作Dirichlet 乘积&#x2F;卷积</p>
<p>$\displaystyle h(n) &#x3D; \sum_{d|n}f(d)g(\frac{n}{d})$, 从理解上就是f和g中x相乘为n的对应y的乘积的和, 所以也可以写成$(f * g)(n) &#x3D;\sum_{ab &#x3D; n}f(a)g(b)$
  </p>
</div>

<p>定理1: Dirichlet乘积满足 交换率$f * g &#x3D; g * f$和结合率$(f * g)* h &#x3D; f * (g * h)$</p>
<p>一个重要的公式(算法竞赛里拆$\gcd(a,b)&#x3D;1$会使用) $I &#x3D; \mu * u &#x3D; \mu * 1 &#x3D; \sum_{d|n} \mu(d) &#x3D; \left\lbrace \begin{array}{lc} 1,&amp;n&#x3D;1\\ 0, &amp; n&gt;1 \end{array}\right.$<br>证明$\sum_{d|n} \mu(d) &#x3D; \mu(1)+\mu(p_1)+\cdots+\mu(p_s)+\cdots+\mu(p_1p_2)+\cdots+\mu(p_1p_2\cdots p_s)$ </p>
<p>$&#x3D; 1\binom{s}{0}+(-1)^1\binom{s}{1}+\cdots+(-1)^s\binom{s}{s} &#x3D; (1-1)^s$</p>
<div class="note no-icon success"><p>定义3: 若 $I &#x3D; f * g$ 则$f$和$g$互为Dirichlet的逆</p>
</div>

<p>定理2: $f * I &#x3D; I * f &#x3D; f$</p>
<div class="note no-icon success"><p>定义4: $F&#x3D;f*u$ 则$F$称作$f$的$\mathrm{M\ddot{o}bius}$变换, $F(n) &#x3D; \sum_{d|n} f(d)$, 如$d&#x3D;u * u, I &#x3D; \mu * u$</p>
</div>

<p>定理3(这也就是算法里常见的Mobius反演): $F&#x3D;f * u \Rightarrow f&#x3D;F * \mu$, $F(n) &#x3D; \sum_{d|n} f(d) \Rightarrow f(n)&#x3D;\sum_{d|n} F(d)\mu(\frac{n}{d})$, 反向一样的推法</p>
<p>证明$F * \mu &#x3D; (f * u) * \mu &#x3D; f * (u * \mu) &#x3D; f * I &#x3D; f$</p>
<p>例1: 证明$e &#x3D; \phi * u$, 即要证明$n&#x3D;\sum_{d|n}\phi(d)$, 因为根据定义$\phi(n)&#x3D;\sum_{d|n} \mu(d)\frac{n}{d}$即$\phi &#x3D; \mu * e$</p>
<p>例2: 证明$\log n &#x3D; \Lambda * u$, 即要证明$\log n&#x3D;\sum_{d|n}\Lambda(d)$, 展开$d$即可,这样得到另一种表达方式$\Lambda(n)&#x3D;\sum_{d|n}\mu(d)\log{\frac{n}{d}}$</p>
<h1 id="可乘函数"><a href="#可乘函数" class="headerlink" title="可乘函数"></a>可乘函数</h1><blockquote>
<p>可乘的一个好处是只需要计算$f(p^\alpha)$,以后再乘起来,证明时对于可乘函数也只需要证明质数幂次的情况<br>完全可乘的一个好处是能快速得到Dirichlet逆$f^{-1}(n)&#x3D;\mu(n)f(n)$</p>
</blockquote>
<div class="note no-icon success"><p>定义5: 定义在全体自然数上，且不恒等于零的数论函数,若$f(mn)&#x3D;f(m)f(n), \gcd(m,n)&#x3D;1$,则称它为可乘&#x2F;积性函数,若没有$\gcd$的限制，全部满足$f(mn)&#x3D;f(m)f(n)$则称作完全&#x2F;绝对 可乘函数</p>
</div>

<p>例3: $\mu(n),d(n)$为可乘函数与,$\mathrm{Liouville}$函数,$e^\lambda(n)&#x3D;n^{\lambda},I(n)$ 为完全可乘函数</p>
<p>定理4: 可乘函数$f(n)$有如下性质</p>
<ul>
<li>$f(1)&#x3D;1$</li>
<li>$f(n)&#x3D;f(p_1^{\alpha_1})f(p_2^{\alpha_2})\cdots f(p_s^{\alpha_s})$</li>
<li>$f(n)$完全可乘充要条件$\forall p,k\ge 1, f(p^k)&#x3D;f^k(p)$, 相当于解除了gcd限制</li>
<li>$f * u$($f$的Mobius变换)依然是可乘函数</li>
</ul>
<p>推论1: $f(n)$可乘, $F(n)&#x3D;\sum_{d|n} f(d) &#x3D; \prod_{p_i|n} (1+f(p_i)+\cdots+f(p_i^{\alpha_i}))$</p>
<p>又此$\sum_{d|n}\mu(d)f(d) &#x3D; \prod_{p_i|n} (1+\mu(p_i)f(p_i)+\cdots+\mu(p_i^{\alpha_i})f(p_i^{\alpha_i})) &#x3D; \prod_{p_i|n} (1-f(p_i))$</p>
<p>因此$\phi$另一个表达$\displaystyle \phi(n)&#x3D;\sum_{d|n}\mu(d)\frac{n}{d}&#x3D;n\prod_{p|n}(1-\frac{1}{p})$</p>
<p>类似的 $f(n)$完全可乘, $F(n)&#x3D;\sum_{d|n} f(d) &#x3D; \prod_{p_i|n} (1+f(p_i)+\cdots+f^{\alpha_i}(p_i))$</p>
<p>例4: $\sigma(n)&#x3D;\sum_{d|n} d&#x3D;\frac{p_1^{a_1+1}-1}{p_1-1}\frac{p_2^{a_2+1}-1}{p_2-1}\cdots \frac{p_s^{a_s+1}-1}{p_s-1}$, 也就是$\sigma &#x3D; e * u$</p>
<p>定理5: $f(n)$为可乘函数,则$f(\gcd(m,n))f(\mathrm{lcm}(m,n))&#x3D;f(m)f(n)$, 也就是不同p之间互不影响，相同p相当于min和max了</p>
<p>定理6: 若$f,g$可乘,则$f * g$可乘,若$f,f * g$可乘,则$g$可乘</p>
<p>正向的，相当于上面Mobius保持可乘性只是$g &#x3D; u$的特例， 即证明$(f * g)(mn)&#x3D;(f * g)(m)(f * g)(n), \gcd(m,n) &#x3D; 1$, 同样拆$d&#x3D;d_1d_2$即可</p>
<p>对于后面的,用反证法, 若$f$不可乘 &#x3D;&gt; 存在$f(mn)\ne f(n)f(m),\gcd(m,n)&#x3D;1$, 选最小mn, 即$&lt;mn$时还是可乘，这样同样做拆解，会唯一多出$f(mn)-f(n)f(m)$导致而不等</p>
<p>推论2: $F&#x3D;f * \mu$, 根据上面$F$可乘,则$f$也可乘</p>
<p>定理7: $f$为$f(1)\ne 0$的数论函数, 一定存在唯一的DIrichlet逆$f^{-1}$</p>
<p>并且由$f^{-1}(1) &#x3D; \frac{1}{f(1)},f^{-1}(n) &#x3D; \frac{-1}{f(1)}\sum_{d|n,d&lt;n} f(\frac{n}{d})f^{-1}(d),n &gt; 1$得出</p>
<p>也就是要证明$f * f^{-1} &#x3D; I$只有唯一解, 直接归纳从n&#x3D;1向上($1&#x3D;I(1)&#x3D;f(1)f^{-1}(1)&#x3D;1,0&#x3D;I(n)&#x3D;\sum_{d|n}f(\frac{n}{d})f^{-1}(d),n&gt;1$)</p>
<p>推论3: 可乘函数必定有Dirichlet逆存在,且也是可乘函数</p>
<p>定理8: $f(1) \ne 0,g(1)\ne 0$, $(f * g)^{-1} &#x3D; f^{-1} * g^{-1}$</p>
<p>$h &#x3D; f*g$可乘</p>
<p>$h * h^{-1} &#x3D; I$</p>
<p>$g^{-1} * f^{-1} &#x3D; h^{-1} * h * f^{-1} * g^{-1} &#x3D; h^{-1} * (g * f) * f^{-1} * g^{-1} &#x3D; h^{-1}$</p>
<p>定理9: $f$可乘, 若$f$完全可乘的充要条件是$f^{-1}(n)&#x3D;\mu(n)f(n)$</p>
<p>因为$f$可乘$f(1)&#x3D;1$</p>
<p>必要性: 若$f$完全可乘,令$g(n)&#x3D;\mu(n)f(n)$,有$(g * f)(n)&#x3D;\sum_{d|n}\mu(d)f(d)f(\frac{n}{d})&#x3D;f(n) \sum_{d|n}\mu(d)&#x3D;f(n)I(n)&#x3D;I(n)$, 即$g&#x3D;f^{-1}$ </p>
<p>充分性:若$f^{-1}(n)&#x3D;\mu(n)f(n)$, 那么要证明的就是$\forall p,\alpha, f(p^\alpha)&#x3D;f^\alpha(p)$</p>
<p>$I&#x3D;\sum_{d|n}\mu(d)f(d)f(\frac{n}{d})$</p>
<p>任取$n&#x3D;p^\alpha, \alpha &gt; 0$</p>
<p>$0&#x3D;\mu(1)f(1)f(p^\alpha)+\mu(p)f(p)f(p^{\alpha-1})$</p>
<p>即 $f(p^\alpha)&#x3D;f(p)f(p^{\alpha-1})$</p>
<p>例5: $\sigma_\lambda^{-1} &#x3D; (e^{\lambda})^{-1} * u^{-1} &#x3D; \mu e^{\lambda} * \mu$, </p>
<p>$\phi^{-1}&#x3D;\mu^{-1} * e^{-1}&#x3D;u * \mu e$</p>
<p>$d^{-1} &#x3D; u^{-1} * u^{-1} &#x3D; \mu * \mu$</p>
<p>例6: $g&#x3D;\lambda * u &#x3D;\left\lbrace \begin{array}{lc}1,&amp;n&#x3D;k^2\\ 0,&amp; others\end{array}\right.$<br>$g^{-1}&#x3D;\sum_{d|n}\mu(d)\lambda(d)\mu(\frac{n}{d})$</p>
<p>可乘函数对于每个质数因子处理后再乘起来, 可以证明1</p>
<h1 id="阶的估计"><a href="#阶的估计" class="headerlink" title="阶的估计"></a>阶的估计</h1><blockquote>
<p>有了阶的估计，可以方便于一些函数分布的研究</p>
</blockquote>
<p>$f$任意函数,$g$正值函数,若存在与$x$无关的常数$A$,使$|f(x)|\le Ag(x)$对于充分大$x$都成立,则$f(x)&#x3D;O(g(x))$或$f(x) \ll g(x)$</p>
<p>如$\sin(x)\ll 1,x\cos x\ll x^2,\sqrt{3x^2+7}\ll x$</p>
<p>定理, 对任意正整数$n$有$x^n &#x3D; O(e^x)$, 因为$x^n \le n! e^x$</p>
<p>若$\lim_{x\to +\infty} \frac{f(x)}{g(x)} &#x3D; 1$, 则称作当$x\to +\infty$时$f(x)\sim g(x)$</p>
<p>定理11: 对于任何正数$\alpha$不可能有$d(n) &#x3D; O(\log ^\alpha n)$</p>
<p>核心思想就是构建 $A\log^\alpha n &gt; d(n) &gt; c_{\alpha}\log^{&gt;\alpha} n$, 因为构建出来的话意味着右边幂次更大，随着n无限增长总会超过左边, 所以就是考虑如何造出 $d(n) &gt; c_{\alpha}\log^{&gt;\alpha} n$， 取$n&#x3D;(p_1p_2\cdots p_l)^m$</p>
<p>定理12: 对于任意$\epsilon &gt; 0$一定有$d(n) &#x3D; O(n^\epsilon)$</p>
<p>$\displaystyle \frac{d(n)}{n^{\epsilon}}&#x3D;\prod \frac{\alpha_i+1}{p^{\alpha_i\epsilon}} \le (\frac{2}{\epsilon \log 2})^{2^{\frac{1}{\epsilon}}}$, (讨论$p^\alpha$与2的关系，和个数，</p>
<p>由于数论函数数值的不规则性，我们经常去研究它的算术平均值$\displaystyle \bar{f}(n)&#x3D;\frac{\sum_{m\le n}f(m)}{n}$</p>
<p>$\bar{d}(n) &#x3D;\frac{1}{n}\sum_{m\le n} d(m) \sim \log n$, 称作$d$的平均阶为$\log n$ (稍后证明)</p>
<p>引理1: 当$x$充分大时 $\sum_{n\le x}\frac{1}{n} &#x3D; \log x + \gamma + O(\frac{1}{x})$, 其中$\gamma$是Euler常数</p>
<blockquote>
<p>这里的想法就是2次方的和是收敛的所以拆出二次方就好了</p>
</blockquote>
<p>$\displaystyle \sum_{n\le x}\frac{1}{n}&#x3D;\sum_{n\le x}\frac{\int_{n}^{n+1}dt}{n}$</p>
<p>$&#x3D;(\sum_{n\le x}\int_{n}^{n+1}(\frac{1}{n}-\frac{1}{t})dt)+\int_{1}^{[x]+1}(\frac{1}{t})dt$</p>
<p>$&#x3D;(\sum_{n\le x}\int_{n}^{n+1}(\frac{1}{n}-\frac{1}{t})dt)+\log([x]+1)$</p>
<p>$&#x3D;\gamma+O(\frac{1}{x})+\log([x]+1)$</p>
<p>当$x$充分大时</p>
<p>$\displaystyle \sum_{n\le x} d(n) &#x3D; \sum_{n\le x}\sum_{d|n} 1$</p>
<p>$\displaystyle &#x3D; \sum_{d \le x}\sum_{d|n,n\le x} 1$</p>
<p>$\displaystyle &#x3D; \sum_{d \le x}[\frac{x}{d}]$</p>
<p>$\displaystyle &#x3D; \sum_{d \le x}\frac{x}{d} - \lbrace\sum_{d \le x}\frac{x}{d}\rbrace$</p>
<p>$\displaystyle &#x3D; x\sum_{d \le x}\frac{1}{d} +O(x)$</p>
<p>$\displaystyle &#x3D; x(\log x+\gamma +O(\frac{1}{x}))+O(x)$</p>
<p>$\displaystyle &#x3D; x\log x+\gamma x+O(1)+O(x)$</p>
<p>$\displaystyle &#x3D; x\log x+O(x)$ (这里的估计还是很粗糙,见定理18)</p>
<p>因此$\bar{d}(n) \sim \log n$得证</p>
<h1 id="广义Dirichlet乘积"><a href="#广义Dirichlet乘积" class="headerlink" title="广义Dirichlet乘积"></a>广义Dirichlet乘积</h1><blockquote>
<p>看起来这里用例不少是为了简化阶的估计</p>
</blockquote>
<p>研究$\sum f(n)H(\frac{x}{n})$, 有什么不同,一个例子是上面的$f(2)$不会对$(f * g)(3)$贡献,而这里会,并且非整数的地方也有值, 记作$f \circ H$</p>
<p>$f$为数论函数,$H$为定义在$(0,+\infty)$上的函数,$H(x)&#x3D;0,x\in(0,1)$</p>
<p>$G(x) &#x3D; (f\circ H)(x) &#x3D; \sum_{n\le x} f(n)H(\frac{x}{n})$</p>
<p>若$H(x) &#x3D; 0,x$不是整数时,则</p>
<p>$(f\circ H)(x) &#x3D; \left\lbrace \begin{array}{lc}0,&amp;x\not\in \mathbb{Z}\\ (f * H)(x),&amp; x\in \mathbb{Z} \end{array}\right.$</p>
<p>$I\circ H &#x3D; H$</p>
<p>定理14: $f \circ (g\circ H) &#x3D; (f * g)\circ H$</p>
<p>取$f&#x3D;g&#x3D;u,H(x)&#x3D;U(x)&#x3D;\left\lbrace \begin{array}{lc}0,&amp; 0&lt;x&lt;1\\ 1,&amp;x\ge 1\end{array}\right.$</p>
<p>有$g \circ H &#x3D; \sum_{n\le x}1 &#x3D; [x]$</p>
<p>$f\circ(g \circ H) &#x3D; \sum_{n\le x} [\frac{x}{n}]$</p>
<p>因为$d&#x3D;u * u$, $d\circ H &#x3D; \sum_{n\le x}d(n)$</p>
<p>即$\sum_{n\le x}d(n) &#x3D; \sum_{n\le x} [\frac{x}{n}]$</p>
<p>定理15, 设f有Dirichlet逆$f^{-1}$， $G&#x3D;f\circ H$, 则$H&#x3D;f^{-1}\circ G$</p>
<p>推论4: 若$f$完全可乘,$G&#x3D;f\circ H,H&#x3D;(\mu(n)f(n))\circ G$</p>
<p>定理16: $h&#x3D;f * g, H&#x3D;h\circ U,F&#x3D;f\circ U,G&#x3D;g\circ U$, 则$H(x)&#x3D;f \circ G &#x3D; g \circ F$</p>
<p>推论5: $F&#x3D;f\circ U$,则$\displaystyle \sum_{n\le x}\sum_{d|n} f(d) &#x3D; \sum_{n\le x}F(\frac{x}{n})$, 就是$(u * f) \circ U&#x3D;u \circ ( f \circ U)$<br>例7: $\sum_{n\le x}\mu(n)[\frac{x}{n}]&#x3D;1$,即$\mu \circ(u\circ U) &#x3D; I \circ U &#x3D; U$</p>
<p>定理17(在用于估计时做区间切割很有用): 设$h&#x3D;f * g,F&#x3D;f\circ U,G&#x3D;g\circ U,H&#x3D;h\circ U$, 对任意$ab&#x3D;x$的正数$a,b$恒有</p>
<p>$H(x)&#x3D;\sum_{n\le a}f(n)G(\frac{x}{n})+\sum_{n\le b}g(n)F(\frac{x}{n})-F(a)G(b)$</p>
<p>$\displaystyle H(x)&#x3D;\sum_{n\le x}(\sum_{d_1d_2&#x3D;n}f(d_1)g(d_2))$</p>
<p>$\displaystyle &#x3D;\sum_{d_1d_2\le x} f(d_1)g(d_2)$</p>
<p>$\displaystyle &#x3D;\sum_{d_1\le a} (\sum_{d_2\le\frac{x}{d_1}} f(d_1)g(d_2)) + \sum_{d_2\le b} (\sum_{d_1\le\frac{x}{d_2}} f(d_1)g(d_2)) -\sum_{d_1\le a,d_2\le b} f(d_1)g(d_2)$, 容斥原理</p>
<p>$&#x3D;\sum_{n\le a}f(n)G(\frac{x}{n})+\sum_{n\le b}g(n)F(\frac{x}{n})-F(a)G(b)$</p>
<p>定理18: 我们可以用这个对$d(n)$重新估计</p>
<p>$f&#x3D;g&#x3D;u$因此$h&#x3D;f * g &#x3D;u * u&#x3D;d$,取$a&#x3D;b&#x3D;\sqrt{x}$</p>
<p>$\sum_{n\le x}d(n) &#x3D; H(x) &#x3D; \sum_{n\le a}f(n)G(\frac{x}{n})+\sum_{n\le b}g(n)F(\frac{x}{n})-F(a)G(b)$</p>
<p>$&#x3D;2\sum_{n\le \sqrt{x}}[\frac{x}{n}] - [\sqrt{x}]^2$</p>
<p>$&#x3D;2\sum_{n\le \sqrt{x}}(\frac{x}{n} - \lbrace \frac{x}{n} \rbrace) - (\sqrt{x}-\lbrace\sqrt{x}\rbrace)^2$</p>
<p>$&#x3D;x\log x+(2\gamma -1)x + O(\sqrt{x})$</p>
<p>定理19: $\sum_{n\le x} \sigma(n) &#x3D; \frac{\pi^2}{12} x^2 + O(x\log x)$</p>
<p>$\sigma &#x3D; e * u$</p>
<p>$\displaystyle \sigma \circ U &#x3D; u\circ(e\circ U) &#x3D;\sum_{n\le x}\sum_{m\le \frac{x}{n}} m&#x3D;\sum_{n\le x} \frac{1}{2}\lbrack \frac{x}{n}\rbrack([\frac{x}{n}]+1)$</p>
<p>$\displaystyle &#x3D;\frac{1}{2}\sum_{n\le x}(\frac{x}{n}+O(1))(\frac{x}{n}+O(1))$</p>
<p>$\displaystyle &#x3D;\frac{1}{2}\sum_{n\le x}\frac{x^2}{n^2}+O(\sum_{n\le x}\frac{x}{n})+O(x)$</p>
<p>$\displaystyle &#x3D;\frac{x^2}{2}\sum_{n}\frac{x^2}{n^2}-\frac{x^2}{2}\sum_{n &gt; x}\frac{x^2}{n^2}+O(x\log x)$</p>
<p>$&#x3D; \frac{\pi^2}{12} x^2+O(\frac{1}{[x]})+O(x\log x)$</p>
<p>$&#x3D; \frac{\pi^2}{12} x^2+O(x\log x)$</p>
<p>定理20: $\sum_{n\le x}\phi(x)&#x3D;\frac{3}{\pi^2}x^2+O(x\log x)$</p>
<p>$\phi &#x3D; \mu * e$</p>
<p>$\displaystyle \sum_{n\le x}\phi(x)&#x3D;\sum_{n\le x}\mu(n)\sum_{m\le \frac{x}{n}} m$</p>
<p>$\displaystyle &#x3D;\sum_{n\le x}\mu(n)\frac{1}{2}\lbrack \frac{x}{n}\rbrack([\frac{x}{n}]+1)$</p>
<p>$\displaystyle&#x3D;\frac{1}{2}\sum_{n\le x}\mu(n)(\frac{x}{n}+O(1))^2$</p>
<p>$\displaystyle&#x3D;\frac{x^2}{2}\sum_{n\le x}\frac{\mu(n)}{n^2}+O(x\log x)$</p>
<p>$\displaystyle&#x3D;\frac{x^2}{2}\sum_{n&#x3D;1}^\infty \frac{\mu(n)}{n^2}+O(x\log x)$</p>
<p>$\frac{\pi^2}{6}\sum_{d&#x3D;1}^\infty \frac{\mu(d)}{d^2}&#x3D;\sum_{a&#x3D;1}^\infty \frac{1}{a^2} \sum_{d&#x3D;1}^\infty \frac{\mu(d)}{d^2}&#x3D;\sum_{n&#x3D;1}^{\infty} \frac{\sum_{d|n} \mu(d)}{n^2} &#x3D;\sum_{n&#x3D;1}^{\infty} \frac{I(n)}{n^2} &#x3D; 1$, 考虑$n&#x3D;ad$</p>
<p>原式 $\displaystyle&#x3D;\frac{3}{\pi^2}x^2+O(x\log x)$</p>
<p>定理21: $Q(x)&#x3D;$不超过$x$的无平方因子的正整数的个数, $\sum_{Q(x)}&#x3D;\frac{6}{\pi^2}x+O(\sqrt x)$</p>
<p>不大于$x$且最大平方因子为$k^2$的数个数为$Q(\frac{x}{k^2})$,相当于$v &#x3D; mk^2 \le x,m$中没有平方因子,所以和求$\le \frac{x}{k^2}$的无平方因子的正整数是一样的子问题</p>
<p>$\sum_{k\le \sqrt{x}}Q(\frac{x}{k^2}) &#x3D; [x]$</p>
<p>$\displaystyle Q(x)&#x3D;\sum_{n\le \sqrt{x}}Q(\frac{x}{d^2})I(d)&#x3D;\sum_{n\le \sqrt{x}}Q(\frac{x}{d^2})\sum_{d|n}\mu(d)$</p>
<p>$\displaystyle &#x3D;\sum_{d \le \sqrt{x}}\mu(d) \sum_{d|n,n\le \sqrt{x}} Q(\frac{x}{d^2})$</p>
<p>$\displaystyle &#x3D;\sum_{d \le \sqrt{x}}\mu(d) \sum_{k\le \sqrt{\frac{x}{d^2}}} Q(\frac{x}{d^2k^2})$</p>
<p>$\displaystyle &#x3D;\sum_{d \le \sqrt{x}}\mu(d) [\frac{x}{d^2}]$</p>
<p>$\displaystyle &#x3D;\sum_{d \le \sqrt{x}}\mu(d) (\frac{x}{d^2}+O(1))$</p>
<p>$\displaystyle &#x3D;\sum_{d \le \sqrt{x}}\frac{x\mu(d)}{d^2}+O(\sqrt{x})$</p>
<p>$\displaystyle &#x3D;\frac{6}{\pi^2}x+O(\sqrt{x})$</p>
<h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="9-lambda-n-x3D-1-Omega-n-求-sum-d-n-lambda-d-d-s-的表达式-证明-sum-k-x3D-1-x-lambda-k-frac-x-k-x3D-sqrt-x"><a href="#9-lambda-n-x3D-1-Omega-n-求-sum-d-n-lambda-d-d-s-的表达式-证明-sum-k-x3D-1-x-lambda-k-frac-x-k-x3D-sqrt-x" class="headerlink" title="9. $\lambda(n)&#x3D;(-1)^{\Omega(n)}$,求$\sum_{d|n}\lambda(d)d^s$的表达式,证明$\sum_{k&#x3D;1}^{[x]}\lambda(k)[\frac{x}{k}]&#x3D;[\sqrt{x}]$"></a>9. $\lambda(n)&#x3D;(-1)^{\Omega(n)}$,求$\sum_{d|n}\lambda(d)d^s$的表达式,证明$\sum_{k&#x3D;1}^{[x]}\lambda(k)[\frac{x}{k}]&#x3D;[\sqrt{x}]$</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>$\sum_{d|n}\lambda(d)d^s &#x3D; \sum_{d|n,d&#x3D;\prod p_i^{\beta_i}} (-1)^{\sum \beta_i}(\prod {p_i}^{\beta_i})^s$</p>
<p>$&#x3D; \sum_{n&#x3D;\prod p_i^{\alpha_i},\beta_i\le \alpha_i} \prod (-p_i^s)^{\beta_i }$</p>
<p>$&#x3D; \prod_{i,n&#x3D;\prod p_i^{\alpha_i},\beta_i\le \alpha_i} \sum_{j&#x3D;0}^{\alpha_i} (-p_i^s)^{j}$</p>
<p>$&#x3D; \prod_{i,n&#x3D;\prod p_i^{\alpha_i},\beta_i\le \alpha_i} \frac{1-(-p_i^s)^{\alpha_i+1}}{1+p_i^s}$</p>
<p>$\sum_{k&#x3D;1}^{[x]}\lambda(k)[\frac{x}{k}]&#x3D;\sum_{k&#x3D;1}^{[x]}\lambda(k)[\frac{[x]}{k}] &#x3D; (\lambda \circ (u\circ U))([x])$</p>
<p>$&#x3D;((\lambda * u)\circ U)([x])$</p>
<p>$(\lambda * u)(n) &#x3D; \left\lbrace\begin{array}{lc} 1,&amp; n&#x3D;k^2 \\ 0,&amp; \text{others}\end{array}\right.$</p>

</details>

<h2 id="14-设-displaystyle-s-n-x3D-sum-j-in-1-n-gcd-j-n-x3D-1-j-2-证明-displaystyle-sum-d-n-frac-s-d-d-2-x3D-frac-1-n-2-sum-j-x3D-1-n-j-2-s-n-x3D-n-2-frac-1-3-phi-n-frac-1-2-sum-d-n-mu-d-frac-1-6n-prod-p-n-1-p"><a href="#14-设-displaystyle-s-n-x3D-sum-j-in-1-n-gcd-j-n-x3D-1-j-2-证明-displaystyle-sum-d-n-frac-s-d-d-2-x3D-frac-1-n-2-sum-j-x3D-1-n-j-2-s-n-x3D-n-2-frac-1-3-phi-n-frac-1-2-sum-d-n-mu-d-frac-1-6n-prod-p-n-1-p" class="headerlink" title="14. 设$\displaystyle s(n)&#x3D;\sum_{j\in[1,n],\gcd(j,n)&#x3D;1} j^2$证明$\displaystyle \sum_{d|n}\frac{s(d)}{d^2}&#x3D;\frac{1}{n^2}\sum_{j&#x3D;1}^n j^2$,$s(n)&#x3D;n^2(\frac{1}{3}\phi(n)+\frac{1}{2}\sum_{d|n}\mu(d)+\frac{1}{6n}\prod_{p|n}(1-p))$"></a>14. 设$\displaystyle s(n)&#x3D;\sum_{j\in[1,n],\gcd(j,n)&#x3D;1} j^2$证明$\displaystyle \sum_{d|n}\frac{s(d)}{d^2}&#x3D;\frac{1}{n^2}\sum_{j&#x3D;1}^n j^2$,$s(n)&#x3D;n^2(\frac{1}{3}\phi(n)+\frac{1}{2}\sum_{d|n}\mu(d)+\frac{1}{6n}\prod_{p|n}(1-p))$</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>通过和n的gcd来分类</p>
<p>$\frac{1}{n^2}\sum_{j&#x3D;1}^nj^2$</p>
<p>$&#x3D;\frac{1}{n^2}\sum_{d|n}\sum_{j\in[1,n],\gcd(j,n)&#x3D;d} j^2$</p>
<p>$&#x3D;\frac{1}{n^2}\sum_{d|n}\sum_{i \in[1,\frac{n}{d}],\gcd(i,\frac{n}{d})&#x3D;1} (id)^2$</p>
<p>$&#x3D;\sum_{d|n}\frac{d^2}{n^2}\sum_{i \in[1,\frac{n}{d}],\gcd(i,\frac{n}{d})&#x3D;1} i^2$</p>
<p>$&#x3D;\sum_{d|n}\frac{s(\frac{n}{d})}{(\frac{n}{d})^2}$</p>
<p>$&#x3D;\sum_{d|n}\frac{s(d)}{d^2}$</p>
<p>$s * e_2 &#x3D; \sum_{j&#x3D;1}^n j^2 &#x3D; \frac{n(n+1)(2n+1)}{6}&#x3D;\frac{n^3}{3}+\frac{n^2}{2}+\frac{n}{6}$</p>
<p>$e_2$完全可乘</p>
<p>$e_2^{-1} &#x3D; \mu e_2$</p>
<p>$s &#x3D; s * e_2 * e_2^{-1} &#x3D; (\frac{n^3}{3}+\frac{n^2}{2}+\frac{n}{6}) * (\mu e_2)$</p>
<p>$&#x3D;\sum_{d|n} (\frac{n^3}{3d^3}\mu(d)d^2+\frac{n^2}{2d^2}\mu(d)d^2+\frac{n}{6d}\mu(d)d^2)$</p>
<p>$&#x3D;\frac{n^2}{3} (\mu * e) +\frac{n^2}{2}(\sum_{d|n}\mu(d))+\frac{n}{6}\sum_{d|n}\mu(d)d$</p>

</details>

<h2 id="16-求所有使得-phi-n-x3D-24"><a href="#16-求所有使得-phi-n-x3D-24" class="headerlink" title="16. 求所有使得$\phi(n)&#x3D; 24$"></a>16. 求所有使得$\phi(n)&#x3D; 24$</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>$\phi(n)&#x3D;n\prod_{p|n}\frac{p-1}{p}$</p>
<p>所以考察所有$24$的因数+1的质因子$2,3,5,7,13$的组合情况</p>
<p>又注意到$\phi$是可乘函数$24&#x3D;2^33$</p>
<p>$\phi(2)&#x3D;1,\phi(2^2)&#x3D;2,\phi(2^3)&#x3D;4,\phi(2^4)&#x3D;8$</p>
<p>$\phi(3)&#x3D;2,\phi(3^2)&#x3D;6,\phi(3^3)&#x3D;4$</p>
<p>$\phi(5)&#x3D;4$</p>
<p>$\phi(7)&#x3D;6$</p>
<p>$\phi(13)&#x3D;12$</p>
<p>所以有$13\cdot 3,13\cdot 3\cdot 2,13\cdot 2^2\cdots$</p>

</details>

<h2 id="17-证明-n-为合数时-phi-n-le-n-sqrt-n"><a href="#17-证明-n-为合数时-phi-n-le-n-sqrt-n" class="headerlink" title="17. 证明$n$为合数时$\phi(n)\le n-\sqrt{n}$"></a>17. 证明$n$为合数时$\phi(n)\le n-\sqrt{n}$</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>$\phi(n)&#x3D;n\prod_{p|n}(1-\frac{1}{p}) \le n(1-\frac{1}{p}) \le n(1-\frac{1}{\sqrt{n}}) &#x3D; n-\sqrt{n}$</p>

</details>

<h2 id="25-d-为自然数-x-ge-1-则-displaystyle-sum-m-le-x-gcd-m-d-x3D-1-frac-mu-2-m-phi-m-ge-frac-phi-d-d-log-x-1"><a href="#25-d-为自然数-x-ge-1-则-displaystyle-sum-m-le-x-gcd-m-d-x3D-1-frac-mu-2-m-phi-m-ge-frac-phi-d-d-log-x-1" class="headerlink" title="25. $d$为自然数,$x\ge 1$,则$\displaystyle \sum_{m\le x,\gcd(m,d)&#x3D;1} \frac{\mu^2(m)}{\phi(m)}\ge \frac{\phi(d)}{d} \log([x]+1)$"></a>25. $d$为自然数,$x\ge 1$,则$\displaystyle \sum_{m\le x,\gcd(m,d)&#x3D;1} \frac{\mu^2(m)}{\phi(m)}\ge \frac{\phi(d)}{d} \log([x]+1)$</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>定义函数$\mathrm{rad}(n) &#x3D; \prod_{p|n} p$相当于$n$中所有质因子的乘积</p>
<p>$\displaystyle \sum_{m\le x,\gcd(m,d)&#x3D;1} \frac{\mu^2(m)}{\phi(m)}$</p>
<p>$\displaystyle &#x3D;\sum_{m\le x,\gcd(m,d)&#x3D;1,\mathrm{rad}(m)&#x3D;m} \prod_{p|m} \frac{1}{p-1}$, $m$中所有质数幂次不大于1</p>
<p>$\displaystyle &#x3D;\sum_{m\le x,\gcd(m,d)&#x3D;1,\mathrm{rad}(m)&#x3D;m} \prod_{p|m} \frac{\frac{1}{p}}{1-\frac{1}{p}}$, 变成等比数列和的形式</p>
<p>$\displaystyle &#x3D;\sum_{m\le x,\gcd(m,d)&#x3D;1,\mathrm{rad}(m)&#x3D;m} \prod_{p|m} \sum_{k\ge 1}\frac{1}{p^k}$, 等比数列</p>
<p>$\displaystyle &#x3D;\sum_{m\le x,\gcd(m,d)&#x3D;1,\mathrm{rad}(m)&#x3D;m} \sum_{\mathrm{rad}(n)&#x3D;m}\frac{1}{n}$, 后面的乘法展开</p>
<p>$\displaystyle \ge \sum_{m\le x,\gcd(m,d)&#x3D;1,\mathrm{rad}(m)&#x3D;m} \sum_{\mathrm{rad}(n)&#x3D;m,n\le y}\frac{1}{n}$, 控制范围, 暂时不知道$y$取多少合适</p>
<p>$\displaystyle &#x3D; \sum_{n \le y,\gcd(n,d)&#x3D;1} \frac{1}{n} \sum_{m&#x3D;\mathrm{rad}(m)&#x3D;\mathrm{rad}(n),m\le x} 1$, 交换顺序</p>
<p>$\displaystyle &#x3D; \sum_{n \le y,\gcd(n,d)&#x3D;1} \frac{1}{n}$, 右侧只有唯一$m$,这里看出需要保证$y\le x$才能保证右侧都是1</p>
<p>$\displaystyle &#x3D; \frac{\phi(d)}{d}\prod_{p|d}\frac{1}{1-\frac{1}{p}}\sum_{n \le y,\gcd(n,d)&#x3D;1} \frac{1}{n}$, 向要证明的靠拢,拆1</p>
<p>$\displaystyle &#x3D; \frac{\phi(d)}{d}(\prod_{p|d}\sum_{k\ge 0} \frac{1}{p^k})\sum_{n \le y,\gcd(n,d)&#x3D;1} \frac{1}{n}$, 同样等比数列求和</p>
<p>$\displaystyle &#x3D; \frac{\phi(d)}{d}(\sum_{\mathrm{rad}(q) | \mathrm{rad}(d) } \frac{1}{q})\sum_{n \le y,\gcd(n,d)&#x3D;1} \frac{1}{n}$, 同样等比数列求和</p>
<p>$\displaystyle &#x3D; \frac{\phi(d)}{d} \sum_{\mathrm{rad}(q) | \mathrm{rad}(d) } \sum_{n \le y,\gcd(n,d)&#x3D;1} \frac{1}{nq}$, 乘开</p>
<p>$\displaystyle \ge \frac{\phi(d)}{d} \sum_{t\le x}\frac{1}{t}$, 这里看出,任何一个$\le x$的有且只有唯一的拆解,拆解成是$d$的质因子的幂次的乘积(q贡献) 和 其余部分(n贡献), 而大于$x$的直接舍去, 所以取$y&#x3D;x$, 而上面其实需要$y\le x$所以范围还算很紧</p>
<p>$\displaystyle \ge \frac{\phi(d)}{d} \log([x]+1)$</p>

</details>]]></content>
      <categories>
        <category>数论</category>
        <category>数论基础</category>
      </categories>
      <tags>
        <tag>数论基础</tag>
        <tag>Dirichlet乘积</tag>
        <tag>Dirichlet逆</tag>
        <tag>可乘函数</tag>
        <tag>完全可乘函数</tag>
        <tag>Mobius变换</tag>
        <tag>Mobius反演</tag>
      </tags>
  </entry>
  <entry>
    <title>数论基础 四 同余</title>
    <url>/Math/number_theory_4/</url>
    <content><![CDATA[<p>ISBN 9787040364729</p>
<span id="more"></span>

<h1 id="1-概念及基本性质"><a href="#1-概念及基本性质" class="headerlink" title="1.概念及基本性质"></a>1.概念及基本性质</h1><p>定义1: 正整数$m$称为模,$a,b$为任意两个整数, 若它们被$m$除后所得余数相同,则称作同余,记作$a\equiv b\pmod m$,否则$a\not \equiv b\pmod p$</p>
<p>定理1: 上式等价于$m|(a-b)$, 根据第一章除法性质唯一余数</p>
<p>基本性质:</p>
<ul>
<li>$a\equiv a\pmod m$</li>
<li>$a\equiv b\pmod m \Leftrightarrow b\equiv a\pmod m$</li>
<li>$a\equiv b\pmod m,b\equiv c\pmod m\Rightarrow a\equiv c\pmod m$</li>
<li>$a_i\equiv b_i\pmod m \Rightarrow \sum {a_i}\equiv \sum b_i\pmod m$</li>
<li>$a_i\equiv b_i\pmod m \Rightarrow \prod {a_i}\equiv \prod b_i\pmod m$</li>
<li>$ab\equiv bd\pmod m,c\equiv d\pmod m,\gcd(c,m)&#x3D;1 \Rightarrow a\equiv b\pmod m$</li>
</ul>
<p>定理2: $A_{\alpha_1,\alpha_2,\cdots,\alpha_k}\equiv B_{\alpha_1,\alpha_2,\cdots,\alpha_k}\pmod m,x_i\equiv y_i\pmod m\Rightarrow \sum A_{\alpha_1,\alpha_2,\cdots,\alpha_k}\prod x_i^{\alpha_i}\equiv B_{\alpha_1,\alpha_2,\cdots,\alpha_k}\prod y_i^{\alpha_i}\pmod m$<br>例1: $K$为正整数, 试着求为9的整除判别法</p>
<p>$K&#x3D;\sum_{i\in[0,l]}10^i a_i,10^i\equiv 1 \pmod 9$</p>
<p>由定理2: $K &#x3D; \sum_{i\in [0,l]}a_i\pmod 9$</p>
<p>定理3: $K\ne 0$, $a\equiv b\pmod m \Leftrightarrow aK\equiv bK \pmod {Km}$</p>
<p>定理4: 社$aC\equiv bC \pmod m, d&#x3D;\gcd(m,C)$则 $a\equiv b \pmod{\frac{m}{d}}$ </p>
<p>$m|C(a-b) \Rightarrow \frac{m}{d} | \frac{C}{d}(a-b) \Rightarrow \frac{m}{d}|(a-b)$</p>
<p>定理5: $d\ne 0, d|m , a\equiv b\pmod m \Rightarrow a\equiv b \pmod d$</p>
<p>定理6: $a\equiv b\pmod {m_1},a\equiv b\pmod {m_2} \Leftrightarrow a\equiv b \pmod{\mathrm{lcm}(m_1,m_2)}$</p>
<p>定理7: $a\equiv b\pmod m \Rightarrow \gcd(a,m)&#x3D;\gcd(b,m)$</p>
<h1 id="2-剩余类及剩余系"><a href="#2-剩余类及剩余系" class="headerlink" title="2.剩余类及剩余系"></a>2.剩余类及剩余系</h1><p>定义2: 对$m$同余的整数的集合 剩余类（同余类）,（如果和$m$互素,则互素剩余类）, 可以分成$m$个剩余类</p>
<p>定义3: 每个剩余类中任取一个数,组成的叫做模$m$的完全剩余系, (在每个和$m$互素的剩余类中任取一个,叫做简化(互素)剩余系)</p>
<p>$0,1,\cdots,m-1$称作模$m$的最小非负完全剩余系</p>
<p>把大于$\frac{m}{2}$的变成负的，则称作模$m$的绝对最小完全系</p>
<p>素数的常用简化系$1,2,\cdots,p-1$</p>
<p>定理8: $m$个整数组成模$m$的一个完全系的充要条件是这$m$个数两两对模$m$不同余</p>
<p>定理9: $\phi(m)$个整数组成模$m$的一个简化系的充要条件是,这些数与$m$互素,且它们对模$m$两两不同余</p>
<p>定理10: $m$自然数,$K,l$为任意整数,$\gcd(K,m)&#x3D;1$,则当$x$通过$m$的完全系时,$Kx+l$也通过$m$的完全系, (通过$x$不同余得到$Kx+l$不同余可证明</p>
<p>定理11: $m$为自然数,$K,l$为任意整数,$\gcd(K,m)&#x3D;1$,则当$x$通过$m$的简化系时,$Kx+lm$也通过$m$的简化系,(同样，多证明一个和$m$的$\gcd$即可)</p>
<p>定理12: $m_1,m_2$为自然数$(m_1,m_2)&#x3D;1$,当$x,y$分别通过模$m_1,m_2$的完全(简化)系时,$m_2x+m_1y$通过模$m&#x3D;m_1m_2$的完全(简化)系</p>
<p>定理13(Euler): 设$m &gt; 1,\gcd(a,m)&#x3D;1$则$a^{\phi(m)}\equiv 1\pmod m$</p>
<p>证明:</p>
<p>$x_1,x_2,\cdots,x_{\phi(m)}$为一个简化系, </p>
<p>$ax_1,ax_2,\cdots,ax_{\phi(m)}$为一个简化系, 定理11</p>
<p>$\prod x_i\equiv \prod ax_i \pmod m$</p>
<p>$\prod x_i\equiv a^{\phi(m)}\prod x_i \pmod m$</p>
<p>$1 \equiv a^{\phi(m)} \pmod m$</p>
<p>定理14(Fermat): 若$m&#x3D;p$为素数,则$a^{p-1}\equiv 1 \pmod p$</p>
<p>重要应用, $f(n)$为模$m$为周期的数论函数</p>
<p>$\displaystyle F(m)&#x3D;\sum_{x\pmod m} f(x)$ 表示对模$m$的一个完全系求和</p>
<p>$\displaystyle G(m)&#x3D;\sum_{x\pmod m}’ f(x)$ 表示对模$m$的一个简化系求和</p>
<p>定理15: $\displaystyle \sum_{x\pmod m} f(x)&#x3D;\sum_{x\pmod m} f(Kx+l),\gcd(K,m)&#x3D;1$,$\displaystyle \sum_{x\pmod m}’ f(x)&#x3D;\sum_{x\pmod m}’ f(Kx+l),\gcd(K,m)&#x3D;1$</p>
<p>定理16: 设$f(n)&#x3D;e^{2\pi i\frac{n}{m}}$,则$F(m),G(m)$均为可乘函数</p>
<h1 id="3-同余方程的一般概念，一次同余方程"><a href="#3-同余方程的一般概念，一次同余方程" class="headerlink" title="3. 同余方程的一般概念，一次同余方程"></a>3. 同余方程的一般概念，一次同余方程</h1><h1 id="4-孙子定理"><a href="#4-孙子定理" class="headerlink" title="4. 孙子定理"></a>4. 孙子定理</h1><h1 id="5-多项式的恒等同余"><a href="#5-多项式的恒等同余" class="headerlink" title="5. 多项式的恒等同余"></a>5. 多项式的恒等同余</h1><h1 id="6-模p的高次同余方程"><a href="#6-模p的高次同余方程" class="headerlink" title="6. 模p的高次同余方程"></a>6. 模p的高次同余方程</h1><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="2-xxxx"><a href="#2-xxxx" class="headerlink" title="2. xxxx"></a>2. xxxx</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>

</details>]]></content>
      <categories>
        <category>数论</category>
        <category>数论基础</category>
      </categories>
      <tags>
        <tag>数论基础</tag>
        <tag>欧拉定理</tag>
        <tag>费马小定理</tag>
      </tags>
  </entry>
  <entry>
    <title>数论基础 三 素数分布的一些初等结果</title>
    <url>/Math/number_theory_3/</url>
    <content><![CDATA[<p>ISBN 9787040364729</p>
<span id="more"></span>

<h1 id="函数-pi-x"><a href="#函数-pi-x" class="headerlink" title="函数$\pi(x)$"></a>函数$\pi(x)$</h1><p>$\pi(x) &#x3D;$ 不超过$x$的素数的个数</p>
<p>引理1: $x &gt; 0$,$p_1,p_2,\cdots,p_s$为前$s$个素数,$\phi(x,s)$表示不超过$x$,且不被$p_i(i\in[1,s])$整除的自然数个数,则$\displaystyle \phi(x,s)&#x3D;\sum_{d|\prod_{i&#x3D;1}^s p_i} \mu(d)[\frac{x}{d}]$, 其实就是容斥原理,可以拆$I(\gcd)$来做</p>
<p>引理2: $x &gt; s$则$\displaystyle \pi(x) &lt; x\prod_{i&#x3D;1}^s(1-\frac{1}{p_i})+2^{s+1}$</p>
<p>显然$\pi(x) \le s+\phi(x,s)$</p>
<p>所以$\displaystyle \pi(x) \le s+\sum_{d|\prod_{i&#x3D;1}^s p_i} \mu(d)[\frac{x}{d}]$</p>
<p>$\displaystyle &#x3D; s+\sum_{d|\prod_{i&#x3D;1}^s p_i} \mu(d)\frac{x}{d}+\sum_{d|\prod_{i&#x3D;1}^s p_i} \mu(d)\lbrace\frac{x}{d}\rbrace$</p>
<p>$\displaystyle &lt; s+\sum_{d|\prod_{i&#x3D;1}^s p_i} \mu(d)\frac{x}{d}+\sum_{d|\prod_{i&#x3D;1}^s p_i} 1$</p>
<p>$\displaystyle &#x3D; s+x\prod_{i&#x3D;1}^{s} (1-\frac{1}{p_i}) + (1+1)^s$</p>
<p>$\displaystyle \le x\prod_{i&#x3D;1}^{s} (1-\frac{1}{p_i}) + 2^{s+1}$</p>
<p>引理3: $\prod_{p} (1-\frac{1}{p})&#x3D;0$, 正如第二章里的证明一样，拆成等比数列和的形式再展开乘法，就显然了</p>
<p>定理1: $\lim_{x\to \infty} \frac{\pi(x)}{x}&#x3D;0$</p>
<p>取$s+1&#x3D;[\frac{\log_2 x}{2}]$</p>
<p>$\displaystyle 0 &lt; \lim_{x\to \infty} \frac{\pi(x)}{x} &lt; \lim_{x\to \infty} \prod_{i&#x3D;1}^{[\frac{\log_2 x}{2}]-1} (1-\frac{1}{p_i}) + \frac{2^{[\frac{\log_2 x}{2}]}}{x}$</p>
<p>得证， 即$\pi(x) &#x3D; o(x), x\to \infty$</p>
<h1 id="Chebyshev定理"><a href="#Chebyshev定理" class="headerlink" title="Chebyshev定理"></a>Chebyshev定理</h1><p>大量的尝试,Legendre和Gauss都猜测(素数定理)$\pi(x)\sim \frac{x}{\log x}$ (第三章没有证明到系数在极限下是1，只证明了下面这个更弱的形式)</p>
<blockquote>
<p>1896年，<a href="https://baike.baidu.com/item/%E9%98%BF%E8%BE%BE%E9%A9%AC/400373?fromModule=lemma_inlink">阿达马</a>（即雅克·所罗门·阿达马，Jacques Solomon Hadamard，1865年－1963年）和德·拉·瓦莱布桑（Charles-Jean de la Vallée Poussin）按照<a href="https://baike.baidu.com/item/%E6%B3%A2%E6%81%A9%E5%93%88%E5%BE%B7%C2%B7%E9%BB%8E%E6%9B%BC/1693983?fromModule=lemma_inlink">波恩哈德·黎曼</a>（B. Riemann）的思路，各自独立地利用高深的整函数理论证明了素数定理。</p>
</blockquote>
<blockquote>
<p>1949年，塞尔伯格（即<a href="https://baike.baidu.com/item/%E9%98%BF%E7%89%B9%E5%8B%92%C2%B7%E5%A1%9E%E5%B0%94%E4%BC%AF%E6%A0%BC/9243382?fromModule=lemma_inlink">阿特勒·塞尔伯格</a>，Atle Selberg）和埃尔德什（即<a href="https://baike.baidu.com/item/%E4%BF%9D%E7%BD%97%C2%B7%E5%9F%83%E5%B0%94%E5%BE%B7%E4%BB%80/6265074?fromModule=lemma_inlink">保罗·埃尔德什</a>，Paul Erdős）分别独立地证明了素数定理。塞尔伯格由于这项成就及其他工作而获得了<a href="https://baike.baidu.com/item/%E8%8F%B2%E5%B0%94%E5%85%B9%E5%A5%96/186887?fromModule=lemma_inlink">菲尔兹奖</a>，埃尔德什则与陈省身一起获得了<a href="https://baike.baidu.com/item/%E6%B2%83%E5%B0%94%E5%A4%AB%E6%95%B0%E5%AD%A6%E5%A5%96?fromModule=lemma_inlink">沃尔夫数学奖</a>。</p>
</blockquote>
<p>Chebyshev 1850证明了存在两个正常数使得$C_1\frac{x}{\log x}&lt; \pi(x) &lt; C_2\frac{x}{\log x}$ </p>
<p>引理4(重要,这个公式用于$C_n$去转换做阶的估计很有用): 设$x &gt; 1$,$f(t)\in C’[1,x],S(x)&#x3D;\sum_{n\le x}C_n$ 则</p>
<p>$\sum_{n\le x}C_nf(n)&#x3D;S(x)f(x)-\int_1^xS(t)f’(t)dt$</p>
<blockquote>
<p>这里是$f$在$[1,x]$的积分连续</p>
</blockquote>
<p>证明: $S(x)f(x)-\sum_{n\le x}C_nf(n)&#x3D;\sum_{n\le x}C_n(f(x)-f(n))$</p>
<p>$&#x3D;\sum_{n\le x}C_n \int_{n}^x f’(t) dt$</p>
<p>$&#x3D;\sum_{n\le x}C_n \int_{1}^x [t\ge n]f’(t) dt$</p>
<p>$&#x3D;\int_{1}^x \sum_{n\le x}C_n [t\ge n]f’(t) dt$</p>
<p>$&#x3D;\int_{1}^x (\sum_{n\le x}C_n [t\ge n])f’(t) dt$</p>
<p>$&#x3D;\int_{1}^x (\sum_{n\le t}C_n)f’(t) dt$</p>
<p>$&#x3D;\int_{1}^x S(t)f’(t) dt$</p>
<p>定理2(欧拉求和公式): $a&gt;0,f(x)\in C’[a,b]$则</p>
<p>$\sum_{a&lt;n\le b}f(n)&#x3D;\int_{a}^b f(t)dt+\int_{a}^b \psi_1(t)f’(t)dt+\psi_1(a)f(a)-\psi_1(b)f(b)$ 其中$\psi_1(x)&#x3D;x-[x]-\frac{1}{2}, |\psi_1(x)|\le \frac{1}{2}$($\frac{1}{2}$到小数部分的有向距离)</p>
<p>证明: 由引理4,取$C_n&#x3D;1$,则</p>
<p>$\sum_{n\le a}f(n)&#x3D;[a]f(a)-\int_{1}^a [t]f’(t)dt$</p>
<p>$\sum_{n\le b}f(n)&#x3D;[b]f(b)-\int_{1}^b [t]f’(t)dt$</p>
<p>相减</p>
<p>$\sum_{a &lt; n\le b}f(n)&#x3D;[b]f(b)-[a]f(a)-\int_{a}^b [t]f’(t)dt$</p>
<p>$&#x3D;[b]f(b)-[a]f(a)-\int_{a}^b [t]f’(t)dt-(\int_a^b(t-\frac{1}{2})f’(t)dt-(b-\frac{1}{2})f(b)+(a-\frac{1}{2})f(a)+\int_a^bf(t)dt)$</p>
<p>得证</p>
<p>引理5: $x&gt;1$则$\sum_{n\le x}\log n&#x3D;x \log x - x + O(\log x)$</p>
<p>证明: $\sum_{n\le x} \log n&#x3D;\int_{1}^x \log t dt+\int_{1}^x \psi_1(t)\frac{1}{t} dt -\psi_1(x)\log x \le (x\log x - x)+\frac{1}{2}O(\log x)+\frac{1}{2}O(\log x)$</p>
<hr>
<p>Chebyshev在研究素数定理时,引入了两个新函数</p>
<p>first Chebyshev function $\theta(x)&#x3D;\sum_{p\le x} \log p\le x\log x$</p>
<p>second Chebyshev function $\displaystyle \psi(x) &#x3D; \Lambda \circ U&#x3D;\sum_{n\le x} \Lambda (n)$, (单调递增)</p>
<p>$&#x3D;\sum_{m&#x3D;1}^{\infty} \sum_{p,{p^m}\le x} \Lambda(p^m)$</p>
<p>$&#x3D;\sum_{m\le \log_2 x}\sum_{p\le x^{\frac{1}{m}}}\log p$</p>
<p>$&#x3D;\sum_{m\le \log_2 x}\theta(x^{\frac{1}{m}})$</p>
<p>$&#x3D;\theta(x)+\sum_{m\in[2,\log_2 x]}\theta(x^{\frac{1}{m}})$</p>
<p>$&#x3D;\theta(x) +O(x^{\frac{1}{2}}\log^2 x)$</p>
<p>定理3: 几个式子等价</p>
<p>$\pi(x) \sim \frac{x}{\log x} ,x \to \infty$</p>
<p>$\psi(x) \sim x,x \to \infty$</p>
<p>$\theta(x) \sim x,x \to \infty$</p>
<p>根据上面的结果,只需要证明 第1和第3个式子等价(即相互可以推，但是具体等不等还不知道)</p>
<p>在引理4中,取 $C_n&#x3D;\left\lbrace\begin{array}{lc}1,&amp; n \text{ is prime}\\ 0,&amp; \text{others} \end{array}\right.$,$f(n)&#x3D;\log n$</p>
<p>则$\pi(x)&#x3D;\sum_{n\le x} C_n$,$\theta(x)&#x3D;\sum_{n\le x} C_n\log n$</p>
<p>即$\theta(n)&#x3D;\pi(x)0\log x-\int_{1}^x\frac{\pi(t)}{t}dt$</p>
<p>因为$\frac{\pi(t)}{t}&#x3D;o(1),t\ge \sqrt{x}$</p>
<p>$\theta(n)&#x3D;\pi(x)\log x-\int_{1}^{\sqrt{x}}\frac{\pi(t)}{t}dt-\int_{\sqrt{x}}^x\frac{\pi(t)}{t}dt$</p>
<p>$\theta(n)&#x3D;\pi(x)\log x+O(\sqrt{x})+o(x-\sqrt{x})$</p>
<p>$\theta(n)&#x3D;\pi(x)\log x+o(x)$</p>
<p>$\frac{\theta(n)}{x}&#x3D;\frac{\pi(x)}{\frac{x}{\log x}}+o(1)$</p>
<p>等价性证明了</p>
<p>定理4: $x &gt; 1$则有$\sum_{n\le x}\psi(\frac{x}{n}) &#x3D; \sum_{n\le x}\Lambda(n)[\frac{x}{n}]&#x3D;x\log x-x+O(\log x)$</p>
<p>证: 由于$\log n &#x3D;\sum_{d|n} \Lambda(d)$</p>
<p>所以$\sum_{n\le x}\log n &#x3D; (\Lambda * u)\circ U &#x3D; \Lambda \circ ( u\circ U)&#x3D; \sum_{n\le x}\Lambda(n)[\frac{x}{n}] &#x3D; u\circ (\Lambda \circ U) &#x3D; \sum_{n\le x}\psi(\frac{x}{n})$ 由 引理5 得证</p>
<hr>
<p>$x \log 2+O(\log x)$</p>
<p>$&#x3D;\sum_{n\le x}\log n - 2\sum_{n\le \frac{x}{2}}\log n$,引理5</p>
<p>$&#x3D;\sum_{n\le x}\psi(\frac{x}{n}) - 2\sum_{n\le \frac{x}{2}} \psi(\frac{x}{2n})$,定理4</p>
<p>$&#x3D;\sum_{n\le x}(-1)^{n-1}\psi(\frac{x}{n}) &lt; \psi(x)$, 这里用到了$\psi$单调递增</p>
<p>即存在$A_1 x &lt; \psi(x)$</p>
<p>引理6: $x\ge 1$,则有 $|\sum_{n\le x}\frac{\mu(n)}{n}|\le 1$</p>
<p>证明: 因为(第二章例7) $1&#x3D;\sum_{n\le x}\mu(n)[\frac{x}{n}]&#x3D;\sum_{n\le x}\mu(n)\frac{x}{n}-\sum_{n\le x}\mu(n)\lbrace\frac{x}{n}\rbrace$</p>
<p>$|\sum_{n\le x}\frac{\mu(n)}{n}|&#x3D;\frac{1}{x}|1+\lbrace x\rbrace+\sum_{2\le n\le x}\mu(n)\lbrace\frac{x}{n}\rbrace| \le \frac{1}{x}(1+\lbrace x\rbrace+([x]-1)) &#x3D; 1$</p>
<p>引理7: $x&gt;1$则 $\sum_{n\le x}\frac{\mu(n)}{n}\log \frac{x}{n}&#x3D;O(1)$</p>
<p>证明: $\sum_{k\le \frac{x}{n}}\frac{1}{k}&#x3D;\log \frac{x}{n}+\gamma+O(\frac{n}{x})$</p>
<p>$\sum_{n\le x}\frac{\mu(n)}{n}\log \frac{x}{n}&#x3D;\sum_{n\le x}\frac{\mu(n)}{n}(\sum_{k\le \frac{x}{n}}\frac{1}{k}-\gamma+O(\frac{n}{x}))$</p>
<p>$&#x3D;\sum_{n\le x}\frac{\mu(n)}{n} \sum_{k\le \frac{x}{n}}\frac{1}{k} - \gamma \sum_{n\le x}\frac{\mu(n)}{n}+ O(\frac{1}{x})\sum_{n\le x}\mu(n)$</p>
<p>$&#x3D;\sum_{d\le x}\frac{1}{d} \sum_{n|d} \mu(n) + O(1)+O(1)$, 通过令$d&#x3D;kn$</p>
<p>$&#x3D;\sum_{d\le x}\frac{1}{d} I(d) + O(1)&#x3D;1+O(1)&#x3D;O(1)$</p>
<hr>
<p>$\displaystyle \Lambda(n)&#x3D;\sum_{d|n}\mu(d)\log \frac{n}{d}$</p>
<p>$\displaystyle \psi(x)&#x3D;\Lambda\circ U&#x3D;(\mu * \log)\circ U&#x3D;\mu \circ (\log \circ U)&#x3D;\sum_{n\le x}\mu(n)\sum_{m\le \frac{x}{n}}\log m&#x3D;\sum_{n\le [x]-1}\mu(n)\sum_{m\le \frac{x}{n}}\log m$</p>
<p>$\displaystyle&#x3D;\sum_{n\le [x]-1}\mu(n)(\frac{x}{n}\log \frac{x}{n}-\frac{x}{n}+O(\log \frac{x}{n}))$,根据引理4</p>
<p>$\displaystyle&#x3D;x\sum_{n\le [x]-1}\frac{\mu(n)}{n}\log \frac{x}{n}-x\sum_{n\le [x]-1}\frac{\mu(n)}{n}+\sum_{n\le [x]-1}\mu(n)O(\log \frac{x}{n})$<br>$&#x3D;xO(1)+xO(1)+O(\sum_{n\le x}\log \frac{x}{n}) &#x3D; O(x)$</p>
<p>即存在$A_2 x &gt; \psi(x)$</p>
<p>定理5(Chebyshev定理):  根据定理3和 $A_1x &lt; \psi(x) &lt; A_2x$最初的猜想$C_1\frac{x}{\log x}&lt; \pi(x) &lt; C_2\frac{x}{\log x}$得证</p>
<blockquote>
<p>教材的顺序并不是“正常的研究顺序”，正常的研究顺序这些之间也应该是由表达式知道需要再去求那些引理的估计，引理先行在这里不少是有点先知的感觉</p>
</blockquote>
<p>Chebyshev不等式的应用</p>
<p>定理6: 设$x&gt;1$则$\displaystyle \sum_{n\le x}\frac{\Lambda(n)}{n}&#x3D;\log x+O(1)$,$\displaystyle \sum_{p\le x}\frac{\log p}{p}&#x3D;\log x+O(1)$</p>
<p>$\displaystyle x\sum_{n\le x}\frac{\Lambda(n)}{n}-\sum_{n\le x}\Lambda(n)\lbrace\frac{x}{n}\rbrace&#x3D;\sum_{n\le x}\Lambda(n)[\frac{x}{n}]&#x3D;x\log x+O(x)$</p>
<p>即$\displaystyle \sum_{n\le x}\frac{\Lambda(n)}{n}&#x3D;\frac{1}{x}\sum_{n\le x}\Lambda(n)\lbrace\frac{x}{n}\rbrace + \log x+O(1)\le \frac{1}{x}\sum_{n\le x}\Lambda(n) + \log x+O(1)&#x3D;\log x+O(1)$</p>
<p>$\displaystyle \sum_{n\le x}\frac{\Lambda(n)}{n}&#x3D;\sum_{p\le x}\frac{\log p}{p}+\sum_{p^m\le x,m\ge 2}\frac{\log p}{p^m}$</p>
<p>$\displaystyle \sum_{p^m\le x,m\ge 2}\frac{\log p}{p^m}\le \sum_{p\le x}\log p\sum_{m\ge 2}\frac{1}{p^m}&#x3D;O(\sum_{p\le x}\frac{\log p}{p^2})&#x3D;O(1)$ 得证</p>
<p>定理7: 设$x\ge 2$则存在常数$C_3$使得$\displaystyle \sum_{p\le x}\frac{1}{p}&#x3D;\log \log x+C_3+O(\frac{1}{\log x})$</p>
<p>使用引理4，令: $C_n&#x3D;\frac{[n \text{ is prime}]\log n}{n},f(n)&#x3D;\frac{1}{\log n}$, 因此$\displaystyle S(x)&#x3D;\sum_{n\le x}C_n&#x3D;\sum_{p\le x}\frac{\log p}{p}$</p>
<p>$\displaystyle \sum_{p\le x}\frac{1}{p}&#x3D;\sum_{p\le x}\frac{\log p}{p}\frac{1}{\log p}&#x3D;\frac{S(x)}{\log x}+\int_{2}^x\frac{S(t)}{t\log^2 t}dt$</p>
<p>$&#x3D;\frac{\log x+ O(1)}{\log x}+\int_{2}^x\frac{\log t+ O(1)}{t\log^2 t}dt$</p>
<p>$&#x3D;1+O(\frac{1}{\log x})+\int_{2}^x\frac{1}{t\log  t}dt+\int_{2}^x\frac{ O(1)}{t\log^2 t}dt$</p>
<p>$&#x3D;1+O(\frac{1}{\log x})+(\log \log x - \log \log 2)+(\int_{2}^{\infty} \frac{ O(1)}{t\log^2 t}dt-\int_{x}^{\infty}\frac{ O(1)}{t\log^2 t}dt)$</p>
<p>$&#x3D;1+O(\frac{1}{\log x})+(\log \log x - \log \log 2)+(O(1)+O(\frac{1}{log x}))$</p>
<p>得证</p>
<p>定理8: $x \ge 2$ 则存在常数$C_4$使得$\prod_{p\le x}(1-\frac{1}{p})&#x3D;\frac{C_4}{\log x}+O(\frac{1}{\log ^2 x})$</p>
<p>令$y&#x3D;\prod_{p\le x}(1-\frac{1}{p})$</p>
<p>$\log y&#x3D;\log \prod_{p\le x}(1-\frac{1}{p})&#x3D;\sum_{p\le x}\log(1-\frac{1}{p})$</p>
<p>$&#x3D;\sum_{p\le x}(-\frac{1}{p})+\sum_{p\le x}(\log(1-\frac{1}{p})+\frac{1}{p})$</p>
<p>$&#x3D;-\sum_{p\le x} \frac{1}{p}+\sum_{p}(\log(1-\frac{1}{p})+\frac{1}{p})-\sum_{p &gt; x}(\log(1-\frac{1}{p})+\frac{1}{p})$</p>
<p>$&#x3D;-(\log \log x+C_3+O(\frac{1}{\log x}))+C_5+\sum_{p&gt;x}O(\frac{1}{p^2})$,这里用了$\log x &#x3D; x-\frac{1}{2}x^2+o(x^3)$</p>
<p>$y&#x3D;e^{-\log \log x+C_6+O(\frac{1}{\log x})}&#x3D;\frac{C_4}{\log x}e^{O(\frac{1}{\log x})}&#x3D;\frac{C_4}{\log x}(1+O(\frac{1}{\log x}))&#x3D;\frac{C_4}{\log x}+O(\frac{1}{\log^2 x})$</p>
<h1 id="函数-omega-n-与-Omega-n"><a href="#函数-omega-n-与-Omega-n" class="headerlink" title="函数$\omega(n)$与$\Omega(n)$"></a>函数$\omega(n)$与$\Omega(n)$</h1><p>定理9: $\displaystyle \sum_{n\le x}\omega(n)&#x3D;x\log \log x+C_7 x+O(\frac{x}{\log x})$,$\sum_{n\le x}\Omega(n)&#x3D;x\log \log x+C_8 x+O(\frac{x}{\log x})$</p>
<p>$\displaystyle \sum_{n\le x}\omega(n)&#x3D;\sum_{n\le x}\sum_{p|n}1 &#x3D;\sum_{p\le x}[\frac{x}{p}]&#x3D;x\sum_{p\le x}\frac{1}{p}+O(\pi(x))$</p>
<p>$&#x3D;x(\log \log x+C_3+O(\frac{1}{\log x}))+O(\frac{x}{log x})$</p>
<p>$&#x3D;x\log \log x+C_3x+O(\frac{x}{log x})$</p>
<p>$\displaystyle \sum_{n\le x}\Omega(n) &#x3D; \sum_{n\le x}\sum_{p^k | n}1&#x3D;\sum_{p^k\le x}&#x3D;\sum_{p\le x}[\frac{x}{p}]+\sum_{p^k\le x,k\ge 2}[\frac{x}{p^k}]&#x3D;\sum_{n\le x}\omega(n)+(\sum_{p^k\le x,k\ge 2}\frac{x}{p^k}-\sum_{p^k\le x,k\ge 2}\lbrace\frac{x}{p^k}\rbrace)$</p>
<p>$\displaystyle \sum_{p^k\le x,k\ge 2}\frac{x}{p^k} &#x3D; x\sum_{k&#x3D;2}^{\infty}\sum_{p}\frac{1}{p^k}+O(x\sum_{p&gt;\sqrt{x}}\frac{1}{p^2})&#x3D;C_9x+O(\sqrt{x})$</p>
<p>$\displaystyle \sum_{p^k\le x,k\ge 2}\lbrace\frac{x}{p^k}\rbrace\le  \sum_{p^k\le x,k\ge 2}1 \le \log x \sum_{p &lt; \sqrt{x}}1&#x3D;O(\frac{x}{\log x})$</p>
<p>得证</p>
<p>定理10: $\sum_{n\le x}\omega^2(n)&#x3D;x(\log \log x)^2+O(x\log \log x)$</p>
<p>$\sum_{n\le x}\omega^2(n)$&#x3D;$\sum_{n\le x}\omega(n)+\sum_{n\le x}\omega(n)(\omega(n)-1)$</p>
<p>$&#x3D;O(x\log \log x)+\sum_{n\le x}\sum_{p_1p_2|n,p_1\ne p_2}1$</p>
<p>$&#x3D;O(x\log \log x)+\sum_{n\le x}(\sum_{p_1p_2|n}1-\sum_{p^2|n}1)$</p>
<p>$&#x3D;O(x\log \log x)+\sum_{p_1p_2\le x}[\frac{x}{p_1p_2}]-\sum_{p^2\le x}[\frac{x}{p^2}]$</p>
<p>$&#x3D;O(x\log \log x)+(x\sum_{p_1p_2\le x}\frac{1}{p_1p_2}+O(\sum_{p_1p_2\le x}1))+O(x)$, $(\sum_{p\le \sqrt{x}}\frac{1}{p})^2 \le \sum_{p_1p_2\le x} \le (\sum_{p\le x}\frac{1}{p})^2$</p>
<p>$&#x3D;O(x\log \log x)+x(\log \log x + O(1))^2+O(\sum_{p\le x}\pi(\frac{x}{p}))+O(x)$</p>
<p>$&#x3D;O(x\log \log x)+x((\log \log x)^2 + O(\log \log x))+O(x\log \log x)+O(x)$</p>
<p>$&#x3D;x(\log \log x)^2 + O(x\log \log x)$</p>
<p>定理11(TODO): 任给$\epsilon &gt; 0$,则在区间$[1,x]$中使得$|\omega(n)-\log \log n|&gt; (\log \log n)^{\frac{1}{2}+\epsilon}$ 的个数为$o(x)$</p>
<p>$[1,x]&#x3D;[1,x^{\frac{1}{e}}]+(x^{\frac{1}{e}},x]$, 左侧显然是$o(x)$</p>
<p>$n\in(x^{\frac{1}{e}},x]$时有$\log \log x - 1 &lt; \log \log n \le \log \log x$</p>
<p>注意到$\omega(n)$是整数,所以只用证明$|\omega(n)-\log \log x| \ge (\log \log x)^{\frac{1}{2}+\epsilon}$ 的$n\le x$个数为$o(x)$即可(????$w(n)$不会有覆盖不到边界整数的情况导致n增长质数间距个吗?,但是因为$\sum_{p_i,i\le s}1 \sim \sum_{p_i,i+1\le s}1$所以不担心多一个少一个在均值下量级不变?)</p>
<p>$\sum_{n\le x}(\omega(n)-\log \log x)^2 &#x3D; \sum_{n\le x}\omega^2(n)-2\log \log x\sum_{n\le x}\omega(n)+[x](\log \log x)^2&#x3D;O(x\log \log x)$</p>
<p>若$[1,x]$有$M$个$n$让不等式成立,$M(\log \log x)^{1+2\epsilon} &lt; M(\omega(n)-\log \log x)^2 &#x3D; MO(x\log \log x)&#x3D;O(x\log \log x)$</p>
<p>$M&#x3D;O(\frac{x}{(\log \log x)^{2\epsilon}})$, 得证(??? 大小O 靠epsilon?)</p>
<p>换句话说，在区间$[1,x]$内, 对几乎所有($o(x)$)的$n$恒有$\omega&#x2F;\Omega(n)\sim \log \log n$, 因为上面公式描述的是远离的情况, 而远离的个数是$o(x)$的</p>
<h1 id="Bertrand-假设-1845提出"><a href="#Bertrand-假设-1845提出" class="headerlink" title="Bertrand 假设 (1845提出)"></a>Bertrand 假设 (1845提出)</h1><p>主要内容是$[x,2x]$之间必有素数,被Chebyshev首先证明(1850),<a href="http://math.stanford.edu/~ksound/Math155Spr12/Bertrand.pdf">最简单的证明是由Erdős在1932年发表的</a></p>
<p>引理8: 设$x\ge 2$则$\prod_{p\le x}p &lt; 4^x$</p>
<p>只需要证明$x\text{ is prime}$时成立</p>
<p>归纳法,$x&#x3D;2,3$时成立,若$x &lt; n$的所有奇数都成立</p>
<p>$K&#x3D;\frac{n\pm 1}{2}$(让$K$为奇数), 则$n-K$为偶数,且$n-K &#x3D;2K\pm 1-K \le K+1$</p>
<p>对于$p\in (K,n]$有$p|n!,p\nmid K!,p\nmid (n-K)!$即$p|\frac{n!}{K!(n-K)!}$即$\prod_{K&lt;p\le n}p\le \binom{n}{K} &#x3D; \frac{\binom{n}{K}+\binom{n}{n-K}}{2} &lt; \frac{(1+1)^n}{2} &#x3D; 2^{n-1}$</p>
<p>$\prod_{p\le x}p &#x3D;\prod_{p\le K} p\prod_{K&lt;p\le n}p &lt; 4^K2^{n-1}&#x3D;2^{n+2K-1} \le 4^n$</p>
<p>定理12: $n &gt; 1$则在$[n,2n]$中必有素数</p>
<p>对于$n\le 128$可以枚举证明,对于$n\ge 128$用反证法</p>
<p>若存在$n\ge 128$不成立,因为(Legendre’s formula)</p>
<p>$\displaystyle \binom{2n}{n}&#x3D;\frac{2n!}{n!n!}&#x3D;\prod_{p\le 2n}p^{\alpha_p&#x3D;\sum_{j\ge 1}([\frac{2n}{p^j}]-2[\frac{n}{p^j}])}&#x3D;\prod_{p\le n}p^{\alpha_p}&#x3D;\prod_{p\le \sqrt{2n}}p^{\alpha_p}\prod_{p\in (\sqrt{2n},\frac{2}{3}p]}p^{\alpha_p}\prod_{p\in (\frac{2}{3}n,n]}p^{\alpha_p}$</p>
<p>对于第一个因为$\sum_{j\ge 1}([\frac{2n}{p^j}]-2[\frac{n}{p^j}])$ 中对于每个$j$,括号内为0或1, 且$p^j\le 2n$,所以$\alpha_p\le \log_p 2n$即$\prod_{p\le \sqrt{2n}}p^{\alpha_p} \le \prod_{p\le \sqrt{2n}}2n$</p>
<p>对于第二个,$p^2\ge 2n$同理$\alpha_p \le 1$,$\prod_{p\in (\sqrt{2n},\frac{2}{3}p]}p^{\alpha_p}\le \prod_{p\in (\sqrt{2n},\frac{2}{3}p]}p$</p>
<p>对于第三部分$p^2&gt;2n,1\ &lt; \frac{n}{p} &lt; \frac{3}{2}, 2\le \frac{2n}{p} &lt; 3$同理$\alpha_p&#x3D;[\frac{2n}{p}]-2[\frac{n}{p}]&#x3D;0$</p>
<p>$n\ge 128$时$\sqrt{2n} \ge 16$, 所以有$\pi(\sqrt{2n}) &lt;$ 奇数个数-(9和15) $&#x3D;\frac{\sqrt{2n}+2}{2}-2$</p>
<p>由上$\displaystyle \binom{2n}{n}\le\prod_{p\le \sqrt{2n}}2n\prod_{\sqrt{2n} &lt; p\le\frac{2}{3}n} p &lt; \prod_{p\le \sqrt{2n}}2n\prod_{ &lt; p\le\frac{2}{3}n} p &lt; (2n)^{\sqrt{\frac{n}{2}}-1}4^{\frac{2n}{3}}$<br>又$\binom{2n}{n}$是$(1+1)^{2n}$展开的$2n+1$系数中最大的(注意首尾都是1),因此$2n\binom{2n}{n} &gt; (1+1)^{2n}$</p>
<p>由此有$\frac{2^{2n}}{2n} &lt; \binom{2n}{n} &lt; (2n)^{\sqrt{\frac{n}{2}}-1}4^{\frac{2n}{3}}$, 感觉顺序上是前面的导致了后面的拆分的想法,比如这里的<code>-1</code>什么的</p>
<p>即$2^{\frac{2}{3}n} &lt; (2n)^{\sqrt{\frac{n}{2}}}$</p>
<p>直接取对数建立函数 求导 可证矛盾,得证</p>
<h1 id="函数-M-x-x3D-mu-circ-U"><a href="#函数-M-x-x3D-mu-circ-U" class="headerlink" title="函数$M(x)&#x3D;\mu \circ U$"></a>函数$M(x)&#x3D;\mu \circ U$</h1><p>$M(x)&#x3D;\sum_{n\le x}\mu(n)$, Mertens function</p>
<p>本节主要证明的是$\lim_{x\to\infty}\frac{M(x)}{x}&#x3D;0$ 与$\lim_{x\to \infty}\frac{\pi(x)}{\frac{x}{\log x}}&#x3D;1$ 等价</p>
<p>定理13: $\lim_{x\to\infty}\frac{M(x)}{x}&#x3D;0$ 与$\lim_{x\to \infty}\frac{\sum_{n\le x}\mu(n)\log n}{x\log x}&#x3D;0$ 等价</p>
<p>根据引理4,令$C_n&#x3D;\mu(n),f(n)&#x3D;\log n$, 有</p>
<p>$\displaystyle \sum_{n\le x}\mu(n)\log n &#x3D; M(x)\log x-\int_{1}^x\frac{M(t)}{t}dt&#x3D;M(x)\log x + O(x)$</p>
<p>同时除以$x\log x$即$\frac{M(x)}{x} -\frac{\sum_{n\le x}\mu(n)\log n}{x\log x}&#x3D;O(\frac{1}{\log x})$得证</p>
<p>定理14: 若$\psi(x)\sim x,x\to \infty$则$M(x) &#x3D; o(x),x \to \infty$</p>
<p>因为 $\Lambda(n)&#x3D;-\sum_{d|n}\mu(d)\log d$所以 $-\mu(n)\log n&#x3D;\sum_{d|n}\mu(d)\Lambda(\frac{n}{d})&#x3D;\mu * \Lambda$</p>
<p>根据 二章的 定理17: $-\sum_{n\le x}\mu(n)\log n&#x3D;\sum_{n\le a}\mu(n)\psi(\frac{x}{n})+\sum_{n\le b}\Lambda(n)M(\frac{x}{n})-M(a)\psi(b)$</p>
<p>取$a&#x3D;xe^{-\sqrt{\log x}},b&#x3D;e^{\sqrt{\log x}}$</p>
<p>$n\le a,x\to \infty$时有$\psi(\frac{x}{n})&#x3D;\frac{x}{n}+o(\frac{x}{n})$</p>
<p>$\sum_{n\le a}\mu(n)\psi(\frac{x}{n})&#x3D;x\sum_{x\le a}\frac{\mu(n)}{n}+o(x\sum_{n\le x}\frac{1}{n})&#x3D;O(x)+o(x\log x)&#x3D;o(x\log x)$</p>
<p>$\sum_{n\le b}\Lambda(n)M(\frac{x}{n})&#x3D;O(x\sum_{n\le b}\frac{\Lambda(n)}{n})&#x3D;O(x\log b)+O(x)$ &#x3D;$O(x\sqrt{\log x})+O(x)&#x3D;o(x\log x)$</p>
<p>$M(a)\psi(b)&#x3D;O(a)O(b)&#x3D;O(ab)&#x3D;O(x)&#x3D;o(x\log x)$</p>
<p>即$\psi \sim x\Rightarrow \sum_{n\le x}\mu(n)\log n &#x3D; o(x\log x)\Rightarrow M(x)&#x3D;o(x)$</p>
<p>得证</p>
<p>定理15: $M(x)&#x3D;o(x),x\to \infty$ 包含$\psi(x)\sim x,x\to \infty$, </p>
<blockquote>
<p>这里后面的是上面我们和素数定理等价的定理，上面并没有证明其正确性（上面只有等价关系），这里要证明的是$M(x)&#x3D;o(x)$和素数定理之间的等价关系，所以就要证明互相可以推</p>
</blockquote>
<p>先证明 $\psi(x)&#x3D;x-\sum_{lk\le x}\mu(l)f(k)+O(1)$, 其中$f(n)&#x3D;d(n)-\log n-2\gamma$</p>
<p>首先 $[x]&#x3D;u\circ U,\psi&#x3D;\Lambda \circ U,1&#x3D;I\circ U$,$d(n)&#x3D;\sum_{l|n}1&#x3D;1 * u$,$1&#x3D;\mu * d$,$\Lambda &#x3D; \mu * \log$,$I&#x3D;\mu * u$</p>
<p>$[x]-\psi(x)-2\gamma&#x3D;\sum_{n\le x}(1-\Lambda(n)-2\gamma I(n))$</p>
<p>$&#x3D;\sum_{n\le x} \sum_{l|n} \mu(l)(d(\frac{n}{l})-\log \frac{n}{l}-2\gamma)$</p>
<p>$&#x3D;\sum_{lk\le x}\mu(l)(d(k)-\log k - 2\gamma)$</p>
<p>第一部分得证, 那么剩下的就是要证明$\sum_{lk \le x}\mu(l)f(k) &#x3D; o(x),x\to \infty$</p>
<p>再用第二章定理17:$\sum_{lk \le x}\mu(l)f(k)&#x3D;\sum_{n\le a}\mu(n)F(\frac{x}{n})+\sum_{n\le b}f(n)M(\frac{x}{n})-M(a)F(b)$,其中$F&#x3D;f\circ U,ab&#x3D;x,a&gt;0$</p>
<p>$\forall \epsilon &gt; 0$存在$x_0&#x3D;x_0(\epsilon)$,使$x&gt;x_0$时$|\sum_{lk\le x}\mu(l)f(k)|&lt;\epsilon x$</p>
<p>$F(x)&#x3D;\sum_{n\le x}d(n)-\sum_{n\le x}\log n-2\gamma\sum_{n\le x}1$</p>
<p>$&#x3D;(x\log x+(2\gamma -1)x + O(\sqrt{x}))-(x \log x - x + O(\log x))-2\gamma x&#x3D;O(\sqrt{x})$, (二章定理18+本章引理5)</p>
<p>$\sum_{n\le a}\mu(n)F(\frac{x}{n})\le \sum_{n\le a} 1\cdot (A\sqrt{\frac{x}{n}})\le 2A\sqrt{xa}&#x3D;\frac{2Ax}{\sqrt{b}}$</p>
<p>因为存在常数$B$,$|f(n)|\le B \sqrt{n}$,$M(x)&#x3D;o(x)$存在$x_1&#x3D;x_1(\epsilon)$,当$x&gt;x_1$时$|M(x)|\le \frac{1}{36AB}\epsilon^2 x$</p>
<p>取$a&#x3D;\frac{x}{b},b&#x3D;\frac{36A^2}{\epsilon^2},x_0&#x3D;x_1b$,$x&gt;x_0$时</p>
<p>$|\sum_{n\le b}f(n)M(\frac{x}{n})|\le \sum_{n\le b} |f(n)||M(\frac{x}{n})|$</p>
<p>$\le \frac{\epsilon^2}{36AB}x\sum_{n\le b}\frac{|f(n)|}{n}$</p>
<p>$\le \frac{\epsilon^2}{36A}x\sum_{n\le b}\frac{1}{\sqrt{n}}$</p>
<p>$\le \frac{\epsilon^2}{36A}x\cdot 2\sqrt{b}&#x3D;\frac{\epsilon }{3}x$</p>
<p>综上$|\sum_{lk\le x}\mu(l)f(k)|&lt; \frac{2Ax}{\sqrt{b}} + \frac{\epsilon}{3} x+aA\sqrt{b}&#x3D;\frac{\epsilon}{3} x+\frac{\epsilon}{3} x+\frac{\epsilon}{6} x$得证</p>
<h1 id="函数-L-x-x3D-lambda-circ-U"><a href="#函数-L-x-x3D-lambda-circ-U" class="headerlink" title="函数$L(x)&#x3D;\lambda \circ U$"></a>函数$L(x)&#x3D;\lambda \circ U$</h1><p>定理16: $L(x)&#x3D;\sum_{n\le x}\lambda(n)&#x3D;o(x)$ 与$\sum_{n\le x}\mu(n)&#x3D;o(x)$等价</p>
<p>$\Leftarrow :$</p>
<p>继续第二章定理17:因为$\lambda &#x3D; \mu *[n\text{ is square}]$,令$g(n)&#x3D;n\text{ is square},G&#x3D;g\circ U$</p>
<p>$\displaystyle \sum_{n\le x}\lambda(n)&#x3D;\sum_{n\le x^{\frac{2}{3}}}g(n)M(\frac{x}{n})+\sum_{n\le x^{\frac{1}{3}}}\mu(n)G(\frac{x}{n})-G(x^{\frac{2}{3}})M(x^{\frac{1}{3}})$</p>
<p>$\displaystyle &#x3D;o(x\sum_{n\le x^{\frac{2}{3}}}\frac{g(n)}{n})+O(\sum_{n\le x^{\frac{1}{3}}}G(\frac{x}{n}))+o(x)$</p>
<p>$\displaystyle &#x3D;o(x\sum_{n&#x3D;1}^{\infty} \frac{1}{n^2})+O(\sqrt{x}\sum_{n\le x^{\frac{1}{3}}}\frac{1}{\sqrt{n}})+o(x) &#x3D; o(x)$</p>
<p>$\Rightarrow :$</p>
<p>(二章习题6:) 因为$\mu(n)&#x3D;\sum_{d^2|n}\mu(d)\lambda(\frac{n}{d^2})&#x3D;\sum_{n&#x3D;d^2k}\mu(d)\lambda(k)$</p>
<p>$\displaystyle \sum_{n\le x}\mu(n)&#x3D;\sum_{n\le x}\sum_{n&#x3D;d^2k}\mu(d)\lambda(k)&#x3D;\sum_{d^2k\le x}\mu(d)\lambda(k)&#x3D;\sum_{d\le \sqrt{x}}\mu(d)\sum_{k\le\frac{x}{d^2}}\lambda(k)$</p>
<p>$\displaystyle &#x3D;\sum_{d\le x^{\frac{1}{3}}}\mu(d)\sum_{k\le \frac{x}{d^2}}\lambda(k)+O(\sum_{k\le x^{\frac{1}{3}}}\sum_{d\le \sqrt{\frac{x}{k}}}1)&#x3D;o(x)+o(x)&#x3D;o(x)$</p>
<h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="2-sum-p-frac-1-p-发散"><a href="#2-sum-p-frac-1-p-发散" class="headerlink" title="2. $\sum_{p} \frac{1}{p}$发散"></a>2. $\sum_{p} \frac{1}{p}$发散</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>我想的通过足够大$x$,$C_1\frac{x}{\log x}&lt;\pi(x)&lt;C_2\frac{x}{\log x}$</p>
<p>去考虑足够大$M$对应$\displaystyle \sum_{t&#x3D;1}^{\infty} \sum_{x\in[M(\frac{4C_2}{C_1})^t,M(\frac{4C_2}{C_1})^{t+1}],x\text{ is prime}} \frac{1}{x} \ge$ 分母等差数列求和</p>
<hr>
<p>另一个方法: Cauchy准则 尾段和$s&#x3D;\sum_{p_i,i\ge t}\le \frac{1}{2}$</p>
<p>与前面互质的等差和$\displaystyle \sum_{t&#x3D;1}^{\infty} \frac{1}{1+\prod_{p_i,i&lt;t}} \le$乘法表示$\sum_{t&#x3D;1}^{\infty}s^t\le\sum_{t&#x3D;1}^{\infty} (\frac{1}{2})^t&#x3D;1$ 矛盾</p>

</details>

<h2 id="4-f-x-为整系数多项式-lbrace-f-n-rbrace-有无限个素因子"><a href="#4-f-x-为整系数多项式-lbrace-f-n-rbrace-有无限个素因子" class="headerlink" title="4. $f(x)$为整系数多项式,$\lbrace f(n)\rbrace$有无限个素因子"></a>4. $f(x)$为整系数多项式,$\lbrace f(n)\rbrace$有无限个素因子</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>若$a_0&#x3D;0,p|f(p)$</p>
<p>若$a_0\ne 0$,反证法,若有限$f(a_0\prod_{p_i})&#x3D;a_0(k\prod_{p_i}+1)$, 右侧会出现新质因子</p>

</details>

<h2 id="8-x-ge-2-证-sum-d-le-x-d-2-n-x3D-O-x-log-3-x"><a href="#8-x-ge-2-证-sum-d-le-x-d-2-n-x3D-O-x-log-3-x" class="headerlink" title="8. $x\ge 2$证$\sum_{d\le x} d^2(n)&#x3D;O(x\log^3 x)$"></a>8. $x\ge 2$证$\sum_{d\le x} d^2(n)&#x3D;O(x\log^3 x)$</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>因为$\alpha_1+\alpha_2+1 \le (\alpha_1+1)(\alpha_2+1)$,所以$d(a)d(b) \ge d(ab)$</p>
<p>$\displaystyle \sum_{d\le x}d^2(n)&#x3D;\sum_{d\le x}d(n)\sum_{u|d}1$</p>
<p>$\displaystyle &#x3D;\sum_{u\le x}\sum_{l\le\frac{x}{u}}d(ul)$</p>
<p>$\displaystyle \le \sum_{u\le x}\sum_{l\le\frac{x}{u}}d(u)d(l)$</p>
<p>$\displaystyle &#x3D; \sum_{u\le x}d(u)\sum_{l\le\frac{x}{u}}d(l)$</p>
<p>$\displaystyle &#x3D; O(\sum_{u\le x}d(u)\frac{x}{u}\log \frac{x}{u})$</p>
<p>$\displaystyle &#x3D; O(x\log x)O(\sum_{u\le x}\frac{d(u)}{u})$,习题7证明了后面一半是$O(\frac{1}{2}\log^2 x)$</p>

</details>

<h2 id="9-x-ge-1-则-sum-n-le-x-frac-phi-n-n-x3D-frac-6-pi-2-x-O-log-x"><a href="#9-x-ge-1-则-sum-n-le-x-frac-phi-n-n-x3D-frac-6-pi-2-x-O-log-x" class="headerlink" title="9. $x\ge 1$则$\sum_{n\le x}\frac{\phi(n)}{n}&#x3D;\frac{6}{\pi^2}x+O(\log x)$"></a>9. $x\ge 1$则$\sum_{n\le x}\frac{\phi(n)}{n}&#x3D;\frac{6}{\pi^2}x+O(\log x)$</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>直接上引理4,但是得到的是$\frac{6}{\pi^2}x+O((\log x)^2)$,大了 也就是$\phi(n)$的估计到这里还不够紧凑</p>
<p>$\sum_{n\le x}\frac{\phi(n)}{n}&#x3D;\sum_{n\le x}\frac{1}{n}\sum_{d|n}\mu(d)\frac{n}{d}$, 因为$\phi &#x3D;\mu * e$</p>
<p>$&#x3D;\sum_{n\le x}\sum_{d|n}\frac{\mu(d)}{d}$</p>
<p>$&#x3D;\sum_{d\le x}\frac{\mu(d)}{d} [\frac{x}{d}]$</p>
<p>$&#x3D;\sum_{d\le x}\frac{\mu(d)}{d} \frac{x}{d}-\sum_{d\le x}\frac{\mu(d)}{d}\lbrace \frac{x}{d}\rbrace$</p>
<p>$&#x3D;x\sum_{d\le x}\frac{\mu(d)}{d^2}+O(\sum_{d\le x}\frac{1}{d})$</p>
<p>$&#x3D;\frac{6}{\pi^2}x+O(\log x)$</p>

</details>

<h2 id="10-使用-frac-n-phi-n-x3D-prod-p-n-1-frac-1-p-1-x3D-sum-d-n-frac-mu-2-d-phi-d-1-证明-sum-n-le-x-frac-n-phi-n-x3D-O-x-sum-n-le-x-frac-1-phi-n-x3D-O-log-x"><a href="#10-使用-frac-n-phi-n-x3D-prod-p-n-1-frac-1-p-1-x3D-sum-d-n-frac-mu-2-d-phi-d-1-证明-sum-n-le-x-frac-n-phi-n-x3D-O-x-sum-n-le-x-frac-1-phi-n-x3D-O-log-x" class="headerlink" title="10. 使用$\frac{n}{\phi(n)}&#x3D;\prod_{p|n}(1-\frac{1}{p})^{-1}&#x3D;(\sum_{d|n}\frac{\mu^2(d)}{\phi(d)})^{-1}$,证明$\sum_{n\le x} \frac{n}{\phi(n)}&#x3D;O(x)$,$\sum_{n\le x}\frac{1}{\phi(n)}&#x3D;O(\log x)$"></a>10. 使用$\frac{n}{\phi(n)}&#x3D;\prod_{p|n}(1-\frac{1}{p})^{-1}&#x3D;(\sum_{d|n}\frac{\mu^2(d)}{\phi(d)})^{-1}$,证明$\sum_{n\le x} \frac{n}{\phi(n)}&#x3D;O(x)$,$\sum_{n\le x}\frac{1}{\phi(n)}&#x3D;O(\log x)$</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>$\displaystyle \frac{n}{\phi(n)}&#x3D;\prod_{p|n}(1-\frac{1}{p})^{-1}&#x3D;\prod_{p|n}(\frac{p}{p-1})&#x3D;\prod_{p|n}(\frac{p^{\alpha_p+1}-1}{p-1}\frac{p^{\alpha_p+1}}{p^{\alpha_p+1}-1}\frac{1}{p^{\alpha_p}})$</p>
<p>$\displaystyle &#x3D;\sigma(n) (\prod_{p|n}\frac{1}{1-\frac{1}{p^{\alpha_p+1}}}) \frac{1}{n}$</p>
<p>$\displaystyle \le \frac{\sigma(n)}{n} (\prod_{p|n}\sum_{i&#x3D;0}^{\infty} \frac{1}{p^{2i}})$</p>
<p>$\displaystyle \le \frac{\sigma(n)}{n} (\sum_{j&#x3D;1}^{\infty}  \frac{1}{p^{2j}}) &#x3D; \frac{\pi^2}{6}\frac{\sigma(n)}{n}$</p>
<p>$\displaystyle \sum_{n\le x}\frac{n}{\phi(n)}\le \frac{\pi^2}{6} \sum_{n\le x}\frac{\sigma(n)}{n}$</p>
<p>$\displaystyle \sum_{n\le x}\frac{\sigma(n)}{n}&#x3D;\frac{1}{x}(\frac{\pi^2}{12} x^2 + O(x\log x))+\int_{1}^{x}\frac{\frac{\pi^2}{12} t^2 + O(t\log t)}{t^2}dt$, (第二章定理19)</p>
<p>$&#x3D;O(x)$</p>
<p>后面直接同样 引理4就好了</p>

</details>

<h2 id="15-sum-p-x-frac-log-p-p-x3D-O-log-log-x"><a href="#15-sum-p-x-frac-log-p-p-x3D-O-log-log-x" class="headerlink" title="15. $\sum_{p|x}\frac{\log p}{p}&#x3D;O(\log \log x)$"></a>15. $\sum_{p|x}\frac{\log p}{p}&#x3D;O(\log \log x)$</h2><blockquote>
<p>教材这里写错了,同时用了n和x</p>
</blockquote>
<details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>$\sum_{p|x}\frac{\log p}{p} &#x3D; \sum_{p|x,p \le \log x}\frac{\log p}{p} + \sum_{p|x,p &gt; \log x}\frac{\log p}{p}$</p>
<p>$\le \sum_{p \le \log x}\frac{\log p}{p} + \sum_{p|x,p &gt; \log x}\frac{\log \log x}{\log x}$, 用到$\frac{\log x}{x}$的增减区间,上面也是根据增减区间切割的</p>
<p>$\le (\log \log x+O(1))+\log_{\log x} x\cdot \frac{\log \log x}{\log x}$,定理6</p>
<p>$&#x3D;O(\log \log x)$</p>

</details>

<h2 id="16-n-ge-3-sum-d-n-frac-mu-d-log-d-d-x3D-O-log-log-n"><a href="#16-n-ge-3-sum-d-n-frac-mu-d-log-d-d-x3D-O-log-log-n" class="headerlink" title="16. $n\ge 3$,$\sum_{d|n}\frac{\mu(d)\log d}{d}&#x3D;O(\log \log n)$"></a>16. $n\ge 3$,$\sum_{d|n}\frac{\mu(d)\log d}{d}&#x3D;O(\log \log n)$</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>$\displaystyle \sum_{d|n}\frac{\mu(d)\log d}{d}&#x3D;\sum_{d|n}\frac{\mu(d)}{d}\sum_{p|d}\log p$</p>
<p>$\displaystyle &#x3D;\sum_{p|n} \log p \sum_{p|d,d|n}\frac{\mu(d)}{d}$</p>
<p>$\displaystyle &#x3D;\sum_{p|n} \frac{\log p}{p} (-\sum_{t|\frac{n}{p^{\alpha_p}}}\frac{\mu(t)}{t})$</p>
<p>$\displaystyle &#x3D;O(\sum_{p|n} \frac{\log p}{p})$, 因为$\displaystyle \sum_{t|n}\frac{\mu(t)}{t} &#x3D; \frac{1}{n}\sum_{t|n}\mu(t)\frac{n}{t}&#x3D;\frac{(\mu * e)(n)}{n}&#x3D;\frac{\phi(n)}{n} \le 1$</p>
<p>由题目15可证</p>
<blockquote>
<p>还是觉得好怪啊, 这样看的话，当给定了$p$的集合以后 左边因为$\mu(d)$ 只有一次方以内的组合才不是$0$,就是一个定值了,而$\log \log n$是无限增长的,不过一个无限增长的当然是可以框住有限的,但实际上是从n的增长来看的,那么左侧就会忽大忽小</p>
</blockquote>

</details>

<h2 id="17-试证存在常数-C-n-ge-3-时-phi-n-gt-C-frac-n-log-log-n"><a href="#17-试证存在常数-C-n-ge-3-时-phi-n-gt-C-frac-n-log-log-n" class="headerlink" title="17. 试证存在常数$C$,$n\ge 3$时$\phi(n)&gt;C\frac{n}{\log \log n}$"></a>17. 试证存在常数$C$,$n\ge 3$时$\phi(n)&gt;C\frac{n}{\log \log n}$</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>取$q&#x3D;A\omega(n)\log(3\omega(n))$<br>$\pi(q)\ge C_1\frac{q}{\log q}&#x3D;C_1\frac{A\omega(n)\log(3\omega(n))}{\log (A\omega(n)\log(3\omega(n)))}&#x3D;\omega(n) \frac{AC_1}{\frac{\log (A\omega(n))}{\log(3\omega(n))}+\frac{\log\log(3\omega(n))}{\log(3\omega(n))}}$<br>分母大于 1+0, 所以A取足够大时, 右边有正的下界</p>
<p>$\pi(q) \ge \omega(n)$</p>
<p>$q&#x3D;A\omega(n)\log 3\omega(n)\le A\log_2n\log(3\log_2n)\le C_2\log n\log \log n$</p>
<p>$\frac{\phi(n)}{n}&#x3D;\prod_{p|n}(1-\frac{1}{p})\ge\prod_{p\le q}(1-\frac{1}{p})$</p>
<p>$&#x3D;\frac{C_4}{\log q}+O(\frac{1}{\log^2 q})$, 根据定理8</p>
<p>$\ge \frac{C_5}{\log q}$</p>
<p>$\ge \frac{C_6}{\log(C_2\log n\log \log n)}$</p>
<p>$\ge \frac{C_7}{\log\log n}$</p>

</details>

<h2 id="18-displaystyle-sum-n-x3D-1-infty-frac-mu-n-n-s-x3D-frac-1-zeta-s-displaystyle-sum-n-x3D-1-infty-frac-d-n-n-s-x3D-zeta-2-s-displaystyle-sum-n-x3D-1-infty-frac-Lambda-n-n-s-x3D-frac-zeta’-s-zeta-s"><a href="#18-displaystyle-sum-n-x3D-1-infty-frac-mu-n-n-s-x3D-frac-1-zeta-s-displaystyle-sum-n-x3D-1-infty-frac-d-n-n-s-x3D-zeta-2-s-displaystyle-sum-n-x3D-1-infty-frac-Lambda-n-n-s-x3D-frac-zeta’-s-zeta-s" class="headerlink" title="18.  $\displaystyle \sum_{n&#x3D;1}^{\infty}\frac{\mu(n)}{n^s}&#x3D;\frac{1}{\zeta(s)}$ ,$\displaystyle \sum_{n&#x3D;1}^{\infty}\frac{d(n)}{n^s}&#x3D;\zeta^2(s)$, $\displaystyle \sum_{n&#x3D;1}^{\infty}\frac{\Lambda(n)}{n^s}&#x3D;-\frac{\zeta’ (s)}{\zeta(s)}$"></a>18.  $\displaystyle \sum_{n&#x3D;1}^{\infty}\frac{\mu(n)}{n^s}&#x3D;\frac{1}{\zeta(s)}$ ,$\displaystyle \sum_{n&#x3D;1}^{\infty}\frac{d(n)}{n^s}&#x3D;\zeta^2(s)$, $\displaystyle \sum_{n&#x3D;1}^{\infty}\frac{\Lambda(n)}{n^s}&#x3D;-\frac{\zeta’ (s)}{\zeta(s)}$</h2><p>$\zeta(s)&#x3D;\sum_{n&#x3D;1}^{\infty} \frac{1}{x^s}$ Riemann函数</p>
<details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>(1) $\displaystyle &#x3D;\frac{1}{\prod_{p}\sum_{j&#x3D;0}^{\infty} \frac{1}{p^{sj}}}&#x3D;$</p>
<p>(2) $\displaystyle &#x3D;\prod_{p}\sum_{i&#x3D;0}^{\infty}\frac{i+1}{(p^s)^i}&#x3D;$</p>
<p>(3) $\displaystyle &#x3D;\sum_{p}\log p\sum_{i&#x3D;1}^{\infty}\frac{1}{(p^s)^i}&#x3D;\sum_{p}\log p\frac{\frac{1}{p^s}}{1-\frac{1}{p^s}}$</p>
<p>$&#x3D;(\int_{0}^s \sum_{p}\log p\frac{\frac{1}{p^t}}{1-\frac{1}{p^t}} dt)’$</p>
<p>$&#x3D;(\sum_{p} \int_{0}^s \frac{d(1-\frac{1}{p^t})}{1-\frac{1}{p^t}})’$</p>
<p>$&#x3D;(\sum_{p} \log (1-\frac{1}{p^s}))’$</p>
<p>$&#x3D;(-\sum_{p} \log \frac{1}{1-\frac{1}{p^s}})’$</p>
<p>$&#x3D;(-\zeta(s))’$</p>
<p>得证</p>

</details>

<h2 id="19-sum-n-x3D-1-infty-frac-mu-n-n-x3D-0-与-M-x-x3D-o-x-等价"><a href="#19-sum-n-x3D-1-infty-frac-mu-n-n-x3D-0-与-M-x-x3D-o-x-等价" class="headerlink" title="19. $\sum_{n&#x3D;1}^{\infty} \frac{\mu(n)}{n}&#x3D;0$ 与$M(x)&#x3D;o(x)$等价"></a>19. $\sum_{n&#x3D;1}^{\infty} \frac{\mu(n)}{n}&#x3D;0$ 与$M(x)&#x3D;o(x)$等价</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>$\Rightarrow$:</p>
<p>$M(x)&#x3D;\sum_{n\le x}\mu(n)$</p>
<p>$&#x3D;\sum_{n\le x}\frac{\mu(n)}{n}n$</p>
<p>$&#x3D;x o(1)-\int_{1}^{x} o(1) dt &#x3D;o(x)$</p>
<p>$\Leftarrow$ :</p>
<blockquote>
<p>$\sum_{n&#x3D;1}^{\infty}\mu(n)\frac{1}{n}&#x3D;\frac{1}{x} o(x)+\int_{1}^{x}\frac{o(t)}{t^2}dt$ 太大不行</p>
</blockquote>
<p>TODO</p>

</details>

<h2 id="20-sum-n-le-x-frac-1-Lambda-n-n-x3D-2-gamma-o-1-和素数定理等价"><a href="#20-sum-n-le-x-frac-1-Lambda-n-n-x3D-2-gamma-o-1-和素数定理等价" class="headerlink" title="20. $\sum_{n\le x}\frac{1-\Lambda(n)}{n}&#x3D;2\gamma +o(1)$和素数定理等价"></a>20. $\sum_{n\le x}\frac{1-\Lambda(n)}{n}&#x3D;2\gamma +o(1)$和素数定理等价</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>$\Rightarrow$: $\sum_{n\le x}\frac{1}{n}&#x3D;\log x+\gamma+O(\frac{1}{x})$ 和 定理4 有$\psi(x)&#x3D;x+o(x)$</p>
<p>$\Leftarrow$:</p>
<p>TODO</p>

</details>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本章的核心是 Cheybyshev定理 存在两个正常数使得$C_1\frac{x}{\log x}&lt; \pi(x) &lt; C_2\frac{x}{\log x}$  , 以及围绕着 素数定理 $\pi(x) \sim \frac{x}{\log x} ,x \to \infty$ 有关的几个等价的定理 </p>
<p>first Chebyshev function: $\theta(x) &#x3D;\sum_{p\le x} \log p\sim x,x \to \infty$ </p>
<p>second Chebyshev function: $\displaystyle \psi(x) &#x3D; \Lambda \circ U \sim x,x\to \infty$,</p>
<p>Mertens function:$M(x)&#x3D; \mu \circ U&#x3D;o(x),x\to \infty$ </p>
<p>$L(x)&#x3D;\lambda \circ U&#x3D;o(x),x\to \infty$</p>
<p>以及</p>
<p>定理9: $\displaystyle \sum_{n\le x}\omega(n)&#x3D;x\log \log x+C_7 x+O(\frac{x}{\log x})$,$\sum_{n\le x}\Omega(n)&#x3D;x\log \log x+C_8 x+O(\frac{x}{\log x})$</p>
<p>Bertrand假设: 主要内容是$[x,2x]$之间必有素数</p>
]]></content>
      <categories>
        <category>数论</category>
        <category>数论基础</category>
      </categories>
      <tags>
        <tag>数论基础</tag>
        <tag>$\pi(x)$</tag>
        <tag>Chebyshev定理</tag>
        <tag>$\Omega(n)$</tag>
        <tag>$\omega(n)$</tag>
        <tag>Bertrand 假设</tag>
        <tag>M(x)</tag>
        <tag>L(x)</tag>
      </tags>
  </entry>
  <entry>
    <title>魔方</title>
    <url>/Math/rubicks_cube/</url>
    <content><![CDATA[<h1 id="魔方"><a href="#魔方" class="headerlink" title="魔方"></a>魔方</h1><p>不知道魔方公式的情况下,用数学解决魔方</p>
<span id="more"></span>
<h2 id="3阶"><a href="#3阶" class="headerlink" title="3阶"></a>3阶</h2><p>建模, 颜色映射成0-5</p>
<p>方法1: 6 * 9&#x3D;54个面 一维向量, 对于每个操作建立一个54x54转移矩阵</p>
<p>方法2: 直接54个面的中心的三维坐标, 用旋转矩阵</p>
<p>方法3: 直接9个块,每次操作是对给定块的旋转变化</p>
<hr>
<p>核心逻辑</p>
<ul>
<li>状态输入</li>
<li>建模</li>
<li>多阶段目标的逐级加深的深搜</li>
</ul>
<p>多阶段目标可以自由选取,这里先采用常用公式的目标:</p>
<ul>
<li>单层</li>
<li>双层</li>
<li>顶十字</li>
<li>顶面</li>
<li>顶角</li>
<li>顶棱</li>
</ul>
<p>然而作为多阶段实现,这里其实还可以更细</p>
<ul>
<li>底部棱个数 1-&gt;4</li>
<li>底部棱完成,角1-&gt;4</li>
<li>第二层完成个数1-&gt;4</li>
<li>顶十字1-&gt;4</li>
<li>顶面角颜色1-&gt;4</li>
<li>顶角交换1-&gt;4</li>
<li>顶棱1-&gt;4</li>
</ul>
<p>注意的是,这里可能有些情况是不存在的,但是这里主要是对当前魔方姿态 给一个进度评价,不存在的状态永远不会作为入参而已</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="版本0-支持初始状态-和-命令行展示当前状态"><a href="#版本0-支持初始状态-和-命令行展示当前状态" class="headerlink" title="版本0: 支持初始状态 和 命令行展示当前状态"></a>版本0: 支持初始状态 和 命令行展示当前状态</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"><span class="keyword">from</span> colorama <span class="keyword">import</span> Fore, Style</span><br><span class="line"></span><br><span class="line"><span class="comment">#  U</span></span><br><span class="line"><span class="comment"># LFRB</span></span><br><span class="line"><span class="comment">#  D</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  0</span></span><br><span class="line"><span class="comment"># 1234</span></span><br><span class="line"><span class="comment">#  5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   黄</span></span><br><span class="line"><span class="comment"># 蓝红绿橙</span></span><br><span class="line"><span class="comment">#   白</span></span><br><span class="line">YELLOW = <span class="number">0</span></span><br><span class="line">BLUE = <span class="number">1</span></span><br><span class="line">RED = <span class="number">2</span></span><br><span class="line">GREEN = <span class="number">3</span></span><br><span class="line">ORANGE = <span class="number">4</span></span><br><span class="line">WHITE = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">CUBE = <span class="type">List</span>[<span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]]  <span class="comment"># ULFRBD</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid</span>(<span class="params">cube</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">len</span>(cube) == <span class="number">6</span></span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> face <span class="keyword">in</span> cube:</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(face) == n</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> face:</span><br><span class="line">      <span class="keyword">assert</span> <span class="built_in">len</span>(row) == n</span><br><span class="line">      <span class="keyword">for</span> v <span class="keyword">in</span> row:</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">0</span> &lt;= v <span class="keyword">and</span> v &lt; <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">color_print</span>(<span class="params">v: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  v2c = &#123;</span><br><span class="line">      YELLOW: Fore.YELLOW,</span><br><span class="line">      BLUE: Fore.BLUE,</span><br><span class="line">      RED: Fore.RED,</span><br><span class="line">      GREEN: Fore.GREEN,</span><br><span class="line">      ORANGE: Fore.MAGENTA,  <span class="comment"># 紫色, 品红</span></span><br><span class="line">      WHITE: Fore.WHITE,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;v2c[v]&#125;</span>o<span class="subst">&#123;Style.RESET_ALL&#125;</span>&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_arr</span>(<span class="params">cube: CUBE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  valid(cube)</span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="comment"># UP</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      color_print(cube[<span class="number">0</span>][i][j])</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">  <span class="comment"># LFRB</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        color_print(cube[k][i][j])</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># DOWN</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      color_print(cube[<span class="number">5</span>][i][j])</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">cube: CUBE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  valid(cube)</span><br><span class="line">  show_arr(cube)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">solve([</span><br><span class="line">    [  <span class="comment"># UP</span></span><br><span class="line">        [RED, ORANGE, GREEN], [YELLOW, YELLOW, ORANGE], [BLUE, WHITE, ORANGE]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 左</span></span><br><span class="line">        [BLUE, GREEN, YELLOW], [RED, BLUE, YELLOW], [WHITE, ORANGE, RED]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 前</span></span><br><span class="line">        [ORANGE, RED, WHITE], [RED, RED, YELLOW], [YELLOW, WHITE, RED]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 右</span></span><br><span class="line">        [BLUE, GREEN, WHITE], [BLUE, GREEN, BLUE], [WHITE, BLUE, YELLOW]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 后</span></span><br><span class="line">        [ORANGE, YELLOW, YELLOW], [RED, ORANGE, GREEN], [ORANGE, BLUE, GREEN]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 下</span></span><br><span class="line">        [GREEN, GREEN, BLUE], [WHITE, WHITE, ORANGE], [RED, WHITE, GREEN]</span><br><span class="line">    ],</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<h4 id="版本1-初始化-到3维坐标的映射-旋转矩阵-3d展示"><a href="#版本1-初始化-到3维坐标的映射-旋转矩阵-3d展示" class="headerlink" title="版本1: 初始化 到3维坐标的映射,旋转矩阵,3d展示"></a>版本1: 初始化 到3维坐标的映射,旋转矩阵,3d展示</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span>, <span class="type">List</span>, <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#  U</span></span><br><span class="line"><span class="comment"># LFRB</span></span><br><span class="line"><span class="comment">#  D</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  0</span></span><br><span class="line"><span class="comment"># 1234</span></span><br><span class="line"><span class="comment">#  5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   黄</span></span><br><span class="line"><span class="comment"># 蓝红绿橙</span></span><br><span class="line"><span class="comment">#   白</span></span><br><span class="line">YELLOW = <span class="number">0</span></span><br><span class="line">BLUE = <span class="number">1</span></span><br><span class="line">RED = <span class="number">2</span></span><br><span class="line">GREEN = <span class="number">3</span></span><br><span class="line">ORANGE = <span class="number">4</span></span><br><span class="line">WHITE = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">CUBE = <span class="type">List</span>[<span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]]  <span class="comment"># ULFRBD</span></span><br><span class="line"><span class="comment"># [x][y][z] =&gt; (color,xyz扩展方向)</span></span><br><span class="line">CUBE3D = <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="type">List</span>[<span class="built_in">int</span>]]]]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid</span>(<span class="params">cube</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">len</span>(cube) == <span class="number">6</span></span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> face <span class="keyword">in</span> cube:</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(face) == n</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> face:</span><br><span class="line">      <span class="keyword">assert</span> <span class="built_in">len</span>(row) == n</span><br><span class="line">      <span class="keyword">for</span> v <span class="keyword">in</span> row:</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">0</span> &lt;= v <span class="keyword">and</span> v &lt; <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_3ds</span>(<span class="params">cube_3ds: <span class="type">List</span>[CUBE3D]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  cnt = <span class="built_in">len</span>(cube_3ds)</span><br><span class="line">  fig = plt.figure()</span><br><span class="line">  colors = [<span class="string">&#x27;#FFFF00&#x27;</span>, <span class="string">&#x27;#0000FF&#x27;</span>, <span class="string">&#x27;#FF0000&#x27;</span>, <span class="string">&#x27;#00FF00&#x27;</span>, <span class="string">&#x27;#FF681F&#x27;</span>, <span class="string">&#x27;#FFFFFF&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt):</span><br><span class="line">    cube_3d = cube_3ds[i]</span><br><span class="line">    ax = fig.add_subplot(<span class="number">1</span>, cnt, i+<span class="number">1</span>, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x, yzv <span class="keyword">in</span> cube_3d.items():</span><br><span class="line">      <span class="keyword">for</span> y, zv <span class="keyword">in</span> yzv.items():</span><br><span class="line">        <span class="keyword">for</span> z, v <span class="keyword">in</span> zv.items():</span><br><span class="line">          c, dxyz = v</span><br><span class="line">          dx, dy, dz = dxyz</span><br><span class="line">          <span class="keyword">if</span> dx == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x, x], [x, x]])</span><br><span class="line">            Y = np.array([[y-<span class="number">1</span>, y+<span class="number">1</span>], [y-<span class="number">1</span>, y+<span class="number">1</span>]])</span><br><span class="line">            Z = np.array([[z-<span class="number">1</span>, z-<span class="number">1</span>], [z+<span class="number">1</span>, z+<span class="number">1</span>]])</span><br><span class="line">          <span class="keyword">elif</span> dy == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x-<span class="number">1</span>, x+<span class="number">1</span>], [x-<span class="number">1</span>, x+<span class="number">1</span>]])</span><br><span class="line">            Y = np.array([[y, y], [y, y]])</span><br><span class="line">            Z = np.array([[z-<span class="number">1</span>, z-<span class="number">1</span>], [z+<span class="number">1</span>, z+<span class="number">1</span>]])</span><br><span class="line">          <span class="keyword">elif</span> dz == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x-<span class="number">1</span>, x+<span class="number">1</span>], [x-<span class="number">1</span>, x+<span class="number">1</span>]])</span><br><span class="line">            Y = np.array([[y-<span class="number">1</span>, y-<span class="number">1</span>], [y+<span class="number">1</span>, y+<span class="number">1</span>]])</span><br><span class="line">            Z = np.array([[z, z], [z, z]])</span><br><span class="line">          ax.plot_surface(</span><br><span class="line">              X, Y, Z, color=colors[c])</span><br><span class="line"></span><br><span class="line">  plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_res</span>(<span class="params">res: CUBE3D, x: <span class="built_in">int</span>, y: <span class="built_in">int</span>, z: <span class="built_in">int</span>, v: <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">    res[x] = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> y <span class="keyword">not</span> <span class="keyword">in</span> res[x]:</span><br><span class="line">    res[x][y] = &#123;&#125;</span><br><span class="line">  res[x][y][z] = v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">arr_to_3d</span>(<span class="params">cube: CUBE</span>) -&gt; CUBE3D:</span><br><span class="line">  res: CUBE3D = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      set_res(res, <span class="number">2</span> * i - (n - <span class="number">1</span>), <span class="number">2</span> * j - (n - <span class="number">1</span>), +</span><br><span class="line">              n, (cube[<span class="number">0</span>][i][j], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]))  <span class="comment"># UP</span></span><br><span class="line">      set_res(res, <span class="number">2</span> * j - (n - <span class="number">1</span>), -n, (n - <span class="number">1</span>) - <span class="number">2</span> * i,</span><br><span class="line">              (cube[<span class="number">1</span>][i][j], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]))  <span class="comment"># LEFT</span></span><br><span class="line">      set_res(res, +n, <span class="number">2</span> * j - (n - <span class="number">1</span>), (n - <span class="number">1</span>) - <span class="number">2</span> * i,</span><br><span class="line">              (cube[<span class="number">2</span>][i][j], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]))  <span class="comment"># FRONT</span></span><br><span class="line">      set_res(res, (n - <span class="number">1</span>) - <span class="number">2</span> * j, +n, (n - <span class="number">1</span>) - <span class="number">2</span> * i,</span><br><span class="line">              (cube[<span class="number">3</span>][i][j], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]))  <span class="comment"># RIGHT</span></span><br><span class="line">      set_res(res, -n, (n - <span class="number">1</span>) - <span class="number">2</span> * j, (n - <span class="number">1</span>) - <span class="number">2</span> * i,</span><br><span class="line">              (cube[<span class="number">4</span>][i][j], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]))  <span class="comment"># BACK</span></span><br><span class="line">      set_res(res, (n - <span class="number">1</span>) - <span class="number">2</span> * i, <span class="number">2</span> * j - (n - <span class="number">1</span>), -</span><br><span class="line">              n, (cube[<span class="number">5</span>][i][j], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]))  <span class="comment"># DOWN</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateX</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着X轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateY</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着Y轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateZ</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着Z轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateFilter</span>(<span class="params">cube3d: CUBE3D, <span class="built_in">filter</span>, rotateFn</span>) -&gt; CUBE3D:</span><br><span class="line">  res = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> x, yzv <span class="keyword">in</span> cube3d.items():</span><br><span class="line">    <span class="keyword">for</span> y, zv <span class="keyword">in</span> yzv.items():</span><br><span class="line">      <span class="keyword">for</span> z, v <span class="keyword">in</span> zv.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">filter</span>(x, y, z):  <span class="comment"># need rotate</span></span><br><span class="line">          nx, ny, nz = rotateFn([x, y, z])</span><br><span class="line">          set_res(res, nx, ny, nz, [v[<span class="number">0</span>], rotateFn(v[<span class="number">1</span>])])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">          set_res(res, x, y, z, v)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateFront</span>(<span class="params">cube3d: CUBE3D</span>) -&gt; CUBE3D:</span><br><span class="line">  <span class="keyword">return</span> rotateFilter(cube3d, <span class="keyword">lambda</span> x, y, z: x &gt; <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateBack</span>(<span class="params">cube3d: CUBE3D</span>) -&gt; CUBE3D:</span><br><span class="line">  <span class="keyword">return</span> rotateFilter(cube3d, <span class="keyword">lambda</span> x, y, z: x &lt; <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateLeft</span>(<span class="params">cube3d: CUBE3D</span>) -&gt; CUBE3D:</span><br><span class="line">  <span class="keyword">return</span> rotateFilter(cube3d, <span class="keyword">lambda</span> x, y, z: y &lt; <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateRight</span>(<span class="params">cube3d: CUBE3D</span>) -&gt; CUBE3D:</span><br><span class="line">  <span class="keyword">return</span> rotateFilter(cube3d, <span class="keyword">lambda</span> x, y, z: y &gt; <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateUp</span>(<span class="params">cube3d: CUBE3D</span>) -&gt; CUBE3D:</span><br><span class="line">  <span class="keyword">return</span> rotateFilter(cube3d, <span class="keyword">lambda</span> x, y, z: z &gt; <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateDown</span>(<span class="params">cube3d: CUBE3D</span>) -&gt; CUBE3D:</span><br><span class="line">  <span class="keyword">return</span> rotateFilter(cube3d, <span class="keyword">lambda</span> x, y, z: z &lt; <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">cube: CUBE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  valid(cube)</span><br><span class="line">  cube3d = arr_to_3d(cube)</span><br><span class="line">  show_3ds([cube3d, rotateFront(cube3d), rotateBack(cube3d), rotateLeft(</span><br><span class="line">      cube3d), rotateRight(cube3d), rotateUp(cube3d), rotateDown(cube3d)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">solve([</span><br><span class="line">    [  <span class="comment"># UP</span></span><br><span class="line">        [RED, ORANGE, GREEN], [YELLOW, YELLOW, ORANGE], [BLUE, WHITE, ORANGE]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 左</span></span><br><span class="line">        [BLUE, GREEN, YELLOW], [RED, BLUE, YELLOW], [WHITE, ORANGE, RED]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 前</span></span><br><span class="line">        [ORANGE, RED, WHITE], [RED, RED, YELLOW], [YELLOW, WHITE, RED]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 右</span></span><br><span class="line">        [BLUE, GREEN, WHITE], [BLUE, GREEN, BLUE], [WHITE, BLUE, YELLOW]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 后</span></span><br><span class="line">        [ORANGE, YELLOW, YELLOW], [RED, ORANGE, GREEN], [ORANGE, BLUE, GREEN]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 下</span></span><br><span class="line">        [GREEN, GREEN, BLUE], [WHITE, WHITE, ORANGE], [RED, WHITE, GREEN]</span><br><span class="line">    ],</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<hr>
<p>这里可以先预处理,计算映射关系,简化成 $6n^2$ 的状态和 稀疏转移矩阵</p>
<h4 id="版本2-实现-迭代加深dfs-完成底面-与-阶段性展示"><a href="#版本2-实现-迭代加深dfs-完成底面-与-阶段性展示" class="headerlink" title="版本2: 实现 迭代加深dfs,完成底面 与 阶段性展示"></a>版本2: 实现 迭代加深dfs,完成底面 与 阶段性展示</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span>, <span class="type">List</span>, <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#  U</span></span><br><span class="line"><span class="comment"># LFRB</span></span><br><span class="line"><span class="comment">#  D</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  0</span></span><br><span class="line"><span class="comment"># 1234</span></span><br><span class="line"><span class="comment">#  5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   黄</span></span><br><span class="line"><span class="comment"># 蓝红绿橙</span></span><br><span class="line"><span class="comment">#   白</span></span><br><span class="line">YELLOW = <span class="number">0</span></span><br><span class="line">BLUE = <span class="number">1</span></span><br><span class="line">RED = <span class="number">2</span></span><br><span class="line">GREEN = <span class="number">3</span></span><br><span class="line">ORANGE = <span class="number">4</span></span><br><span class="line">WHITE = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">CUBE = <span class="type">List</span>[<span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]]  <span class="comment"># ULFRBD</span></span><br><span class="line"><span class="comment"># [x][y][z] =&gt; (color,xyz扩展方向)</span></span><br><span class="line">CUBE3D = <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="type">List</span>[<span class="built_in">int</span>]]]]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid</span>(<span class="params">cube</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">len</span>(cube) == <span class="number">6</span></span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> face <span class="keyword">in</span> cube:</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(face) == n</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> face:</span><br><span class="line">      <span class="keyword">assert</span> <span class="built_in">len</span>(row) == n</span><br><span class="line">      <span class="keyword">for</span> v <span class="keyword">in</span> row:</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">0</span> &lt;= v <span class="keyword">and</span> v &lt; <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_3ds</span>(<span class="params">cube_3ds: <span class="type">List</span>[CUBE3D]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  cnt = <span class="built_in">len</span>(cube_3ds)</span><br><span class="line">  row = <span class="built_in">max</span>(<span class="built_in">int</span>(cnt**<span class="number">0.5</span>), <span class="number">1</span>)</span><br><span class="line">  col = cnt//row + <span class="built_in">int</span>((cnt % row) != <span class="number">0</span>)</span><br><span class="line">  fig = plt.figure()</span><br><span class="line">  colors = [<span class="string">&#x27;#FFFF00&#x27;</span>, <span class="string">&#x27;#0000FF&#x27;</span>, <span class="string">&#x27;#FF0000&#x27;</span>, <span class="string">&#x27;#00FF00&#x27;</span>, <span class="string">&#x27;#FF681F&#x27;</span>, <span class="string">&#x27;#FFFFFF&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt):</span><br><span class="line">    cube_3d = cube_3ds[i]</span><br><span class="line">    ax = fig.add_subplot(row, col, i+<span class="number">1</span>, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x, yzv <span class="keyword">in</span> cube_3d.items():</span><br><span class="line">      <span class="keyword">for</span> y, zv <span class="keyword">in</span> yzv.items():</span><br><span class="line">        <span class="keyword">for</span> z, v <span class="keyword">in</span> zv.items():</span><br><span class="line">          c, dxyz = v</span><br><span class="line">          dx, dy, dz = dxyz</span><br><span class="line">          <span class="keyword">if</span> dx == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x, x], [x, x]])</span><br><span class="line">            Y = np.array([[y-<span class="number">1</span>, y+<span class="number">1</span>], [y-<span class="number">1</span>, y+<span class="number">1</span>]])</span><br><span class="line">            Z = np.array([[z-<span class="number">1</span>, z-<span class="number">1</span>], [z+<span class="number">1</span>, z+<span class="number">1</span>]])</span><br><span class="line">          <span class="keyword">elif</span> dy == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x-<span class="number">1</span>, x+<span class="number">1</span>], [x-<span class="number">1</span>, x+<span class="number">1</span>]])</span><br><span class="line">            Y = np.array([[y, y], [y, y]])</span><br><span class="line">            Z = np.array([[z-<span class="number">1</span>, z-<span class="number">1</span>], [z+<span class="number">1</span>, z+<span class="number">1</span>]])</span><br><span class="line">          <span class="keyword">elif</span> dz == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x-<span class="number">1</span>, x+<span class="number">1</span>], [x-<span class="number">1</span>, x+<span class="number">1</span>]])</span><br><span class="line">            Y = np.array([[y-<span class="number">1</span>, y-<span class="number">1</span>], [y+<span class="number">1</span>, y+<span class="number">1</span>]])</span><br><span class="line">            Z = np.array([[z, z], [z, z]])</span><br><span class="line">          ax.plot_surface(</span><br><span class="line">              X, Y, Z, color=colors[c])</span><br><span class="line"></span><br><span class="line">  plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_cube</span>(<span class="params">res: CUBE3D, xyz: <span class="type">List</span>[<span class="built_in">int</span>], v: <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  x, y, z = xyz</span><br><span class="line">  <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">    res[x] = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> y <span class="keyword">not</span> <span class="keyword">in</span> res[x]:</span><br><span class="line">    res[x][y] = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  res[x][y][z] = v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_up</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">2</span> * i - (n - <span class="number">1</span>), <span class="number">2</span> * j - (n - <span class="number">1</span>), + n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_left</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">2</span> * j - (n - <span class="number">1</span>), -n, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_front</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [+n, <span class="number">2</span> * j - (n - <span class="number">1</span>), (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_right</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [(n - <span class="number">1</span>) - <span class="number">2</span> * j, +n, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_back</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [-n, (n - <span class="number">1</span>) - <span class="number">2</span> * j, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_down</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [(n - <span class="number">1</span>) - <span class="number">2</span> * i, <span class="number">2</span> * j - (n - <span class="number">1</span>), - n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">arr_to_3d</span>(<span class="params">cube: CUBE</span>) -&gt; CUBE3D:</span><br><span class="line">  res: CUBE3D = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      set_cube(res, _up(i, j, n), [cube[<span class="number">0</span>][i][j], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]])  <span class="comment"># UP</span></span><br><span class="line">      set_cube(res, _left(i, j, n), [cube[<span class="number">1</span>][i][j], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]])  <span class="comment"># LEFT</span></span><br><span class="line">      set_cube(res, _front(i, j, n), [cube[<span class="number">2</span>][i][j], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]])  <span class="comment"># FRONT</span></span><br><span class="line">      set_cube(res, _right(i, j, n), [cube[<span class="number">3</span>][i][j], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]])  <span class="comment"># RIGHT</span></span><br><span class="line">      set_cube(res, _back(i, j, n), [cube[<span class="number">4</span>][i][j], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]])  <span class="comment"># BACK</span></span><br><span class="line">      set_cube(res, _down(i, j, n), [cube[<span class="number">5</span>][i][j], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]])  <span class="comment"># DOWN</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateX</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着X轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateY</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着Y轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateZ</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着Z轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateFilter</span>(<span class="params">cube3d: CUBE3D, <span class="built_in">filter</span>, rotateFn</span>) -&gt; CUBE3D:</span><br><span class="line">  res = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> x, yzv <span class="keyword">in</span> cube3d.items():</span><br><span class="line">    <span class="keyword">for</span> y, zv <span class="keyword">in</span> yzv.items():</span><br><span class="line">      <span class="keyword">for</span> z, v <span class="keyword">in</span> zv.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">filter</span>(x, y, z):  <span class="comment"># need rotate</span></span><br><span class="line">          set_cube(res, rotateFn([x, y, z]), [v[<span class="number">0</span>], rotateFn(v[<span class="number">1</span>])])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">          set_cube(res, [x, y, z], v)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateFront</span>(<span class="params">cube3d: CUBE3D</span>) -&gt; CUBE3D:</span><br><span class="line">  <span class="keyword">return</span> rotateFilter(cube3d, <span class="keyword">lambda</span> x, y, z: x &gt; <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateBack</span>(<span class="params">cube3d: CUBE3D</span>) -&gt; CUBE3D:</span><br><span class="line">  <span class="keyword">return</span> rotateFilter(cube3d, <span class="keyword">lambda</span> x, y, z: x &lt; <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateLeft</span>(<span class="params">cube3d: CUBE3D</span>) -&gt; CUBE3D:</span><br><span class="line">  <span class="keyword">return</span> rotateFilter(cube3d, <span class="keyword">lambda</span> x, y, z: y &lt; <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateRight</span>(<span class="params">cube3d: CUBE3D</span>) -&gt; CUBE3D:</span><br><span class="line">  <span class="keyword">return</span> rotateFilter(cube3d, <span class="keyword">lambda</span> x, y, z: y &gt; <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateUp</span>(<span class="params">cube3d: CUBE3D</span>) -&gt; CUBE3D:</span><br><span class="line">  <span class="keyword">return</span> rotateFilter(cube3d, <span class="keyword">lambda</span> x, y, z: z &gt; <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateDown</span>(<span class="params">cube3d: CUBE3D</span>) -&gt; CUBE3D:</span><br><span class="line">  <span class="keyword">return</span> rotateFilter(cube3d, <span class="keyword">lambda</span> x, y, z: z &lt; <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">progress</span>(<span class="params">cube3d: CUBE3D</span>) -&gt; <span class="built_in">int</span>:  <span class="comment"># 只针对3阶魔方</span></span><br><span class="line">  p = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">c</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    x, y, z = xyz</span><br><span class="line">    <span class="keyword">return</span> cube3d[x][y][z][<span class="number">0</span>]</span><br><span class="line">  <span class="comment"># 底面 十字</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">2</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">1</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">2</span>, <span class="number">1</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">1</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">2</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">1</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">2</span>, <span class="number">1</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">1</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 底面4角</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">2</span>, <span class="number">2</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_front(<span class="number">2</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">2</span>, <span class="number">2</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_right(<span class="number">2</span>, <span class="number">0</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">2</span>, <span class="number">2</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_back(<span class="number">2</span>, <span class="number">0</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">2</span>, <span class="number">2</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_left(<span class="number">2</span>, <span class="number">0</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">4</span>*<span class="number">2</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">res: <span class="type">List</span>[CUBE3D], remain: <span class="built_in">int</span>, stop: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">  <span class="keyword">if</span> progress(res[-<span class="number">1</span>]) &gt;= stop:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">  <span class="keyword">if</span> remain &lt;= <span class="number">0</span>:  <span class="comment"># 迭代加深</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  ops = [</span><br><span class="line">      rotateUp, <span class="keyword">lambda</span> x:rotateUp(</span><br><span class="line">          rotateUp(x)), <span class="keyword">lambda</span> x:rotateUp(rotateUp(rotateUp(x))),</span><br><span class="line">      rotateLeft, <span class="keyword">lambda</span> x:rotateLeft(rotateLeft(</span><br><span class="line">          x)), <span class="keyword">lambda</span> x:rotateLeft(rotateLeft(rotateLeft(x))),</span><br><span class="line">      rotateFront, <span class="keyword">lambda</span> x:rotateFront(rotateFront(</span><br><span class="line">          x)), <span class="keyword">lambda</span> x:rotateFront(rotateFront(rotateFront(x))),</span><br><span class="line">      rotateRight, <span class="keyword">lambda</span> x:rotateRight(rotateRight(</span><br><span class="line">          x)), <span class="keyword">lambda</span> x:rotateRight(rotateRight(rotateRight(x))),</span><br><span class="line">      rotateBack, <span class="keyword">lambda</span> x:rotateBack(rotateBack(</span><br><span class="line">          x)), <span class="keyword">lambda</span> x:rotateBack(rotateBack(rotateBack(x))),</span><br><span class="line">      rotateDown, <span class="keyword">lambda</span> x:rotateDown(rotateDown(</span><br><span class="line">          x)), <span class="keyword">lambda</span> x:rotateDown(rotateDown(rotateDown(x))),</span><br><span class="line">  ]</span><br><span class="line">  <span class="keyword">for</span> op <span class="keyword">in</span> ops:</span><br><span class="line">    res.append(op(res[-<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">if</span> dfs(res, remain-<span class="number">1</span>, stop):</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    res.pop()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">steps</span>(<span class="params">cube3d: CUBE3D, stop: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[CUBE3D]:</span><br><span class="line">  res = [cube3d]</span><br><span class="line">  dep = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">not</span> dfs(res, dep, stop):</span><br><span class="line">    dep += <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump3d</span>(<span class="params">cube3d: CUBE3D, n=<span class="number">3</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  res = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">dump_face</span>(<span class="params">fn</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    face = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      row = []</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        x, y, z = fn(i, j)</span><br><span class="line">        row.append(cube3d[x][y][z][<span class="number">0</span>])</span><br><span class="line">      face.append(row)</span><br><span class="line">    res.append(face)</span><br><span class="line"></span><br><span class="line">  dump_face(_up)</span><br><span class="line">  dump_face(_left)</span><br><span class="line">  dump_face(_front)</span><br><span class="line">  dump_face(_right)</span><br><span class="line">  dump_face(_back)</span><br><span class="line">  dump_face(_down)</span><br><span class="line">  <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">cube: CUBE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  valid(cube)</span><br><span class="line">  cube3d = arr_to_3d(cube)</span><br><span class="line"></span><br><span class="line">  steplist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">  ans = [cube3d]</span><br><span class="line">  <span class="keyword">for</span> dst_step <span class="keyword">in</span> steplist:</span><br><span class="line">    moves = steps(ans[-<span class="number">1</span>], dst_step)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;step <span class="subst">&#123;dst_step&#125;</span> solved with ops = <span class="subst">&#123;<span class="built_in">len</span>(moves)-<span class="number">1</span>&#125;</span>&#x27;</span>)</span><br><span class="line">    ans = ans + moves[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">  show_3ds(ans)</span><br><span class="line">  dump3d(ans[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">solve([</span><br><span class="line">    [  <span class="comment"># UP</span></span><br><span class="line">        [RED, ORANGE, GREEN], [YELLOW, YELLOW, ORANGE], [BLUE, WHITE, ORANGE]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 左</span></span><br><span class="line">        [BLUE, GREEN, YELLOW], [RED, BLUE, YELLOW], [WHITE, ORANGE, RED]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 前</span></span><br><span class="line">        [ORANGE, RED, WHITE], [RED, RED, YELLOW], [YELLOW, WHITE, RED]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 右</span></span><br><span class="line">        [BLUE, GREEN, WHITE], [BLUE, GREEN, BLUE], [WHITE, BLUE, YELLOW]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 后</span></span><br><span class="line">        [ORANGE, YELLOW, YELLOW], [RED, ORANGE, GREEN], [ORANGE, BLUE, GREEN]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 下</span></span><br><span class="line">        [GREEN, GREEN, BLUE], [WHITE, WHITE, ORANGE], [RED, WHITE, GREEN]</span><br><span class="line">    ],</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p>在这里, 似乎把 旋转180看作一个操作比 把180度看作2个操作 更容易搜出来, 可能虽然每层更多了,但是总步数更少了,从而更好</p>
<h4 id="版本3-第二层-剪枝-优化效率"><a href="#版本3-第二层-剪枝-优化效率" class="headerlink" title="版本3 第二层,剪枝,优化效率"></a>版本3 第二层,剪枝,优化效率</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span>, <span class="type">Dict</span>, <span class="type">List</span>, <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#  U</span></span><br><span class="line"><span class="comment"># LFRB</span></span><br><span class="line"><span class="comment">#  D</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  0</span></span><br><span class="line"><span class="comment"># 1234</span></span><br><span class="line"><span class="comment">#  5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   黄</span></span><br><span class="line"><span class="comment"># 蓝红绿橙</span></span><br><span class="line"><span class="comment">#   白</span></span><br><span class="line">YELLOW = <span class="number">0</span></span><br><span class="line">BLUE = <span class="number">1</span></span><br><span class="line">RED = <span class="number">2</span></span><br><span class="line">GREEN = <span class="number">3</span></span><br><span class="line">ORANGE = <span class="number">4</span></span><br><span class="line">WHITE = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">CUBE = <span class="type">List</span>[<span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]]  <span class="comment"># ULFRBD</span></span><br><span class="line"><span class="comment"># [x][y][z] =&gt; (color,xyz扩展方向)</span></span><br><span class="line">CUBE3DCOLOR = <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]]]</span><br><span class="line">CUBE3DSURFACE = <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">List</span>[<span class="built_in">int</span>]]]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid</span>(<span class="params">cube</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">len</span>(cube) == <span class="number">6</span></span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> face <span class="keyword">in</span> cube:</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(face) == n</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> face:</span><br><span class="line">      <span class="keyword">assert</span> <span class="built_in">len</span>(row) == n</span><br><span class="line">      <span class="keyword">for</span> v <span class="keyword">in</span> row:</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">0</span> &lt;= v <span class="keyword">and</span> v &lt; <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_3ds</span>(<span class="params">cube_3ds: <span class="type">List</span>[CUBE3DCOLOR], cube_3d_surface: CUBE3DSURFACE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  cnt = <span class="built_in">len</span>(cube_3ds)</span><br><span class="line">  row = <span class="built_in">max</span>(<span class="built_in">int</span>(cnt**<span class="number">0.5</span>), <span class="number">1</span>)</span><br><span class="line">  col = cnt//row + <span class="built_in">int</span>((cnt % row) != <span class="number">0</span>)</span><br><span class="line">  fig = plt.figure()</span><br><span class="line">  colors = [<span class="string">&#x27;#FFFF00&#x27;</span>, <span class="string">&#x27;#0000FF&#x27;</span>, <span class="string">&#x27;#FF0000&#x27;</span>, <span class="string">&#x27;#00FF00&#x27;</span>, <span class="string">&#x27;#FF681F&#x27;</span>, <span class="string">&#x27;#FFFFFF&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt):</span><br><span class="line">    cube_3d = cube_3ds[i]</span><br><span class="line">    ax = fig.add_subplot(row, col, i+<span class="number">1</span>, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x, yzv <span class="keyword">in</span> cube_3d.items():</span><br><span class="line">      <span class="keyword">for</span> y, zv <span class="keyword">in</span> yzv.items():</span><br><span class="line">        <span class="keyword">for</span> z, c <span class="keyword">in</span> zv.items():</span><br><span class="line">          dx, dy, dz = cube_3d_surface[x][y][z]</span><br><span class="line">          <span class="keyword">if</span> dx == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x, x], [x, x]])</span><br><span class="line">            Y = np.array([[y-<span class="number">1</span>, y+<span class="number">1</span>], [y-<span class="number">1</span>, y+<span class="number">1</span>]])</span><br><span class="line">            Z = np.array([[z-<span class="number">1</span>, z-<span class="number">1</span>], [z+<span class="number">1</span>, z+<span class="number">1</span>]])</span><br><span class="line">          <span class="keyword">elif</span> dy == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x-<span class="number">1</span>, x+<span class="number">1</span>], [x-<span class="number">1</span>, x+<span class="number">1</span>]])</span><br><span class="line">            Y = np.array([[y, y], [y, y]])</span><br><span class="line">            Z = np.array([[z-<span class="number">1</span>, z-<span class="number">1</span>], [z+<span class="number">1</span>, z+<span class="number">1</span>]])</span><br><span class="line">          <span class="keyword">elif</span> dz == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x-<span class="number">1</span>, x+<span class="number">1</span>], [x-<span class="number">1</span>, x+<span class="number">1</span>]])</span><br><span class="line">            Y = np.array([[y-<span class="number">1</span>, y-<span class="number">1</span>], [y+<span class="number">1</span>, y+<span class="number">1</span>]])</span><br><span class="line">            Z = np.array([[z, z], [z, z]])</span><br><span class="line">          ax.plot_surface(</span><br><span class="line">              X, Y, Z, color=colors[c])</span><br><span class="line"></span><br><span class="line">  plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_cube</span>(<span class="params">res: CUBE3DSURFACE | CUBE3DCOLOR, xyz: <span class="type">List</span>[<span class="built_in">int</span>], v: <span class="type">Any</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  x, y, z = xyz</span><br><span class="line">  <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">    res[x] = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> y <span class="keyword">not</span> <span class="keyword">in</span> res[x]:</span><br><span class="line">    res[x][y] = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  res[x][y][z] = v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_up</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">2</span> * i - (n - <span class="number">1</span>), <span class="number">2</span> * j - (n - <span class="number">1</span>), + n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_left</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">2</span> * j - (n - <span class="number">1</span>), -n, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_front</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [+n, <span class="number">2</span> * j - (n - <span class="number">1</span>), (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_right</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [(n - <span class="number">1</span>) - <span class="number">2</span> * j, +n, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_back</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [-n, (n - <span class="number">1</span>) - <span class="number">2</span> * j, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_down</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [(n - <span class="number">1</span>) - <span class="number">2</span> * i, <span class="number">2</span> * j - (n - <span class="number">1</span>), - n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">arr_to_3d</span>(<span class="params">cube: CUBE</span>) -&gt; CUBE3DCOLOR:</span><br><span class="line">  res: CUBE3DCOLOR = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      set_cube(res, _up(i, j, n), cube[<span class="number">0</span>][i][j])  <span class="comment"># UP</span></span><br><span class="line">      set_cube(res, _left(i, j, n), cube[<span class="number">1</span>][i][j])  <span class="comment"># LEFT</span></span><br><span class="line">      set_cube(res, _front(i, j, n), cube[<span class="number">2</span>][i][j])  <span class="comment"># FRONT</span></span><br><span class="line">      set_cube(res, _right(i, j, n), cube[<span class="number">3</span>][i][j])  <span class="comment"># RIGHT</span></span><br><span class="line">      set_cube(res, _back(i, j, n), cube[<span class="number">4</span>][i][j])  <span class="comment"># BACK</span></span><br><span class="line">      set_cube(res, _down(i, j, n), cube[<span class="number">5</span>][i][j])  <span class="comment"># DOWN</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateX</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着X轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateY</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着Y轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateZ</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着Z轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateFilter</span>(<span class="params">cube3d: CUBE3DCOLOR, <span class="built_in">filter</span>, rotateFn</span>) -&gt; CUBE3DCOLOR:</span><br><span class="line">  res = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> x, yzv <span class="keyword">in</span> cube3d.items():</span><br><span class="line">    <span class="keyword">for</span> y, zv <span class="keyword">in</span> yzv.items():</span><br><span class="line">      <span class="keyword">for</span> z, v <span class="keyword">in</span> zv.items():</span><br><span class="line">        <span class="comment"># filter() return &#x27;need rotate&#x27;</span></span><br><span class="line">        set_cube(res, rotateFn([x, y, z]) <span class="keyword">if</span> <span class="built_in">filter</span>(x, y, z) <span class="keyword">else</span> [x, y, z], v)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateFront</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: x &gt; <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateBack</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(cube, <span class="keyword">lambda</span> x, y, z: x &lt; <span class="number">0</span>, rotateX)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateLeft</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(cube, <span class="keyword">lambda</span> x, y, z: y &lt; <span class="number">0</span>, rotateY)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateRight</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: y &gt; <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateUp</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(cube, <span class="keyword">lambda</span> x, y, z: z &gt; <span class="number">0</span>, rotateZ)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateDown</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(cube, <span class="keyword">lambda</span> x, y, z: z &lt; <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">progress</span>(<span class="params">cube3d: CUBE3DCOLOR</span>) -&gt; <span class="built_in">int</span>:  <span class="comment"># 只针对3阶魔方</span></span><br><span class="line">  p = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">c</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    x, y, z = xyz</span><br><span class="line">    <span class="keyword">return</span> cube3d[x][y][z]</span><br><span class="line">  <span class="comment"># 底面 十字</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">2</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">1</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">2</span>, <span class="number">1</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">1</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">2</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">1</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">2</span>, <span class="number">1</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">1</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 底面4角</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">2</span>, <span class="number">2</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_front(<span class="number">2</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">2</span>, <span class="number">2</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_right(<span class="number">2</span>, <span class="number">0</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">2</span>, <span class="number">2</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_back(<span class="number">2</span>, <span class="number">0</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">2</span>, <span class="number">2</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_left(<span class="number">2</span>, <span class="number">0</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">8</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 第二层4个棱, 这里通过5 &gt; 1+1+1+1 保证了 完成的棱 大于 所有的半步状态</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">1</span>, <span class="number">2</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_front(<span class="number">1</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">1</span>, <span class="number">2</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_right(<span class="number">1</span>, <span class="number">0</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">1</span>, <span class="number">2</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_back(<span class="number">1</span>, <span class="number">0</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">1</span>, <span class="number">2</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_left(<span class="number">1</span>, <span class="number">0</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 第二层 中间半步状态</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">0</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">1</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">0</span>, <span class="number">1</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">2</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">0</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">1</span>, <span class="number">2</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">0</span>, <span class="number">1</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">0</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">28</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateMidX</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: x == <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateMidY</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: y == <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateMidZ</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: z == <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">two</span>(<span class="params">fn</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">lambda</span> x: fn(fn(x))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">three</span>(<span class="params">fn</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">lambda</span> x: fn(fn(fn(x)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ops = [</span><br><span class="line">    rotateUp, two(rotateUp), three(rotateUp),</span><br><span class="line">    rotateDown, two(rotateDown), three(rotateDown),</span><br><span class="line">    <span class="comment"># rotateMidZ, two(rotateMidZ), three(rotateMidZ),</span></span><br><span class="line"></span><br><span class="line">    rotateLeft, two(rotateLeft), three(rotateLeft),</span><br><span class="line">    rotateRight, two(rotateRight), three(rotateRight),</span><br><span class="line">    <span class="comment"># rotateMidY, two(rotateMidY), three(rotateMidY),</span></span><br><span class="line"></span><br><span class="line">    rotateFront, two(rotateFront), three(rotateFront),</span><br><span class="line">    rotateBack, two(rotateBack), three(rotateBack),</span><br><span class="line">    <span class="comment"># rotateMidX, two(rotateMidX), three(rotateMidX),</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">res: <span class="type">List</span>[CUBE3DCOLOR], opidxs: <span class="type">List</span>[<span class="built_in">int</span>], remain: <span class="built_in">int</span>, stop: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">  <span class="keyword">if</span> progress(res[-<span class="number">1</span>]) &gt;= stop:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">  <span class="keyword">if</span> remain &lt;= <span class="number">0</span>:  <span class="comment"># 迭代加深</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ops)):</span><br><span class="line">    <span class="comment"># 剪枝</span></span><br><span class="line">    <span class="keyword">if</span> idx // <span class="number">3</span> == opidxs[-<span class="number">1</span>] // <span class="number">3</span>:  <span class="comment"># 不要连续旋转同一个面</span></span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> idx // <span class="number">6</span> == opidxs[-<span class="number">1</span>] // <span class="number">6</span>:  <span class="comment"># 如果 连续 沿着同轴旋转 两个面</span></span><br><span class="line">      <span class="keyword">if</span> idx &gt; opidxs[-<span class="number">1</span>]:  <span class="comment"># 保证 序号小的先旋转</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    op = ops[idx]</span><br><span class="line">    res.append(op(res[-<span class="number">1</span>]))</span><br><span class="line">    opidxs.append(idx)</span><br><span class="line">    <span class="keyword">if</span> dfs(res, opidxs, remain-<span class="number">1</span>, stop):</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    res.pop()</span><br><span class="line">    opidxs.pop()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">steps</span>(<span class="params">cube3d: CUBE3DCOLOR, stop: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[CUBE3DCOLOR]:</span><br><span class="line">  res = [cube3d]</span><br><span class="line">  opsidxs = [-<span class="number">1</span>]</span><br><span class="line">  dep = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">not</span> dfs(res, opsidxs, dep, stop):</span><br><span class="line">    dep += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;dep = &#x27;</span>, dep)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump3d</span>(<span class="params">cube3d: CUBE3DCOLOR, n=<span class="number">3</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  res = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">dump_face</span>(<span class="params">fn</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    face = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      row = []</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        x, y, z = fn(i, j)</span><br><span class="line">        row.append(cube3d[x][y][z])</span><br><span class="line">      face.append(row)</span><br><span class="line">    res.append(face)</span><br><span class="line"></span><br><span class="line">  dump_face(_up)</span><br><span class="line">  dump_face(_left)</span><br><span class="line">  dump_face(_front)</span><br><span class="line">  dump_face(_right)</span><br><span class="line">  dump_face(_back)</span><br><span class="line">  dump_face(_down)</span><br><span class="line">  <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">transfroms = [_up, _left, _front, _right, _back, _down]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">cube: CUBE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  valid(cube)</span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  cube3d = arr_to_3d(cube)</span><br><span class="line"></span><br><span class="line">  cube3dsurface = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      set_cube(cube3dsurface, _up(i, j, n),  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>])  <span class="comment"># UP</span></span><br><span class="line">      set_cube(cube3dsurface, _left(i, j, n),  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])  <span class="comment"># LEFT</span></span><br><span class="line">      set_cube(cube3dsurface, _front(i, j, n),  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>])  <span class="comment"># FRONT</span></span><br><span class="line">      set_cube(cube3dsurface, _right(i, j, n),  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])  <span class="comment"># RIGHT</span></span><br><span class="line">      set_cube(cube3dsurface, _back(i, j, n),  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>])  <span class="comment"># BACK</span></span><br><span class="line">      set_cube(cube3dsurface, _down(i, j, n),  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>])  <span class="comment"># DOWN</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">two</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: fn(fn(x))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">three</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: fn(fn(fn(x)))</span><br><span class="line"></span><br><span class="line">  ops = [</span><br><span class="line">      rotateUp, two(rotateUp), three(rotateUp),</span><br><span class="line">      rotateDown, two(rotateDown), three(rotateDown),</span><br><span class="line">      <span class="comment"># rotateMidZ, two(rotateMidZ), three(rotateMidZ),</span></span><br><span class="line"></span><br><span class="line">      rotateLeft, two(rotateLeft), three(rotateLeft),</span><br><span class="line">      rotateRight, two(rotateRight), three(rotateRight),</span><br><span class="line">      <span class="comment"># rotateMidY, two(rotateMidY), three(rotateMidY),</span></span><br><span class="line"></span><br><span class="line">      rotateFront, two(rotateFront), three(rotateFront),</span><br><span class="line">      rotateBack, two(rotateBack), three(rotateBack),</span><br><span class="line">      <span class="comment"># rotateMidX, two(rotateMidX), three(rotateMidX),</span></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  steplist = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">28</span>+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">cube3dsolver</span>():</span><br><span class="line">    ans = [cube3d]</span><br><span class="line">    <span class="keyword">for</span> dst_step <span class="keyword">in</span> steplist:</span><br><span class="line">      moves = steps(ans[-<span class="number">1</span>], dst_step)</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">f&#x27;step <span class="subst">&#123;dst_step&#125;</span> solved with ops = <span class="subst">&#123;<span class="built_in">len</span>(moves)-<span class="number">1</span>&#125;</span>&#x27;</span>)</span><br><span class="line">      ans = ans + moves[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">  ans = cube3dsolver()</span><br><span class="line">  show_3ds(ans, cube3dsurface)</span><br><span class="line">  dump3d(ans[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">solve([[[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>]], [[<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]], [[<span class="number">3</span>, <span class="number">3</span>, <span class="number">0</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]], [</span><br><span class="line">      [<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>]], [[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>], [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>]], [[<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>], [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>], [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]]])</span><br></pre></td></tr></table></figure>

<p>然而这里直接 每个棱 让进度+&#x3D;1, 并不理想,其实可以看到:</p>
<p>当要解决最后一块第二层的时候,就需要把一个在上层的移动进第二层,而不影响其它低二层以下的,假设这样的操作步骤是X,(<del>当然 在没有理论知识下,可能也是同时做好两&#x2F;三个棱,</del>)</p>
<p>而如果是可行的,则可能当前 最后一个位置,正好反着放在了目标位置中,那么 至少需要2X步骤,甚至是2X+1</p>
<p>对于深度搜索来说, 增加2倍的步骤, 意味着数量级的幂次增加了两倍</p>
<hr>
<p>实际跑下来,单次用了多达7步,而剪枝优化了每轮可选的操作在 <code>12~15</code>, 而$12^6\cdot 18&#x3D;5374,7712$,$15^6\cdot 18&#x3D;2,0503,1250$</p>
<p>光是次数都很大,更不要说常数还不小</p>
<h4 id="版本4-顶面-全黄"><a href="#版本4-顶面-全黄" class="headerlink" title="版本4 顶面 全黄"></a>版本4 顶面 全黄</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span>, <span class="type">Dict</span>, <span class="type">List</span>, <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#  U</span></span><br><span class="line"><span class="comment"># LFRB</span></span><br><span class="line"><span class="comment">#  D</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  0</span></span><br><span class="line"><span class="comment"># 1234</span></span><br><span class="line"><span class="comment">#  5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   黄</span></span><br><span class="line"><span class="comment"># 蓝红绿橙</span></span><br><span class="line"><span class="comment">#   白</span></span><br><span class="line">YELLOW = <span class="number">0</span></span><br><span class="line">BLUE = <span class="number">1</span></span><br><span class="line">RED = <span class="number">2</span></span><br><span class="line">GREEN = <span class="number">3</span></span><br><span class="line">ORANGE = <span class="number">4</span></span><br><span class="line">WHITE = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">CUBE = <span class="type">List</span>[<span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]]  <span class="comment"># ULFRBD</span></span><br><span class="line"><span class="comment"># [x][y][z] =&gt; (color,xyz扩展方向)</span></span><br><span class="line">CUBE3DCOLOR = <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]]]</span><br><span class="line">CUBE3DSURFACE = <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">List</span>[<span class="built_in">int</span>]]]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid</span>(<span class="params">cube</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">len</span>(cube) == <span class="number">6</span></span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> face <span class="keyword">in</span> cube:</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(face) == n</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> face:</span><br><span class="line">      <span class="keyword">assert</span> <span class="built_in">len</span>(row) == n</span><br><span class="line">      <span class="keyword">for</span> v <span class="keyword">in</span> row:</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">0</span> &lt;= v <span class="keyword">and</span> v &lt; <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_3ds</span>(<span class="params">cube_3ds: <span class="type">List</span>[CUBE3DCOLOR], cube_3d_surface: CUBE3DSURFACE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  cnt = <span class="built_in">len</span>(cube_3ds)</span><br><span class="line">  row = <span class="built_in">max</span>(<span class="built_in">int</span>(cnt**<span class="number">0.5</span>), <span class="number">1</span>)</span><br><span class="line">  col = cnt//row + <span class="built_in">int</span>((cnt % row) != <span class="number">0</span>)</span><br><span class="line">  fig = plt.figure()</span><br><span class="line">  colors = [<span class="string">&#x27;#FFFF00&#x27;</span>, <span class="string">&#x27;#0000FF&#x27;</span>, <span class="string">&#x27;#FF0000&#x27;</span>, <span class="string">&#x27;#00FF00&#x27;</span>, <span class="string">&#x27;#FF681F&#x27;</span>, <span class="string">&#x27;#FFFFFF&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt):</span><br><span class="line">    cube_3d = cube_3ds[i]</span><br><span class="line">    ax = fig.add_subplot(row, col, i+<span class="number">1</span>, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x, yzv <span class="keyword">in</span> cube_3d.items():</span><br><span class="line">      <span class="keyword">for</span> y, zv <span class="keyword">in</span> yzv.items():</span><br><span class="line">        <span class="keyword">for</span> z, c <span class="keyword">in</span> zv.items():</span><br><span class="line">          dx, dy, dz = cube_3d_surface[x][y][z]</span><br><span class="line">          <span class="keyword">if</span> dx == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x, x], [x, x]])</span><br><span class="line">            Y = np.array([[y-<span class="number">1</span>, y+<span class="number">1</span>], [y-<span class="number">1</span>, y+<span class="number">1</span>]])</span><br><span class="line">            Z = np.array([[z-<span class="number">1</span>, z-<span class="number">1</span>], [z+<span class="number">1</span>, z+<span class="number">1</span>]])</span><br><span class="line">          <span class="keyword">elif</span> dy == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x-<span class="number">1</span>, x+<span class="number">1</span>], [x-<span class="number">1</span>, x+<span class="number">1</span>]])</span><br><span class="line">            Y = np.array([[y, y], [y, y]])</span><br><span class="line">            Z = np.array([[z-<span class="number">1</span>, z-<span class="number">1</span>], [z+<span class="number">1</span>, z+<span class="number">1</span>]])</span><br><span class="line">          <span class="keyword">elif</span> dz == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x-<span class="number">1</span>, x+<span class="number">1</span>], [x-<span class="number">1</span>, x+<span class="number">1</span>]])</span><br><span class="line">            Y = np.array([[y-<span class="number">1</span>, y-<span class="number">1</span>], [y+<span class="number">1</span>, y+<span class="number">1</span>]])</span><br><span class="line">            Z = np.array([[z, z], [z, z]])</span><br><span class="line">          ax.plot_surface(</span><br><span class="line">              X, Y, Z, color=colors[c])</span><br><span class="line"></span><br><span class="line">  plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_cube</span>(<span class="params">res: CUBE3DSURFACE | CUBE3DCOLOR, xyz: <span class="type">List</span>[<span class="built_in">int</span>], v: <span class="type">Any</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  x, y, z = xyz</span><br><span class="line">  <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">    res[x] = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> y <span class="keyword">not</span> <span class="keyword">in</span> res[x]:</span><br><span class="line">    res[x][y] = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  res[x][y][z] = v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_up</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">2</span> * i - (n - <span class="number">1</span>), <span class="number">2</span> * j - (n - <span class="number">1</span>), + n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_left</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">2</span> * j - (n - <span class="number">1</span>), -n, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_front</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [+n, <span class="number">2</span> * j - (n - <span class="number">1</span>), (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_right</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [(n - <span class="number">1</span>) - <span class="number">2</span> * j, +n, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_back</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [-n, (n - <span class="number">1</span>) - <span class="number">2</span> * j, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_down</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [(n - <span class="number">1</span>) - <span class="number">2</span> * i, <span class="number">2</span> * j - (n - <span class="number">1</span>), - n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">arr_to_3d</span>(<span class="params">cube: CUBE</span>) -&gt; CUBE3DCOLOR:</span><br><span class="line">  res: CUBE3DCOLOR = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      set_cube(res, _up(i, j, n), cube[<span class="number">0</span>][i][j])  <span class="comment"># UP</span></span><br><span class="line">      set_cube(res, _left(i, j, n), cube[<span class="number">1</span>][i][j])  <span class="comment"># LEFT</span></span><br><span class="line">      set_cube(res, _front(i, j, n), cube[<span class="number">2</span>][i][j])  <span class="comment"># FRONT</span></span><br><span class="line">      set_cube(res, _right(i, j, n), cube[<span class="number">3</span>][i][j])  <span class="comment"># RIGHT</span></span><br><span class="line">      set_cube(res, _back(i, j, n), cube[<span class="number">4</span>][i][j])  <span class="comment"># BACK</span></span><br><span class="line">      set_cube(res, _down(i, j, n), cube[<span class="number">5</span>][i][j])  <span class="comment"># DOWN</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateX</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着X轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateY</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着Y轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateZ</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着Z轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateFilter</span>(<span class="params">cube3d: CUBE3DCOLOR, <span class="built_in">filter</span>, rotateFn</span>) -&gt; CUBE3DCOLOR:</span><br><span class="line">  res = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> x, yzv <span class="keyword">in</span> cube3d.items():</span><br><span class="line">    <span class="keyword">for</span> y, zv <span class="keyword">in</span> yzv.items():</span><br><span class="line">      <span class="keyword">for</span> z, v <span class="keyword">in</span> zv.items():</span><br><span class="line">        <span class="comment"># filter() return &#x27;need rotate&#x27;</span></span><br><span class="line">        set_cube(res, rotateFn([x, y, z]) <span class="keyword">if</span> <span class="built_in">filter</span>(x, y, z) <span class="keyword">else</span> [x, y, z], v)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateFront</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: x &gt; <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateBack</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(cube, <span class="keyword">lambda</span> x, y, z: x &lt; <span class="number">0</span>, rotateX)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateLeft</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(cube, <span class="keyword">lambda</span> x, y, z: y &lt; <span class="number">0</span>, rotateY)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateRight</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: y &gt; <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateUp</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(cube, <span class="keyword">lambda</span> x, y, z: z &gt; <span class="number">0</span>, rotateZ)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateDown</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(cube, <span class="keyword">lambda</span> x, y, z: z &lt; <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">progress</span>(<span class="params">cube3d: CUBE3DCOLOR</span>) -&gt; <span class="built_in">int</span>:  <span class="comment"># 只针对3阶魔方</span></span><br><span class="line">  p = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">c</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    x, y, z = xyz</span><br><span class="line">    <span class="keyword">return</span> cube3d[x][y][z]</span><br><span class="line">  <span class="comment"># 底面 十字</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">2</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">1</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">2</span>, <span class="number">1</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">1</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">2</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">1</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">2</span>, <span class="number">1</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">1</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 底面4角</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">2</span>, <span class="number">2</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_front(<span class="number">2</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">2</span>, <span class="number">2</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_right(<span class="number">2</span>, <span class="number">0</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">2</span>, <span class="number">2</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_back(<span class="number">2</span>, <span class="number">0</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">2</span>, <span class="number">2</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_left(<span class="number">2</span>, <span class="number">0</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">8</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 第二层4个棱, 这里通过5 &gt; 1+1+1+1 保证了 完成的棱 大于 所有的半步状态</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">1</span>, <span class="number">2</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_front(<span class="number">1</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">1</span>, <span class="number">2</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_right(<span class="number">1</span>, <span class="number">0</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">1</span>, <span class="number">2</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_back(<span class="number">1</span>, <span class="number">0</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">1</span>, <span class="number">2</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_left(<span class="number">1</span>, <span class="number">0</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 第二层 中间半步状态</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">0</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">1</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">0</span>, <span class="number">1</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">2</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">0</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">1</span>, <span class="number">2</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">0</span>, <span class="number">1</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">0</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">28</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 顶十字</span></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">0</span>, <span class="number">1</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">1</span>, <span class="number">0</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">1</span>, <span class="number">2</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">2</span>, <span class="number">1</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">32</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 顶面</span></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">0</span>, <span class="number">0</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">0</span>, <span class="number">2</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">2</span>, <span class="number">0</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">2</span>, <span class="number">2</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">36</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateMidX</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: x == <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateMidY</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: y == <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateMidZ</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: z == <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">two</span>(<span class="params">fn</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">lambda</span> x: fn(fn(x))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">three</span>(<span class="params">fn</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">lambda</span> x: fn(fn(fn(x)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ops = [</span><br><span class="line">    rotateUp, two(rotateUp), three(rotateUp),</span><br><span class="line">    rotateDown, two(rotateDown), three(rotateDown),</span><br><span class="line">    <span class="comment"># rotateMidZ, two(rotateMidZ), three(rotateMidZ),</span></span><br><span class="line"></span><br><span class="line">    rotateLeft, two(rotateLeft), three(rotateLeft),</span><br><span class="line">    rotateRight, two(rotateRight), three(rotateRight),</span><br><span class="line">    <span class="comment"># rotateMidY, two(rotateMidY), three(rotateMidY),</span></span><br><span class="line"></span><br><span class="line">    rotateFront, two(rotateFront), three(rotateFront),</span><br><span class="line">    rotateBack, two(rotateBack), three(rotateBack),</span><br><span class="line">    <span class="comment"># rotateMidX, two(rotateMidX), three(rotateMidX),</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">res: <span class="type">List</span>[CUBE3DCOLOR], opidxs: <span class="type">List</span>[<span class="built_in">int</span>], remain: <span class="built_in">int</span>, stop: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">  <span class="keyword">if</span> progress(res[-<span class="number">1</span>]) &gt;= stop:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">  <span class="keyword">if</span> remain &lt;= <span class="number">0</span>:  <span class="comment"># 迭代加深</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ops)):</span><br><span class="line">    <span class="comment"># 剪枝</span></span><br><span class="line">    <span class="keyword">if</span> idx // <span class="number">3</span> == opidxs[-<span class="number">1</span>] // <span class="number">3</span>:  <span class="comment"># 不要连续旋转同一个面</span></span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> idx // <span class="number">6</span> == opidxs[-<span class="number">1</span>] // <span class="number">6</span>:  <span class="comment"># 如果 连续 沿着同轴旋转 两个面</span></span><br><span class="line">      <span class="keyword">if</span> idx &gt; opidxs[-<span class="number">1</span>]:  <span class="comment"># 保证 序号小的先旋转</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    op = ops[idx]</span><br><span class="line">    res.append(op(res[-<span class="number">1</span>]))</span><br><span class="line">    opidxs.append(idx)</span><br><span class="line">    <span class="keyword">if</span> dfs(res, opidxs, remain-<span class="number">1</span>, stop):</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    res.pop()</span><br><span class="line">    opidxs.pop()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">steps</span>(<span class="params">cube3d: CUBE3DCOLOR, stop: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[CUBE3DCOLOR]:</span><br><span class="line">  res = [cube3d]</span><br><span class="line">  opsidxs = [-<span class="number">1</span>]</span><br><span class="line">  dep = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">not</span> dfs(res, opsidxs, dep, stop):</span><br><span class="line">    dep += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;dep = &#x27;</span>, dep)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump3d</span>(<span class="params">cube3d: CUBE3DCOLOR, n=<span class="number">3</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  res = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">dump_face</span>(<span class="params">fn</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    face = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      row = []</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        x, y, z = fn(i, j)</span><br><span class="line">        row.append(cube3d[x][y][z])</span><br><span class="line">      face.append(row)</span><br><span class="line">    res.append(face)</span><br><span class="line"></span><br><span class="line">  dump_face(_up)</span><br><span class="line">  dump_face(_left)</span><br><span class="line">  dump_face(_front)</span><br><span class="line">  dump_face(_right)</span><br><span class="line">  dump_face(_back)</span><br><span class="line">  dump_face(_down)</span><br><span class="line">  <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">transfroms = [_up, _left, _front, _right, _back, _down]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">cube: CUBE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  valid(cube)</span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  cube3d = arr_to_3d(cube)</span><br><span class="line"></span><br><span class="line">  cube3dsurface = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      set_cube(cube3dsurface, _up(i, j, n),  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>])  <span class="comment"># UP</span></span><br><span class="line">      set_cube(cube3dsurface, _left(i, j, n),  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])  <span class="comment"># LEFT</span></span><br><span class="line">      set_cube(cube3dsurface, _front(i, j, n),  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>])  <span class="comment"># FRONT</span></span><br><span class="line">      set_cube(cube3dsurface, _right(i, j, n),  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])  <span class="comment"># RIGHT</span></span><br><span class="line">      set_cube(cube3dsurface, _back(i, j, n),  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>])  <span class="comment"># BACK</span></span><br><span class="line">      set_cube(cube3dsurface, _down(i, j, n),  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>])  <span class="comment"># DOWN</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">two</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: fn(fn(x))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">three</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: fn(fn(fn(x)))</span><br><span class="line"></span><br><span class="line">  ops = [</span><br><span class="line">      rotateUp, two(rotateUp), three(rotateUp),</span><br><span class="line">      rotateDown, two(rotateDown), three(rotateDown),</span><br><span class="line">      <span class="comment"># rotateMidZ, two(rotateMidZ), three(rotateMidZ),</span></span><br><span class="line"></span><br><span class="line">      rotateLeft, two(rotateLeft), three(rotateLeft),</span><br><span class="line">      rotateRight, two(rotateRight), three(rotateRight),</span><br><span class="line">      <span class="comment"># rotateMidY, two(rotateMidY), three(rotateMidY),</span></span><br><span class="line"></span><br><span class="line">      rotateFront, two(rotateFront), three(rotateFront),</span><br><span class="line">      rotateBack, two(rotateBack), three(rotateBack),</span><br><span class="line">      <span class="comment"># rotateMidX, two(rotateMidX), three(rotateMidX),</span></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  steplist = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">36</span>+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">cube3dsolver</span>():</span><br><span class="line">    ans = [cube3d]</span><br><span class="line">    <span class="keyword">for</span> dst_step <span class="keyword">in</span> steplist:</span><br><span class="line">      moves = steps(ans[-<span class="number">1</span>], dst_step)</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">f&#x27;step <span class="subst">&#123;dst_step&#125;</span> solved with ops = <span class="subst">&#123;<span class="built_in">len</span>(moves)-<span class="number">1</span>&#125;</span>&#x27;</span>)</span><br><span class="line">      ans = ans + moves[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">  ans = cube3dsolver()</span><br><span class="line">  show_3ds(ans, cube3dsurface)</span><br><span class="line">  dump3d(ans[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">solve([[[<span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">4</span>, <span class="number">2</span>, <span class="number">4</span>]], [[<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]], [[<span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]], [</span><br><span class="line">      [<span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>]], [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>]], [[<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>], [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>], [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]]])</span><br></pre></td></tr></table></figure>

<p>从代码上讲,改动很小,就是 增加了顶面 十字 和 顶面 全黄的描述, 但是实际运行的时候, 单次迈进最多的还是7步</p>
<h4 id="版本5-回退一点-顶面十字-棱-meet-in-middle"><a href="#版本5-回退一点-顶面十字-棱-meet-in-middle" class="headerlink" title="版本5 回退一点,顶面十字+棱,meet-in-middle"></a>版本5 回退一点,顶面十字+棱,meet-in-middle</h4><p>如果按照 十字&#x3D;&gt; 顶面 &#x3D;&gt; 顶角 &#x3D;&gt; 顶棱,, “从预知的知识”来看, 单个步骤太长, 对于暴力搜的方案来说,不可行</p>
<p>这里换了一个进度表示: 顶面十字 &#x3D;&gt; 十字棱 &#x3D;&gt; 角在对应位置 &#x3D;&gt; 完成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span>, <span class="type">Dict</span>, <span class="type">List</span>, <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#  U</span></span><br><span class="line"><span class="comment"># LFRB</span></span><br><span class="line"><span class="comment">#  D</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  0</span></span><br><span class="line"><span class="comment"># 1234</span></span><br><span class="line"><span class="comment">#  5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   黄</span></span><br><span class="line"><span class="comment"># 蓝红绿橙</span></span><br><span class="line"><span class="comment">#   白</span></span><br><span class="line">YELLOW = <span class="number">0</span></span><br><span class="line">BLUE = <span class="number">1</span></span><br><span class="line">RED = <span class="number">2</span></span><br><span class="line">GREEN = <span class="number">3</span></span><br><span class="line">ORANGE = <span class="number">4</span></span><br><span class="line">WHITE = <span class="number">5</span></span><br><span class="line">BLACK = <span class="number">6</span>  <span class="comment"># 用于简化状态</span></span><br><span class="line"></span><br><span class="line">CUBE = <span class="type">List</span>[<span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]]  <span class="comment"># ULFRBD</span></span><br><span class="line"><span class="comment"># [x][y][z] =&gt; (color,xyz扩展方向)</span></span><br><span class="line">CUBE3DCOLOR = <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]]]</span><br><span class="line">CUBE3DSURFACE = <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">List</span>[<span class="built_in">int</span>]]]]</span><br><span class="line">cube3dsurface = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid</span>(<span class="params">cube</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">len</span>(cube) == <span class="number">6</span></span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> face <span class="keyword">in</span> cube:</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(face) == n</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> face:</span><br><span class="line">      <span class="keyword">assert</span> <span class="built_in">len</span>(row) == n</span><br><span class="line">      <span class="keyword">for</span> v <span class="keyword">in</span> row:</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">0</span> &lt;= v <span class="keyword">and</span> v &lt; <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_3ds</span>(<span class="params">cube_3ds: <span class="type">List</span>[CUBE3DCOLOR], cube_3d_surface: CUBE3DSURFACE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  cnt = <span class="built_in">len</span>(cube_3ds)</span><br><span class="line">  row = <span class="built_in">max</span>(<span class="built_in">int</span>(cnt**<span class="number">0.5</span>), <span class="number">1</span>)</span><br><span class="line">  col = cnt//row + <span class="built_in">int</span>((cnt % row) != <span class="number">0</span>)</span><br><span class="line">  fig = plt.figure()</span><br><span class="line">  colors = [<span class="string">&#x27;#FFFF00&#x27;</span>, <span class="string">&#x27;#0000FF&#x27;</span>, <span class="string">&#x27;#FF0000&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;#00FF00&#x27;</span>, <span class="string">&#x27;#FF681F&#x27;</span>, <span class="string">&#x27;#FFFFFF&#x27;</span>, <span class="string">&#x27;#000000&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt):</span><br><span class="line">    cube_3d = cube_3ds[i]</span><br><span class="line">    ax = fig.add_subplot(row, col, i+<span class="number">1</span>, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x, yzv <span class="keyword">in</span> cube_3d.items():</span><br><span class="line">      <span class="keyword">for</span> y, zv <span class="keyword">in</span> yzv.items():</span><br><span class="line">        <span class="keyword">for</span> z, c <span class="keyword">in</span> zv.items():</span><br><span class="line">          dx, dy, dz = cube_3d_surface[x][y][z]</span><br><span class="line">          <span class="keyword">if</span> dx == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x, x], [x, x]])</span><br><span class="line">            Y = np.array([[y-<span class="number">1</span>, y+<span class="number">1</span>], [y-<span class="number">1</span>, y+<span class="number">1</span>]])</span><br><span class="line">            Z = np.array([[z-<span class="number">1</span>, z-<span class="number">1</span>], [z+<span class="number">1</span>, z+<span class="number">1</span>]])</span><br><span class="line">          <span class="keyword">elif</span> dy == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x-<span class="number">1</span>, x+<span class="number">1</span>], [x-<span class="number">1</span>, x+<span class="number">1</span>]])</span><br><span class="line">            Y = np.array([[y, y], [y, y]])</span><br><span class="line">            Z = np.array([[z-<span class="number">1</span>, z-<span class="number">1</span>], [z+<span class="number">1</span>, z+<span class="number">1</span>]])</span><br><span class="line">          <span class="keyword">elif</span> dz == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x-<span class="number">1</span>, x+<span class="number">1</span>], [x-<span class="number">1</span>, x+<span class="number">1</span>]])</span><br><span class="line">            Y = np.array([[y-<span class="number">1</span>, y-<span class="number">1</span>], [y+<span class="number">1</span>, y+<span class="number">1</span>]])</span><br><span class="line">            Z = np.array([[z, z], [z, z]])</span><br><span class="line">          ax.plot_surface(</span><br><span class="line">              X, Y, Z, color=colors[c])</span><br><span class="line"></span><br><span class="line">  plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_cube</span>(<span class="params">res: CUBE3DSURFACE | CUBE3DCOLOR, xyz: <span class="type">List</span>[<span class="built_in">int</span>], v: <span class="type">Any</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  x, y, z = xyz</span><br><span class="line">  <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">    res[x] = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> y <span class="keyword">not</span> <span class="keyword">in</span> res[x]:</span><br><span class="line">    res[x][y] = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  res[x][y][z] = v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_up</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">2</span> * i - (n - <span class="number">1</span>), <span class="number">2</span> * j - (n - <span class="number">1</span>), + n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_left</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">2</span> * j - (n - <span class="number">1</span>), -n, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_front</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [+n, <span class="number">2</span> * j - (n - <span class="number">1</span>), (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_right</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [(n - <span class="number">1</span>) - <span class="number">2</span> * j, +n, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_back</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [-n, (n - <span class="number">1</span>) - <span class="number">2</span> * j, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_down</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [(n - <span class="number">1</span>) - <span class="number">2</span> * i, <span class="number">2</span> * j - (n - <span class="number">1</span>), - n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">transfroms = [_up, _left, _front, _right, _back, _down]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">arr_to_3d</span>(<span class="params">cube: CUBE</span>) -&gt; CUBE3DCOLOR:</span><br><span class="line">  res: CUBE3DCOLOR = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      set_cube(res, _up(i, j, n), cube[<span class="number">0</span>][i][j])  <span class="comment"># UP</span></span><br><span class="line">      set_cube(res, _left(i, j, n), cube[<span class="number">1</span>][i][j])  <span class="comment"># LEFT</span></span><br><span class="line">      set_cube(res, _front(i, j, n), cube[<span class="number">2</span>][i][j])  <span class="comment"># FRONT</span></span><br><span class="line">      set_cube(res, _right(i, j, n), cube[<span class="number">3</span>][i][j])  <span class="comment"># RIGHT</span></span><br><span class="line">      set_cube(res, _back(i, j, n), cube[<span class="number">4</span>][i][j])  <span class="comment"># BACK</span></span><br><span class="line">      set_cube(res, _down(i, j, n), cube[<span class="number">5</span>][i][j])  <span class="comment"># DOWN</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateX</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着X轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateY</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着Y轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateZ</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着Z轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateFilter</span>(<span class="params">cube3d: CUBE3DCOLOR, <span class="built_in">filter</span>, rotateFn</span>) -&gt; CUBE3DCOLOR:</span><br><span class="line">  res = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> x, yzv <span class="keyword">in</span> cube3d.items():</span><br><span class="line">    <span class="keyword">for</span> y, zv <span class="keyword">in</span> yzv.items():</span><br><span class="line">      <span class="keyword">for</span> z, v <span class="keyword">in</span> zv.items():</span><br><span class="line">        <span class="comment"># filter() return &#x27;need rotate&#x27;</span></span><br><span class="line">        set_cube(res, rotateFn([x, y, z]) <span class="keyword">if</span> <span class="built_in">filter</span>(x, y, z) <span class="keyword">else</span> [x, y, z], v)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">copy</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: <span class="literal">False</span>, <span class="keyword">lambda</span> o: o)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateFront</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: x &gt; <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateBack</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: x &lt; <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateLeft</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: y &lt; <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateRight</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: y &gt; <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateUp</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: z &gt; <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateDown</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: z &lt; <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">progress</span>(<span class="params">cube3d: CUBE3DCOLOR</span>) -&gt; <span class="built_in">int</span>:  <span class="comment"># 只针对3阶魔方</span></span><br><span class="line">  p = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">c</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    x, y, z = xyz</span><br><span class="line">    <span class="keyword">return</span> cube3d[x][y][z]</span><br><span class="line">  <span class="comment"># 底面 十字</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">2</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">1</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">2</span>, <span class="number">1</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">1</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">2</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">1</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">2</span>, <span class="number">1</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">1</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 底面4角</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">2</span>, <span class="number">2</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_front(<span class="number">2</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">2</span>, <span class="number">2</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_right(<span class="number">2</span>, <span class="number">0</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">2</span>, <span class="number">2</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_back(<span class="number">2</span>, <span class="number">0</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">2</span>, <span class="number">2</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_left(<span class="number">2</span>, <span class="number">0</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">8</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 第二层4个棱, 这里通过5 &gt; 1+1+1+1 保证了 完成的棱 大于 所有的半步状态</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">1</span>, <span class="number">2</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_front(<span class="number">1</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">1</span>, <span class="number">2</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_right(<span class="number">1</span>, <span class="number">0</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">1</span>, <span class="number">2</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_back(<span class="number">1</span>, <span class="number">0</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">1</span>, <span class="number">2</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_left(<span class="number">1</span>, <span class="number">0</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 第二层 中间半步状态</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">0</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">1</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">0</span>, <span class="number">1</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">2</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">0</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">1</span>, <span class="number">2</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">0</span>, <span class="number">1</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">0</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">28</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 顶十字</span></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">0</span>, <span class="number">1</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">1</span>, <span class="number">0</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">1</span>, <span class="number">2</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">2</span>, <span class="number">1</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">32</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 顶十字的棱</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">0</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">0</span>, <span class="number">1</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">0</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">0</span>, <span class="number">1</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">36</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 顶四角 在对应的位置</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">sorted</span>([c(_up(<span class="number">2</span>, <span class="number">0</span>)), c(_left(<span class="number">0</span>, <span class="number">2</span>)), c(_front(<span class="number">0</span>, <span class="number">0</span>))]) == <span class="built_in">sorted</span>([c(_up(<span class="number">1</span>, <span class="number">1</span>)), c(_left(<span class="number">1</span>, <span class="number">1</span>)), c(_front(<span class="number">1</span>, <span class="number">1</span>))]):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">sorted</span>([c(_up(<span class="number">2</span>, <span class="number">2</span>)), c(_front(<span class="number">0</span>, <span class="number">2</span>)), c(_right(<span class="number">0</span>, <span class="number">0</span>))]) == <span class="built_in">sorted</span>([c(_up(<span class="number">1</span>, <span class="number">1</span>)), c(_front(<span class="number">1</span>, <span class="number">1</span>)), c(_right(<span class="number">1</span>, <span class="number">1</span>))]):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">sorted</span>([c(_up(<span class="number">0</span>, <span class="number">2</span>)), c(_right(<span class="number">0</span>, <span class="number">2</span>)), c(_back(<span class="number">0</span>, <span class="number">0</span>))]) == <span class="built_in">sorted</span>([c(_up(<span class="number">1</span>, <span class="number">1</span>)), c(_right(<span class="number">1</span>, <span class="number">1</span>)), c(_back(<span class="number">1</span>, <span class="number">1</span>))]):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">sorted</span>([c(_up(<span class="number">0</span>, <span class="number">0</span>)), c(_back(<span class="number">0</span>, <span class="number">2</span>)), c(_left(<span class="number">0</span>, <span class="number">0</span>))]) == <span class="built_in">sorted</span>([c(_up(<span class="number">1</span>, <span class="number">1</span>)), c(_back(<span class="number">1</span>, <span class="number">1</span>)), c(_left(<span class="number">1</span>, <span class="number">1</span>))]):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">40</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 终止状态</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">0</span>, <span class="number">0</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">0</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">0</span>, <span class="number">0</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">0</span>, <span class="number">0</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">44</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateMidX</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: x == <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateMidY</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: y == <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateMidZ</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: z == <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">two</span>(<span class="params">fn</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">lambda</span> x: fn(fn(x))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">three</span>(<span class="params">fn</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">lambda</span> x: fn(fn(fn(x)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ops = [</span><br><span class="line">    rotateUp, two(rotateUp), three(rotateUp),</span><br><span class="line">    rotateDown, two(rotateDown), three(rotateDown),</span><br><span class="line">    <span class="comment"># rotateMidZ, two(rotateMidZ), three(rotateMidZ),</span></span><br><span class="line"></span><br><span class="line">    rotateLeft, two(rotateLeft), three(rotateLeft),</span><br><span class="line">    rotateRight, two(rotateRight), three(rotateRight),</span><br><span class="line">    <span class="comment"># rotateMidY, two(rotateMidY), three(rotateMidY),</span></span><br><span class="line"></span><br><span class="line">    rotateFront, two(rotateFront), three(rotateFront),</span><br><span class="line">    rotateBack, two(rotateBack), three(rotateBack),</span><br><span class="line">    <span class="comment"># rotateMidX, two(rotateMidX), three(rotateMidX),</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">res: <span class="type">List</span>[CUBE3DCOLOR], opidxs: <span class="type">List</span>[<span class="built_in">int</span>], remain: <span class="built_in">int</span>, stop: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">  <span class="keyword">if</span> progress(res[-<span class="number">1</span>]) &gt;= stop:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">  <span class="keyword">if</span> remain &lt;= <span class="number">0</span>:  <span class="comment"># 迭代加深</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ops)):</span><br><span class="line">    <span class="comment"># 剪枝</span></span><br><span class="line">    <span class="keyword">if</span> idx // <span class="number">3</span> == opidxs[-<span class="number">1</span>] // <span class="number">3</span>:  <span class="comment"># 不要连续旋转同一个面</span></span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> idx // <span class="number">6</span> == opidxs[-<span class="number">1</span>] // <span class="number">6</span>:  <span class="comment"># 如果 连续 沿着同轴旋转 两个面</span></span><br><span class="line">      <span class="keyword">if</span> idx &gt; opidxs[-<span class="number">1</span>]:  <span class="comment"># 保证 序号小的先旋转</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    op = ops[idx]</span><br><span class="line">    res.append(op(res[-<span class="number">1</span>]))</span><br><span class="line">    opidxs.append(idx)</span><br><span class="line">    <span class="keyword">if</span> dfs(res, opidxs, remain-<span class="number">1</span>, stop):</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    res.pop()</span><br><span class="line">    opidxs.pop()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">steps</span>(<span class="params">cube3d: CUBE3DCOLOR, stop: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[CUBE3DCOLOR]:</span><br><span class="line">  res = [cube3d]</span><br><span class="line">  opsidxs = [-<span class="number">1</span>]</span><br><span class="line">  dep = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">not</span> dfs(res, opsidxs, dep, stop):</span><br><span class="line">    dep += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;dep = &#x27;</span>, dep)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">black_up_十棱</span>(<span class="params">cube3d: CUBE3DCOLOR</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># return opidxs</span></span><br><span class="line">  <span class="comment"># meet in middle</span></span><br><span class="line">  <span class="keyword">assert</span> progress(cube3d) &gt;= <span class="number">32</span></span><br><span class="line">  S = &#123;&#125;</span><br><span class="line">  STATE_TYPE = <span class="type">List</span>[<span class="built_in">int</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">c</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    x, y, z = xyz</span><br><span class="line">    <span class="keyword">return</span> cube3d[x][y][z]</span><br><span class="line"></span><br><span class="line">  <span class="comment">#  [state] =&gt; STATE_TYPE &#123;正向/逆向,操作idxs arr&#125;</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">get_state</span>(<span class="params">state: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">bool</span>, STATE_TYPE]:</span><br><span class="line">    ref = S</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> state:</span><br><span class="line">      <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> ref:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line">      ref = ref[v]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span>, ref</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">set_state</span>(<span class="params">state: <span class="type">List</span>[<span class="built_in">int</span>], val: STATE_TYPE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    ref = S</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(state)-<span class="number">1</span>):</span><br><span class="line">      <span class="keyword">if</span> state[i] <span class="keyword">not</span> <span class="keyword">in</span> ref:</span><br><span class="line">        ref[state[i]] = &#123;&#125;</span><br><span class="line">      ref = ref[state[i]]</span><br><span class="line">    ref[state[-<span class="number">1</span>]] = val</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">flat_cube</span>(<span class="params">cur: CUBE3DCOLOR, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    res = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>*n*n)]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">          x, y, z = transfroms[_](i, j)</span><br><span class="line">          res[j+n*(i+n*_)] = cur[x][y][z]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">rev</span>(<span class="params">opidxs: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    ret = []</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> opidxs[::-<span class="number">1</span>]:</span><br><span class="line">      <span class="keyword">if</span> v == -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      ret.append((v//<span class="number">3</span>)*<span class="number">3</span> + (<span class="number">2</span>-v % <span class="number">3</span>))</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 正向 build</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">cur: CUBE3DCOLOR, opidxs: <span class="type">List</span>[<span class="built_in">int</span>], remain: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    flat_state = flat_cube(cur)</span><br><span class="line">    exist, state = get_state(flat_state)</span><br><span class="line">    <span class="keyword">if</span> exist <span class="keyword">and</span> <span class="built_in">len</span>(state) &lt;= <span class="built_in">len</span>(opidxs):  <span class="comment"># 更快的步骤, 由状态剪枝</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    set_state(flat_state, opidxs)</span><br><span class="line">    <span class="keyword">if</span> remain == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ops)):</span><br><span class="line">      build(ops[idx](cur), opidxs+[idx], remain-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 逆向 query</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">cur: CUBE3DCOLOR, opidxs: <span class="type">List</span>[<span class="built_in">int</span>], remain: <span class="built_in">int</span></span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">bool</span>, <span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">    flat_state = flat_cube(cur)</span><br><span class="line">    exist, value = get_state(flat_state)</span><br><span class="line">    <span class="keyword">if</span> exist:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">True</span>, value + rev(opidxs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> remain == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span>, []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ops)):</span><br><span class="line">      <span class="comment"># 剪枝</span></span><br><span class="line">      <span class="comment"># if idx // 3 == opidxs[-1] // 3:  # 不要连续旋转同一个面</span></span><br><span class="line">      <span class="comment">#   continue</span></span><br><span class="line">      <span class="comment"># if idx // 6 == opidxs[-1] // 6:  # 如果 连续 沿着同轴旋转 两个面</span></span><br><span class="line">      <span class="comment">#   if idx &gt; opidxs[-1]:  # 保证 序号小的先旋转</span></span><br><span class="line">      <span class="comment">#     continue</span></span><br><span class="line">      ok, ret = query(ops[idx](cur), opidxs+[idx], remain-<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">if</span> ok:</span><br><span class="line">        <span class="keyword">return</span> ok, ret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>, []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">black_start</span>() -&gt; CUBE3DCOLOR:</span><br><span class="line">    res = copy(cube3d)</span><br><span class="line">    set_cube(res, _up(<span class="number">0</span>, <span class="number">0</span>), BLACK)</span><br><span class="line">    set_cube(res, _up(<span class="number">0</span>, <span class="number">2</span>), BLACK)</span><br><span class="line">    set_cube(res, _up(<span class="number">2</span>, <span class="number">0</span>), BLACK)</span><br><span class="line">    set_cube(res, _up(<span class="number">2</span>, <span class="number">2</span>), BLACK)</span><br><span class="line"></span><br><span class="line">    set_cube(res, _left(<span class="number">0</span>, <span class="number">0</span>), BLACK)</span><br><span class="line">    set_cube(res, _left(<span class="number">0</span>, <span class="number">2</span>), BLACK)</span><br><span class="line"></span><br><span class="line">    set_cube(res, _front(<span class="number">0</span>, <span class="number">0</span>), BLACK)</span><br><span class="line">    set_cube(res, _front(<span class="number">0</span>, <span class="number">2</span>), BLACK)</span><br><span class="line"></span><br><span class="line">    set_cube(res, _right(<span class="number">0</span>, <span class="number">0</span>), BLACK)</span><br><span class="line">    set_cube(res, _right(<span class="number">0</span>, <span class="number">2</span>), BLACK)</span><br><span class="line"></span><br><span class="line">    set_cube(res, _back(<span class="number">0</span>, <span class="number">0</span>), BLACK)</span><br><span class="line">    set_cube(res, _back(<span class="number">0</span>, <span class="number">2</span>), BLACK)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">black_dst</span>() -&gt; CUBE3DCOLOR:</span><br><span class="line">    res = black_start()</span><br><span class="line">    set_cube(res, _up(<span class="number">0</span>, <span class="number">1</span>), c(_up(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    set_cube(res, _up(<span class="number">1</span>, <span class="number">0</span>), c(_up(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    set_cube(res, _up(<span class="number">1</span>, <span class="number">2</span>), c(_up(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    set_cube(res, _up(<span class="number">2</span>, <span class="number">1</span>), c(_up(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">    set_cube(res, _left(<span class="number">0</span>, <span class="number">1</span>), c(_left(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    set_cube(res, _front(<span class="number">0</span>, <span class="number">1</span>), c(_front(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    set_cube(res, _right(<span class="number">0</span>, <span class="number">1</span>), c(_right(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    set_cube(res, _back(<span class="number">0</span>, <span class="number">1</span>), c(_back(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  st = black_start()</span><br><span class="line">  build(st, [-<span class="number">1</span>], <span class="number">4</span>)</span><br><span class="line">  st = rotateUp(st)</span><br><span class="line">  build(st, [-<span class="number">1</span>, <span class="number">0</span>], <span class="number">4</span>)</span><br><span class="line">  st = rotateUp(st)</span><br><span class="line">  build(st, [-<span class="number">1</span>, <span class="number">1</span>], <span class="number">4</span>)</span><br><span class="line">  st = rotateUp(st)</span><br><span class="line">  build(st, [-<span class="number">1</span>, <span class="number">2</span>], <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;build finish&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  dst = black_dst()</span><br><span class="line">  <span class="keyword">for</span> op <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">1</span>, <span class="number">3</span>):  <span class="comment"># -1,0,1,2</span></span><br><span class="line">    ok, idxs = query(dst, [op], <span class="number">4</span>)  <span class="comment"># 注意过滤</span></span><br><span class="line">    <span class="keyword">if</span> ok:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> o: o != -<span class="number">1</span>, idxs))</span><br><span class="line">    dst = rotateUp(dst)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">assert</span> <span class="literal">False</span></span><br><span class="line">  <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump3d</span>(<span class="params">cube3d: CUBE3DCOLOR, n=<span class="number">3</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  res = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">dump_face</span>(<span class="params">fn</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    face = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      row = []</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        x, y, z = fn(i, j)</span><br><span class="line">        row.append(cube3d[x][y][z])</span><br><span class="line">      face.append(row)</span><br><span class="line">    res.append(face)</span><br><span class="line"></span><br><span class="line">  dump_face(_up)</span><br><span class="line">  dump_face(_left)</span><br><span class="line">  dump_face(_front)</span><br><span class="line">  dump_face(_right)</span><br><span class="line">  dump_face(_back)</span><br><span class="line">  dump_face(_down)</span><br><span class="line">  <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">cube: CUBE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  valid(cube)</span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  cube3d = arr_to_3d(cube)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      set_cube(cube3dsurface, _up(i, j, n),  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>])  <span class="comment"># UP</span></span><br><span class="line">      set_cube(cube3dsurface, _left(i, j, n),  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])  <span class="comment"># LEFT</span></span><br><span class="line">      set_cube(cube3dsurface, _front(i, j, n),  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>])  <span class="comment"># FRONT</span></span><br><span class="line">      set_cube(cube3dsurface, _right(i, j, n),  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])  <span class="comment"># RIGHT</span></span><br><span class="line">      set_cube(cube3dsurface, _back(i, j, n),  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>])  <span class="comment"># BACK</span></span><br><span class="line">      set_cube(cube3dsurface, _down(i, j, n),  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>])  <span class="comment"># DOWN</span></span><br><span class="line"></span><br><span class="line">  steplist = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">32</span>+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">cube3dsolver</span>():</span><br><span class="line">    ans = [cube3d]</span><br><span class="line">    <span class="keyword">for</span> dst_step <span class="keyword">in</span> steplist:</span><br><span class="line">      moves = steps(ans[-<span class="number">1</span>], dst_step)</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">f&#x27;step <span class="subst">&#123;dst_step&#125;</span> solved with ops = <span class="subst">&#123;<span class="built_in">len</span>(moves)-<span class="number">1</span>&#125;</span>&#x27;</span>)</span><br><span class="line">      ans = ans + moves[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    opidxs = black_up_十棱(ans[-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> opidxs:</span><br><span class="line">      ans.append(ops[idx](ans[-<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">  ans = cube3dsolver()</span><br><span class="line">  show_3ds(ans, cube3dsurface)</span><br><span class="line">  dump3d(ans[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">solve([[[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]], [[<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]], [[<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]], [</span><br><span class="line">      [<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>]], [[<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>]], [[<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>], [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>], [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]]])</span><br></pre></td></tr></table></figure>


<h4 id="版本6-优化棱进度-与-顶面十字"><a href="#版本6-优化棱进度-与-顶面十字" class="headerlink" title="版本6 优化棱进度 与 顶面十字"></a>版本6 优化棱进度 与 顶面十字</h4><p>TODO……….. 搜索量太大没跑出来,还需要优化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span>, <span class="type">Dict</span>, <span class="type">List</span>, <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#  U</span></span><br><span class="line"><span class="comment"># LFRB</span></span><br><span class="line"><span class="comment">#  D</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  0</span></span><br><span class="line"><span class="comment"># 1234</span></span><br><span class="line"><span class="comment">#  5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   黄</span></span><br><span class="line"><span class="comment"># 蓝红绿橙</span></span><br><span class="line"><span class="comment">#   白</span></span><br><span class="line">YELLOW = <span class="number">0</span></span><br><span class="line">BLUE = <span class="number">1</span></span><br><span class="line">RED = <span class="number">2</span></span><br><span class="line">GREEN = <span class="number">3</span></span><br><span class="line">ORANGE = <span class="number">4</span></span><br><span class="line">WHITE = <span class="number">5</span></span><br><span class="line">BLACK = <span class="number">6</span>  <span class="comment"># 用于简化状态</span></span><br><span class="line"></span><br><span class="line">CUBE = <span class="type">List</span>[<span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]]  <span class="comment"># ULFRBD</span></span><br><span class="line"><span class="comment"># [x][y][z] =&gt; (color,xyz扩展方向)</span></span><br><span class="line">CUBE3DCOLOR = <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]]]</span><br><span class="line">CUBE3DSURFACE = <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">List</span>[<span class="built_in">int</span>]]]]</span><br><span class="line">cube3dsurface = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid</span>(<span class="params">cube</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">len</span>(cube) == <span class="number">6</span></span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> face <span class="keyword">in</span> cube:</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(face) == n</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> face:</span><br><span class="line">      <span class="keyword">assert</span> <span class="built_in">len</span>(row) == n</span><br><span class="line">      <span class="keyword">for</span> v <span class="keyword">in</span> row:</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">0</span> &lt;= v <span class="keyword">and</span> v &lt; <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_3ds</span>(<span class="params">cube_3ds: <span class="type">List</span>[CUBE3DCOLOR], cube_3d_surface: CUBE3DSURFACE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  cnt = <span class="built_in">len</span>(cube_3ds)</span><br><span class="line">  row = <span class="built_in">max</span>(<span class="built_in">int</span>(cnt**<span class="number">0.5</span>), <span class="number">1</span>)</span><br><span class="line">  col = cnt//row + <span class="built_in">int</span>((cnt % row) != <span class="number">0</span>)</span><br><span class="line">  fig = plt.figure()</span><br><span class="line">  colors = [<span class="string">&#x27;#FFFF00&#x27;</span>, <span class="string">&#x27;#0000FF&#x27;</span>, <span class="string">&#x27;#FF0000&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;#00FF00&#x27;</span>, <span class="string">&#x27;#FF681F&#x27;</span>, <span class="string">&#x27;#FFFFFF&#x27;</span>, <span class="string">&#x27;#000000&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt):</span><br><span class="line">    cube_3d = cube_3ds[i]</span><br><span class="line">    ax = fig.add_subplot(row, col, i+<span class="number">1</span>, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x, yzv <span class="keyword">in</span> cube_3d.items():</span><br><span class="line">      <span class="keyword">for</span> y, zv <span class="keyword">in</span> yzv.items():</span><br><span class="line">        <span class="keyword">for</span> z, c <span class="keyword">in</span> zv.items():</span><br><span class="line">          dx, dy, dz = cube_3d_surface[x][y][z]</span><br><span class="line">          <span class="keyword">if</span> dx == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x, x], [x, x]])</span><br><span class="line">            Y = np.array([[y-<span class="number">1</span>, y+<span class="number">1</span>], [y-<span class="number">1</span>, y+<span class="number">1</span>]])</span><br><span class="line">            Z = np.array([[z-<span class="number">1</span>, z-<span class="number">1</span>], [z+<span class="number">1</span>, z+<span class="number">1</span>]])</span><br><span class="line">          <span class="keyword">elif</span> dy == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x-<span class="number">1</span>, x+<span class="number">1</span>], [x-<span class="number">1</span>, x+<span class="number">1</span>]])</span><br><span class="line">            Y = np.array([[y, y], [y, y]])</span><br><span class="line">            Z = np.array([[z-<span class="number">1</span>, z-<span class="number">1</span>], [z+<span class="number">1</span>, z+<span class="number">1</span>]])</span><br><span class="line">          <span class="keyword">elif</span> dz == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x-<span class="number">1</span>, x+<span class="number">1</span>], [x-<span class="number">1</span>, x+<span class="number">1</span>]])</span><br><span class="line">            Y = np.array([[y-<span class="number">1</span>, y-<span class="number">1</span>], [y+<span class="number">1</span>, y+<span class="number">1</span>]])</span><br><span class="line">            Z = np.array([[z, z], [z, z]])</span><br><span class="line">          ax.plot_surface(</span><br><span class="line">              X, Y, Z, color=colors[c])</span><br><span class="line"></span><br><span class="line">  plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_cube</span>(<span class="params">res: CUBE3DSURFACE | CUBE3DCOLOR, xyz: <span class="type">List</span>[<span class="built_in">int</span>], v: <span class="type">Any</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  x, y, z = xyz</span><br><span class="line">  <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">    res[x] = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> y <span class="keyword">not</span> <span class="keyword">in</span> res[x]:</span><br><span class="line">    res[x][y] = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  res[x][y][z] = v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cube</span>(<span class="params">res: CUBE3DSURFACE | CUBE3DCOLOR, xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">  x, y, z = xyz</span><br><span class="line">  <span class="keyword">return</span> res[x][y][z]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_up</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">2</span> * i - (n - <span class="number">1</span>), <span class="number">2</span> * j - (n - <span class="number">1</span>), + n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_left</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">2</span> * j - (n - <span class="number">1</span>), -n, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_front</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [+n, <span class="number">2</span> * j - (n - <span class="number">1</span>), (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_right</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [(n - <span class="number">1</span>) - <span class="number">2</span> * j, +n, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_back</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [-n, (n - <span class="number">1</span>) - <span class="number">2</span> * j, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_down</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [(n - <span class="number">1</span>) - <span class="number">2</span> * i, <span class="number">2</span> * j - (n - <span class="number">1</span>), - n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">transfroms = [_up, _left, _front, _right, _back, _down]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">arr_to_3d</span>(<span class="params">cube: CUBE</span>) -&gt; CUBE3DCOLOR:</span><br><span class="line">  res: CUBE3DCOLOR = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      set_cube(res, _up(i, j, n), cube[<span class="number">0</span>][i][j])  <span class="comment"># UP</span></span><br><span class="line">      set_cube(res, _left(i, j, n), cube[<span class="number">1</span>][i][j])  <span class="comment"># LEFT</span></span><br><span class="line">      set_cube(res, _front(i, j, n), cube[<span class="number">2</span>][i][j])  <span class="comment"># FRONT</span></span><br><span class="line">      set_cube(res, _right(i, j, n), cube[<span class="number">3</span>][i][j])  <span class="comment"># RIGHT</span></span><br><span class="line">      set_cube(res, _back(i, j, n), cube[<span class="number">4</span>][i][j])  <span class="comment"># BACK</span></span><br><span class="line">      set_cube(res, _down(i, j, n), cube[<span class="number">5</span>][i][j])  <span class="comment"># DOWN</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateX</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着X轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateY</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着Y轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateZ</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着Z轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateFilter</span>(<span class="params">cube3d: CUBE3DCOLOR, <span class="built_in">filter</span>, rotateFn</span>) -&gt; CUBE3DCOLOR:</span><br><span class="line">  res = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> x, yzv <span class="keyword">in</span> cube3d.items():</span><br><span class="line">    <span class="keyword">for</span> y, zv <span class="keyword">in</span> yzv.items():</span><br><span class="line">      <span class="keyword">for</span> z, v <span class="keyword">in</span> zv.items():</span><br><span class="line">        <span class="comment"># filter() return &#x27;need rotate&#x27;</span></span><br><span class="line">        set_cube(res, rotateFn([x, y, z]) <span class="keyword">if</span> <span class="built_in">filter</span>(x, y, z) <span class="keyword">else</span> [x, y, z], v)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">copy</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: <span class="literal">False</span>, <span class="keyword">lambda</span> o: o)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateFront</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: x &gt; <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateBack</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: x &lt; <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateLeft</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: y &lt; <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateRight</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: y &gt; <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateUp</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: z &gt; <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateDown</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: z &lt; <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">progress</span>(<span class="params">cube3d: CUBE3DCOLOR</span>) -&gt; <span class="built_in">int</span>:  <span class="comment"># 只针对3阶魔方</span></span><br><span class="line">  p = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">c</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    x, y, z = xyz</span><br><span class="line">    <span class="keyword">return</span> cube3d[x][y][z]</span><br><span class="line">  <span class="comment"># 底面 十字</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">2</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">1</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">2</span>, <span class="number">1</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">1</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">2</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">1</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">2</span>, <span class="number">1</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">1</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 底面4角</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">2</span>, <span class="number">2</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_front(<span class="number">2</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">2</span>, <span class="number">2</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_right(<span class="number">2</span>, <span class="number">0</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">2</span>, <span class="number">2</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_back(<span class="number">2</span>, <span class="number">0</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">2</span>, <span class="number">2</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_left(<span class="number">2</span>, <span class="number">0</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">8</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 第二层4个棱, 这里通过5 &gt; 1+1+1+1 保证了 完成的棱 大于 所有的半步状态</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">1</span>, <span class="number">2</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_front(<span class="number">1</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">1</span>, <span class="number">2</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_right(<span class="number">1</span>, <span class="number">0</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">1</span>, <span class="number">2</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_back(<span class="number">1</span>, <span class="number">0</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">1</span>, <span class="number">2</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_left(<span class="number">1</span>, <span class="number">0</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 第二层 中间半步状态</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">0</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">1</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">0</span>, <span class="number">1</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">2</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">0</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">1</span>, <span class="number">2</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">0</span>, <span class="number">1</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">0</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">28</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 顶十字</span></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">0</span>, <span class="number">1</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">1</span>, <span class="number">0</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">1</span>, <span class="number">2</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">2</span>, <span class="number">1</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">32</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 顶十字的棱</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">0</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">0</span>, <span class="number">1</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">0</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">0</span>, <span class="number">1</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">36</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 顶四角 在对应的位置</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">sorted</span>([c(_up(<span class="number">2</span>, <span class="number">0</span>)), c(_left(<span class="number">0</span>, <span class="number">2</span>)), c(_front(<span class="number">0</span>, <span class="number">0</span>))]) == <span class="built_in">sorted</span>([c(_up(<span class="number">1</span>, <span class="number">1</span>)), c(_left(<span class="number">1</span>, <span class="number">1</span>)), c(_front(<span class="number">1</span>, <span class="number">1</span>))]):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">sorted</span>([c(_up(<span class="number">2</span>, <span class="number">2</span>)), c(_front(<span class="number">0</span>, <span class="number">2</span>)), c(_right(<span class="number">0</span>, <span class="number">0</span>))]) == <span class="built_in">sorted</span>([c(_up(<span class="number">1</span>, <span class="number">1</span>)), c(_front(<span class="number">1</span>, <span class="number">1</span>)), c(_right(<span class="number">1</span>, <span class="number">1</span>))]):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">sorted</span>([c(_up(<span class="number">0</span>, <span class="number">2</span>)), c(_right(<span class="number">0</span>, <span class="number">2</span>)), c(_back(<span class="number">0</span>, <span class="number">0</span>))]) == <span class="built_in">sorted</span>([c(_up(<span class="number">1</span>, <span class="number">1</span>)), c(_right(<span class="number">1</span>, <span class="number">1</span>)), c(_back(<span class="number">1</span>, <span class="number">1</span>))]):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">sorted</span>([c(_up(<span class="number">0</span>, <span class="number">0</span>)), c(_back(<span class="number">0</span>, <span class="number">2</span>)), c(_left(<span class="number">0</span>, <span class="number">0</span>))]) == <span class="built_in">sorted</span>([c(_up(<span class="number">1</span>, <span class="number">1</span>)), c(_back(<span class="number">1</span>, <span class="number">1</span>)), c(_left(<span class="number">1</span>, <span class="number">1</span>))]):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">40</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 终止状态</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">0</span>, <span class="number">0</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">0</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">0</span>, <span class="number">0</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">0</span>, <span class="number">0</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">44</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateMidX</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: x == <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateMidY</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: y == <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateMidZ</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: z == <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">two</span>(<span class="params">fn</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">lambda</span> x: fn(fn(x))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">three</span>(<span class="params">fn</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">lambda</span> x: fn(fn(fn(x)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ops = [</span><br><span class="line">    rotateUp, two(rotateUp), three(rotateUp),</span><br><span class="line">    rotateDown, two(rotateDown), three(rotateDown),</span><br><span class="line">    <span class="comment"># rotateMidZ, two(rotateMidZ), three(rotateMidZ),</span></span><br><span class="line"></span><br><span class="line">    rotateLeft, two(rotateLeft), three(rotateLeft),</span><br><span class="line">    rotateRight, two(rotateRight), three(rotateRight),</span><br><span class="line">    <span class="comment"># rotateMidY, two(rotateMidY), three(rotateMidY),</span></span><br><span class="line"></span><br><span class="line">    rotateFront, two(rotateFront), three(rotateFront),</span><br><span class="line">    rotateBack, two(rotateBack), three(rotateBack),</span><br><span class="line">    <span class="comment"># rotateMidX, two(rotateMidX), three(rotateMidX),</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">res: <span class="type">List</span>[CUBE3DCOLOR], opidxs: <span class="type">List</span>[<span class="built_in">int</span>], remain: <span class="built_in">int</span>, stop: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">  <span class="keyword">if</span> progress(res[-<span class="number">1</span>]) &gt;= stop:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">  <span class="keyword">if</span> remain &lt;= <span class="number">0</span>:  <span class="comment"># 迭代加深</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ops)):</span><br><span class="line">    <span class="comment"># 剪枝</span></span><br><span class="line">    <span class="keyword">if</span> idx // <span class="number">3</span> == opidxs[-<span class="number">1</span>] // <span class="number">3</span>:  <span class="comment"># 不要连续旋转同一个面</span></span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> idx // <span class="number">6</span> == opidxs[-<span class="number">1</span>] // <span class="number">6</span>:  <span class="comment"># 如果 连续 沿着同轴旋转 两个面</span></span><br><span class="line">      <span class="keyword">if</span> idx &gt; opidxs[-<span class="number">1</span>]:  <span class="comment"># 保证 序号小的先旋转</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    op = ops[idx]</span><br><span class="line">    res.append(op(res[-<span class="number">1</span>]))</span><br><span class="line">    opidxs.append(idx)</span><br><span class="line">    <span class="keyword">if</span> dfs(res, opidxs, remain-<span class="number">1</span>, stop):</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    res.pop()</span><br><span class="line">    opidxs.pop()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">steps</span>(<span class="params">cube3d: CUBE3DCOLOR, stop: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[CUBE3DCOLOR]:</span><br><span class="line">  res = [cube3d]</span><br><span class="line">  opsidxs = [-<span class="number">1</span>]</span><br><span class="line">  dep = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">not</span> dfs(res, opsidxs, dep, stop):</span><br><span class="line">    dep += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;dep = &#x27;</span>, dep)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># return opidxs</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">meet_in_middle_hanlder</span>(<span class="params">handler</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  S = &#123;&#125;</span><br><span class="line">  STATE_TYPE = <span class="type">List</span>[<span class="built_in">int</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment">#  [state] =&gt; STATE_TYPE &#123;正向/逆向,操作idxs arr&#125;</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">get_state</span>(<span class="params">state: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">bool</span>, STATE_TYPE]:</span><br><span class="line">    ref = S</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> state:</span><br><span class="line">      <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> ref:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line">      ref = ref[v]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span>, ref</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">set_state</span>(<span class="params">state: <span class="type">List</span>[<span class="built_in">int</span>], val: STATE_TYPE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    ref = S</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(state)-<span class="number">1</span>):</span><br><span class="line">      <span class="keyword">if</span> state[i] <span class="keyword">not</span> <span class="keyword">in</span> ref:</span><br><span class="line">        ref[state[i]] = &#123;&#125;</span><br><span class="line">      ref = ref[state[i]]</span><br><span class="line">    ref[state[-<span class="number">1</span>]] = val</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">flat_cube</span>(<span class="params">cur: CUBE3DCOLOR, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    res = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>*n*n)]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">          x, y, z = transfroms[_](i, j)</span><br><span class="line">          res[j+n*(i+n*_)] = cur[x][y][z]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">rev</span>(<span class="params">opidxs: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    ret = []</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> opidxs[::-<span class="number">1</span>]:</span><br><span class="line">      <span class="keyword">if</span> v == -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      ret.append((v//<span class="number">3</span>)*<span class="number">3</span> + (<span class="number">2</span>-v % <span class="number">3</span>))</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 正向 build</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">cur: CUBE3DCOLOR, opidxs: <span class="type">List</span>[<span class="built_in">int</span>], remain: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    flat_state = flat_cube(cur)</span><br><span class="line">    exist, state = get_state(flat_state)</span><br><span class="line">    <span class="keyword">if</span> exist <span class="keyword">and</span> <span class="built_in">len</span>(state) &lt;= <span class="built_in">len</span>(opidxs):  <span class="comment"># 更快的步骤, 由状态剪枝</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    set_state(flat_state, opidxs)</span><br><span class="line">    <span class="keyword">if</span> remain == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ops)):</span><br><span class="line">      build(ops[idx](cur), opidxs+[idx], remain-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 逆向 query</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">cur: CUBE3DCOLOR, opidxs: <span class="type">List</span>[<span class="built_in">int</span>], remain: <span class="built_in">int</span></span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">bool</span>, <span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">    flat_state = flat_cube(cur)</span><br><span class="line">    exist, value = get_state(flat_state)</span><br><span class="line">    <span class="keyword">if</span> exist:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">True</span>, value + rev(opidxs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> remain == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span>, []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ops)):</span><br><span class="line">      <span class="comment"># 剪枝</span></span><br><span class="line">      <span class="keyword">if</span> idx // <span class="number">3</span> == opidxs[-<span class="number">1</span>] // <span class="number">3</span>:  <span class="comment"># 不要连续旋转同一个面</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">if</span> idx // <span class="number">6</span> == opidxs[-<span class="number">1</span>] // <span class="number">6</span>:  <span class="comment"># 如果 连续 沿着同轴旋转 两个面</span></span><br><span class="line">        <span class="keyword">if</span> idx &gt; opidxs[-<span class="number">1</span>]:  <span class="comment"># 保证 序号小的先旋转</span></span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">      ok, ret = query(ops[idx](cur), opidxs+[idx], remain-<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">if</span> ok:</span><br><span class="line">        <span class="keyword">return</span> ok, ret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>, []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> handler(build, query)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">black_up_十棱</span>(<span class="params">cube3d: CUBE3DCOLOR</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># return opidxs</span></span><br><span class="line">  <span class="comment"># meet in middle</span></span><br><span class="line">  <span class="keyword">if</span> progress(cube3d) &gt;= <span class="number">36</span>:</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line">  <span class="keyword">assert</span> progress(cube3d) &gt;= <span class="number">32</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">c</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    x, y, z = xyz</span><br><span class="line">    <span class="keyword">return</span> cube3d[x][y][z]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">black_start</span>() -&gt; CUBE3DCOLOR:</span><br><span class="line">    res = copy(cube3d)</span><br><span class="line">    set_cube(res, _up(<span class="number">0</span>, <span class="number">0</span>), BLACK)</span><br><span class="line">    set_cube(res, _up(<span class="number">0</span>, <span class="number">2</span>), BLACK)</span><br><span class="line">    set_cube(res, _up(<span class="number">2</span>, <span class="number">0</span>), BLACK)</span><br><span class="line">    set_cube(res, _up(<span class="number">2</span>, <span class="number">2</span>), BLACK)</span><br><span class="line"></span><br><span class="line">    set_cube(res, _left(<span class="number">0</span>, <span class="number">0</span>), BLACK)</span><br><span class="line">    set_cube(res, _left(<span class="number">0</span>, <span class="number">2</span>), BLACK)</span><br><span class="line"></span><br><span class="line">    set_cube(res, _front(<span class="number">0</span>, <span class="number">0</span>), BLACK)</span><br><span class="line">    set_cube(res, _front(<span class="number">0</span>, <span class="number">2</span>), BLACK)</span><br><span class="line"></span><br><span class="line">    set_cube(res, _right(<span class="number">0</span>, <span class="number">0</span>), BLACK)</span><br><span class="line">    set_cube(res, _right(<span class="number">0</span>, <span class="number">2</span>), BLACK)</span><br><span class="line"></span><br><span class="line">    set_cube(res, _back(<span class="number">0</span>, <span class="number">0</span>), BLACK)</span><br><span class="line">    set_cube(res, _back(<span class="number">0</span>, <span class="number">2</span>), BLACK)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">black_dst</span>() -&gt; CUBE3DCOLOR:</span><br><span class="line">    res = black_start()</span><br><span class="line">    set_cube(res, _up(<span class="number">0</span>, <span class="number">1</span>), c(_up(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    set_cube(res, _up(<span class="number">1</span>, <span class="number">0</span>), c(_up(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    set_cube(res, _up(<span class="number">1</span>, <span class="number">2</span>), c(_up(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    set_cube(res, _up(<span class="number">2</span>, <span class="number">1</span>), c(_up(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">    set_cube(res, _left(<span class="number">0</span>, <span class="number">1</span>), c(_left(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    set_cube(res, _front(<span class="number">0</span>, <span class="number">1</span>), c(_front(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    set_cube(res, _right(<span class="number">0</span>, <span class="number">1</span>), c(_right(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    set_cube(res, _back(<span class="number">0</span>, <span class="number">1</span>), c(_back(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">handler</span>(<span class="params">build_fn, query_fn</span>):</span><br><span class="line">    st = black_start()</span><br><span class="line">    build_fn(st, [-<span class="number">1</span>], <span class="number">4</span>)</span><br><span class="line">    st = rotateUp(st)</span><br><span class="line">    build_fn(st, [-<span class="number">1</span>, <span class="number">0</span>], <span class="number">4</span>)</span><br><span class="line">    st = rotateUp(st)</span><br><span class="line">    build_fn(st, [-<span class="number">1</span>, <span class="number">1</span>], <span class="number">4</span>)</span><br><span class="line">    st = rotateUp(st)</span><br><span class="line">    build_fn(st, [-<span class="number">1</span>, <span class="number">2</span>], <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    dst = black_dst()</span><br><span class="line">    <span class="keyword">for</span> op <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">1</span>, <span class="number">3</span>):  <span class="comment"># -1,0,1,2</span></span><br><span class="line">      ok, idxs = query_fn(dst, [op], <span class="number">4</span>)  <span class="comment"># 注意过滤</span></span><br><span class="line">      <span class="keyword">if</span> ok:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> o: o != -<span class="number">1</span>, idxs))</span><br><span class="line">      dst = rotateUp(dst)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> meet_in_middle_hanlder(handler)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">black_up_顶角</span>(<span class="params">cube3d: CUBE3DCOLOR</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># return opidxs</span></span><br><span class="line">  <span class="comment"># meet in middle</span></span><br><span class="line">  <span class="keyword">if</span> progress(cube3d) &gt;= <span class="number">40</span>:</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line">  <span class="keyword">assert</span> progress(cube3d) &gt;= <span class="number">36</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">c</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    x, y, z = xyz</span><br><span class="line">    <span class="keyword">return</span> cube3d[x][y][z]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">black_start</span>() -&gt; CUBE3DCOLOR:</span><br><span class="line">    <span class="keyword">return</span> copy(cube3d)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">black_dsts</span>() -&gt; CUBE3DCOLOR:</span><br><span class="line">    n = <span class="number">3</span></span><br><span class="line">    finish = copy(cube3d)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        set_cube(finish, _up(i, j), c(_up(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      set_cube(finish, _left(<span class="number">0</span>, j), c(_left(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">      set_cube(finish, _front(<span class="number">0</span>, j), c(_front(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">      set_cube(finish, _right(<span class="number">0</span>, j), c(_right(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">      set_cube(finish, _back(<span class="number">0</span>, j), c(_back(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">    l = []</span><br><span class="line">    group: <span class="type">List</span>[<span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]] = [</span><br><span class="line">        [_up(<span class="number">2</span>, <span class="number">0</span>), _left(<span class="number">0</span>, <span class="number">2</span>), _front(<span class="number">0</span>, <span class="number">0</span>)],</span><br><span class="line">        [_up(<span class="number">2</span>, <span class="number">2</span>), _front(<span class="number">0</span>, <span class="number">2</span>), _right(<span class="number">0</span>, <span class="number">0</span>)],</span><br><span class="line">        [_up(<span class="number">0</span>, <span class="number">2</span>), _right(<span class="number">0</span>, <span class="number">2</span>), _back(<span class="number">0</span>, <span class="number">0</span>)],</span><br><span class="line">        [_up(<span class="number">0</span>, <span class="number">0</span>), _back(<span class="number">0</span>, <span class="number">2</span>), _left(<span class="number">0</span>, <span class="number">0</span>)],</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> mask <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>**<span class="number">4</span>):</span><br><span class="line">      rotate = [mask % <span class="number">3</span>, (mask//<span class="number">3</span>) % <span class="number">3</span>, (mask//<span class="number">3</span>//<span class="number">3</span>) % <span class="number">3</span>, (mask//<span class="number">3</span>//<span class="number">3</span>//<span class="number">3</span>) % <span class="number">3</span>]</span><br><span class="line">      dst = copy(finish)</span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        g = group[i]</span><br><span class="line">        color = [get_cube(finish, g[<span class="number">0</span>]), get_cube(</span><br><span class="line">            finish, g[<span class="number">1</span>]), get_cube(finish, g[<span class="number">2</span>])]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">          set_cube(dst, g[(j+rotate[i]) % <span class="number">3</span>], color[j])</span><br><span class="line"></span><br><span class="line">      l.append(dst)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">handler</span>(<span class="params">build_fn, query_fn</span>):</span><br><span class="line">    st = black_start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;start build ....&#x27;</span>)</span><br><span class="line">    build_fn(st, [-<span class="number">1</span>], <span class="number">4</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;start build Done&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    dsts = black_dsts()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dsts)):</span><br><span class="line">      dst = dsts[i]</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">f&#x27;顶角 进度 <span class="subst">&#123;i+<span class="number">1</span>&#125;</span>/<span class="subst">&#123;<span class="built_in">len</span>(dsts)&#125;</span>&#x27;</span>)</span><br><span class="line">      ok, idxs = query_fn(dst, [-<span class="number">1</span>], <span class="number">4</span>)  <span class="comment"># 注意过滤</span></span><br><span class="line">      <span class="keyword">if</span> ok:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> o: o != -<span class="number">1</span>, idxs))</span><br><span class="line">      dst = rotateUp(dst)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> meet_in_middle_hanlder(handler)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump3d</span>(<span class="params">cube3d: CUBE3DCOLOR, n=<span class="number">3</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  res = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">dump_face</span>(<span class="params">fn</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    face = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      row = []</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        x, y, z = fn(i, j)</span><br><span class="line">        row.append(cube3d[x][y][z])</span><br><span class="line">      face.append(row)</span><br><span class="line">    res.append(face)</span><br><span class="line"></span><br><span class="line">  dump_face(_up)</span><br><span class="line">  dump_face(_left)</span><br><span class="line">  dump_face(_front)</span><br><span class="line">  dump_face(_right)</span><br><span class="line">  dump_face(_back)</span><br><span class="line">  dump_face(_down)</span><br><span class="line">  <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">cube: CUBE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  valid(cube)</span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  cube3d = arr_to_3d(cube)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      set_cube(cube3dsurface, _up(i, j, n),  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>])  <span class="comment"># UP</span></span><br><span class="line">      set_cube(cube3dsurface, _left(i, j, n),  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])  <span class="comment"># LEFT</span></span><br><span class="line">      set_cube(cube3dsurface, _front(i, j, n),  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>])  <span class="comment"># FRONT</span></span><br><span class="line">      set_cube(cube3dsurface, _right(i, j, n),  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])  <span class="comment"># RIGHT</span></span><br><span class="line">      set_cube(cube3dsurface, _back(i, j, n),  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>])  <span class="comment"># BACK</span></span><br><span class="line">      set_cube(cube3dsurface, _down(i, j, n),  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>])  <span class="comment"># DOWN</span></span><br><span class="line"></span><br><span class="line">  steplist = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">32</span>+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">cube3dsolver</span>():</span><br><span class="line">    ans = [cube3d]</span><br><span class="line">    <span class="keyword">for</span> dst_step <span class="keyword">in</span> steplist:</span><br><span class="line">      moves = steps(ans[-<span class="number">1</span>], dst_step)</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">f&#x27;step <span class="subst">&#123;dst_step&#125;</span> solved with ops = <span class="subst">&#123;<span class="built_in">len</span>(moves)-<span class="number">1</span>&#125;</span>&#x27;</span>)</span><br><span class="line">      ans = ans + moves[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    opidxs = black_up_十棱(ans[-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> opidxs:</span><br><span class="line">      ans.append(ops[idx](ans[-<span class="number">1</span>]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;顶十棱 Done!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> dst_step <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>, <span class="number">40</span>+<span class="number">1</span>):</span><br><span class="line">      moves = steps(ans[-<span class="number">1</span>], dst_step)</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">f&#x27;step <span class="subst">&#123;dst_step&#125;</span> solved with ops = <span class="subst">&#123;<span class="built_in">len</span>(moves)-<span class="number">1</span>&#125;</span>&#x27;</span>)</span><br><span class="line">      ans = ans + moves[<span class="number">1</span>:]</span><br><span class="line">    <span class="comment"># opidxs = black_up_顶角(ans[-1])</span></span><br><span class="line">    <span class="comment"># for idx in opidxs:</span></span><br><span class="line">    <span class="comment">#   ans.append(ops[idx](ans[-1]))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(&#x27;顶角 Done!&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">  ans = cube3dsolver()</span><br><span class="line">  show_3ds(ans, cube3dsurface)</span><br><span class="line">  dump3d(ans[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">solve([[[<span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>]], [[<span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]], [[<span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]], [</span><br><span class="line">      [<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>]], [[<span class="number">0</span>, <span class="number">4</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>]], [[<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>], [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>], [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]]])</span><br></pre></td></tr></table></figure>

<h3 id="7步公式"><a href="#7步公式" class="headerlink" title="7步公式"></a>7步公式</h3><p>底层: 感觉基本逻辑就够了,没有什么”公式”</p>
<p>中层:</p>
<ul>
<li>要把 左侧(0,1)移动到(1,2): 右手: 左上右下 + 背后90度 + 右上左下</li>
<li>要把 右侧(0,1)移动到(1,0): 左手: 右上左下 + 背后90度 + 左上右下</li>
</ul>
<p>顶面十字:</p>
<ul>
<li>前顺时针+左上右下+前逆时针</li>
</ul>
<p>十字棱:</p>
<ul>
<li>右手: 上 左 下 左 上 左2 下 左</li>
</ul>
<p>顶角位置:</p>
<ul>
<li>(顶顺)(右上)(顶逆)(左上) (顶顺)(右下)(顶逆)(左下)</li>
</ul>
<p>完成:</p>
<ul>
<li>右下,底顺,右上,底逆</li>
</ul>
<h2 id="4-阶"><a href="#4-阶" class="headerlink" title="4+阶"></a>4+阶</h2><p>从3阶提取, 逻辑意义</p>
<p>TODO</p>
<h3 id="Korf’s-algorithm"><a href="#Korf’s-algorithm" class="headerlink" title="Korf’s algorithm"></a>Korf’s algorithm</h3><p>TODO</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当然, 上面的问题在于 实际上还是借鉴了现有公式(7步还原魔方)的”过程”, 因为在无知识的情况下, 其实无法知道去做阶段性是否是可行的</p>
<p>另外,作为程序搜索,如果有办法提出更好的渐进的方案而不是上面的渐进方案,过着在搜索中能有优先级,就更好了(<a href="https://zhuanlan.zhihu.com/p/57816260">https://zhuanlan.zhihu.com/p/57816260</a> 里讲到了多个步骤)</p>
<p>既然上面最多单次步数是7步, 有没有办法是,从两头向中间搜索(meet-in-middle),这样先把不关心的颜色 全部置为第7种颜色,这样最大步数是4步, $18 * 15^3 &#x3D; 60750$ 非常小, 稍微的问题是目前实现是靠估价函数实现的, 所以其实并不能准确的知道目标状态, 所以其实有可能$2^4$种左右的目标状态,但这也不大</p>
<p>然而上面的 7步还原魔方, 所用的公式,有不少在7,8步, 最后的还是9步</p>
<p>而作为速拧用的cfop(Fridrich Method), 则是相当于暴力分情况(119 条公式)讨论, 而单次的步数都更长, 对于暴力搜索更不可取了</p>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p><a href="https://en.wikipedia.org/wiki/Optimal_solutions_for_the_Rubik%27s_Cube#Korf&#39;s_algorithm">https://en.wikipedia.org/wiki/Optimal_solutions_for_the_Rubik%27s_Cube#Korf&#39;s_algorithm</a></p>
<p><a href="https://www.youtube.com/watch?v=ZtlMkzix7Bw">https://www.youtube.com/watch?v=ZtlMkzix7Bw</a></p>
<p><a href="https://stackoverflow.com/questions/58860280/how-to-create-a-pattern-database-for-solving-rubiks-cube">https://stackoverflow.com/questions/58860280/how-to-create-a-pattern-database-for-solving-rubiks-cube</a></p>
<p><a href="https://www.cs.princeton.edu/courses/archive/fall06/cos402/papers/korfrubik.pdf">https://www.cs.princeton.edu/courses/archive/fall06/cos402/papers/korfrubik.pdf</a></p>
<p><a href="https://en.wikipedia.org/wiki/Optimal_solutions_for_the_Rubik%27s_Cube#Korf&#39;s_algorithm">https://en.wikipedia.org/wiki/Optimal_solutions_for_the_Rubik%27s_Cube#Korf&#39;s_algorithm</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/41464087">https://zhuanlan.zhihu.com/p/41464087</a></p>
<p><a href="https://arxiv.org/pdf/1805.07470.pdf">https://arxiv.org/pdf/1805.07470.pdf</a></p>
]]></content>
      <categories>
        <category>魔方</category>
      </categories>
      <tags>
        <tag>魔方</tag>
      </tags>
  </entry>
  <entry>
    <title>普林斯顿 微积分读本</title>
    <url>/Math/the_calculus_lifesaver/</url>
    <content><![CDATA[<p>isbn 978711543559</p>
<p>据说有视频课 calclifesaver.com</p>
<span id="more"></span>

<h2 id="1-函数，图像，直线"><a href="#1-函数，图像，直线" class="headerlink" title="1 函数，图像，直线"></a>1 函数，图像，直线</h2><p>挺细的，高中可读</p>
<h2 id="2-三角学回顾"><a href="#2-三角学回顾" class="headerlink" title="2 三角学回顾"></a>2 三角学回顾</h2><p>是真的细，从角度到弧度</p>
<p>$sin^2+cos^2&#x3D;1$</p>
<p>$1+tan^2&#x3D;sec^2$</p>
<p>$cot^2+1&#x3D;csc^2$</p>
<p>$sin(a+b)&#x3D;sin(A)cos(B)+cos(A)sin(B)$</p>
<p>$cos(a+b)&#x3D;cos(A)cos(B)-sin(A)sin(B)$</p>
<p>$sin(2x)&#x3D;2sin(x)cos(x)$</p>
<p>$cos(2x)&#x3D;2cos^2(x)-1&#x3D;1-2sin^2(x)$</p>
<h2 id="3-极限导论"><a href="#3-极限导论" class="headerlink" title="3 极限导论"></a>3 极限导论</h2><p>一个对比的例子 f(x)&#x3D;x+1,那么</p>
<ul>
<li>x趋于1时 f(x)的极限是2</li>
</ul>
<p>g(x)&#x3D;x+1,x !&#x3D; 1时</p>
<p>g(x)&#x3D;3,x &#x3D;1时</p>
<p>同样有: x趋于1时 g(x)的极限是2</p>
<p>函数的点极限是在聊没（不一定）取到的趋近值</p>
<hr>
<p>垂直极限， x在左右趋于a时，有一侧的值趋于正无穷或负无穷</p>
<p>点附近不趋于任何数 sin(1&#x2F;x), x 趋于0时</p>
<p>x趋于正无穷时，的极限，意味着有水平渐近线</p>
<hr>
<p>夹逼定理（三明治定理）g&lt;&#x3D;f&lt;&#x3D;h 在x的范围附近，那么g和h极限相同，则f也是</p>
<h2 id="4-求多项式的极限问题"><a href="#4-求多项式的极限问题" class="headerlink" title="4 求多项式的极限问题"></a>4 求多项式的极限问题</h2><p>f(x)&#x3D;(x-1)(x+1)&#x2F;(x-1) 在点1的极限</p>
<p>里面主要是一些做题的例子，例如什么分子有理化</p>
<p>四则运算保持部分，主要注意的是在加减过程中 可能导致低次等价无穷小 无穷大的消失</p>
<p>(x^2+x)&#x2F;x, (x^2-x)&#x2F;x 在 无穷大 极值都是 无穷大，但是差在无穷大的差是 趋于2</p>
<p>这里 主要列的都是 x多项式的 p(x)&#x2F;q(x) 在无穷的极限</p>
<h2 id="5-连续性和可导性"><a href="#5-连续性和可导性" class="headerlink" title="5. 连续性和可导性"></a>5. 连续性和可导性</h2><p>直觉上是一笔画，但对于数学这并不对。</p>
<p>f(x)&#x3D;x当x有理数，0当x无理数，能在0点有极限，（这就是点连续的感觉反例）</p>
<p>这点连续，但区间不连续</p>
<p>或者 f(x)&#x3D;1&#x2F;x在0以外处处连续（但是不一致连续）</p>
<hr>
<p>这块内容核心是，</p>
<ul>
<li>点连续：该点的值&#x3D;该点的极限</li>
<li>区间上连续：区间上所有点连续<ul>
<li>这两个都是数学抽象的定义，图像上最好的描述可能还是 y 包裹距离lambda的线，和x包裹 delta的线</li>
</ul>
</li>
</ul>
<p>有些函数 点没有定义，但是对应位置有极限，可以考虑补充定义 f(x)&#x3D;xsin(1&#x2F;x)</p>
<hr>
<p>介值定理：闭区间，左右端点异号，然后函数连续，那么 区间中存在一点f(x)&#x3D;0</p>
<ul>
<li>这个定理通过平移可以有 左右端点(f(l)-a)(f(r)-a) 异号，中存在点 f(m)&#x3D;a</li>
</ul>
<p>最大值最小值存在定理： 闭区间+连续，区间有最大值，最小值</p>
<ul>
<li>这个理解其要素，要考虑如果开区间，如果不连续 不存在的例子就能更深刻</li>
</ul>
<hr>
<p>可导性：</p>
<p>从时间，速度，距离出发，引出距离时间图像中 速度与导数的关系</p>
<p>单点的导数也就是：</p>
<ul>
<li>f(a)’ &#x3D; (f(x)-f(a))&#x2F;(x-a), 当x趋于a的极限<ul>
<li>这里 我们也就用了前面学的极限</li>
<li>另一个代换就是 (f(a+h)-f(a))&#x2F;h</li>
<li>那么 同样极限可能存在，可能不存在。 如果极限存在，定义在 此点 可导</li>
<li>分母是 delta x, 分子是 delta y</li>
<li>记作 dy&#x2F;dx <ul>
<li>注意不是分数，而是表示 delta y &#x2F; delta x的极限</li>
<li>更具体的应该是 d&#x2F;dx(y(x)), 也就是y是关于x的函数，对其自变量x求导的</li>
<li>更进阶的有可微概念（说白了是 关于自变量的线性表出，不过好像微积分不学，在数学分析里）</li>
</ul>
</li>
<li>不存在例子 |x|&#x2F;x<ul>
<li>这里说明 连续不一定可导</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>常见的导数表</p>
<ul>
<li>$ax^b &#x3D; abx^{b-1},b\neq 0$</li>
</ul>
<p>可导 &#x3D;&gt; 连续</p>
<ul>
<li>考虑 f(x)&#x3D;x+1, 特别的x&#x3D;0时f(x)&#x3D;2, 其实会发现，分母趋于0时，如果不连续，会导致分子不趋于0（甚至没有极限）</li>
</ul>
<h2 id="6-求解微分问题"><a href="#6-求解微分问题" class="headerlink" title="6. 求解微分问题"></a>6. 求解微分问题</h2><p>用定义求导</p>
<p>常用公式</p>
<ul>
<li>$d&#x2F;dx (x^a)&#x3D;ax^{a-1}$</li>
<li>$d&#x2F;dx(C)&#x3D;0$</li>
</ul>
<p>推论</p>
<ul>
<li>乘积法则<ul>
<li>h(x)&#x3D;f(x)g(x), h’(x)&#x3D;f’(x)g(x)+f(x)g’(x)</li>
<li>或者写成 y&#x3D;uv, d&#x2F;dx(y)&#x3D;v d&#x2F;dx(u)+u d&#x2F;dx (v)</li>
<li>还可以扩展更多的y&#x3D;uvw</li>
</ul>
</li>
<li>商:<ul>
<li>h&#x3D;f&#x2F;g, $h’&#x3D;(f’g-fg’)&#x2F;(g^2)$</li>
</ul>
</li>
<li>说白了 希望能用四则运算的思路对这个进行分解<ul>
<li>那么加减其实也有h&#x3D;f+-g,h’&#x3D;f’+-g’</li>
<li>而需要注意的是，这里需要每一部分的导数是存在的</li>
</ul>
</li>
<li>特别的，4则运算以外有函数复合 h&#x3D;f(g(x))  称作链式求导，可以更多的复合<ul>
<li>就是导数定义展开就能得到</li>
<li>h’&#x3D;f’(g(x))g’(x)</li>
<li>y(u),u(x), d&#x2F;dx(y)&#x3D;d&#x2F;dx(y) * d&#x2F;dx(u)</li>
<li>例子 $y&#x3D;u^{100}, u&#x3D;x^2+1$<ul>
<li>$d&#x2F;dx(y) &#x3D; 100u^{99} 2x&#x3D;200x(x^2+1)^{99}$</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>这里 乘积法的解释用的 长方形边长分别f,g, 面积的变化的概念</p>
<p>这里 链式法的理解用的 在 放大镜后面拉伸口香糖，那么是倍率相乘</p>
<p>加速度引出二阶导数</p>
<p>做题：导数伪装的极限（那些可以看成导数表达的极限）</p>
<p>导函数图像绘制：</p>
<ul>
<li>找导数为零的点，为切割点（不一定切割 例如f(x)&#x3D;x^3</li>
<li>找二阶导数 为0的点，为函数 凸 凹的切割点</li>
</ul>
<h2 id="7-三角函数的极限和导数"><a href="#7-三角函数的极限和导数" class="headerlink" title="7. 三角函数的极限和导数"></a>7. 三角函数的极限和导数</h2><p>重要极限： x趋于0, sin(x)&#x2F;x&#x3D;1</p>
<p>其他常用</p>
<ul>
<li>cos(x-&gt;0)-&gt;1</li>
<li>x-&gt;0, tan x &#x2F; x &#x3D; 1</li>
<li>sin’ &#x3D; cos</li>
<li>cos’&#x3D;-sin</li>
<li>$tan’&#x3D;sec^2$</li>
<li>$sec’&#x3D;sec\cdot tan$ </li>
<li>$cot’&#x3D;-csc^2$</li>
<li>反正背了无数年也背诵不到</li>
</ul>
<p>其它方法，把分母想办法化作0的形式，变量替换，</p>
<p>一个本身可导导函数 不连续 的函数：</p>
<p>$f(x)&#x3D;x^2sin(1&#x2F;x)$ 补充定义x&#x3D;0, </p>
<h2 id="8-隐函数求导和相关变化率"><a href="#8-隐函数求导和相关变化率" class="headerlink" title="8. 隐函数求导和相关变化率"></a>8. 隐函数求导和相关变化率</h2><p>隐函数：给的表达式不是y(x)&#x3D;…的形式，但从自变量因变量上，依然x是自变量，y(x)的因变量</p>
<p>$x^2+y^2&#x3D;4$</p>
<p>方法：在两边加上 d&#x2F;dx ，因为f(x,y)&#x3D;g(x,y), 那么我们认为这两个函数在要求的一段区间上的 映射是一致的，</p>
<ul>
<li>那么 如果导数存在，左右导数相等</li>
</ul>
<p>求二阶导：</p>
<ul>
<li>一样的步骤</li>
<li>注意的是 d^2&#x2F;dx^2(y)&#x3D;d&#x2F;dx(d&#x2F;dx(y))<ul>
<li>和 $(d&#x2F;dx(y))^2$ 这两个意义是不同的</li>
</ul>
</li>
</ul>
<hr>
<p>例子</p>
<ul>
<li>A上方5m,3m&#x2F;s向上</li>
<li>B右侧12m, 4m&#x2F;s向 左</li>
<li>求A&#x2F;B之间距离变化速度<ul>
<li>$a^2+b^2&#x3D;c^2$</li>
<li>$2a d&#x2F;dt(a)+2b d&#x2F;dt(b)&#x3D;2c d&#x2F;dt(c)$, </li>
<li>$5 \cdot 3+12\cdot (-4)&#x3D;13 d&#x2F;dt(c)$<ul>
<li>可计算要求的结果</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="9-指数函数和对数函数"><a href="#9-指数函数和对数函数" class="headerlink" title="9. 指数函数和对数函数"></a>9. 指数函数和对数函数</h2><p>书上这么细致，都快要初中生可看了，从对数 指数 反函数开始讲</p>
<p>重要极限 e&#x3D;(1+1&#x2F;x)^x, x趋于无穷大时的极限，</p>
<p>重要函数 d&#x2F;dx(ln(x)) &#x3D; 1&#x2F;x</p>
<ul>
<li>$d&#x2F;dx (a^x) &#x3D; a^x ln(a)$</li>
<li>$x\to 0$, $\frac{e^x-1}{x}&#x3D;1$</li>
<li>$x\to 0$, $\frac{ln(1+x)}{x}&#x3D;1$</li>
<li>注，这些东西，到后面等价无穷小会 更不特例化,或者洛必达</li>
</ul>
<p>指数增长迅速$x\to \infty \frac{x^n}{e^x}&#x3D;0$, 也就是  多项式&#x2F;指数型 -&gt; 0</p>
<p>对数增长缓慢 $a&gt;0,x\to \infty \frac{ln(x)}{x^a}&#x3D;0$, 不管a多小</p>
<p>对数函数在0附近“增长”缓慢：不管a多小, 如果$a&gt;0, x\to 0^+ x^aln(x)&#x3D;0$</p>
<hr>
<p>指数增长：复利，动物种群数</p>
<p>指数衰变： 放射性衰变</p>
<p>若 $y&#x3D;e^{kx}$,那么 dy&#x2F;dx &#x3D; ke^{kx},也就是 dy&#x2F;dx&#x3D;ky</p>
<ul>
<li>这是一个微分方程例子，第30章会有更多例子</li>
<li>这里 如果dy&#x2F;dx&#x3D;ky,那么$y&#x3D;Ae^{kx}$,在30.2节中说为什么会这样</li>
<li>而这里对应到 兔子繁殖，说明了，增长速度和现有量保持常熟倍数关系</li>
<li>dP&#x2F;dt&#x3D;kP, &#x3D;&gt; P(t)&#x3D;P_0e^{kt}</li>
</ul>
<p>类似的 dP&#x2F;dt&#x3D;-kP 指数衰变，$P(t)&#x3D;P_0e^{-kt}$</p>
<hr>
<p>双曲函数:</p>
<ul>
<li>$cosh(x)&#x3D;\frac{e^x+e^{-x}}{2}$</li>
<li>$sinh(x)&#x3D;\frac{e^x-e^{-x}}{2}$</li>
<li>作者的评价： 伪装的指数函数又和三角函数相似<ul>
<li>$cosh^2-sinh^2&#x3D;1$ 双曲方程</li>
<li>sinh’&#x3D;cosh</li>
<li>cosh’&#x3D;sinh</li>
</ul>
</li>
</ul>
<h2 id="10-反函数和反三角函数"><a href="#10-反函数和反三角函数" class="headerlink" title="10. 反函数和反三角函数"></a>10. 反函数和反三角函数</h2><p>充分,非必要，严格单调递增函数 f(x) 有反函数，那么如果函数可导，导函数符号不变，那么也可以得到有反函数</p>
<p>如果存在，那么当 f(y)&#x3D;x时，我们就能求f的反函数了，因为这时的 y(x)输入得到x,</p>
<p>1&#x3D;d&#x2F;dx (x)&#x3D;d&#x2F;dx(f(y))&#x3D;f’ * d&#x2F;dx(y)</p>
<p>f’&#x3D;1&#x2F;(d&#x2F;dx(y))</p>
<p>这个东西，对于 一元的，去看函数图像的对称更好看，更直观</p>
<hr>
<p>具体的 反三角函数</p>
<p>$d&#x2F;dx \sin^{-1}(x)&#x3D;\frac{1}{\sqrt{1-x^2}}$</p>
<p>$d&#x2F;dx \cos^{-1}(x)&#x3D;-\frac{1}{\sqrt{1-x^2}}$</p>
<p>$d&#x2F;dx \tan^{-1}(x)&#x3D;-\frac{1}{\sqrt{1+x^2}}$</p>
<p>… 这里还有其它反三角函数的导数，然后也有反双曲函数的导数</p>
<p>$x&gt;1,d&#x2F;dx \cosh^{-1}(x)&#x3D;\frac{1}{x^2-1}$</p>
<p>$d&#x2F;dx \sinh^{-1}(x)&#x3D;\frac{1}{x^2+1}$</p>
<h2 id="11-导数和图像"><a href="#11-导数和图像" class="headerlink" title="11. 导数和图像"></a>11. 导数和图像</h2><p>局部最大值，称作局部极大值</p>
<p>极值定理：开区间(a,b)内的局部极值，一定是导数为0,或者导数不存在</p>
<p>罗尔定理：f在<code>[a,b]</code>连续,在(a,b)可导，f(a)&#x3D;f(b),存在一点 f’(c)&#x3D;0</p>
<p>在罗尔定理上，增加一个线性函数就有了中值定理：</p>
<ul>
<li><code>[a,b]</code>内连续,(a,b)内可导，(a,b)中存在c, f’(c)&#x3D;(f(b)-f(a))&#x2F;(b-a)</li>
<li>需要注意的是这是 增加线性函数不是旋转，因为旋转可能让函数变得不是函数，而线性偏移，保证y的输出还是一个</li>
</ul>
<p>注意的是，罗尔定理和中值定理，都是存在性定理</p>
<ul>
<li>用途</li>
<li>例如 导数为0 证明 常函数<ul>
<li>任取两点，因为可导，存在f’(c)&#x3D;两点值差&#x2F;坐标差，那么只能值相等</li>
</ul>
</li>
<li>上面这个结论可以推得，两个导数相同的函数 的差是常数</li>
</ul>
<p>二阶导数 图像：凹凸，拐点（’’&#x3D;0)</p>
<p>一阶导数零点：</p>
<ul>
<li>局部最大：一阶 +-&gt;-， 二阶 &lt;0</li>
<li>局部最小：一阶  - -&gt; +, 二阶 &gt;0</li>
<li>水平拐点，单调递增： 一阶 +, 二阶&#x3D;0</li>
<li>水平拐点，单调递减： 一阶 -，二阶&#x3D;0</li>
<li>注意的是， 二阶&#x3D;0只是必要，但不充分，也就是无法从二阶&#x3D;0判断什么，<ul>
<li>例子 $x^3,x^4$ 在0点的时候 二阶都&#x3D;0</li>
</ul>
</li>
</ul>
<h2 id="12-绘制函数图像"><a href="#12-绘制函数图像" class="headerlink" title="12. 绘制函数图像"></a>12. 绘制函数图像</h2><p>利用上面性质找关键点绘制，然后研究凹凸性绘制</p>
<h2 id="13-最优化和线性化"><a href="#13-最优化和线性化" class="headerlink" title="13.最优化和线性化"></a>13.最优化和线性化</h2><p>实际应用：</p>
<p>最优化的核心思想是，找到所有变量，和优化目标，然后利用等式化简成单变量函数 f(x)，然后确定范围和极值点</p>
<p>线性化求近似值，这里例子是f(x)&#x3D;sqrt(x),然后算 sqrt(11),用的x&#x3D;3的一阶展开，思想核心有泰勒展开也有牛顿切线，完成估算</p>
<p>L(x)&#x3D;f(a)+f’(x)(x-a) 称作在x&#x3D;a点处的线性化</p>
<p>微分: <code>df=f&#39;(a) delta x</code>, 误差: rf&#x3D;f(x)-L(x)&#x3D;delta f-df&#x3D;1&#x2F;2 f’’(c) (x-a)^2 (根据中值定理) &lt;&#x3D; 1&#x2F;2 (x-a)^2 max(f’’)</p>
<p>牛顿法： a是方程 f(x)&#x3D;0的解的一个近似，如果b&#x3D;a-f(a)&#x2F;f’(a), 很多情况b是更好的近似，这个图像上 很“显然”</p>
<ul>
<li>一个明显的优点是，对于高次函数难以有直接求根公式时，这个方法很多时候能有效的求得一个数值根</li>
<li>同时从图像上也能知道，这个方法无法始终有效，当选取的初始点和范围无法完成对应的下降的话</li>
</ul>
<h2 id="14-洛必达法则及极限问题总结"><a href="#14-洛必达法则及极限问题总结" class="headerlink" title="14. 洛必达法则及极限问题总结"></a>14. 洛必达法则及极限问题总结</h2><p>结论： f(a)&#x3D;g(a)&#x3D;0,  lim x-&gt; a, f(x)&#x2F;g(x) &#x3D; f’(x)&#x2F;g’(x)</p>
<p>这个的核心想法是，f(x)&#x2F;g(x)在a附近 &#x3D; (f(a)+delta f)&#x2F;(g(a)+delta g) &#x3D; delta f &#x2F; delta g &#x3D; (df+rf)&#x2F;(dg+rg), 微分+误差</p>
<ul>
<li>如果df,dg不同时为0, 那么就有结果了，rf,rg是高阶无穷小，可以忽略的部分</li>
<li>如果df,dg 同时为0,那么 rf&#x2F;rg 再次展开，可以再次洛必达</li>
<li>这里 的另一个解释是，希望导函数在附近是一致收敛的，这样 f’(c)(x-a)&#x2F;g’(c)(x-a)来表示</li>
</ul>
<p>对于0&#x2F;0有了，那么 无穷&#x2F;无穷，可以看成 倒数</p>
<hr>
<p>这里延伸了一点，不过感觉要在等价无穷小那里讲，</p>
<ul>
<li>x趋于0, 1&#x2F;x-1&#x2F;sin(x)， 注意的是 无穷-无穷，（没有减法的对应运算），但是可以通分，</li>
<li>0 乘上 无穷， x-&gt;0, xln(x), 化成 无穷&#x2F;无穷</li>
</ul>
<h2 id="15-积分"><a href="#15-积分" class="headerlink" title="15. 积分"></a>15. 积分</h2><p>这里先讲 求和符号，以及高斯计算1+…+100</p>
<p>这里用的 汽车 速度 时间 路程 的 坐标轴图像来引入，导出了 积分就是“希望”求和坐标轴围起来的“有向”面积</p>
<ul>
<li>这里讲“有向”就是向上是正，向下是复<ul>
<li>可以无向吗，显然你可以这样定义，但是这显然不符合期望<ul>
<li>例子就是 车的速度变化，的变化函数的围成面积，引入方向是更自然的结果</li>
</ul>
</li>
</ul>
</li>
<li>这里的“希望”是说，目前阶段的积分定义 解决不了一些 以后学实分析时 f(x)&#x3D;1(当x是无理数时),0(x是有理数时)的这种积分</li>
</ul>
<p>积分的想法，就是通过“均匀”（非必要，只是常用的方法）纵向切割，切割面积成很多纵条</p>
<ul>
<li>每个纵条在原函数下方，且最大，则称为小和</li>
<li>每个纵条在原函数上方，且最小，则称为大和</li>
</ul>
<p>书上写的 上和 下和，应该更直观一些</p>
<p>然后极限的是 切割的数量 趋于无穷</p>
<ul>
<li>这时候，大和小和要趋于同样的值，那么根据三明治夹击定理，得到了函数的“积分”</li>
<li>这里 趋于同样值，意味着大和小和的差趋于0</li>
</ul>
<h2 id="16-定积分"><a href="#16-定积分" class="headerlink" title="16. 定积分"></a>16. 定积分</h2><p>上面这个东西，我们称它为定积分$\int_{a}^b f(x)$, 表达式 f(x)在取值<code>[a,b]</code> 范围时，和坐标轴 围成有向面积</p>
<p>这里注意的是，我们会发现 一条线 的面积是0,（概率论中的 0 概率不表示不可能）</p>
<p>$\int_{a}^b f(x)&#x3D;\lim_{mesh -&gt; 0}\sum f(c_j)(x_j-x_{j-1})$</p>
<ul>
<li>也就是切割最大间隔趋于0</li>
<li>c_j 是$[x_{j-1},x_j]$之间的某个值，那么f(cj)就是之间最大最小值之间</li>
<li>称作 黎曼和，黎曼积分</li>
</ul>
<p>常用技巧就是 以1&#x2F;n,然后完成求和表达式，当n趋于无穷时，计算这个极限</p>
<p>为了计算一些分段的函数，并且和连续函数契合，定义了 <code>int[a,b]+int[b,c] = int[a,c]</code></p>
<ul>
<li>为了使它合理，定义了 a &gt;&#x3D; b的值</li>
<li>这里我们可以发现，虽然 划分也好，拆分int也好，<code>[a,b]+[b,c]</code> 看起来计算了两次，而对于有限值的点来说，面积就是0,</li>
<li>以及列了一些 和四则运算相关的性质，常数倍数提出，int 加减拆分</li>
</ul>
<p>然后类似的，在积分上有 三明治夹击定理，中值定理</p>
<p>不可积函数：举例了上面实分析的例子：下和&#x3D;0,上和&#x3D;1</p>
<h2 id="17-微积分基本定理"><a href="#17-微积分基本定理" class="headerlink" title="17. 微积分基本定理"></a>17. 微积分基本定理</h2><p>中文的 积分 微分 都带一个分，而且名字都叫微积分，有一种关联的感觉</p>
<p>但这里 才是“一个厉害的结论”</p>
<p>从 定积分 在点a的 增量是面积，微分是f(x) deltax, 导数是f(x), 引出：积分 和 微分 是（一种逆运算的感觉）</p>
<ul>
<li>这个意义在于，微分看起来更好求，那么如果有了微分，那么不再需要 黎曼切割去算积分，而直接有积分</li>
<li>第二是，中文叫做不定积分，和定积分<ul>
<li>写法上差别是 范围，与+C,看起来很像</li>
<li>但从 关系上说，定积分,不定积分 的微分得到 f, f的积分是不定积分，</li>
<li>图像上，两个函数可以通过沿y移动重叠，那么它们必然微分相同，差值是C, 它们微分的不定积分 涵盖了他两，而这两个函数在[a,b]上，从a到b的变化是一样的，这个变化是想求的微分的定积分的值</li>
<li>F(x)&#x3D;x^2,f(x)&#x3D;F’(x)&#x3D;2x, int f(x) &#x3D; x^2+C  得到了一系列函数, int_1^2 f(x) &#x3D; 3, 表示 这一系列函数从点x&#x3D;1到x&#x3D;2的增量都是3</li>
</ul>
</li>
</ul>
<p>微积分的第一基本定理：f在[a,b]上连续,F(x) 在(a,b)可导，且F(x)&#x3D;f(x)</p>
<ul>
<li>那么 $F(x)&#x3D;\int_{a}^x f(t)dt,x\in[a,b]$</li>
<li>函数的导函数围成的面积 &#x3D; 原函数的增量</li>
</ul>
<p>微积分第二基本定理, f在[a,b]连续，F是f的任意一个反导数，那么</p>
<ul>
<li>$\int_{a}^b f(x)dx&#x3D;F(b)-F(a)$</li>
<li>反导数 也就是 不定积分中任意一个</li>
<li>$\frac{d}{dx}F(x)&#x3D;f(x)$那么$\int f(x)dx&#x3D;F(x)+C$</li>
</ul>
<p>这里同样 塞一下四则运算</p>
<p>很多例题，包括各种上下限是变量的，</p>
<p>而定积分时还有一个可用的东西，叫做奇偶性，这得益于它是有向的面积</p>
<p>P338有个积分表</p>
<p>这个证明核心 又是“中值定理&#x2F;介值定理”</p>
<h2 id="18-积分的方法I（换元，分部，分式）"><a href="#18-积分的方法I（换元，分部，分式）" class="headerlink" title="18. 积分的方法I（换元，分部，分式）"></a>18. 积分的方法I（换元，分部，分式）</h2><p>这一块没有新的数学原理，而是实际应用中，怎么求积分，</p>
<p>换元法： 核心思想是 int f(x) dx 中，如果能把其中一个x的表达式g(x),全部都表示g(x)的表达式，那么就能完成换元</p>
<ul>
<li>$\int 2xe^{x^2} dx&#x3D;\int e^{x^2} d x^2$,  这里 $x^2$可以看成整体$t&#x3D;x^2$</li>
<li>$\int \frac{f’(x)}{f(x)}dx &#x3D; \ln|f(x)|+C$</li>
<li>$\int x(3x+2)^{1&#x2F;5} dx$,这里 把$t&#x3D;(3x+2)^{1&#x2F;5}$,那么原式&#x3D;$\int \frac{1}{3}(t^5-2)(t)\frac{5}{3}t^4 dt$</li>
</ul>
<p>这里理论解释是 复合函数链式求导，的反向积分过程</p>
<hr>
<p>分部积分法, 同样是来自于微分过程中的逆向操作而已</p>
<p>$\frac{d}{dx}(uv)&#x3D;v\frac{d}{dx}(u)+u\frac{d}{dx}v$</p>
<ul>
<li>$\int u\frac{d}{dx}(v)dx&#x3D;uv-\int v\frac{d}{dx}(u) dx$</li>
<li>$\int u dv &#x3D; uv - \int v du$</li>
</ul>
<p>看了下youtube <a href="https://www.youtube.com/watch?v=J40ZhIfoPx4">https://www.youtube.com/watch?v=J40ZhIfoPx4</a> 有个DI积分法, 本质上也是这个，不过书写上更快速</p>
<hr>
<p>部分分式$\int \frac{p(x)}{q(x)}dx$</p>
<ul>
<li>这里的方法还是 多项式 求余法</li>
<li>然后 再待定系数法，最终希望是<code>int 整式子 + 多个\frac&#123;常数&#125;&#123;(x+a)^t&#125;</code>的形式</li>
<li>对于 分母是两个不同一次式子时，可以用 线性代数的知识，对分子进行拆分，<ul>
<li>$1&#x2F;(x^2-1)&#x3D;1&#x2F;((x-1)(x+1))$, 分子 &#x3D;((x+1)-(x-1) )&#x2F;2</li>
</ul>
</li>
<li>总的来说 这样做，不能解决的就是 分母是难以拆的多项式</li>
<li>其中特别的 不可拆2次式子可以考虑<ul>
<li>(x+a)&#x2F;((x+b)^2+c)的形式， 从而化成 d&#x2F;(t^2+c) 和 t&#x2F;(t^2+c),就对应 arctan和ln了</li>
<li>这一块的感受是，从没想过 tan,ln这些 在微积分之前觉得很远的函数，现在如此近，而这个感觉在后面的泰勒展开和级数的时候会更多</li>
</ul>
</li>
</ul>
<p>$\int \frac{1}{t^2+a^2}dt&#x3D;\frac{1}{a}arctan(\frac{t}{a})+C$</p>
<h2 id="19-积分的方法II（三角）"><a href="#19-积分的方法II（三角）" class="headerlink" title="19. 积分的方法II（三角）"></a>19. 积分的方法II（三角）</h2><p>$cos^2(x)&#x3D;\frac{1}{2}(1+cos(2x))$</p>
<p>$sin^2(x)&#x3D;\frac{1}{2}(1-cos(2x))$</p>
<p>核心还是三角的换元，看起来就能完成幂次变换，和表达式变换</p>
<p>$\int sin^ncos^m$,</p>
<ul>
<li>有奇数幂可以拆一个，剩下用sin2+cos2&#x3D;1换成只有一个的，从而完成换元</li>
<li>都是偶幂，用上面的完成降次</li>
</ul>
<p>$\int tan(x)dx &#x3D; -\ln |cos(x)|+C$</p>
<p>$tan^2(x)&#x3D;sec^2(x)-1$</p>
<p>哎，感觉这一块，真的背不到，查表是能查</p>
<p>$\int sec^2(x)dx&#x3D;tan(x)+C$</p>
<p>$I_n&#x3D;\int tan^n(x)dx$</p>
<p>$I_0&#x3D;x+C$</p>
<p>$I_1&#x3D;-\ln |cos(x)|+C$</p>
<p>$I_n&#x3D;\frac{1}{n-1}tan^{n-1}(x)-I_{n-2}$ 约化公式</p>
<hr>
<p>类似的 $I_n&#x3D;\int_0^{\pi&#x2F;2} cos^n(x)dx$</p>
<p>$I_n&#x3D;(n-1)(I_{n-1}-I_n)$</p>
<p>$I_{n}&#x3D;\frac{n-1}{n}I_{n-2}$</p>
<p>$I_0&#x3D;\frac{pi}{2},I_1&#x3D;1$</p>
<hr>
<p>这一块是对于一些直接求不到，的完成一个形式的递归表达式</p>
<hr>
<p>$\sqrt{a^2-x^2}$ 换元 $x&#x3D;a\sin(\theta)$</p>
<p>$\sqrt{a^2+x^2}$ 换元 $x&#x3D;a\tan(\theta)$</p>
<p>$\sqrt{x^2-a^2}$ 换元 $x&#x3D;a\sec(\theta)$</p>
<hr>
<p>整个的核心还是要对 微分结果熟悉</p>
<h2 id="20-反常积分：基本概念"><a href="#20-反常积分：基本概念" class="headerlink" title="20. 反常积分：基本概念"></a>20. 反常积分：基本概念</h2><p>目标</p>
<ul>
<li>有些函数，在定义域无限时，围成面积有限，（ 例如 等比例的 实数定义域版 $f(x)&#x3D;(1&#x2F;2)^x$</li>
<li>有些函数，在有限定义域，无限值域时，围成面积有限，（例如$2\sqrt{x}$求导得到的形如$\frac{1}{\sqrt{x}}$在[0,1]</li>
<li>其它的都无限</li>
</ul>
<p>主要希望能计算那些有限的函数</p>
<ul>
<li>那么这里补充定义，如果 [a,b],仅在点a无限，$\int_a^b&#x3D;\lim_{\epsilon\to 0^+}\int_{a+\epsilon}^b$<ul>
<li>这里有点（覆盖写入的感觉），也就是积分 前面定义了 <code>[]连续,()可导</code>，以及拆分。而这里补充定义了 单点值域极限的情况，这样定义了$\int_{0}^{1}\frac{1}{\sqrt{x}}$的值</li>
<li>其实 根据前面 对称性，和可拆分性，我们自然的也对一些间断点，破裂点，b出的无穷有了 “自然”的定义 例如 上面要趋于$b-\epsilon$，<ul>
<li>换个角度思考，那如果就是连续呢，会发现单点的值，不论无不无穷 直接被视作0,也就是当连续时，我们要算(a,b)的积分，也能这样定义</li>
</ul>
</li>
</ul>
</li>
<li>同样关于积分范围的无穷定义，也是补充定义$\int_a^{\infty}&#x3D;\lim_{N\to \infty} \int_{a}^{N}$</li>
<li>再换句话说，积分的符号写法是“模糊的”，而为了让模糊的写法，在满足最纯粹 <code>[]连续,()可导</code>以及嵌入四则运算的前提下，补充了一些“更自然”的补充定义</li>
</ul>
<hr>
<p>$x\to a,\frac{f(x)}{g(x)}&#x3D;1$那么称作在点$a$他们相似$f(x)\sim g(x)$</p>
<ul>
<li>关于相似 引入 四则运算</li>
<li>f<del>g,h</del>j &#x3D;&gt; fh~gj</li>
<li>注意的是，加减运算是无法保证的<ul>
<li>tan<del>x,sin</del>x,但是 tan-sin~0是错的！！之后会引入等价无穷小</li>
</ul>
</li>
<li>这里～的核心是连续的把（值？）捆在不太远的位置，<ul>
<li>而当都趋于0时，加减的实际内容不是这个（值），而是对捆绑的力度加减</li>
<li>当都不趋于0时，加减的实际内容是针对这个值，而这个值的（结果 需要不是0）</li>
</ul>
</li>
</ul>
<hr>
<p>有了比较判别法，如果一个积分结果无穷，另一个函数比它大，那么积分也是无穷（核心也是夹击类似的想法）</p>
<p>而这里又是一个重要的 极限</p>
<ul>
<li>$\int_a^{\infty} \frac{1}{x^p} dx, a &gt; 0$,<ul>
<li>$p\le 1$时，发散</li>
<li>$p &gt; 1$时，收敛</li>
</ul>
</li>
<li>另外的 $\int_0^a,\frac{1}{x^a}dx a&gt;0$<ul>
<li>p&lt;1 收敛</li>
<li>$p\ge 1$ 发散</li>
</ul>
</li>
</ul>
<p>绝对收敛判别法, int|f(x)|收敛，则 int f(x),收敛，核心还是夹挤, -|f(x)| &lt;&#x3D; f(x) &lt;&#x3D; |f(x)|,在足够大的n以后左右都趋于0</p>
<h2 id="21-反常积分：如何解题"><a href="#21-反常积分：如何解题" class="headerlink" title="21. 反常积分：如何解题"></a>21. 反常积分：如何解题</h2><ol>
<li>找所有瑕点，以瑕点切割，切割成多个 <code>[],()</code>，每个里面使用新的或朴素的积分定义计算</li>
</ol>
<p>x在无穷附近</p>
<p>f(x)的最高幂次 $f(x)~b_ix^{m_i}$</p>
<p>sin,cos 可以用 绝对收敛判别法， $||\le1$</p>
<p>对于 x &gt; 0, $e^{-x} \le \frac{C}{x^n}$, </p>
<p>对于 x &gt; 0, $ln(x)\le Cx^n$</p>
<hr>
<p>x在0附近</p>
<p>f(x)的最低幂次 $f(x)~b_ix^{m_i}$</p>
<p>sin~x</p>
<p>tan~x</p>
<p>cos~1</p>
<p>$e^x\sim 1$</p>
<p>$e^x-1\sim x$</p>
<p>$|\ln(x)|\le \frac{C}{x^{a}}, a&gt;0$,足够小的a</p>
<hr>
<p>总的来说这里，在0或者在无穷附近的处理，都希望能变成x的幂次的样子</p>
<p>而需要注意的是加减法的结果不应该是 ~0,否则会有问题(加减的是幅度)</p>
<h2 id="22-数列和级数：基本概念"><a href="#22-数列和级数：基本概念" class="headerlink" title="22.数列和级数：基本概念"></a>22.数列和级数：基本概念</h2><p>数列：极限，是一种（可列，无穷）</p>
<p>例如 $f(x)&#x3D;sin(n)&#x2F;x^n$, 也可以定义$a_n&#x3D;sin(n)&#x2F;x^n$, 那么 这可以看成对函数的无穷方向的 整点采样</p>
<p>感官上显然的，如果函数数列同样表达式，那么函数收敛必然数列收敛，但数列首先可能刚好因为（采样的被采样点特殊）而收敛 函数却不收敛</p>
<ul>
<li>$f(x)&#x3D;sin(2<em>\pi</em>n)$</li>
<li>这里感官上，是对于 图像的 epsilon和N的理解</li>
</ul>
<p>连续函数保持极限：</p>
<ul>
<li>和上面不同，f(x)在点a是连续的，那么数列的 采样$a_i&#x3D;f(t_i)$,然后t_i随着i趋于无穷，采样t趋于a,那么a_i的极限也就是f(a)</li>
</ul>
<p>重要数列</p>
<ul>
<li>$a_n&#x3D;r^n$, 讨论 r<ul>
<li>（-1,1） 收敛于0</li>
<li>1,收敛于1</li>
<li><blockquote>
<p>1, 趋于无穷</p>
</blockquote>
</li>
<li>&lt;&#x3D; -1, 不存在</li>
</ul>
</li>
<li>$a_n&#x3D;(1+k&#x2F;n)^n$, 趋于 $e^k$</li>
</ul>
<hr>
<p>series 级数，就是数列的和, 起始有的0,有的1都行</p>
<ul>
<li>$\sum_{1}^\infty &#x3D; \lim_{N\to \infty}\sum_{1}^N$ 称作无穷级数</li>
<li>$\sum_0^{\infty} {r^n}$<ul>
<li>(-1,1) &#x3D;&gt; $\frac{1}{1-r}$</li>
<li>其它的发散</li>
</ul>
</li>
<li>从观感上自然的，需要a_n是趋于0的，能判断是发散，（注意只能判断是发散，不能判断收敛，因为这只是收敛的必要条件，不是充分的）</li>
</ul>
<p>比较判别，类似函数的比较判别 a_n~b_n, 等价于 lim n-&gt;\infty, a_n&#x2F;b_n&#x3D;1</p>
<ul>
<li>例如 $sin(1&#x2F;2^n) \sim (1&#x2F;2)^n$</li>
</ul>
<p>级数中有新的判别法：比式判别法</p>
<ul>
<li>$\lim_{n\to \infty}a_{n+1}&#x2F;a_n &#x3D; L &lt; 1$ , 那么收敛，<ul>
<li>这里核心思想就两个 小于1的等比数列和极限收敛</li>
<li>第二比例有极限，所以可以被捆绑在明确小于一个明确小于1的数以内，所以至少是有界的,从而根据柯西的，截取尾部可以和任意小的想法</li>
</ul>
</li>
</ul>
<p>类似的，还是利用等比数列求和的想法 和 上面的 等价的想法，</p>
<ul>
<li>有了根式判别法 $(a_n)^{\frac{1}{n}}&#x3D;L&lt;1$</li>
</ul>
<p>积分判别法，对于 表达式对应同样函数的积分，比较，可以判断是上下界的</p>
<ul>
<li>例如单调递增且有上界，单调递减有下界这样的，利用和积分比较判断它有界</li>
</ul>
<p>交错级数：</p>
<ul>
<li>正负交替，绝对值趋于0,则收敛</li>
<li>注意的是，这种级数，可能不是绝对收敛的，这种情况下称作条件收敛</li>
<li>$(-1)^n&#x2F;n$</li>
</ul>
<hr>
<p>级数中需要注意的是，当正负交替以后，重排序的结果可能 级数值不一样！！！！ 非常神奇的给了极限当头一棒的感觉</p>
<ul>
<li>TODO 例子</li>
</ul>
<h2 id="23-求解级数问题"><a href="#23-求解级数问题" class="headerlink" title="23.求解级数问题"></a>23.求解级数问题</h2><p>想要漂亮的级数值，这个级数一般就很特殊</p>
<ul>
<li>等比例</li>
</ul>
<p>主要对22章的具体用例。</p>
<h2 id="24-泰勒多项式、泰勒级数和幂级数导论"><a href="#24-泰勒多项式、泰勒级数和幂级数导论" class="headerlink" title="24. 泰勒多项式、泰勒级数和幂级数导论"></a>24. 泰勒多项式、泰勒级数和幂级数导论</h2><p>泰勒展开，幂级数：</p>
<ul>
<li>核心是 点的幂次展开，然后中值定理控制了结果范围</li>
<li>成果是，当无限的展开它，就可以看成相等，而 幂级数的 导&#x2F;积 操作是非常容易的<ul>
<li>泰勒级数 无非是 展开点是a不是0,</li>
</ul>
</li>
</ul>
<p>$\lim_{n \to \infty} x^n&#x2F;n!&#x3D;0$</p>
<p>剩余项 可以计算误差范围</p>
<h2 id="25-求解估算问题"><a href="#25-求解估算问题" class="headerlink" title="25. 求解估算问题"></a>25. 求解估算问题</h2><p>幂级数有个理论叫做收敛半径，TODO存在性证明，收敛半径的意义</p>
<ul>
<li><code>[0,r)</code> 收敛</li>
<li>(-\infty,-r) (r,\infty) 发散</li>
<li>r处具体讨论</li>
</ul>
<h2 id="26-泰勒级数和幂级数：如何解题"><a href="#26-泰勒级数和幂级数：如何解题" class="headerlink" title="26. 泰勒级数和幂级数：如何解题"></a>26. 泰勒级数和幂级数：如何解题</h2><p>求收敛半径 一般用比值法，还是等比数列的想法</p>
<p>有了泰勒级数，虽然（不科学的因为这里扩展了数域），但是强行带入可以有欧拉公式</p>
<p>一些极限求解时，可以用 等价无穷小（也就是级数展开 求解</p>
<h2 id="27-参数方程和极坐标"><a href="#27-参数方程和极坐标" class="headerlink" title="27. 参数方程和极坐标"></a>27. 参数方程和极坐标</h2><p>这块我还是感觉没有悟透，因为函数的话，从感觉上，x作为自变量，f(x)作为唯一输出，有了x到f(x) 的映射</p>
<p>x&#x3D;g(t), y&#x3D;h(t)</p>
<p>两个都是t的函数，那么t的取值，在我看来，会在y-x平面绘制出（可能是）一条曲线，它感觉上，不容易保证说是一个x对应一个y</p>
<p>这里, 链式求导，y&#x3D;f(x),我们不知道f, 但是 d&#x2F;dt(y)&#x3D; d&#x2F;dx(y) d&#x2F;dt(x)</p>
<ul>
<li>从而 d&#x2F;dx(y) &#x3D; $\frac{d&#x2F;dt(y)}{d&#x2F;dt(x)}$</li>
<li>从而 d^2&#x2F;dx^2(y) &#x3D; $\frac{d&#x2F;dt(上面的)}{d&#x2F;dt(x)}$</li>
<li>注意到 结果会是t的表达式，不是x也不是y的</li>
</ul>
<hr>
<p>笛卡尔坐标系，（用$r,\theta$ 表示</p>
<p>$x&#x3D;r\cos(\theta)$</p>
<p>$y&#x3D;r\sin(\theta)$</p>
<p>对于 $r&#x3D;f(\theta)$</p>
<p>求切线: $d&#x2F;dx(y)&#x3D;\frac{d&#x2F;d\theta(y)}{d&#x2F;d\theta(x)}$</p>
<p>极坐标下的面积 $\int_{\theta_0}^{\theta_1} \frac{1}{2}r^2 d\theta$</p>
<h2 id="28-复数"><a href="#28-复数" class="headerlink" title="28. 复数"></a>28. 复数</h2><p>复分析里：证明n次多项式n个根</p>
<p>复数核心是二元组，(a,b), 和一套规则，为了写得好看，变成 a+bi的形式</p>
<ul>
<li>复数长度 是 $x\bar{x}$ 它与它共轭的乘积</li>
</ul>
<p>复平面与 欧拉公式$e^{i\theta}&#x3D;\cos(\theta)+\sin(\theta)$</p>
<ul>
<li>一个点可以用 a+bi和 $re^{i\theta}$ 两种形式表示</li>
</ul>
<p>$z^n&#x3D;w$,如果把W看成复平面的点，那么z&#x3D;长度的n次根 * 夹角的1&#x2F;n</p>
<ul>
<li>另外 因为 $e^{i2\pi}&#x3D;1$,所以 $2k\pi$ 的夹角都可以分</li>
<li>z&#x3D;长度的n次根 * (夹角的1&#x2F;n + $2\pi k(&#x3D;0\cdots n-1) &#x2F; n$)</li>
</ul>
<p>解$e^z&#x3D;w$, z分成x+iy, $e^x&#x3D;w$的长度$e^iy&#x3D;w$的夹角</p>
<hr>
<p>这里感觉可以加上三角级数与傅里叶变换？</p>
<h2 id="29-体积、弧长和表面积"><a href="#29-体积、弧长和表面积" class="headerlink" title="29. 体积、弧长和表面积"></a>29. 体积、弧长和表面积</h2><p>上面知识的应用了</p>
<p>体积，主要是一些旋转体的，本质上就是找公式算积分</p>
<hr>
<p>弧长，要一点微分相关，是delta的近似量，面对的问题是圆形边长为什么不是8r</p>
<ul>
<li>$\int_a^b \sqrt{1+(\frac{d}{dx}(y))^2} dx$</li>
<li>$\int_A^B \sqrt{1+(\frac{d}{dy}(x))^2} dy$</li>
<li>$\int_{t_0}^{t_1} \sqrt{(\frac{d}{dt}x)^2+(\frac{d}{dt}(y))^2} dt$</li>
<li>$\int_{\theta_0}^{\theta_1} \sqrt{(f(\theta))^2+(f’(\theta))^2} dt$</li>
</ul>
<hr>
<p>关于x轴，旋转体表面积</p>
<ul>
<li>$\int_{a}^b 2\pi y \sqrt{1+(\frac{d}{dx}y)^2} dx$</li>
</ul>
<h2 id="30-微分方程"><a href="#30-微分方程" class="headerlink" title="30. 微分方程"></a>30. 微分方程</h2><p>就是包含导数的方程，这里只学一元函数， 常微分方程 ODE</p>
<p>前面例子 $\frac{d}{dx}y&#x3D;ky$, 唯一形式$y&#x3D;Ae^{kx}$</p>
<p>对于一类 可通过方程变形成  f(y)dy&#x3D;h(x)dx的形式，可以两边同时积分（记得+C）</p>
<hr>
<p>一阶线性方程： 能整理成 y’+p(x)y&#x3D;q(x)</p>
<p>注意到 $(g(x)y)’&#x3D;g’(x)y+g(x)y’$, 而这样需要 $p(x)&#x3D;\frac{g’}{g}$, 并不容易找到g</p>
<p>注意到 $(e^{h(x)}y)’&#x3D;h’(x)e^{h(x)}y+e^{h(x)}y’$, 这里利用了$(e^x)’&#x3D;e^x$,  这样的话 只需要$h’(x)&#x3D;p(x)$</p>
<p>所以 希望 $h(x)&#x3D;\int p(x) dx + C_1$</p>
<p>$e^{h(x)}\frac{d}{dx}(y)+e^{h(x)}p(x)y&#x3D;e^{h(x)}q(x)$</p>
<p>$e^{h(x)}\frac{d}{dx}(y)+e^{h(x)}h’(x)y&#x3D;e^{h(x)}q(x)$</p>
<p>$e^{h(x)}\frac{d}{dx}(y)+e^{h(x)}h’(x)y&#x3D;e^{h(x)}q(x)$</p>
<p>$\frac{d}{dx} (e^{h(x)}y)&#x3D;e^{h(x)}q(x)$</p>
<p>$e^{h(x)}y&#x3D;\int (e^{h(x)}q(x)) dx  + C_2$</p>
<p>$\displaystyle y&#x3D;\frac{1}{e^{h(x)}}(\int (e^{h(x)}q(x)) dx  + C_2), h(x)&#x3D;\int p(x) dx + C_1$</p>
<hr>
<p>常系数微分方程, <a href="https://math.fudan.edu.cn/_upload/article/files/8b/6b/f3bc390143b09642a863057be4e7/0771b803-2e2b-487e-830b-a32e4e32dcfe.pdf">https://math.fudan.edu.cn/_upload/article/files/8b/6b/f3bc390143b09642a863057be4e7/0771b803-2e2b-487e-830b-a32e4e32dcfe.pdf</a></p>
<p>$\sum_{i} a_i\frac{d^i}{dx^i} (y)&#x3D;f(x)$</p>
<p>二阶常系数齐次线性方程 $a\frac{d^2}{dx^2}(y)+b\frac{d}{dx}(y)+c&#x3D;0$</p>
<p>若 $y&#x3D;e^{kx},y’&#x3D;ke^{kx},y’’&#x3D;k^2e^{kx}$， </p>
<ul>
<li>$ak^2+bk+c&#x3D;0$, 说明k求出，就能找到一个解</li>
<li>问题是如果不是这个形式就无解了吗？</li>
<li>这里 知乎的一个回答是运算可逆??? <ul>
<li>我瞎想的一个是 $e^{f(x)}$,然后f(x)是幂级数展开，那么其它次的都会有带入的幂次不一致问题，只有$e^{kx}$ 没有幂次问题</li>
</ul>
</li>
<li>如果求得两个不同解$e^{k_0x},e^{k_1x}$ 这两个的 线性叠加就都是解,$C_0e^{k_0x}+C_1e^{k_1x}$<ul>
<li>如果 $k_0&#x3D;k_1$</li>
<li>也就是 $\frac{d^2}{dx^2}(y)-2k\frac{d}{dx}(y)+k^2y&#x3D;0$<ul>
<li>$\frac{d^2}{dx^2}(y)-k\frac{d}{dx}(y)&#x3D;k\frac{d}{dx}(y)-k^2y$</li>
<li>$\frac{d^2}{dx^2}(y)-k\frac{d}{dx}(y)&#x3D;k(\frac{d}{dx}(y)-ky)$, (这个感觉是来自于线性代数 比例的感觉, 右边这一块看成 z(x)的话, 类似的这样拆也能说明 上面和二次方程根有关系</li>
<li>$\frac{d}{dx}z&#x3D;kz$<ul>
<li>其中$z&#x3D;0$是一个特殊的也就是$\frac{d}{dx}(y)-ky&#x3D;0$， $y&#x3D;C_0e^{kx}$</li>
<li>那么还有 $z&#x3D;C_1e^{kx}$</li>
<li>$\frac{d}{dx}(y)-ky&#x3D;C_1e^{kx}$<ul>
<li>y&#x3D;特解+零空间（上面的）</li>
<li>这里有地方说 要$e^{kx}$线性无关，所以$y&#x3D;g(x)e^{kx}$,其中g(x)不为常数<ul>
<li>$g’(x)e^{kx}+kg(x)e^{kx}-kg(x)e^{kx}&#x3D;C_1e^{kx}$</li>
<li>$g’(x)&#x3D;C_1$</li>
<li>$g(x)&#x3D;C_1x+C_2$, 而这里$C_2$可以和$C_0$融合</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>综上<ul>
<li>不同根就是 线性叠加</li>
<li>同根就是$(C_0+C_1x)e^{kx}$</li>
<li>复根，就是同样的用欧拉公式换一换<ul>
<li>不过 复根的性质，因为二次方程所以会是 共轭 a+bi,a-bi</li>
<li>这样的话线性无关，叠加就是$e^{ax}(C_0sin(bx)+C_1cos(bx))$ , (本质上一样，只是换了基而已)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>进一步的 n阶常系数齐次方程，也是类似的形式，重根也是类似的</p>
<p>习题: $yy’’-(y’)^2&#x3D;y^2\ln y$</p>
<p>$y&#x3D;e^{f(x)}$</p>
<p>$y’&#x3D;f’(x)e^{f(x)}$</p>
<p>$y’’&#x3D;f’’(x)e^{f(x)}+(f’(x))^2e^{f(x)}$</p>
<p>$f’’(x)&#x3D;f(x)$</p>
<p>$x^2-1&#x3D;0$</p>
<p>$f(x)&#x3D;C_0e^{-x}+C_1e^{x}$</p>
<p>$y&#x3D;e^{C_0e^{-x}+C_1e^{x}}$</p>
<hr>
<p>那么 解 $&#x3D;f(x)$ 的是特解+零空间</p>
<p>特解怎么求</p>
<p>这里给的是形式对应</p>
<ul>
<li>f(x)&#x3D;多项式：特解的形式是同次多项式</li>
<li>f(x)&#x3D;$e^{kx}$: 特解是 $Ce^{kx}$</li>
<li>sin(nx) 或者 cos(nx),特解是 Csin(nx)+Dcos(nx), </li>
<li>是上面的乘积，那么特解是对应上面特解的乘积</li>
</ul>
<p>有了形式化，那么剩下的是待定系数法了</p>
<ul>
<li>失效情况，类似于上面的重根，这里的零空间可能和特解有重复<ul>
<li>例子 $y’’-3y’+2y&#x3D;7e^{2x}$, 显然零空间里有$e^x,e^{2x}$, 那么特解肯定就不是$Ce^{2x}$<ul>
<li>这里的结果和上面也是类似，补充x的幂次</li>
<li>$y&#x3D;Cxe^{2x}$</li>
<li>$(y’-2y)’-(y’-2y)&#x3D;7e^{2x}$</li>
<li>$(Ce^{2x}+2Cxe^{2x}-2Cxe^{2x})’-(Ce^{2x}+2Cxe^{2x}-2Cxe^{2x})&#x3D;7e^{2x}$</li>
<li>$(Ce^{2x})’-(Ce^{2x})&#x3D;7e^{2x}$</li>
<li>$2Ce^{2x}-Ce^{2x}&#x3D;7e^{2x}$</li>
<li>$Ce^{2x}&#x3D;7e^{2x}$</li>
<li>所以特解是$y&#x3D;7xe^{2x}$</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>注意图像意义虽然对于实数好理解，但是表达式的力量会在一些无法画图的时候体现例如复数</p>
<ol>
<li>极限的定义：这里给出了图像上 epsilon, delta的 意义</li>
<li>极限的四则运算：解决了复杂表达式的极限难以直接计算的问题，转化为可以拆分计算再合并<ol>
<li>证明核心就是 被控制到了可控范围</li>
</ol>
</li>
<li>其他极限情况，主要讨论 无穷，间断，单侧。同样可以图像意义</li>
<li>连续与极限：连续是想要的性质，在这个性质下，可以对多个函数的 单点甚至一段区间，进行四则运算甚至复合<ol>
<li>存在性定理：<ol>
<li>介值定理</li>
<li>最大-最小定理证明</li>
</ol>
</li>
</ol>
</li>
<li>指数对数函数<ol>
<li>导数性质</li>
<li>e的积分表达</li>
</ol>
</li>
<li>微分与极限：<ol>
<li>微分 是 导数与自变量的表出，与delta 近似</li>
<li>链式求导与极值定理证明</li>
<li>罗尔定理-&gt;中值定理-&gt;线性化误差</li>
<li>分段函数导数</li>
<li>洛必达法则</li>
</ol>
</li>
<li>泰勒近似定理<ol>
<li>展开+中值</li>
</ol>
</li>
</ol>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>本书出了口语化流畅，细致内容，很多例子，以外，还有很大优点就是图多</p>
<p>然后有些内容国内有的的确这里没有，例如 连续封闭的二元函数的封闭区间线积分</p>
<p>从编程模块化的想法，内核化的想法，我很喜欢这里把 定积分看成 <code>[]</code>连续 <code>()</code>可导 的 内核api</p>
<ul>
<li>再把 反常，分段，看成是对于这个的重定义和调用<ul>
<li>为了调用 和 四则运算相关支持，再引入合理的 补充定义（胶水代码）</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>微积分</tag>
      </tags>
  </entry>
  <entry>
    <title>普林斯顿 概率论读本</title>
    <url>/Math/the_probability_lifesaver/</url>
    <content><![CDATA[<p>前置知识：微积分， 看了下有些结论需要依赖复分析的结果</p>
<p>isbn 9787115543776</p>
<p>优点：</p>
<ul>
<li>脉络很好，非常喜欢整体性，</li>
</ul>
<p>缺点：</p>
<ul>
<li>有习题 无直接的答案，好像也没有答案书</li>
<li>很多专业名词出现时没有对应英文</li>
</ul>
<span id="more"></span>

<h2 id="第一部分-一般性理论"><a href="#第一部分-一般性理论" class="headerlink" title="第一部分 一般性理论"></a>第一部分 一般性理论</h2><h3 id="1-引言"><a href="#1-引言" class="headerlink" title="1.引言"></a>1.引言</h3><p>生日问题，房间里有多少人才能保证，两人同生日概率 &gt;&#x3D; 50%, 假设365天，如果一个人在一年中出生概率相等（然而似乎统计的现实不是这样，而现实中一个小圈圈可能也有生日聚集性）</p>
<ul>
<li>一个直接的错误的 想法是 182.5,</li>
<li>$&#x3D;\frac{365!}{365^n(365-n)!}$<ul>
<li>23人时达到 ~50.7%</li>
<li>30人时达到 ~70.6%</li>
<li>40人时达到 ~89.1%</li>
<li>50人时达到 ~97%</li>
</ul>
</li>
<li>d天内分布，大约需要 sqrt{d 2 log 2}个人，使得 同一天发生概率50%</li>
</ul>
<p>只要看到乘积就取其对数，巴普洛夫条件反射</p>
<p>$log p_n&#x3D;\sum_{k&#x3D;0}^{n-1} log(1-\frac{k}{d})&#x3D;\sum_{k&#x3D;0}^{n-1} -\frac{k}{d}&#x3D;-\frac{n(n-1)}{2d}$ 这里用了k远小于d, 等差数列求和</p>
<p>$n(n-1)&#x3D;2d \log 2$, 继续大数 $n&#x3D;\sqrt{d 2 \log 2}$</p>
<p>最后是程序暴力模拟检验一下是否严重偏差</p>
<hr>
<p>先p成功，1-p失败，后手q成功1-q失败，一人成功时结束游戏，问先手成功的概率</p>
<ul>
<li>按次数统计 &#x3D;p+(1-p)(1-q)p+(1-p)^2(1-q)^2p+…..<ul>
<li>$&#x3D;p\frac{1}{1-(1-p)(1-q)}$</li>
</ul>
</li>
</ul>
<hr>
<p>代回法的例子，感觉核心需要级数收敛，例子 sum Fib_n&#x2F;3^n,  这里用概率论的描述法举例了，但是要注意描述法的一致性</p>
<p>结尾给了个可以二次下注，且期望恒正的对冲例子</p>
<h3 id="2-基本概率定律"><a href="#2-基本概率定律" class="headerlink" title="2.基本概率定律"></a>2.基本概率定律</h3><p>罗素悖论表明：依靠直觉来判断该如何使用集合会给我们带来麻烦</p>
<p>$R&#x3D;${$x|x\not\in x$}</p>
<p>我们应该意识到，松散定义和非正式论述的危险</p>
<hr>
<p>集合论综述，属于，子集，超集，空集，并，交，补集，笛卡尔乘积</p>
<ul>
<li>常用集合相等证明方法：互相包含</li>
<li>这里只讨论可数事件的概率</li>
</ul>
<p>开集，闭集</p>
<hr>
<p>希望：</p>
<ul>
<li>概率$P(A) \in[0,1]$</li>
<li>$P(结果空间) &#x3D; 1$</li>
<li>任意多个不相交事件$A_i$, $P(A_i的并)&#x3D;\sum P(A_i)$</li>
</ul>
<p>柯尔莫戈洛夫的 概率公理：$\Omega$是一个结果空间,$\Sigma$是一个$\sigma$代数。如果概率函数满足下列条件，那么$(\Omega,\Sigma,Prob)$就是一个概率空间</p>
<ul>
<li>若$A\in\Sigma$，那么$Pr(A)$是有定义的，且$0\le Pr(A)\le 1$</li>
<li>$Pr(\emptyset)&#x3D;0,Pr(\Omega)&#x3D;1$</li>
<li>{$A_i$}有限个两两互不相交的集合构成的集族，并且每一个集合都是$\Omega$中的元素，那么$Pr_i(\cup A_i)&#x3D;\sum_i Pr(A_i)$</li>
</ul>
<p>概率空间有用的规则</p>
<ul>
<li>$A\in \Omega$则$Pr(A)+Pr(A^c)&#x3D;1$, 其中$A^c$为补集</li>
<li>$Pr(A\cup B)&#x3D;Pr(A)+Pr(B)-Pr(A\cap B)$ 这个还可以延伸更多项，从而有容斥原理</li>
<li>$A\subset B$则 $Pr(A)\le Pr(B)$,以及$Pr(B)&#x3D;Pr(A)+Pr(B\cap A^c)$ 这里注意是 拆出来的部分可能概率为0<ul>
<li>对上面这条推广，$A_i \subset B$ 有$Pr(\cup A_i)\le Pr(B)$</li>
</ul>
</li>
</ul>
<p>对于给定的并集，通常希望能把它写成几个互不相交的集合的并</p>
<hr>
<p>概率空间和$\sigma$代数</p>
<p>巴拿赫-塔尔斯基悖论： 利用（不可数的）选择公理</p>
<ul>
<li>分球</li>
<li>$x-y\in Q$ 是有理数，那么看作等价类,$[x]&#x3D;${$y\in[0,1]|x\sim y$}</li>
<li>利用选择公理$[0,1]$中 每个等价类中取元素组成集合$A$, (或者说 $A&#x3D;[0,1]&#x2F;\sim$ 的商集)</li>
<li>对于有理数r,令 $A_r&#x3D;${$x+r|x\in A$}$\cap [0,1]$, 不同有理数 的 交集&#x3D;空集,</li>
<li>$[0,1] &#x3D; \cup_{r\in Q} A_r$</li>
<li>这里 无法对A分配概率</li>
</ul>
<p>结果空间是 半径1的圆内，那么Pr(一个点)的概率是多少呢？，会发现任何值都不对</p>
<ul>
<li>Pr(点)&#x3D;0 那么总概率0</li>
<li>Pr(点) &#x3D; c &gt; 0,那么总概率无穷大</li>
</ul>
<p>$\sigma$代数 定义：</p>
<ul>
<li>$\Omega$是集合，$\Sigma$是$\Omega$子集构成的一个非空集合，满足下面前提，则是$\sigma$代数<ul>
<li>若$A\in \Sigma$则$A^c\in \Sigma$</li>
<li>$\Sigma$的子集的“可数并”仍然属于$\Sigma$, $A_i$均满足 $A_i\in\Sigma$ 那么$\cup A_i &#x3D; \Sigma$</li>
<li>把$\Omega$中的元素称为事件、</li>
</ul>
</li>
</ul>
<p>柯尔莫戈洛夫的 概率公理：$\Sigma$是结果空间$\Omega$的一个$\sigma$代数，我们可以定义一个概率函数Prob: $\Sigma \to[0,1]$</p>
<ul>
<li>可以为$\Sigma$中满足以下性质的每个元素分配一个0~1之间的概率</li>
<li>$A\in \Sigma$ $Pr(A)\in [0,1]$</li>
<li>$Pr(\Omega)&#x3D;1$</li>
<li>互不交的$A_i$有$Pr(\cup A_i)&#x3D;\sum Pr(A_i)$， 这里就是要可数并</li>
</ul>
<p>再看上面的圆的问题，1&#x3D;Pr(落在圆上)&#x3D;?&#x3D;\sum_所有点 Pr(落在点上)&#x3D;0?</p>
<ul>
<li>这里和上面定义的关键就是 所有点 这里是不可数的，不满足上面的要求</li>
<li>所以 Pr(落在圆上)&#x3D;1,和Pr(落在一个具体点上)&#x3D;0 都是对的</li>
</ul>
<h3 id="3-计数I：-纸牌"><a href="#3-计数I：-纸牌" class="headerlink" title="3.计数I： 纸牌"></a>3.计数I： 纸牌</h3><p>对于坚持要赌博的人，请阅读第23章</p>
<p>阶乘: n! 叙事解释成n人排序的方案数</p>
<ul>
<li>延伸 gamma函数</li>
</ul>
<p>二项式系数：binom(n,k)&#x3D;n!&#x2F;(k!(n-k)!), 解释n个人中选k个不考虑顺序的方案</p>
<ul>
<li>延伸 广义二项式负数</li>
<li>$\binom{n}{k}+\binom{n}{k+1}&#x3D;\binom{n+1}{k+1}$</li>
</ul>
<hr>
<p>作者列举了各种扑克牌游戏</p>
<h3 id="4-条件概率、独立性和贝叶斯定理"><a href="#4-条件概率、独立性和贝叶斯定理" class="headerlink" title="4. 条件概率、独立性和贝叶斯定理"></a>4. 条件概率、独立性和贝叶斯定理</h3><p>条件概率：在已知其他事件发生的前提下，我们想知道某个时间发生的概率有多大</p>
<p>帽子游戏概率论版：3个人，可游玩前制定策略，进入游戏后禁止交流，每个人白黑是独立1&#x2F;2概率决定，每个人仅能看到其它两人帽子，不可交流，每人猜测或弃权，所有人同时进行，当猜测人数非零，且参与猜测全正确，平分奖金，有什么策略能大于50%</p>
<ul>
<li>显然一个策略 是其中一个人钦定白色，另外两个人不发言 是50%</li>
</ul>
<p>条件概率： P(A|B)&#x3D;在B发生时A的概率</p>
<ul>
<li>$P(A|B)&#x3D;P(A\cap B)&#x2F;(P(A\cap B)+P(A^c\cap B))&#x3D;P(A\cap B)&#x2F;P(B)$</li>
<li>蒙提霍尔开门问题</li>
</ul>
<p>一般乘法$P(A\cap B)&#x3D;P(A|B)\cdot P(B)$</p>
<hr>
<p>独立性</p>
<p>A和B相互独立: $P(A|B)&#x3D;P(A)$</p>
<ul>
<li>B的发生不会改变A的概率</li>
<li>$P(A\cap B)&#x3D;P(A)\cdot P(B)$<ul>
<li>n个</li>
<li>$P(\cap A_i)&#x3D;\prod P(A_i)$ 且，{A_i} 任意一个非空子集都是相互独立的</li>
</ul>
</li>
</ul>
<hr>
<p>贝叶斯定理：$P(A|B)&#x3D;P(B|A)\frac{P(A)}{P(B)}$</p>
<ul>
<li>我还是喜欢之前看到的 P(高学历|有礼貌)</li>
<li>$P(A)&#x3D;P(A|B)P(B)+P(A|B^c)P(B^c)$</li>
<li>划分：两两事件交为空，所有事件并&#x3D;整个样本空间<ul>
<li>对于上面的扩展到n个事件 $P(A)&#x3D;\sum P(A|B_i)P(B_i)$</li>
</ul>
</li>
<li>$P(A|B)&#x3D;\frac{P(B|A)P(A)}{\sum P(B|A_i)P(A_i)}$, 其中{$A_i$}是划分</li>
</ul>
<h3 id="5-计数II-容斥原理"><a href="#5-计数II-容斥原理" class="headerlink" title="5. 计数II: 容斥原理"></a>5. 计数II: 容斥原理</h3><p>n个事件A_i,例如容易算交，不容易算并</p>
<p>$P(\cup A_i)&#x3D;-\sum_{t&#x3D;1}^n (-1)^t \sum_{遍历t个事件选择} P(\cap A_j)$</p>
<ul>
<li>简单的理解，就是看n&#x3D;2,3时的表达式</li>
<li>证明 对于一个元素，恰好属于上面k &gt; 0 个A_i,那么考虑上面表达式这个元素被统计的次数 $-\sum_{t&#x3D;1}^{k} (-1)^t \binom{k}{t}&#x3D;1-(-1+1)^t&#x3D;1$</li>
</ul>
<p>算法竞赛里经常用到</p>
<hr>
<p>N(K)表示至少K个</p>
<ul>
<li>E(K)恰好K个 &#x3D; N(K)-N(K+1)</li>
<li>这个解决了 一些没有直接设容斥的</li>
</ul>
<p>例子：错排概率，n个元素，所有元素都不在它原来位置上的概率</p>
<ul>
<li>没法直接 事件</li>
<li>N(K)&#x3D;至少K个在原来位置上概率</li>
<li>E(0)&#x3D;N(0)-N(1)&#x3D;n!-N(1)</li>
<li>A_i&#x3D;第i个元素在原来位置上, $N(1)&#x3D;P(\cup A_i)$ 可以容斥</li>
<li>$D_n&#x3D;n!-\frac{n!}{1!}+\frac{n!}{2!}-\frac{n!}{3!}+\cdots+(-1)^n\frac{n!}{n!}$</li>
<li>$\frac{D_n}{n!} \sim e^{-1}$</li>
</ul>
<h3 id="6-计数III高等组合学"><a href="#6-计数III高等组合学" class="headerlink" title="6. 计数III高等组合学"></a>6. 计数III高等组合学</h3><p>不同重排序，binom的扩展</p>
<ul>
<li>$\frac{N!}{n_1!n_2!\cdots n_k!}$</li>
</ul>
<p>隔板法：binom扩展，c个相同饼干分给p个不同人 $\binom{c+p-1}{p-1}$</p>
<h2 id="第二部分-随机变量"><a href="#第二部分-随机变量" class="headerlink" title="第二部分 随机变量"></a>第二部分 随机变量</h2><h3 id="7-离散型随机变量"><a href="#7-离散型随机变量" class="headerlink" title="7. 离散型随机变量"></a>7. 离散型随机变量</h3><p>离散型随机变量X就是定义在一个离散的结果空间$\Omega$ 这意味着（$\Omega$是有限的或至多可数的）上的实值函数，具体地说，我们为每个元素指定一个$X(\omega)$ 实数</p>
<p>probability density function 概率密度函数</p>
<ul>
<li>离散型概率密度函数，X随机变量，它定义在离散的结果空间 $\Omega$上  $f_X(x)&#x3D;Prob(\omega \in \Omega: X(\omega)&#x3D;x)$,</li>
<li>关于 随机变量X的 概率密度函数，的&#x3D;x时的值，就是X恰好取x的概率。 也就是原来有Prob,现在基于prob定义了$f_X(x)$</li>
</ul>
<p>cumulative distribution function 累计分布函数</p>
<ul>
<li>区别是 对 随机变量不超过x的 概率的汇总 $F_x(x)&#x3D;Prob(\omega \in \Omega: X(\omega) \le x)$</li>
</ul>
<p>这里例子是n个硬币，正面次数和的概率, 二项式分布</p>
<ul>
<li>$f_X(k)&#x3D;\binom{n}{k}p^{k}(1-p)^{n-k}$</li>
<li>$F_x(k)&#x3D;\sum_{i&#x3D;0}^k \binom{n}{i}&#x2F;2^n$</li>
<li>这里教材上，还扩展了定义域到 其它，并不是限死在0~n? 往后看，那么定义 非可取点就有一定的合理性了？<ul>
<li>离散型 累计分布函数 的极限：$\lim_{x\to - \infty}F_X(x)&#x3D;0,\lim_{x\to \infty}F_X(x)&#x3D;1$, 且非严格单调递增</li>
</ul>
</li>
</ul>
<h3 id="8-连续型随机变量"><a href="#8-连续型随机变量" class="headerlink" title="8. 连续型随机变量"></a>8. 连续型随机变量</h3><p>利用 速度，时间，路程 回顾了以下微积分知识</p>
<ul>
<li>稍微提了以下 有限分段，也点了以下实分析和勒贝格积分</li>
<li>$\int_a^b f(x)dx&#x3D;F(b)-F(a)$</li>
</ul>
<p>希望 基于离散随机变量的基础，来建立连续变量的 概率理论</p>
<p>连续型随机变量、概率密度函数和累积 分布函数：X是随机变量，如果存在$f_X$满足</p>
<ul>
<li>分段连续函数 $f_X$</li>
<li>$f_X(x)\ge 0$</li>
<li>$\int_{-\infty}^{\infty} f_X(t)dt &#x3D; 1$</li>
</ul>
<p>那么$X$是一个连续型随机变量，f_X是X的概率密度函数，X的累积分布函数$F_X(x)$就是X不大于x的概率</p>
<ul>
<li>$F_X(x)&#x3D;Prob(X\le x)&#x3D;\int_{-\infty}^x f_X(t) dt$</li>
<li>非严格单调递增，左极限0,右极限1,</li>
</ul>
<p>那么微积分基本定理的意义是，概率可以等价于 概率密度函数 下面的面积</p>
<p>例子 $x\in[0,1], f_X(x)&#x3D;2+3x-5x^2$ 当$x$在其它值时$f_X(x)&#x3D;0$</p>
<ul>
<li>验证： 分段连续（满足），非负（满足），积分为1(不满足)</li>
</ul>
<p>对于积分不为0任意非负分段连续函数 $f(x)$. 容易构造$g(x)&#x3D;\frac{f(x)}{\int_{-\infty}^{\infty} f(x)dx}$ 来完成 第3个条件 积分为1</p>
<ul>
<li>根据微积分的“补充定义”来看， X属于 $[a,b],(a,b],[a,b),(a,b)$ 对于连续型随机变量来说 是相等的</li>
</ul>
<h3 id="9-工具：期望"><a href="#9-工具：期望" class="headerlink" title="9. 工具：期望"></a>9. 工具：期望</h3><p>这章脉络是：</p>
<ul>
<li>矩能描绘概率密度函数的形状</li>
<li>我们希望能 对于 不同随机变量之间 进行线性运算，希望能求得新的随机变量的 概率密度函数性质（也就是矩函数的结果）</li>
<li>这里重点在于 一阶矩（均值）和 二阶中心矩（方差）展开</li>
</ul>
<p>回顾 微积分知识：泰勒展开，x在点a展开，可以估算“附近”的值</p>
<p>期望值和矩(moment)： X是在R上的随机变量，概率密度函数$f_X$, 函数$g(X)$的 期望值 是</p>
<ul>
<li>$E[g(X)] &#x3D;\int_{-\infty}^{\infty} g(x)f_X(x) dx$ 连续型</li>
<li>$E[g(X)] &#x3D;\sum_{i} g(x_i)f_X(x_i) dx$ 离散型</li>
</ul>
<p>特别的</p>
<ul>
<li>当$g(x)&#x3D;x^r$ 把$E[X^r]$称为X的r阶矩，$E[(X-E[X])^r]$ 称为X的r阶中心矩</li>
</ul>
<p>显然的问题：为什么要算期望值，能得到什么信息</p>
<ul>
<li>类似泰勒级数，知道更多的矩能让我们更好地理解 概率密度函数 的形状和性质！！！！！？？？？？ 不是一个值吗？ 搜了下知乎，见最底外链</li>
<li>之后会聚焦两个 均值（1阶矩）方差（2阶中心矩）</li>
</ul>
<p>这里给了 $x\in[0,1] f_X(x) &#x3D; \frac{6}{11}(2+3x-5x^2)$ 的例子</p>
<ul>
<li>对于$g(x)&#x3D;x^r$,$g(x)&#x3D;e^x$,$g(x)&#x3D;1&#x2F;x$ 分别 做了积分计算，</li>
</ul>
<hr>
<p>这里写了一边公式，不如直接用上面的定义</p>
<ul>
<li>对于离散连续都是</li>
<li>均值 &#x3D; $E[g(X)&#x3D;X]$ </li>
<li>方差 $\sigma_X^2&#x3D;Var(X)$ &#x3D; $E[g(X)&#x3D;(X-E[X])^2]$  二阶中心矩<ul>
<li>这里 的一些可拆分，是因为 积分和求和的 加减可拆分</li>
<li>注意对于二阶中心矩 <code>E[X]</code>是一个值(常数的感觉)，不是随机变量, $E[(X-E[X])^2]&#x3D;E[X^2-2XE[X]+E[X]^2]&#x3D;E[X^2]-2E[X]E[X]+E[X]^2&#x3D;E[X^2]-E[X]^2$</li>
</ul>
</li>
<li>标准差$\sigma_X&#x3D;\sqrt{Var(X)}$<ul>
<li>优势是“单位相同”</li>
</ul>
</li>
<li>技术说明：为了保证均值存在，希望 运算结果是有限的</li>
</ul>
<p>一个例子 柯西分布 $f_X(x)&#x3D;\frac{1}{\pi}\frac{1}{1+x^2}$</p>
<ul>
<li>这个例子说明 了 均值：看起来是 奇函数积分&#x3D;0,但是 无穷大，选择不同的左右极限逼近方式，得到的结果不同，所以值与趋近方式有关，极限不存在</li>
</ul>
<hr>
<p>联合分布</p>
<p>联合概率密度函数：$X_i$ 都是连续随机变量，$f_{X_i}$ 是它们的概率密度函数</p>
<ul>
<li>如果 $f_{X_i}(x_i)&#x3D;\int\int\int f_{X,X,…,X}(x,x,…,x) dx_1 dx_2…$ 也就是 对其它n-1个变量积分得来</li>
<li>那么$f_{X_i}$称为$X_i$的边缘密度函数</li>
<li>独立：如果满足 $f_{X_1,\cdots,X_n}(x_1,\cdots,x_n)&#x3D;\prod f_{X_i}(x_i)$</li>
<li>这 从形状上理解，可以从二维的看，$z(x,y)&#x3D;f_{X,Y}(x,y)$, 那么分别的 沿着一个方向 挤压到一起（积分到一起），就得到没有被压的那个维度的边缘密度函数，</li>
<li>例子 $f_{X,Y}(x,y)&#x3D;1&#x2F;\pi, x^2+y^2\le 1$其它时候为0</li>
</ul>
<hr>
<p>期望值的线性性质</p>
<ul>
<li>咋这才讲，感觉上面讲期望就可以讲</li>
<li>核心就是 多个随机变量满足线性关系 $E[\sum_i a_ig(X_i)]&#x3D;\sum_i a_i E[g(X_i)]$, 根据连续的积分 离散的求和 的加减法是线性的显然<ul>
<li>$E[常数c]&#x3D;c$</li>
</ul>
</li>
</ul>
<p>引理9.5.2 X是随机变量，均值$\mu_X$,方差Var(X),若 a,b是常数，那么随机变量 Y&#x3D;aX+b有下列结果</p>
<ul>
<li>$\mu_Y&#x3D;a\mu_X+b$</li>
<li>利用线性性质</li>
<li>$Var(Y)&#x3D;E[Y^2]-E[Y]^2&#x3D;E[(aX+b)^2]-E[aX+b]^2&#x3D;(a^2E[X^2]+2abE[X]+b^2)-(a^2E[X]^2+2abE[X]+b^2)&#x3D;a^2(E[X^2]-E[X]^2)&#x3D;a^2Var(X)$</li>
<li>另一方面<ul>
<li>我们认为 均值 一阶矩函数描绘的概率密度函数的平均值，所以 倍增 平移是同步的</li>
<li>我们认为 方差 二阶中心矩函数 描绘的是到均值的 移动&#x2F;距离 情况，所以平移是无效的，不会有b的存在</li>
</ul>
</li>
</ul>
<hr>
<p>均值方差的性质:</p>
<ul>
<li>9.6.1 X,Y是相互独立的随机变量，那么$E[XY]&#x3D;E[X][Y]$<ul>
<li>证明 就是回到 积分里，根据“独立”的定义 联合分布$f_{X,Y}(x,y)$可以拆成两个 边缘密度函数的乘积</li>
</ul>
</li>
<li>一种特别重要的情况是 $E[(X-\mu_X)(Y-\mu_Y)]&#x3D;E[X-\mu_X]E[Y-\mu_Y]&#x3D;0$</li>
</ul>
<p>9.6.2： $X_i$是n个随机变量</p>
<ul>
<li>均值 $E[\sum X_i]&#x3D;\sum E[X_i]$</li>
<li>如果随机变量相互独立，那么 $Var(\sum X_i)&#x3D;\sum Var(X_i)$<ul>
<li>这里的核心原理就是 中心矩 中间可以线性拆开，拆开的分配率会出现上面的形如$E[(X-\mu_X)(Y-\mu_y)]$的形式，这个形式在 独立时 为0<ul>
<li>例子是 X,和-X不独立，那么和为常数 方差为0</li>
</ul>
</li>
<li>如果独立+同分布, $E[\sum X_i]&#x3D;nE[X_1]$, $Var(\sum X_i)&#x3D;nVar(X_i)$</li>
</ul>
</li>
</ul>
<p>协方差（Variance）： X和Y是两个随机变量。X和Y的协方差记作$\sigma_{XY}$或$Cov(X,Y)&#x3D; E[(X-\mu_X)(Y-\mu_Y)]$</p>
<ul>
<li>特别的 $Cov(X,X)&#x3D;Var(X)$</li>
<li>$Var(\sum X_i)&#x3D;\sum Var(X_i)+\sum_{i,j} 2Cov(X_i,X_j)$</li>
<li>这里一个意义说，投资股票时，期望等于分别收益的和，而方差能描述达到这个期望的波动状态，当无关时，就是两个的方差之和，</li>
<li>一个是离散的 看5x5的离散型的不同 概率情况</li>
<li>注意： 无关&#x3D;&gt; 协方差为0,但协方差为零不表示无关<ul>
<li>离散的例子 (X,Y)&#x3D;(1,1)(2,4)(3,1) 概率都是1&#x2F;3, 画成2维图更直观<ul>
<li>E(X)&#x3D;2， E(Y)&#x3D;2,  Cov(X,Y)&#x3D;E[(X-2)(Y-2)]&#x3D;((1-2)(1-2)+(2-2)(4-2)+(3-2)(1-2))&#x2F;3&#x3D;0</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>协方差的意义？ - Charlie的回答 - 知乎 <a href="https://www.zhihu.com/question/23484126/answer/1601710771">https://www.zhihu.com/question/23484126/answer/1601710771</a></p>
<p>离散情况的例子 <a href="https://www.bilibili.com/video/BV14A41197Uz">https://www.bilibili.com/video/BV14A41197Uz</a></p>
<p>相关系数 $\rho&#x3D;\frac{Cov(X,Y)}{\sigma_X\sigma_Y} \in[-1,1]$ 描绘的是 X,Y的线性相关性的 强度</p>
<hr>
<p>偏斜度：三阶中心矩</p>
<ul>
<li>测量了分布的不对称性，正态分布偏斜度是0</li>
<li>对于单峰的密度分布函数，可以看出哪一侧有较厚，长的尾巴<ul>
<li>偏斜度负的，那么 左侧尾巴比右侧更长</li>
</ul>
</li>
</ul>
<p>峰度：四阶中心矩</p>
<ul>
<li>可以测量 正态分布的数据如何达到峰值和扁平的。</li>
<li>峰度较高会非常尖</li>
</ul>
<p>在中心极限定理中，对于随机变量之和 如何收敛到正态分布这个问题，它们发挥了关键作用</p>
<h3 id="10-工具：卷积和变量替换"><a href="#10-工具：卷积和变量替换" class="headerlink" title="10. 工具：卷积和变量替换"></a>10. 工具：卷积和变量替换</h3><p>将在19章中看到，一个分布的矩会提供与该分布性质有关的线索。 这里会让我们引入卷积</p>
<p>$f_X(x)$ 在 -1&#x2F;2~1&#x2F;2 均匀分布</p>
<p>$f_Y(x)$ 在 -1&#x2F;2~1&#x2F;2 均匀分布</p>
<p>但是 我们 无法直接获得 $f_{X+Y}$  的分布情况，因为 不知道X和Y是否独立，有什么关系，</p>
<ul>
<li>X和X,那么 -1～1均匀分布</li>
<li>X和-X, 那么就是 Prob(X&#x3D;0)&#x3D;1,变成“离散形状”</li>
<li>X和Y不相关，-1~1 单峰f_0(z)&#x3D;1 左右线性的分布函数</li>
</ul>
<p>定义10.1.1 X,Y是定义在R上两个相互独立的连续型随机变量，他们概率密度函数分别是$f_X,f_Y$,卷积记作$f_X\star f_Y$, 表达式为</p>
<p>$(f_X\star f_Y)(z)&#x3D;\int_{\infty}^{\infty}f_X(t)f_Y(z-t)dt$</p>
<p>离散型： $(f_X\star f_Y)(z)&#x3D;\sum_n f_X(x_n)f_Y(z-x_n)$</p>
<p>性质：如果连续+独立，那么有 $f_{X+Y}(z)&#x3D;(f_X\star f_Y)(z)$</p>
<ul>
<li>作为学了傅里叶很多次，离散&#x2F;连续</li>
<li>还学了生成函数，和各种其它卷积（例如狄利克雷卷积，min-max卷积）</li>
<li>那么卷积的感觉是什么呢， 新函数的 z处的值，是原来两个函数，自变量和&#x3D;z 的值的乘积的和（积分），其中 这里（自变量和&#x3D;z）在不同的 卷积要求下 可能是其它运算不是和</li>
<li>关于为什么是卷积，考虑二维的X,Y，再做45度 投影到一维还是很显然的</li>
</ul>
<p>例子 掷骰子</p>
<ul>
<li>卷积的性质，有交换律和结合律（原因主要是 卷积的运算符，是+具有交换性和结合性）</li>
<li>从而可以有多变量卷积</li>
</ul>
<hr>
<p>10.4.1 变量替换公式，设X是一个概率密度函数为$f_X$的连续型随机变量，并设存在一个区间$I\subset R$使得当$x\in I$时，$f_X(x)&#x3D;0$ 换句话说，X只有在I中取值时，其概率密度函数才能不为0, 其中I可以是整个实直线。设$g:I\to R$是一个可微函数，$h&#x3D;g^{-1}$,除了在有限多个点处的导数值可能为0外，g的导数在I中始终为正或者始终为负，如果令$Y&#x3D;g(X)$ 那么</p>
<ul>
<li>$f_Y(y)&#x3D;f_X(h(y)) |h’(y)|$</li>
<li>I 良好区间</li>
<li>有一些表达式函数是可微的</li>
<li>要么严格增加，要么严格减少，希望每个X和唯一Y有关联</li>
<li>图像或链式求导法 $h’(y)&#x3D;\frac{1}{g’(h(y))}$</li>
</ul>
<p>例子： $f_{X}(x)&#x3D;1&#x2F;2,x\in[0,2]$ 其它部分为0, $g(X)&#x3D;X^2$</p>
<ul>
<li>$I: [0,2]$</li>
<li>可微，导数g’&#x3D;2x始终正</li>
<li>$h(y)&#x3D;\sqrt{y}$,$h’(y)&#x3D;\frac{1}{2}\frac{1}{\sqrt{y}}$</li>
</ul>
<p>$f_Y(y)&#x3D;f_X(h(y))|h’(y)|&#x3D;\frac{1}{2}y^{-1&#x2F;2} f_X(\sqrt{y})&#x3D;\frac{1}{4}y^{-1&#x2F;2}$</p>
<ul>
<li>$\sqrt{y} \in I &#x3D;[0,2]$ 所以$y\in[0,4]$</li>
<li>检验可以检验积分为1</li>
<li>注意 概率密度在0趋于无穷大（但是反常积分 并没有让积分结果有问题）</li>
</ul>
<hr>
<p>证明这个公式： 核心通过累积分布函数来证明的</p>
<ul>
<li>注意导数正负 讨论，</li>
</ul>
<hr>
<p>随机变量的乘积与商，</p>
<ul>
<li>写成微积分形式，</li>
<li>也就是中间的运算控制，最终还是落到 结果的z&#x3D;运算(x,y), 那么其中积分的部分就是对应的</li>
</ul>
<h3 id="11-工具-微分恒等式"><a href="#11-工具-微分恒等式" class="headerlink" title="11. 工具: 微分恒等式"></a>11. 工具: 微分恒等式</h3><p>$\sum_{0}^\infty nx^{n-1}$ 中学阶段用的差分法，并且没有讨论收敛性</p>
<ul>
<li>现在 可以用$\sum x^n$ 的导数，同时注意讨论收敛性</li>
<li>$d&#x2F;dx (\sum {x^n})&#x3D;d&#x2F;dx(\frac{1}{1-x})$</li>
</ul>
<p>微分恒等式: $\sum_{n_{min}}^{n_{max}} f(n;a_1,\cdots,a_w)&#x3D;g(a_1,\cdots,a_w)$ 其中f,g关于a可微，如果f退化到足以保证求和与求微分的次序可以交换，那么左右关于$a_i$ 的偏微分相等</p>
<ul>
<li>这里依赖两个分析学结果：<ul>
<li>交换求和性质</li>
<li>求导次序性质</li>
</ul>
</li>
</ul>
<hr>
<p>例子：在二项分布随机变量上的应用</p>
<ul>
<li>Prob(X&#x3D;k)&#x3D;$\binom{n}{k} p^k (1-p)^{n-k}$ 其它为0</li>
</ul>
<p>问题一：一阶矩 均值 $E[X]&#x3D;\sum_{k&#x3D;0}^n k\binom{n}{k}p^k(1-p)^{n-k}$</p>
<p>一个方法（这不就是之前b站和人battle的 二元偏导与1元偏导的东西吗，这还直接用了）</p>
<ul>
<li>$p\frac{\partial}{\partial p}(\sum_{k&#x3D;0}^n\binom{n}{k}p^kq^{n-k})&#x3D;p\frac{\partial}{\partial p}((p+q)^n)$, 先二元函数求偏导</li>
<li>$p\sum_{k&#x3D;0}^n\binom{n}{k}kp^{k-1}q^{n-k})&#x3D;pn(p+q)^{n-1}$</li>
<li>$\sum_{k&#x3D;0}^n\binom{n}{k}kp^{k}q^{n-k})&#x3D;np(p+q)^{n-1}$</li>
<li>有限和，可以交换求和顺序和偏导顺序</li>
<li>带入q&#x3D;1-p</li>
<li>$E[X]&#x3D;np$ 妙啊</li>
</ul>
<p>问题二：二阶中心矩 方差 $Var(X)&#x3D;E[X^2]-E[X]^2$, 那么问题是左边这个</p>
<ul>
<li>那就二阶（多次偏导p）</li>
<li>$E[X^2]&#x3D;np+n(n-1)p^2$</li>
<li>$Var(X)&#x3D;np(1-p)$</li>
</ul>
<hr>
<p>例子 $X\sim N(\mu,\sigma^2)$ 表示X服从均值$\mu$,方差$\sigma^2$的正态分布（稍后定义？）</p>
<ul>
<li>密度函数 $f_X(x)&#x3D;\frac{1}{\sqrt{2\pi \sigma^2}}e^{-\frac{(x-\mu)^2}{2\sigma^2}}$</li>
<li>具体正态在14章讲</li>
<li>标准正态分布$N(0,1)$<ul>
<li>$M(k)&#x3D;\int_{-\infty}^{\infty} x^k \frac{1}{\sqrt{2\pi}}e^{-\frac{x^2}{2}} dx$</li>
</ul>
</li>
</ul>
<p>通过 概率密度积分总&#x3D;1,和移动sigma 进行微分恒等</p>
<hr>
<p>例子： 指数分布上应用</p>
<ul>
<li>$f_X(x)&#x3D;\frac{1}{\lambda}e^{-x&#x2F;\lambda}, x\ge 0$</li>
</ul>
<p>我们同样 利用 概率密度积分总&#x3D;1,和移动 lambda,进行微分恒等，来计算<code>E[X]</code></p>
<h2 id="第三部分-特殊分布"><a href="#第三部分-特殊分布" class="headerlink" title="第三部分 特殊分布"></a>第三部分 特殊分布</h2><p>前面都是理论的框架结构弄好了，然后从这开始，研究特殊的分布，也就是“常见”至少“习题常见”的一些具体例子的性质</p>
<p>这类分布，要先验证表达式的合法性</p>
<ul>
<li>$\in [0,1]$的概率</li>
<li>总和为1的概率</li>
</ul>
<h3 id="12-离散分布"><a href="#12-离散分布" class="headerlink" title="12. 离散分布"></a>12. 离散分布</h3><h4 id="伯努利分布，0-1-分布"><a href="#伯努利分布，0-1-分布" class="headerlink" title="伯努利分布，0-1 分布"></a>伯努利分布，0-1 分布</h4><p>Prob(X&#x3D;1)&#x3D;p, Prob(X&#x3D;0)&#x3D;1-p, $X\sim Bern(p)$</p>
<p>$E[X]&#x3D;p$</p>
<p>$Var(X)&#x3D;E[X^2]-E[X]^2&#x3D;p-p^2&#x3D;p(1-p)$</p>
<h4 id="二项分布，n次独立0-1分布"><a href="#二项分布，n次独立0-1分布" class="headerlink" title="二项分布，n次独立0-1分布"></a>二项分布，n次独立0-1分布</h4><p>$Prob(X&#x3D;k)&#x3D;\binom{n}{k}p^k(1-p)^{n-k}$, $X\sim Bin(n,p)$</p>
<p>$E[X]&#x3D;np$</p>
<p>$Var(X)&#x3D;np(1-p)$</p>
<p>在前面 微分恒等式中给过证明，在不相关变量的线性性质中也能证明E(X) 和 Var(X)</p>
<h4 id="多项分布"><a href="#多项分布" class="headerlink" title="多项分布"></a>多项分布</h4><p>多项分布与多项式系数, n次选择，每次独立的k选1,每个选中概率$p_i$</p>
<ul>
<li>$\sum_i p_i&#x3D;1$, </li>
<li>概率密度函数的系数 $\frac{n!}{x_1!x_2!\cdots x_k!} \prod p_i^{x_i}$, 也就是n次选择中 选中第i个的次数$x_i$次,其中$\sum x_i&#x3D;n$<ul>
<li>退化成 只有k&#x3D;2个可选，就是 $\frac{n!}{x_1!x_2!}p_1^{x_1}p_2^{x_2}&#x3D;\frac{n!}{t!(n-t)!}p^tq^{n-t}&#x3D;\binom{n}{t}p^t(1-p)^{n-t}$</li>
</ul>
</li>
</ul>
<p>记作$X\sim Multinomial(n,k,p_1,\cdots,p_k)$</p>
<p>那么 对于其中一个 $X_i$ 可以把其余的都看成整体（非$X_i$), 那么有 $X_i\sim Bin(n,p_i)$</p>
<ul>
<li>$E[X_i]&#x3D;np_i$</li>
<li>$Var(X_i)&#x3D;np_i)(1-p_i)$</li>
</ul>
<p>那么 $E[X],Var(X)$呢，这里没有指标对于每个X_i, 所以</p>
<h4 id="几何分布-重复到成功的0-1分布"><a href="#几何分布-重复到成功的0-1分布" class="headerlink" title="几何分布 重复到成功的0-1分布"></a>几何分布 重复到成功的0-1分布</h4><p>也就是 一直重复的独立事件，直到成功为止</p>
<p>$Prob(X&#x3D;n)&#x3D;p(1-p)^{n-1}$ 其中n是正整数</p>
<p>$X\sim Geom(p)$</p>
<p>$E[X]&#x3D;\frac{1}{p}$, 微分恒等式或者，代回法</p>
<p>$Var(X)&#x3D;\frac{1-p}{p^2}$</p>
<h4 id="负二项分布"><a href="#负二项分布" class="headerlink" title="负二项分布"></a>负二项分布</h4><p>r是正整数，随机变量X表示，恰好r次失败时，成功的次数</p>
<p>$Prob(X&#x3D;k)&#x3D;\binom{k+r-1}{k}p^{k}(1-p)^r$ </p>
<ul>
<li>这里注意的是“恰好”所以 最后一次一定要失败，那么前面k+r-1次中有k次成功</li>
<li>$X\sim NegBin(r,p)$</li>
<li>$E[X]&#x3D;\frac{pr}{1-p}$</li>
<li>$Var(X)&#x3D;\frac{pr}{(1-p)^2}$</li>
</ul>
<h4 id="泊松分布-巨大量实验只知道次数的-伯努利分布"><a href="#泊松分布-巨大量实验只知道次数的-伯努利分布" class="headerlink" title="泊松分布 巨大量实验只知道次数的 伯努利分布"></a>泊松分布 巨大量实验只知道次数的 伯努利分布</h4><p>$Prob(X&#x3D;k)&#x3D;\frac{\lambda^k e^{-\lambda}}{k!}$, n是正整数</p>
<ul>
<li>$X\sim Pois(\lambda)$</li>
<li>$E[X]&#x3D;\lambda$</li>
<li>$Var(x)&#x3D;\lambda$</li>
</ul>
<p>不知道 $p,n$, 但有个 实际成功次数 常数$\lambda &#x3D; pn$</p>
<p>$Prob(X&#x3D;k)&#x3D;\lim_{n\to \infty} \binom{n}{k}p^k(1-p)^{n-k}$</p>
<p>$&#x3D;\lim_{n\to \infty} \binom{n}{k}(\frac{\lambda}{n})^k(1-\frac{\lambda}{n})^{n-k}$</p>
<p>$\displaystyle &#x3D;\frac{\lambda^k}{k!} (\lim_{n\to \infty} \frac{n!}{(n-k)!n^k})(\lim_{n\to \infty} (1-\frac{\lambda}{n})^n) (\lim_{n\to \infty} (1-\frac{\lambda}{n})^{-k})$</p>
<p>$\displaystyle &#x3D;\frac{\lambda^k}{k!} (1^k)(e^{-\lambda}) (1^{-k})$</p>
<p>$\displaystyle &#x3D; \frac{\lambda^ke^{-\lambda}}{k!}$</p>
<h4 id="离散均匀分布"><a href="#离散均匀分布" class="headerlink" title="离散均匀分布"></a>离散均匀分布</h4><p>$Prob(X&#x3D;a)&#x3D;1&#x2F;n$</p>
<ul>
<li>如果 离散均匀分布的 特殊变量是 $a,a+1,\cdots, a+n-1$时，<ul>
<li>$E[X]&#x3D;a+\frac{n-1}{2}$, </li>
<li>$Var(X)&#x3D;\frac{n^2-1}{12}$</li>
</ul>
</li>
</ul>
<h3 id="13-连续型随机变量：均匀分布与指数分布"><a href="#13-连续型随机变量：均匀分布与指数分布" class="headerlink" title="13. 连续型随机变量：均匀分布与指数分布"></a>13. 连续型随机变量：均匀分布与指数分布</h3><h4 id="均匀分布"><a href="#均匀分布" class="headerlink" title="均匀分布"></a>均匀分布</h4><p>$f_X(x)&#x3D;\frac{1}{b-a},x\in [a,b]$</p>
<ul>
<li>$X\sim Unif(a,b)$</li>
<li>标准化$U\sim Unif(0,1)$<ul>
<li>$X&#x3D;(b-a)U+a$</li>
<li>$E[U]&#x3D;1&#x2F;2$</li>
<li>$Var(U)&#x3D;1&#x2F;12$</li>
</ul>
</li>
<li>$E[X]&#x3D;\frac{a+b}{2}$</li>
<li>$E[X]&#x3D;\frac{(b-a)^2}{12}$</li>
</ul>
<hr>
<p>复合, $X\sim Unif(0,1),Y\sim Unif(0,1)$ 相互独立</p>
<p>$Z&#x3D;X+Y$</p>
<ul>
<li>$f_Z(z)&#x3D;z,z\in[0,1]$</li>
<li>$f_Z(z)&#x3D;2-z,z\in[1,2]$</li>
<li>一个性质 在 $Prob(1&#x2F;2 \le Z \le 3&#x2F;2) &#x3D; 3&#x2F;4$</li>
</ul>
<p>概率论的一个核心结果是， “好”的独立的随机变量之和会收敛于正态分布</p>
<h4 id="指数分布"><a href="#指数分布" class="headerlink" title="指数分布"></a>指数分布</h4><p>no. of events that occur in an interval of time</p>
<p>$\lambda &#x3D;$ average no. of events in 1 unit of time</p>
<p>$\displaystyle f_X(x)&#x3D;\frac{1}{\lambda}e^{\frac{-x}{\lambda}}, x\ge 0$, time taken between 2 events occurring</p>
<ul>
<li>$X \sim Exp(\lambda)$</li>
<li>$E[X]&#x3D;\lambda$</li>
<li>$Var(X)&#x3D;\lambda^2$</li>
<li>有些教材会用 $f_X(x)&#x3D;\lambda e^{-\lambda x}$</li>
</ul>
<hr>
<p>n个 独立同分布的指数分布之和: 爱尔朗分布</p>
<ul>
<li>广泛运用于排队论中</li>
<li>$\displaystyle f_X(x)&#x3D;\frac{x^{n-1}e^{-x&#x2F;\lambda}}{\lambda^n(n-1)!}, x\ge 0$</li>
<li>$E[X]&#x3D;n\lambda$</li>
<li>$Var(X)&#x3D;n\lambda^2$</li>
<li>同样的 有些教材会是$\frac{1}{\lambda}$</li>
<li>这里 用图片说明了，随着n的增大，曲线越来越接近 正态分布</li>
</ul>
<hr>
<p>服从指数分布随机变量 例子与应用</p>
<p>球队直到下次进球的等待时间可以用指数分布逼近</p>
<ul>
<li>参数30分钟(平均30分钟进一次球)的指数分布 $f_X(x)&#x3D;\frac{1}{30}e^{-x&#x2F;30}$, 上半场没进球的概率，也就是等待时间大于45分钟<ul>
<li>$\int_{45}^\infty f_X(x) dx &#x3D; -e^{-x&#x2F;30}|_{45}^\infty&#x3D;e^{-3&#x2F;2}&#x3D;0.223$ 约为</li>
</ul>
</li>
</ul>
<p>10个独立神经元，每个神经元12毫秒激活一次动作电位，每一个都激活一次，所需的时间之和，小于100毫秒 概率是？</p>
<ul>
<li>$\lambda&#x3D;12,n&#x3D;10$ 爱尔朗分布</li>
<li>$\int_{0}^{100} \frac{x^{10-1}e^{-x&#x2F;12}}{12^{10} (10-1)!}dx &#x3D; 0.3255$ 约为</li>
</ul>
<hr>
<p>从指数分布中生成随机数</p>
<p>生成随机数的累积分布法： X随机变量，概率密度函数$f_X$,累积分布函数$F_X$, $Y\sim Unif(0,1)$</p>
<ul>
<li>$X&#x3D;F_X^{-1}(Y)$<ul>
<li>称为逆变换抽样，或者逆变换法</li>
<li>$F_X$不减少，因此逆函数也是</li>
</ul>
</li>
</ul>
<p>例如指数分布$F_x(x)&#x3D;1-e^{-x&#x2F;\lambda},x\ge 0$</p>
<ul>
<li>$x&#x3D;-\lambda \log(1-y)&#x3D;F^{-1}_X(y)$</li>
</ul>
<p>什么用呢？直接的采样一般会希望 样本的均匀，而逆变换采样希望概率的均匀</p>
<p>知乎上 一个例子是： 圆形内采样 <a href="https://zhuanlan.zhihu.com/p/622443806">https://zhuanlan.zhihu.com/p/622443806</a></p>
<ul>
<li>方案1,包裹的正方形 随机长，随机宽采样，那么会有浪费（不属于圆的点）</li>
<li>方案2,随机半径，随机角度，会发现 靠近圆心的部分采样密集，远离圆心的部分采样稀疏</li>
<li>方案3,考虑半径的环分配密度，累积要是1, 且权重和环长有关（面积的导数，保证面积均匀）<ul>
<li>累积分布函数 $CDF&#x3D;\frac{1}{R^2}x^2$</li>
<li>$CDF^{-1}(x)&#x3D;R\sqrt{x}$</li>
</ul>
</li>
</ul>
<h3 id="14-连续型随机变量：正态分布"><a href="#14-连续型随机变量：正态分布" class="headerlink" title="14. 连续型随机变量：正态分布"></a>14. 连续型随机变量：正态分布</h3><p>是最重要的分布之一，对于整个数学和科学领域都非常重要。主要因为中心极限定理（20章）</p>
<p>很多情况下，相互独立的随机变量之和都会收敛于正态分布，条件弱，许多理论和实际问题中都能得到满足</p>
<p>正态分布，高斯分布：如果随机变量X的概率密度函数是 $f_X(x)&#x3D;\frac{1}{\sqrt{2\pi \sigma^2}}e^{-\frac{(x-\mu)^2}{2\sigma^2}}$</p>
<ul>
<li>$E[X]&#x3D;\mu$</li>
<li>$Var(X)&#x3D;\sigma^2$</li>
<li>$X\sim N(\mu,\sigma^2)$</li>
<li>标准正态分布$X\sim N(0,1)$</li>
<li>图形上， $\mu$控制左右平移,$\sigma^2$控制有多尖锐</li>
</ul>
<p>令$I(\mu,\sigma)&#x3D;\int_{-\infty}^{\infty} f_X(x) dx$</p>
<p>$I(\mu,\sigma)&#x3D;I(0,1)&#x3D;1$</p>
<ul>
<li>通过经典的，两个一元不相干积分乘积变成二维</li>
</ul>
<hr>
<p>稳定分布：</p>
<ul>
<li>X,Y都是独立同分布，如果X+Y的分布和X形状相同，那么称作稳定分布</li>
</ul>
<p>服从正态分布的随机变量和之和：</p>
<ul>
<li>$X_i\sim N(\mu_i,\sigma_i^2)$是独立 的n个正态分布</li>
<li>$X_1+\cdots+X_n\sim N(\mu_1+\cdots+\mu_n,\sigma_1^2+\cdots+\sigma_n^2)$</li>
<li>这个是个激动的结论，因为以前，只说任意能保证E(X)还是和，而独立能保证Var的和，而现在又多出了一个形状还是正态形状</li>
<li>记得 均匀分布的和变成三角形的单峰函数</li>
</ul>
<hr>
<p>$\Phi(x)&#x3D;\int_{-\infty}^x \phi(x)&#x3D;\int_{-\infty}^x \frac{1}{\sqrt{2\pi}}e^{-t^2&#x2F;2}dt$</p>
<p>$\Phi(0)&#x3D;1&#x2F;2$</p>
<p>$\Phi(x)&#x3D;1&#x2F;2+\int_{0}^x\phi(t)dt$</p>
<p>$&#x3D;1&#x2F;2+\int_{0}^x\frac{1}{\sqrt{2\pi}}e^{-t^2&#x2F;2}dt$</p>
<p>$&#x3D;1&#x2F;2+\int_{0}^x\frac{1}{\sqrt{2\pi}}\sum_n \frac{1}{n!}(-\frac{t^2}{2})^n dt$</p>
<p>$&#x3D;1&#x2F;2+\frac{1}{\sqrt{2\pi}}\sum_n \frac{(-1)^n}{n!2^n} \int_{0}^x t^{2n} dt$</p>
<p>$&#x3D;1&#x2F;2+\frac{1}{\sqrt{2\pi}}\sum_n \frac{(-1)^n}{n!2^n}\frac{x^{2n+1}}{2n+1}$</p>
<p>可以近似数值计算</p>
<ul>
<li>前10项 误差 只有0.000 018 361</li>
</ul>
<p>当数学家遇到一个无法求值的积分时，就会为该积分命名</p>
<ul>
<li>误差函数 $Erf(x)&#x3D;\frac{2}{\sqrt{\pi}}\int_{0}^xe^{-t^2}dt$<ul>
<li>方差为1&#x2F;2 的正态分布的概率密度函数在0到x上的积分</li>
<li>$Prob(-2\le X\le 2)&#x3D;Erf(\sqrt{2})$</li>
<li>$\Phi(x)-\Phi(-x)&#x3D;Erf(\frac{x}{\sqrt{2}})$</li>
</ul>
</li>
</ul>
<hr>
<p>例子与中心极限定理</p>
<ul>
<li>通过 $X\to \frac{X-\mu}{\sigma}$ 来完成到$\Phi$的转换<ul>
<li>$\mu&#x3D;5,\sigma^2&#x3D;16$</li>
<li>$Prob(2 &lt; X &lt; 7)&#x3D;Prob(\frac{2-5}{4}&lt;\frac{X-5}{4}&lt;\frac{7-5}{4})&#x3D;\Phi(1&#x2F;2)-\Phi(-3&#x2F;4)$</li>
</ul>
</li>
</ul>
<h3 id="15-伽马函数与相关分布"><a href="#15-伽马函数与相关分布" class="headerlink" title="15. 伽马函数与相关分布"></a>15. 伽马函数与相关分布</h3><p>为什么要研究，很多分布，展开极限中会出现，有些看起来没出现的也要注意到$\Gamma(1&#x2F;2)&#x3D;\sqrt{\pi}$</p>
<p>若s&gt;0(R(s)&gt;0)那么 伽马函数$\Gamma(s)$</p>
<p>$\Gamma(s)&#x3D;\int_{0}^{\infty}e^{-x}x^{s-1}dx&#x3D;\int_{0}^{\infty}e^{-x}x^s\frac{dx}{x}$</p>
<p>通常积分容易出“问题”的是在零点和正负无穷大</p>
<p>性质证明：</p>
<ul>
<li>$\int_1^B e^{-x}x^{s-1}dx \le \int_1^{B} (M!x^{-M})x^{s-1}dx$</li>
<li>$&#x3D;M!\int_{1}^Bx^{s-M-1}dx$</li>
<li>$&#x3D;M!\frac{x^{s-M}}{s-M}|_1^B$</li>
<li>$&#x3D;\frac{M!}{s-M}[\frac{1}{B^{M-s}}-1]$</li>
</ul>
<p>$\int_0^1e^{-x}x^{s-1}dx\le \int_{0}^1 1 \cdot x^{s-1}dx&#x3D;\frac{1}{s}$</p>
<hr>
<p>$\Gamma(1&#x2F;2)&#x3D;\sqrt{\pi}$</p>
<ul>
<li>解析(亚纯)延拓<ul>
<li>做法要点是，给定定义在某区域上f,并把f的定义推广到更大的区域上，从而新函数g和f在f定义域上是一样的</li>
<li>例子: 等比数列求和 $\sum_{i&#x3D;0}^{\infty} r^i&#x3D;\frac{1}{1-r}$, 这个左边在$|r|&lt;1$有意义，右边在$r\neq 1$有意义，说明右边定义域比左边更广<ul>
<li>我们把右边称作左边的解析延拓</li>
</ul>
</li>
</ul>
</li>
<li>对于$\Gamma$ 可以证明$\Gamma(1)&#x3D;1,\Gamma(n)&#x3D;(n-1)\Gamma(n-1)$ 所以$n! &#x3D; \Gamma(n-1)$,是阶乘的推广<ul>
<li>除了负整数和0以外，都有定义</li>
<li>另一方面 可以用分析学研究 阶乘</li>
</ul>
</li>
</ul>
<p>$\int_{-\infty}^{\infty} e^{-x^2&#x2F;2}dx&#x3D;2\int_{0}^{\infty} e^{-x^2&#x2F;2}dx$</p>
<ul>
<li>令u&#x3D;$x^2&#x2F;2$有$x&#x3D;(2u)^{1&#x2F;2}$</li>
<li>$&#x3D;2\int_0^{\infty} e^{-u}(2u)^{-1&#x2F;2}du$</li>
<li>$&#x3D;\sqrt{2}\int_0^{\infty} e^{-u}(u)^{1&#x2F;2-1}du$</li>
<li>$&#x3D;\sqrt{2}\Gamma(1&#x2F;2)$</li>
</ul>
<p>余割等式，当s不是整数时 $\Gamma(s)\Gamma(1-s)&#x3D;\pi csc(\pi s)&#x3D;\frac{\pi}{sin(\pi s)}$</p>
<hr>
<p>Beta函数与Gamma函数</p>
<p>$B(a,b)&#x3D;\int_{0}^{1}t^{a-1}(1-t)^{b-1}dt$</p>
<ul>
<li>$a&gt;0,b&gt;0$时 $B(a,b)&#x3D;\frac{\Gamma(a)\Gamma(b)}{\Gamma(a+b)}$</li>
</ul>
<p>Beta分布 $f_{a,b}&#x3D;\frac{\Gamma(a+b)}{\Gamma(a)\Gamma(b)}t^{a-1}(1-t)^{b-1} dt,t\in[0,1]$</p>
<ul>
<li>$X\sim B(a,b)$</li>
<li>一种“更自由”的单峰函数生成器</li>
</ul>
<p>$\Gamma(1&#x2F;2)^2&#x3D;\Gamma(1&#x2F;2+1&#x2F;2)\int_{0}^1 t^{1&#x2F;2-1}(1-t)^{1&#x2F;2-1} dt&#x3D;\pi$</p>
<hr>
<p>正态分布与Gamma函数</p>
<p>标准正态分布3个重要积分</p>
<ul>
<li>概率积分&#x3D;1</li>
<li>$E[X] &#x3D; 0$</li>
<li>$Var(X)&#x3D;1$</li>
</ul>
<p>第四有用积分是2m阶矩</p>
<ul>
<li>$\mu_{2m}&#x3D;\int_{-\infty}^{\infty} x^{2m}\phi(x)dx&#x3D;(2m-1)!!$ 双阶乘的意思是，保持奇偶性隔一个取一个 <code>5!!=5 * 3 * 1, 6!!=6*4*2</code></li>
<li>$\mu_{2m}&#x3D;\frac{2^m}{\sqrt{\pi}}\Gamma(m+\frac{1}{2})$</li>
</ul>
<hr>
<p>分布族(通过引入参数的不同，得到不同“形状”的分布)</p>
<p>伽马分布与韦布尔分布： 如果随机变量X的概率密度函数是</p>
<ul>
<li>$f_{k,\sigma}(x)&#x3D;\frac{1}{\Gamma(k)\sigma^k}x^{k-1}e^{-x&#x2F;\sigma} ,x \ge 0$</li>
<li>X 服从正参数$k,\sigma$ 的伽马分布，k称为形状参数，$\sigma$称为尺度参数，记作$X\sim \Gamma(k,\sigma)$</li>
</ul>
<p>韦布尔分布:</p>
<ul>
<li>$f_{k,\sigma}(x)&#x3D;(k&#x2F;\sigma)(x&#x2F;\sigma)^{k-1}e^{-(x&#x2F;\sigma)^k}$</li>
<li>被用在和许多涉及生存分析的问题上</li>
</ul>
<hr>
<p>余割公式</p>
<p>$\Gamma(s)\Gamma(1-s)&#x3D;\int_{0}^{\infty} e^{-x}x^{s-1}dx \cdot \int_{0}^{\infty} e^{-y}y^{1-s-1} dy$</p>
<p>通过$x&#x3D;r\cos \theta,y&#x3D;r\sin \theta,dxdy&#x3D;rdrd\theta$</p>
<p>$&#x3D;\int_{0}^{\pi&#x2F;2} \frac{ctan^{s-1}\theta}{ctan\theta +1} \frac{d\theta}{sin^2\theta}$</p>
<p>通过 $u&#x3D;ctan\theta&#x3D;\cos\theta&#x2F;\sin\theta$</p>
<p>$&#x3D;\int_{0}^{\infty}\frac{u^{s-1}}{u+1}dx$</p>
<hr>
<p>柯西分布</p>
<p>上面有 $\Gamma(1&#x2F;2)^2&#x3D;\Gamma(1&#x2F;2+1&#x2F;2)\int_{0}^1 t^{1&#x2F;2-1}(1-t)^{1&#x2F;2-1} dt&#x3D;\pi csc(\pi\cdot 1&#x2F;2)&#x3D;\pi$</p>
<p>$\pi &#x3D; 2\int_{0}^{\infty} \frac{dz}{1+z^2}$</p>
<p>这里柯西分布密度函数 $f_X(x)&#x3D;\frac{1}{\pi}\frac{1}{1+x^2}$</p>
<ul>
<li>不存在均值 （不同趋近方式得到结果不同）</li>
<li>方差无穷大</li>
<li>在一些经济学理论中也起着重要的作用，随机游走假设的一个简单变体断言，</li>
<li>事实证明，柯西分布和正态分布（高斯分布），可以放在同一个具有不同参数的族中，两者都是 稳定分布(多个无关的随机变量线性组合还是同形状)</li>
</ul>
<p>广义柯西分布:</p>
<ul>
<li>$\displaystyle f_{X}(x)&#x3D;\frac{1}{b\pi}\frac{1}{1+\frac{(x-a)^2}{b^2}}$</li>
</ul>
<h3 id="16-卡方分布"><a href="#16-卡方分布" class="headerlink" title="16. 卡方分布"></a>16. 卡方分布</h3><p>总是在假设检验中出现</p>
<p>$\displaystyle f(x)&#x3D;\frac{1}{2^{v&#x2F;2}\Gamma(v&#x2F;2)}x^{v&#x2F;2-1}e^{-x&#x2F;2}, x\ge 0$</p>
<ul>
<li>记作 $X\sim \chi^2(v)$</li>
<li>每选择一个$v$ 都会得到一个不同的分布</li>
<li>随着v正整数增加，突起向右移动</li>
<li>自由度：v, 正式定义为统计学中可以自由变化的数值个数，N个观测值，那么自由度通常是N-1或N</li>
<li>很多假设检验的检验统计量在原假设下服从卡方分布，适用于分类数据，</li>
<li>优点：它是一个非参数检验，意味着对数据总体分布没有任何假设</li>
<li>缺点：比其它参数检验统计效果差</li>
<li>卡方分布与正态分布之间的关联：$X\sim N(0,1)$，那么$X^2\sim \chi^2(1)$</li>
</ul>
<p><img data-src="https://bkimg.cdn.bcebos.com/pic/0b7b02087bf40ad11e5f5a4e572c11dfa8eccee0?x-bce-process=image/format,f_auto/watermark,image_d2F0ZXIvYmFpa2UyNzI,g_7,xp_5,yp_5,P_20/resize,m_lfit,limit_1,h_1080" alt="卡方分布"></p>
<hr>
<p>特别的对于v&#x3D;1,也就是$X\sim \chi^2(1)$</p>
<ul>
<li>$E[X]&#x3D;1$</li>
<li>$Var(X)&#x3D;2$</li>
</ul>
<hr>
<p>卡方分布 与 服从正态分布的随机变量直和：设k是一个正整数，$X_1,\cdots,X_k$是相互独立且均服从标准正态分布的随机变量，这意味着 $X_i\sim N(0,1)$, 如果$Y_k&#x3D;\sum_{i&#x3D;1}^k {X_i}^2, Y_{k}\sim \chi^2(k)$$</p>
<ul>
<li>再换句话说 ，独立的 卡方分布 的 随机变量之和 ，服从 $k&#x3D;\sum k_i$ 的卡方分布</li>
</ul>
<p>变量替换定理：V和W是R^k中有界开集，映射$h:V\to W$, 即是一一对应的，又是映上的</p>
<ul>
<li>$h(u_1,\cdots,u_k)&#x3D;(h_1(u_1,\cdots,u_k),\cdots,h_k(u_1,\cdots,u_k))$</li>
<li>设$f: W\to R$ 是一个连续有界的函数<ul>
<li>$\int\cdots\int_W f(x_1,\cdots,x_k)dx_1\cdots dx_k$</li>
<li>&#x3D;$\int\cdots\int_V f(h(u_1,\cdots,u_k)) J(u_1,\cdots,u_k) du_1\cdots du_k$<ul>
<li>其中$J$是雅可比行列式，也就是 $J_{i行,j列}&#x3D;\frac{\partial h_i}{\partial u_j}$ 偏导矩阵的行列式</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="第四部分-极限定理"><a href="#第四部分-极限定理" class="headerlink" title="第四部分 极限定理"></a>第四部分 极限定理</h2><h3 id="17-不等式和大数定律"><a href="#17-不等式和大数定律" class="headerlink" title="17. 不等式和大数定律"></a>17. 不等式和大数定律</h3><p>如果 只知道 <code>E[X]</code>,不可能得到$Prob(X\ge a)$ 的 “不平凡”边界</p>
<p>马尔可夫不等式（基于全正+均值的基础信息），X是一个均值有限的非负随机变量，均值为$E[X]$(意味着 Prob(X&lt; 0)&#x3D;0), 那么对于任意正数a有</p>
<ul>
<li>$Prob(X\ge a)\le \frac{E[X]}{a}$</li>
<li>如果X是一个有单位量，那么左右都是纯数，很好，像概率</li>
<li>$Prob(X\ge a)&#x3D;\int_{x&#x3D;a}^{\infty} f_X(x)dx$</li>
<li>$&#x3D;\int_{x&#x3D;a}^{\infty} 1\cdot f_X(x)dx$</li>
<li>$\le \int_{x&#x3D;a}^{\infty} \frac{x}{a} \cdot f_X(x)dx$</li>
<li>$&#x3D;\frac{1}{a} \le \int_{x&#x3D;a}^{\infty} x \cdot f_X(x)dx$</li>
<li>$&#x3D;\frac{1}{a} E[X]$</li>
</ul>
<p>变形：X非负随机变量，均值$E[X]$有限,</p>
<ul>
<li>$Prob(X\ge lE[X])\le \frac{1}{l}$</li>
<li>这是我们利用“有限”信息得到的最好结果</li>
</ul>
<hr>
<p>切比雪夫不等式(Chebnyshev)</p>
<ul>
<li>马尔可夫不等式，使用了一个输入来限制概率，即随机变量的均值，这是不够的，而且还要求随机变量非负</li>
<li>本章要一个更好的不等式（通过依靠更多信息）</li>
<li>根据 对于分布的研究，$E[X]$是一阶矩，Var(X)是二阶中心矩，很自然的希望能把基础信息增加一个 Var(X)</li>
<li>X是随机变量,$\mu_X&#x3D;E[X],\sigma^2_X&#x3D;Var(X)$都是有限的，对于任意k&gt;0有</li>
<li>$Prob(|X-\mu_X|\ge k\sigma_{X})\le \frac{1}{k^2}$<ul>
<li>自然语言，(((随机变量 与 均值)的距离) 超过 (k倍 标准差) )的 概率 不超过$1&#x2F;k^2$</li>
</ul>
</li>
<li>k 越大 ，限制的范围越小</li>
<li>$&#x3D;\int_{x:|x-\mu_x|\ge k_{\sigma_X}} 1\cdot f_X(x)dx$</li>
<li>$\le \int_{x:|x-\mu_x|\ge k_{\sigma_X}} (\frac{x-\mu_X}{k\sigma_X})^2\cdot f_X(x)dx$</li>
<li>$&#x3D;\frac{1}{k^2{\sigma^2_X}} \int_{x:|x-\mu_x|\ge k_{\sigma_X}} (x-\mu_X)^2\cdot f_X(x)dx$</li>
<li>$&#x3D;\frac{1}{k^2{\sigma^2_X}}\int_{-\infty}^{\infty} (x-\mu_X)^2\cdot f_X(x)dx$</li>
<li>$&#x3D;\frac{1}{k^2}$</li>
<li>另一个好处是没有对于X要正的上定义的限制了</li>
</ul>
<p>我觉得一点之前我卡住的点现在想通了</p>
<ul>
<li>之前以为这个玩意能“消灭可能性”，然而这两个全是模型概率，并不能消灭可能性</li>
<li>可能之前有些书上写的是“准确度”，但是这个 词的 中文理解 出了 数学偏差</li>
</ul>
<hr>
<p>例子：正态分布上$X\sim N(0,1)$</p>
<ul>
<li>$|X|\ge 2,5,10$ 通过切比雪夫的得到的概率是 25%, 4%,1%</li>
<li>然而 通过积分得到的是 4.55%,0.0000573%,1.52x10^{-21}%<ul>
<li>注意到差距非常大</li>
<li>因为 切比雪夫的条件很弱（只用了 EX Var(X)), 可能只是个很远的上界</li>
</ul>
</li>
<li>又举例了$X\sim Unif(0,1),X\sim Exp(1)$<ul>
<li>都可以看到，马尔可夫更宽松，切比雪夫稍微近了一些，但都和实际的值有着差距</li>
</ul>
</li>
</ul>
<hr>
<p>布尔Boole不等式，与邦弗伦尼Bonferroni不等式</p>
<p>把精确的容斥方法，截断：</p>
<p>布尔不等式：</p>
<ul>
<li>$Prob(\cup A_i)\le \sum Prob(A_i)$</li>
</ul>
<p>Bonferroni 不等式：</p>
<ul>
<li>(截断到偶数个的$\sum$) $\le$ 真实概率 $\le$ 截断到奇数个的$\sum$<ul>
<li>这里的截断就是按照 容斥原理中，所选性质的个数 为指标</li>
</ul>
</li>
<li>那么 Boole不等式，不过是 截断到1个时候的情况</li>
<li>用途就是，不需要完全计算，可以大约的得到一个上下界</li>
</ul>
<hr>
<p>弱大数定律和大数定律之前，描述不同的收敛类型</p>
<p>依分布收敛（弱收敛）： $X_i\cdots$ 是随机变量，对应累积分布函数$F_i\cdots$, C是F的连续点构成的实数集，</p>
<ul>
<li>若$\lim_{n\to \infty} F_n(x)&#x3D;F(x)$对于所有$x\in C$均成立，</li>
<li>那么随机变量序列$X_i\cdots$ 依分布收敛（弱收敛）</li>
<li>换句话说，如果F在x处是连续的，那么累积分布函数列在x处的极限就等于F(x)<ul>
<li>结论通常被记作$X_n\xrightarrow[]{d} X$或者$X_n\xrightarrow[]{D} X$</li>
<li>$X_n\xrightarrow[]{d}N(0,1)$ 表示收敛于一个服从标准正态分布的随机变量</li>
</ul>
</li>
<li>例子：<ul>
<li>离散的 $f_n(x)&#x3D;1&#x2F;n, x\in${0,1&#x2F;n,2&#x2F;n,…,(n-1)&#x2F;n}</li>
<li>观察它的 CDF 是阶梯形状的函数</li>
<li>$\lim_{n\to \infty}F_n(x)&#x3D;x$</li>
<li>$X_n \xrightarrow[]{d} Unif(0,1)$</li>
</ul>
</li>
<li>感觉是 要点点收敛<ul>
<li>但是例子 $Prob_n(x&#x3D;1&#x2F;n)&#x3D;1$ 的极限是 $F(x)&#x3D;1, x&gt;0$, 注意这里是&gt;0而不是$\ge 0$,不是一个分布函数？（要求右连续？）</li>
<li>那么希望的是 $F(x)&#x3D;1,x\ge 0$, 所以这里弱收敛 抛开了间断点，比点点收敛要弱</li>
</ul>
</li>
</ul>
<hr>
<p>依概率收敛: $X_i\cdots$ 都是随机变量，对于 任意$\epsilon &gt; 0$ 都有</p>
<ul>
<li>$\lim_{n\to \infty} Prob(|X_n-X|\ge \epsilon)&#x3D;0$</li>
<li>那么说依概率收敛到 $X_n\xrightarrow[]{p} X$, 或者 $X_n\xrightarrow[]{P} X$, </li>
<li>常数分布：$\delta_c:$  Prob(X&#x3D;c)&#x3D;1, </li>
<li>$X_n\sim N(1234,1&#x2F;n^2)$<ul>
<li>有结果$X_n\xrightarrow[]{p} \delta_{1234}$</li>
<li>切比雪夫不等式 上场的时候了</li>
</ul>
</li>
</ul>
<hr>
<p>需要分析学</p>
<p>几乎必然收敛：$(\Omega,F,Prob)$是一个概率空间，$X_i,\cdots$ 都是随机变量</p>
<ul>
<li>如果 $Prob(\omega \in \Omega: \lim_{n\to \infty} X_n(\omega)&#x3D;X(\omega))&#x3D;1$</li>
<li>几乎必然收敛（或者几乎处处收敛，或者 以概率1 收敛于X）</li>
</ul>
<p>必然收敛：$(\Omega,F,Prob)$是一个概率空间，$X_i,\cdots$ 都是随机变量</p>
<ul>
<li>如果 $\lim_{n\to \infty} X_n(\omega)&#x3D;X(\omega)$</li>
<li>必然收敛</li>
</ul>
<hr>
<p>弱大数定律与强大数定律</p>
<p>对于 随机变量$X_1\cdots X_n$,令$\bar{X_n}&#x3D;\frac{\sum {X_i}}{n}$</p>
<ul>
<li>中心极限定理（20.2.2） 指出， 适当假设下</li>
<li>$Z_n&#x3D;(\bar{X_n}-E[\bar{X_n}])&#x2F;StDev(\bar{X_n})$ 会收敛于正态分布</li>
<li>假设 同分布，均值有限</li>
</ul>
<p>弱大数定律：</p>
<ul>
<li>$X_i\cdots$ 独立同分布随机变量，均值$\mu$, $\bar{X_n}&#x3D;\frac{\sum {X_i}}{n}$<ul>
<li>那么 $\bar{X_n}\xrightarrow[]{p}\mu$ 依概率收敛于$\mu$</li>
<li>证明：<ul>
<li>$E[\bar{X_n}]&#x3D;\mu$</li>
<li>$Var(\bar{X_n})&#x3D;\frac{\sigma^2}{n}$</li>
<li>切比雪夫可以控制 到$\mu$</li>
</ul>
</li>
</ul>
</li>
<li>强大数定律：<ul>
<li>其它和 弱大数定律一致，前提都一致，</li>
<li>区别是 弱大数定律是 依概率收敛，而强大数定律是几乎处处收敛</li>
</ul>
</li>
</ul>
<h3 id="18-斯特林公式"><a href="#18-斯特林公式" class="headerlink" title="18. 斯特林公式"></a>18. 斯特林公式</h3><p>前面研究了 阶乘 与 gamma函数的关系</p>
<p>当n较大时，$n! \sim n^ne^{-n}\sqrt{2\pi n}$</p>
<ul>
<li>或者说$\lim_{n\to \infty} \frac{n!}{n^ne^{-n}\sqrt{2\pi n}}&#x3D;1$</li>
<li>再准确些 $n!&#x3D;n^ne^{-n}\sqrt{2\pi n} (1+\frac{1}{12n}+\frac{1}{288n^2}\cdots)$</li>
</ul>
<p>正反面抛硬币，2n次的期望次数是n,随着n增大也是$E[X]&#x3D;n$ 但是另一方面，Prob(X&#x3D;n) 趋于0</p>
<ul>
<li>标准差是 $\sqrt{n&#x2F;2}$ 意味着，均值“窗口”也在增长</li>
<li>Prob(X&#x3D;n)&#x3D;$\binom{2n}{n}(1&#x2F;2)^n(1&#x2F;2)^n$<ul>
<li>$约为 \frac{1}{\sqrt{\pi n}}$ 用斯特林公式替换掉前面的binom</li>
</ul>
</li>
</ul>
<p>引理 18.3.1 对于任意$\epsilon \le 1&#x2F;9$, $|k|\le (2N)^{1&#x2F;2+\epsilon}$ 时，如果$N\to \infty$, 那么有</p>
<ul>
<li>$(1+\frac{K}{N})^{N+\frac{1}{2}+k}(1-\frac{K}{N})^{N+\frac{1}{2}-k} \to e^{k^2&#x2F;N}e^{O(N^{-1&#x2F;6})}$</li>
<li>对 $log(1+x)$的泰勒展开</li>
<li>$\binom{2N}{N+k}\frac{1}{2^{2N}}$ 约等于 $\frac{2}{\sqrt{2\pi (2N)}} e^{-(2k)^2&#x2F;2(2N)}$<ul>
<li>独立同分布的泊松分布之和 服从 正态分布</li>
</ul>
</li>
</ul>
<hr>
<p>较弱斯特林公式, $n\ge 3$</p>
<ul>
<li>$n^ne^{-n}e\le n!\le n^ne^{-n}en$<ul>
<li>证明 log n! 的展开 与 积分上下限</li>
</ul>
</li>
</ul>
<hr>
<p>静态相位法：</p>
<ul>
<li>确定对于 Gamma函数定义，对于被积部分确定最大值，变成基于最大值的展开式</li>
<li>展开式代换</li>
</ul>
<h3 id="19-生成函数与卷积"><a href="#19-生成函数与卷积" class="headerlink" title="19. 生成函数与卷积"></a>19. 生成函数与卷积</h3><p>服从泊松分布的随机变量之和： n个独立随机变量，分别服从泊松分布的系数$\lambda_i$</p>
<ul>
<li>它们的和 服从 $\sum \lambda_i$的泊松分布</li>
</ul>
<p>定义19.2.1 生成函数, $G_a(s)&#x3D;\sum_{i&#x3D;0}^{\infty} a_is^i$,其中s是使这个和收敛的任意数</p>
<ul>
<li>Fib为例:<ul>
<li>$G_{fib}&#x3D;\sum_{i&#x3D;0}^{\infty} F_is^i$</li>
<li>$G&#x3D;s+sG+s^2G$</li>
<li>G&#x3D;$\frac{s}{1-s-s^2}$</li>
<li>$F_n&#x3D;\frac{1}{\sqrt{5}}(\frac{1+\sqrt{5}}{2})^n-\frac{1}{\sqrt{5}}(\frac{1-\sqrt{5}}{2})^n$ 比内公式</li>
<li>这里还给了矩阵乘法 特征根的 内容</li>
</ul>
</li>
<li>定理19.3.1 序列生成函数的唯一性<ul>
<li>在$|s| &lt; \delta$ 使得序列收敛，两个序列系数对应相等 当且仅当 在 收敛范围内生成函数带入后值全部相等</li>
</ul>
</li>
<li>离散型随机变量的卷积：<ul>
<li>序列卷积</li>
<li>一个重要结论 生成函数 展开后 互相卷积的结果的生成函数 &#x3D; 两个原函数的乘积<ul>
<li>这在简化数学运算 很有用，一些算法竞赛里也很有用</li>
<li>$G(s)&#x3D;G_a(s)G_b(s)$</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>注意到之前的 随机变量之和的过程 是卷积</p>
<ul>
<li>这里定义概率生成函数, 对于离散型</li>
<li>$G_X(s)&#x3D;\sum_{m&#x3D;-\infty}^{\infty} s^m Prob(X&#x3D;m)$</li>
<li>那么有了 结论 针对 独立 离散变量</li>
<li>$G_{\sum X_i}(s)&#x3D;\prod G_{X_i}(s)$<ul>
<li>独立离散随机变量，和的概率密度函数 是 各个随机变量概率的卷积</li>
</ul>
</li>
</ul>
<hr>
<p>连续型</p>
<p>概率生成函数$G_X(s)&#x3D;\int_{-\infty}^{\infty} s^xf(x)dx$</p>
<p>例子 指数生成函数 $G_X(s)&#x3D;\int_0^{\infty} s^x \frac{1}{\lambda} e^{-x&#x2F;\lambda} dx&#x3D;\frac{1}{1-\lambda \log s}$</p>
<p>函数卷积 $f\star g(x)&#x3D;\int_{-\infty}^{\infty} f(t)g(x-t)dt$</p>
<ul>
<li>$G_{f\star g}&#x3D;G_{g\star f}&#x3D;G_f\cdot G_g$</li>
</ul>
<hr>
<p>矩母函数的定义与性质</p>
<p>首先 $G_a(s)&#x3D;\sum_{i&#x3D;0}^{\infty}a_is^i$, 反过去有 $a_t&#x3D;\frac{1}{t!}\frac{d^t}{ds^t}(G_a(s))$</p>
<ul>
<li>矩母函数 不含 $\frac{1}{t!}$这样的东西</li>
</ul>
<p>定义19.6.1 矩, X是一个概率密度函数为f的随机变量，</p>
<ul>
<li>如果X是离散的，并且仅当取$x_m$时概率不为0,那么它的k阶矩$\mu_k’$被定义为<ul>
<li>$\mu_k’&#x3D;\sum_{i&#x3D;0}^{\infty} x_i^kf(x_i)$</li>
</ul>
</li>
<li>如果X是连续的<ul>
<li>$\mu_k’&#x3D;\int_{-\infty}^{\infty} x^kf(x)dx$</li>
</ul>
</li>
<li>$\mu_k’&#x3D; E[X^k]$</li>
<li>k阶中心矩$\mu_k&#x3D;E[(X-\mu_1’)^k]$</li>
</ul>
<p>19.6.2 矩母函数:</p>
<ul>
<li>$M_X(t)&#x3D;E[e^{tX}]&#x3D;G_X(e^t)$<ul>
<li>$G_X(s)&#x3D;M_X(\log s)$</li>
</ul>
</li>
<li>离散的 $&#x3D;\sum_{i&#x3D;-\infty}^{\infty} (e^{t})^{x_i}f(x_i)$</li>
<li>连续的 $&#x3D;\int_{-\infty}^{\infty} e^{tx}f(x)dx$</li>
<li>也就是 还是卷积的思想，不过 把$s$写作$e^t$</li>
</ul>
<p>19.6.3 X随机变量, 矩$\mu_k’$</p>
<ul>
<li>$M_X(t)&#x3D;1+\mu_1’t+\frac{\mu_2’t^2}{2!}+\frac{\mu_3’t^3}{3!}+\cdots$<ul>
<li>$\mu_k’&#x3D;d^k&#x2F;dt^k (M_X(t)) |_{t&#x3D;0}$</li>
</ul>
</li>
<li>a,b是常数<ul>
<li>$M_{aX+b}(t)&#x3D;e^{bt}M_X(at)$</li>
</ul>
</li>
<li>独立变量:<ul>
<li>$M_{\sum X_i}(t)&#x3D;\prod M_{X_i}(t)$</li>
</ul>
</li>
</ul>
<p>19.6.5 离散型随机变量矩母函数唯一性</p>
<ul>
<li>X,Y 取非负整数时 概率才不为0,离散型随机变量，矩母函数在 $|t|&lt;\delta$ 时收敛</li>
<li>X和Y同分布 &lt;&#x3D;&gt; 存在r&gt;0 矩母函数相等</li>
</ul>
<p>然而 对于连续型并没有这么美好</p>
<ul>
<li>存在不同的概率分布，有相同的矩<ul>
<li>$f(x)&#x3D;\frac{1}{\sqrt{2\pi x^2}}e^{-(\log^2 x)&#x2F;2}$</li>
<li>$g(x)&#x3D;f(x)[1+\sin(2\pi \log x)]$</li>
<li>函数图像明显的差异</li>
<li>再来 $h(x)&#x3D;e^{-1&#x2F;x^2}$ 它在0的任意阶导数都是0</li>
</ul>
</li>
<li>离散型的生成函数是唯一的，但连续型的不是<ul>
<li>参阅 复分析与中心极限定理</li>
</ul>
</li>
</ul>
<h3 id="20-中心极限定理的证明"><a href="#20-中心极限定理的证明" class="headerlink" title="20. 中心极限定理的证明"></a>20. 中心极限定理的证明</h3><p>中心极限定理(CLT) 概率论中真正的瑰宝之一</p>
<ul>
<li>假设弱：条件容易满足</li>
<li>结果普遍性</li>
</ul>
<p>如果存在一些独立同分布的“好”随机变量$X_i$ 并且它们的均值是$\mu$ 且标准差是$\sigma$, </p>
<ul>
<li>那么标准化随机变量$Z_n&#x3D;\frac{(\sum X-i)-n\mu}{\sigma \sqrt{n}}$, $E[Z_n]&#x3D;0,Var(Z_n)&#x3D;1$</li>
<li>会收敛于 N(0,1), 如何收敛（会取决于假设）</li>
<li>$M_X(t)&#x3D;E[e^{tX}]&#x3D;\int_{-\infty}^{\infty} e^{tx}f_X(x)dx&#x3D;\sum_{n&#x3D;0}^{\infty} \frac{\mu_n’t^n}{n!}$</li>
<li>$M_X(0)&#x3D;1$ <ul>
<li>大多数时候 0的邻域内存在， $\delta &gt;0, |t| &lt; \delta$时$M_X(t)$收敛，（柯西分布不存在）</li>
</ul>
</li>
<li>f,g连续，对于所有h满足 int hf &#x3D; int hg,那么f,g相等<ul>
<li>反证 如果某点不等，通过平移切割可以切割出一个邻域相差足够量的值， 对应区间可以取值，其它区间全0，可以使得 左右积分足量不等</li>
<li>但这个性质使用上难点是如何尽量少和尽量容易计算的h的选取来完成“测试”</li>
</ul>
</li>
</ul>
<hr>
<p>正态分布 高斯分布：$f(x)&#x3D;\frac{1}{\sqrt{2\pi \sigma^2}}e^{-(x-\mu)^2&#x2F;(2\sigma^2)}$</p>
<p>CLT中心极限定理： 独立同分布随机变量 $X_i$, 矩母函数$M_X(t)$, 在领域$|t| &lt; \delta$中收敛</p>
<ul>
<li>$\bar{X_N}&#x3D;\frac{X_1+\cdots+X_N}{N}$</li>
<li>$Z_N&#x3D;\frac{\bar{X_N}-\mu}{\sigma &#x2F; \sqrt{N}}$</li>
<li>那么$N\to \infty$时，$Z_N$收敛于$N(0,1)$<ul>
<li>基本形状决定了正态分布的收敛速度 贝里-埃森定理</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>E[X] 均值</li>
<li>Var(X) 越大，概率密度函数分布越分散</li>
<li>标准差 $StDev(X)&#x3D;\sqrt{Var(X)}$, 对于单位系统 是同单位的</li>
</ul>
<p>例子：</p>
<ul>
<li>同样学生，同样内容，两个试卷</li>
<li>试卷1 94分，但是班级 E[X]&#x3D;97 StDev(X)&#x3D;1</li>
<li>试卷2 84分，但是班级 E[X]&#x3D;64 StDev(X)&#x3D;10</li>
<li>会认为第二个更优秀</li>
</ul>
<p>随机变量标准化 $Z&#x3D;\frac{X-E[X]}{StDev(X)}&#x3D;\frac{X-\mu}{\sigma}$</p>
<ul>
<li>从而 $E[Z]&#x3D;0,Var(Z)&#x3D;1,StDev(Z)&#x3D;1$</li>
</ul>
<hr>
<p>矩母函数相关结果</p>
<ul>
<li>正态分布$X\sim N(\mu,\sigma), M_X(t)&#x3D;e^{\mu t+\frac{\sigma^2t^2}{2}}$<ul>
<li>特别的$X\sim N(0,1),M_X(t)&#x3D;e^{t^2&#x2F;2}$</li>
</ul>
</li>
</ul>
<p>20.5.4 矩母函数收敛 -&gt; CDF 累积分布函数由 矩母函数给出，且 CDF收敛</p>
<ul>
<li>建立了 同时收敛的 的关系</li>
</ul>
<hr>
<p>例子： 泊松分布 $Prob(X&#x3D;k)&#x3D;\frac{\lambda^k e^{-\lambda}}{k!}$, n是正整数</p>
<ul>
<li>$X\sim Pois(\lambda)$</li>
<li>$E[X]&#x3D;\lambda$</li>
<li>$Var(x)&#x3D;\lambda$</li>
</ul>
<p>$M_X(t)&#x3D;1+\mu t+\frac{\mu_2’t^2}{2!}+\cdots &#x3D; e^{\lambda(e^t-1)}$</p>
<ul>
<li>$\mu&#x3D;\lambda$一阶导,令t&#x3D;0</li>
<li>$\mu_2’&#x3D;\lambda+\lambda^2$ 2阶导,令t&#x3D;0<ul>
<li>$\sigma^2&#x3D;E[X^2]-E[X]^2&#x3D;\lambda$</li>
</ul>
</li>
<li>$E[\bar{X}]&#x3D;\lambda$</li>
<li>$Var(\bar{X})&#x3D;\frac{\sigma^2}{N}&#x3D;\frac{\lambda}{N}$</li>
<li>$Z_n&#x3D;\frac{\bar{X_N}-E[\bar{X_N}]}{StDev(\bar{X_N})}$<ul>
<li>$&#x3D;\frac{\sum X_i-N\mu}{\sigma\sqrt{N}}$</li>
</ul>
</li>
<li>$M_{Z_n}(t)&#x3D;M_{\sum \frac{X_i-\mu}{\sigma\sqrt{N}}}(t)$</li>
<li>$&#x3D;\prod_N M_{\frac{X_i-\mu}{\sigma\sqrt{N}}}(t)$</li>
<li>$&#x3D;(M_{\frac{X_i-\mu}{\sigma\sqrt{N}}}(t))^N$</li>
<li>$&#x3D;(e^{\frac{-\mu t}{\sigma \sqrt{N}}} M_X(\frac{t}{\sigma\sqrt{N}}))^N$ 矩母函数 中随机变量线性变换时的性质 19.6.3</li>
<li>$&#x3D;(e^{\frac{-\mu t}{\sigma \sqrt{N}}} e^{\mu (e^{\frac{t}{\sigma\sqrt{N}}}-1)})^N$ 使用 泊松分布的矩母函数</li>
<li>$&#x3D;e^{\frac{-\mu t \sqrt{N}}{\sigma}} e^{\mu N (e^{\frac{t}{\sigma\sqrt{N}}}-1)}$ 使用 泊松分布的矩母函数</li>
<li>$&#x3D;e^{\frac{-\mu t \sqrt{N}}{\sigma}} e^{\mu N (\frac{t}{\sigma\sqrt{N}}+\frac{1}{2}(\frac{t}{\sigma\sqrt{N}})^2+O(\frac{t^3}{N\sqrt{N}}) )}$ 带O的 泰勒展开</li>
<li>$&#x3D;e^{\mu N (\frac{1}{2}(\frac{t}{\sigma\sqrt{N}})^2+O(\frac{t^3}{N\sqrt{N}}) )}$刚好第一项抵消</li>
<li>$&#x3D;e^{\frac{\mu t^2}{2\sigma^2}+O(\frac{t^3}{\sqrt{N}} )}$ 展开</li>
<li>$&#x3D;e^{\frac{t^2}{2}+O(\frac{t^3}{\sqrt{N}} )}$ 带入具体的mu和sigma</li>
</ul>
<p>N足够大，那么就是趋于 正态分布的矩母函数，从而CDF趋于正态分布</p>
<ul>
<li>其中大O的部分 控制了收敛速度</li>
</ul>
<hr>
<p>更一般的 $\displaystyle M_{Z_N}(t)&#x3D;\prod_{n&#x3D;1}^N e^{-\frac{\mu t}{\sigma \sqrt{N}}} M_X(\frac{t}{\sigma \sqrt{N}}) &#x3D; e^{-\frac{\mu t \sqrt{N}}{\sigma}} (M_X(\frac{t}{\sigma \sqrt{N}}))^N$</p>
<ul>
<li>上面的过程在这里 具体带入了$M_X$</li>
<li>而如果不知道具体的$M_X$呢</li>
</ul>
<p>$\displaystyle \log M_{Z_N}(t)&#x3D; -\frac{\mu t \sqrt{N}}{\sigma} + N \log M_X(\frac{t}{\sigma \sqrt{N}})$</p>
<p>因为 $\log M_X(t)&#x3D; \log (1+\mu t+\frac{\mu_2’t^2}{2!}+\cdots)$</p>
<ul>
<li>$&#x3D;\log (1+t(\mu+\frac{\mu_2’t}{2!}+\cdots))$</li>
<li>$&#x3D;t(\mu+\frac{\mu_2’t}{2!}+\cdots)) - \frac{t(\mu+\frac{\mu_2’t}{2!}+\cdots))^2}{2} + \cdots$, 对于 log(1+x)展开</li>
<li>$&#x3D;\mu t + \frac{\mu_2’-\mu^2}{2}t^2+ t^3$或更高次项</li>
<li>$&#x3D;\mu t + \frac{\sigma^2}{2}t^2+ t^3$或更高次项</li>
</ul>
<p>所以 $\displaystyle -\frac{\mu t \sqrt{N}}{\sigma} + N \log M_X(\frac{t}{\sigma \sqrt{N}})$</p>
<p>$\displaystyle &#x3D; -\frac{\mu t \sqrt{N}}{\sigma} + N (\frac{t}{\sigma \sqrt{N}}+\frac{\sigma^2}{2}(\frac{t}{\sigma \sqrt{N}})^2+(\frac{t}{\sigma \sqrt{N}})^3项或N次数更低项)$</p>
<p>$\displaystyle &#x3D; \frac{t^2}{2} + O(N^{-1&#x2F;2})$</p>
<p>而什么时候能抛弃O,也就是 在 0的领域内能收敛</p>
<hr>
<p>积分学最大的谎言之一就是你可以求出积分，具体说可以找到漂亮表达式</p>
<p>中心极限定理 重要应用之一：蒙特卡罗法</p>
<ul>
<li>以极高精度确定高维积分</li>
<li>最早用途是试图了解如何制造原子弹</li>
</ul>
<p>核心思想：</p>
<ul>
<li>面积 约为 $\frac{落在区域内个数}{总次数} * 包裹面积$，包裹可以用长方形正方形方便计算</li>
<li>概率论性质，随着样本增大$\bar{X_N}$ 趋于 $E[面积]&#x3D;实际面积, Var[面积] &#x3D; \sqrt{面积(1-面积)}&#x2F;\sqrt{N}$ 的正态分布，也就是方差在不断缩小</li>
</ul>
<h3 id="21-傅里叶分析与中心极限定理"><a href="#21-傅里叶分析与中心极限定理" class="headerlink" title="21. 傅里叶分析与中心极限定理"></a>21. 傅里叶分析与中心极限定理</h3><p>引子: $f(x)&#x3D;\frac{C}{1+x^8}$,显然 积分有限，选取合适的C可以变成概率密度函数</p>
<ul>
<li>但显然&gt;&#x3D;8偶阶矩无穷大，所以矩母函数不存在，原点附近不收敛，所以满足前面中心极限定理的条件</li>
<li>Mandelbrot关于金融和大宗商品市场分形特性的研究中，柯西分布就会出现</li>
<li>虽然 独立同分布 柯西分布不会趋于 正态分布</li>
<li>但是这个f可以</li>
</ul>
<p>剧透：核心是 有限的 <code>E[X],Var(X)</code></p>
<ul>
<li>方法是研究密度函数的傅里叶变换，概率论中被称为特征函数</li>
<li>与矩母函数不同，特征函数总是存在（存在性 更好）</li>
</ul>
<p>构造函数到函数的映射 $(\mathcal{K}f)(y)&#x3D;\int_I f(x)K(x,y)dx$</p>
<p>特别的$K(t,s)&#x3D;e^{-ts}$记作拉普拉斯变换</p>
<ul>
<li>$(\mathcal{L}f)(x)&#x3D;\int_{0}^{\infty} f(t)e^{-tx}dt$</li>
<li>逆变换 $(\mathcal{L^{-1}}g)(x)&#x3D;\lim_{T\to \infty}\frac{1}{2\pi i} \int_{c-i T}^{c+i T} e^{tx}g(t)dt$<ul>
<li>逆变换 $(\mathcal{L^{-1}}g)(x)&#x3D;\lim_{T\to \infty}\frac{1}{2\pi i} \int_{-T}^{T} e^{(c+ti)x}g(c+ti)idt$</li>
</ul>
</li>
</ul>
<p>特别的$K(t,s)&#x3D;e^{-2\pi i ts}$记作傅里叶变换</p>
<ul>
<li>$(\mathcal{F}f)(y)&#x3D;\hat{f}(y)&#x3D;\int_{-\infty}^{\infty} f(x)e^{-2\pi i xy}dx$</li>
<li>逆变换$(\mathcal{F^{-1}}f)(y)&#x3D;\int_{-\infty}^{\infty} f(x)e^{2\pi i xy}dx$</li>
</ul>
<hr>
<p>定义21.1.3 施瓦兹空间， $\mathcal{S}(\mathbb{R})$ 是全体满足下列条件的 无限可微函数f构成的集合，对于任意的非负整数m,n有</p>
<ul>
<li>$\text{sup}_{x\in\mathbb{R}}|(1+x^2)^m \frac{d^n}{dx^n} (f) | &lt; \infty$, 上确界有限</li>
<li>例如 高斯分布 导数是 $p_n(x)\frac{1}{\sqrt{2\pi}} e^{-x^2&#x2F;2}$, <ul>
<li>$|x^m e^{-x^2&#x2F;2}|$ 有界 -&gt; 满足要求</li>
</ul>
</li>
</ul>
<p>复分析结果：当积分变换来自于唯一输入时，其陈述是精确的</p>
<p>定理21.1.4反演定理， $f\in \mathcal{S}(\mathbb{R})$，那么</p>
<ul>
<li>$f(x)&#x3D;\int_{-\infty}^{\infty} \hat{f}(y) e^{2\pi i xy}\text{d}y$<ul>
<li>这句白话讲就是 在施瓦兹空间中的函数的傅里叶变换的逆变换得到它自己</li>
<li>特别的 如果f,g都属于 施瓦兹空间，且傅里叶变换相同，那么f&#x3D;g</li>
</ul>
</li>
</ul>
<p>作为对比</p>
<ul>
<li>矩母函数 $M_X(t)&#x3D;E[e^{tX}]$</li>
<li>特征函数 $\phi_X(t)&#x3D;E[e^{itX}]$<ul>
<li>如果X的概率密度函数是连续的，那么对于所有的t,特征函数始终存在</li>
<li>本质上是概率密度的傅里叶变换 $\phi(-2\pi t)$</li>
</ul>
</li>
</ul>
<p>为什么复分析的结果可以带来这么大的帮助，反演公理告诉我们，如果初始分布很好，那么知道函数的积分变换就等于知道了这个函数，积分变换可以唯一地确定分布</p>
<p>对于函数: $f: \mathbb{R}\to \mathbb{C}$，如果存在一个有限的闭区间[a,b],使得当$x \not\in [x,y]$时 $f(x)&#x3D;0$,那么我们说f有 紧支集 [a,b].</p>
<ul>
<li>定义在有限闭区间[a,b]上的连续函数g, 存在一个具有紧支集的 施瓦兹函数f,使得f与g能够任意的接近(也就是 $x\in[a,b],|f(x)-g(x)|&lt;\epsilon$)</li>
<li>类似地 任意给定一个这样的连续函数g,按照上述思路可以找到一系列定义在区间上的阶梯函数之和，并且任意接近于g</li>
<li>施瓦兹函数是无限可微的</li>
</ul>
<p>柯西-施瓦兹不等式：对于复值函数f,g:</p>
<ul>
<li>$\int_{-\infty}^{\infty} |f(x)g(x)|dx\le (\int_{-\infty}^{\infty} |f(x)|^2dx)^{1&#x2F;2} (\int_{-\infty}^{\infty} |g(x)|^2dx)^{1&#x2F;2}$<ul>
<li>这要求平方可积，大多数概率密度函数都能满足这一点</li>
</ul>
</li>
</ul>
<p>21.2.1 卷积与傅里叶变换,f,g都是$\mathbb{R}$上的连续函数， 如果f,g平方积都是有限的，那么$h&#x3D;f \star g$存在，且$\hat{h}&#x3D;\hat{f}\hat{g}$</p>
<ul>
<li>卷积结果 的 傅里叶变换 &#x3D; 傅里叶变换 的 对应位置乘积</li>
</ul>
<p>引理21.2.2 ,独立 平方可积的和复合结果 为它们的卷积</p>
<hr>
<p>基于 傅里叶变换 的 中心极限定理证明</p>
<p>定理 21.3.1 $X_i$独立同分布，前3阶矩有限，且概率密度函数的衰减速度“足够快”，</p>
<ul>
<li>$Z_{N\to infty}&#x3D;\frac{\bar{X_N}-\mu}{\sigma&#x2F;\sqrt{N}}$ 收敛于标准正态分布$N(0,1)$</li>
</ul>
<h2 id="第四部分-其它主题"><a href="#第四部分-其它主题" class="headerlink" title="第四部分 其它主题"></a>第四部分 其它主题</h2><h3 id="22-假设检验"><a href="#22-假设检验" class="headerlink" title="22.  假设检验"></a>22.  假设检验</h3><h4 id="z检验-稳定，中心极限定理，-gt-x3D-30个样本，-正态分布检验"><a href="#z检验-稳定，中心极限定理，-gt-x3D-30个样本，-正态分布检验" class="headerlink" title="z检验 (稳定，中心极限定理， &gt;&#x3D;30个样本， 正态分布检验)"></a>z检验 (稳定，中心极限定理， &gt;&#x3D;30个样本， 正态分布检验)</h4><p>也就是假设模型，检验和模型的契合程度，或者模型的参数</p>
<p>通常建立 原假设</p>
<ul>
<li>通常与 实验员或研究者试图证明的结论相反</li>
<li>我们希望 假设原假设正确 用数据推翻它 （像一种无罪推断）</li>
<li>备选假设 与原假设互补</li>
<li>在原假设下，如果收集到现在数据的概率最够小。拒绝原假设，接受互补假设</li>
<li>需要指定一个显著水平限度，$\alpha$水平，也就是说，在原假设下， 小于显著水平，那么就拒绝原假设，例如0.05,<ul>
<li>你应该在看具体数据 之前 设定边界点（显著水平）</li>
<li>例如 $N(\mu,\sigma)$的0.05显著水平下，范围是$\mu-1.96\sigma,\mu+1.96\sigma$ <ul>
<li>这是双侧检验<ul>
<li>产品寿命检验，  寿命+-</li>
</ul>
</li>
<li>单侧检验的变动值是 $\mu + 1.64\sigma$<ul>
<li>麦当劳配餐速度检验 &lt; t 或者 &gt;&#x3D;t</li>
</ul>
</li>
</ul>
</li>
<li>对于更重要的事情可能选择更小的显著性水平</li>
</ul>
</li>
</ul>
<p>检验统计量，数据越多越好，方差越小，两倍数据方差减半</p>
<ul>
<li>之前结论$\bar{X}\sim N(\mu,\sigma^2&#x2F;n)$ 随着n增大</li>
</ul>
<p>样本均值的检验统计量——z统计量</p>
<ul>
<li>$X$服从方差$\sigma^2$的正态分布，假设其均值为$\mu$,<ul>
<li>如果$X$是服从某个“良好性质”分布, n&gt;&#x3D;30时，$\bar{X}$会近似于服从正态分布</li>
</ul>
</li>
<li>$x_i$是从该分布中出取出的n个相互独立的观测值。$\bar{x}$为样本均值</li>
<li>$z&#x3D;\frac{\bar{x}-\mu}{\sigma &#x2F; \sqrt{n}}$ 称作观测到的z检验统计量</li>
<li>$Z\sim N(0,1)$</li>
<li>称作z,是因为稳定的</li>
</ul>
<h4 id="p检验-（成立指标）"><a href="#p检验-（成立指标）" class="headerlink" title="p检验 （成立指标）"></a>p检验 （成立指标）</h4><p>p值让我们了解到收集的数据远离已有值的概率</p>
<ul>
<li>p值是条件概率，原假设成立的前提下，收集到已有数据的概率</li>
<li>上下文有关</li>
<li>对于相同数据的不同检验可以产生不同的p值</li>
<li>p值不是原假设成立的概率</li>
</ul>
<p>抛硬币20次，12次正面,</p>
<ul>
<li><p>原假设 硬币均匀</p>
</li>
<li><p>p值&#x3D; 出现12~20次正面概率和 + 出现0～8次正面概率和 &#x3D; 0.503</p>
</li>
<li><p>不接受，只拒绝或者无法拒绝</p>
</li>
<li><p>如果原假设成立，收集到已有证据的条件概率</p>
</li>
<li><p>而不是在已经收集了数据的前提下，原假设成立的概率</p>
</li>
<li><p>样本太小 也不会用正态检验，有的直接二项分布检验</p>
</li>
</ul>
<h4 id="t检验-（量少，不知道方差）"><a href="#t检验-（量少，不知道方差）" class="headerlink" title="t检验 （量少，不知道方差）"></a>t检验 （量少，不知道方差）</h4><ul>
<li>z检验要我们明确知道方差（模型），但很多时候做不到这一点</li>
<li>可以从数据中得到方差的估计值，并用它来替代实际方案</li>
<li>利用样本方差来改变检验统计量的分布</li>
</ul>
<p>估计样本方差$s^{2}&#x3D;\frac{1}{n-1}\sum_{i&#x3D;0}^n (x_i-\bar{x})^2$</p>
<ul>
<li>这里$n-1$基于统计学的 自由度 概念，对于任意一个给定的估计，自由度是作出该估计需要的独立观测值的个数</li>
<li>另一个说法 $E[s^2]&#x3D;\sigma^2$ 无偏估计量</li>
</ul>
<p>t分布，是一个分布族，参数是自由度，$X_i\sim N(0,1)$相互独立随机变量$S_n^2$是样本方差随机变量</p>
<ul>
<li>那么$\bar{X}&#x2F;{S_n&#x2F;\sqrt{n}}$ 称为自由度n-1的t分布，记作$T_{n-1}$</li>
<li>对于自由度$v$的t分布，概率密度函数的解析表达式$\frac{\Gamma(\frac{v+1}{2})}{\sqrt{v\pi}\Gamma(v&#x2F;2)}(1+\frac{x^2}{v})^{-\frac{v+1}{2}}$</li>
<li>如果基本分布被推测均值是$\mu$的正态分布,方差未知<ul>
<li>检验统计量$\frac{\bar{x}-\mu}{s&#x2F;\sqrt{n}}\sim t_{n-1}$</li>
<li>t分布在n趋于无穷大时，趋于正态分布</li>
</ul>
</li>
<li>因为信息更少（不知道方差，所以比z检验更难拒绝）， 但适用范围更广</li>
</ul>
<hr>
<ul>
<li>概率论证 从来都不是决定性的</li>
<li>我们可能会犯两种错误<ul>
<li>拒绝一个正确的原假设<ul>
<li>恰好是$\alpha$水平</li>
</ul>
</li>
<li>无法拒绝一个不正确的原假设<ul>
<li>原假设与事实非常接近</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h4 id="检验方差"><a href="#检验方差" class="headerlink" title="检验方差"></a>检验方差</h4><p>目前只检验了均值，接下来如何对方差进行测试</p>
<ul>
<li>服从正态分布的随机变量与服从卡方分布的随机变量之间有一定的关联</li>
<li>这种关联引出了样本方差与t检验</li>
<li>我们可以利用服从卡方分布的随机变量来检验理论和实验的拟合优度</li>
</ul>
<p>卡方分布$X\sim N(0,1),X^2\sim \chi^2(1)$</p>
<ul>
<li>概率密度函数 $1&#x2F;\sqrt{2\pi}x^{-1&#x2F;2}e^{-x&#x2F;2}$</li>
<li>$Y&#x3D;\sum_n X_i^2 \sim \chi^2(n)$<ul>
<li>概率密度函数 $\frac{1}{2^{k&#x2F;2}\Gamma(k&#x2F;2)}x^{k&#x2F;2-1}e^{-x&#x2F;2}$</li>
</ul>
</li>
<li>服从正态分布的随机变量，其样本方差与$\chi^2$分布密切相关</li>
</ul>
<p>$\sum_{i&#x3D;1}^{n}(\frac{x_i-\mu}{\sigma})^2&#x3D;\frac{1}{\sigma^2}\sum_{i&#x3D;1}^n(x_i-\bar{x})^2+(\frac{\bar{x}-\mu}{\sigma&#x2F;\sqrt{n}})^2$</p>
<p>$\chi^2(n)&#x3D;()+\chi^2(1)$</p>
<p>$\frac{(n-1)s^2}{\sigma^2}\sim \chi^2_{n-1}$</p>
<hr>
<p>用  卡方分布定义 t分布</p>
<p>自由度为 k的t分布， $X\sim N(0,1)$, $Y_n \sim \chi_n^2$</p>
<ul>
<li>$\frac{X}{\sqrt{Y_n&#x2F;n}}\sim t_n$</li>
<li>$t_{n-1} \sim \frac{\bar{x}-\mu}{s&#x2F;\sqrt{n}}&#x3D;\frac{\bar{x}-\mu}{\sigma&#x2F;\sqrt{n}}\frac{1}{\sqrt{\frac{1}{n-1}\frac{(n-1)s^2}{\sigma^2}}}&#x3D;X\frac{1}{\sqrt{\frac{1}{n-1}Y_{n-1}}}$</li>
</ul>
<hr>
<p>列表数据过拟合，检验</p>
<p>$\chi^2_{k-1}&#x3D;\sum_{i&#x3D;1}^k \frac{(O_i-E_i)^2}{E_i}$</p>
<ul>
<li>第i个结果出现观测次数：$O_i$</li>
<li>E_i在原假设下 预期观测到次数</li>
</ul>
<hr>
<p>双样本检验</p>
<ul>
<li>对两个总体进行检验，它们方差已知但互不相同</li>
<li>对两个总体进行检验，它们方差未知但是相等，合并（样本）房颤，对未知房颤的加权估计</li>
<li>对于方差未知，且互不相同的两个总体，我们可以利用近似来处理</li>
</ul>
<p>知道方差，构造 $\bar{X}-\bar{Y}$, 如果相互独立</p>
<ul>
<li>$Var(\bar{X}-\bar{Y})&#x3D;Var(\bar{X})+Var(\bar{Y})&#x3D;\frac{\sigma_X^2}{n_X}+\frac{\sigma_Y^2}{n_Y}$</li>
<li>$E(\bar{X}-\bar{Y})&#x3D;\mu_X-\mu_Y$</li>
<li>$z&#x3D;\frac{(\bar{X}-\bar{Y})-(\mu_X-\mu_Y)}{\sqrt{\frac{\sigma_X^2}{n_X}+\frac{\sigma_Y^2}{n_Y}}} \sim N(0,1)$</li>
</ul>
<p>未知方差，但相等</p>
<ul>
<li>$s_p^2&#x3D;\frac{(n_x-1)s_x^2+(n_y-1)s_y^2}{n_x-1+n_y-1}$<ul>
<li>令$r&#x3D;\frac{n_x-1}{n_x-1+n_y-1}$有$s_p^2&#x3D;rs_x^2+(1-r)s_y^2$</li>
</ul>
</li>
<li>$\frac{(\bar{X}-\bar{Y})-(\mu_X-\mu_Y)}{\sqrt{\frac{s_p^2}{n_X}+\frac{s_p^2}{n_Y}}} \sim t_{n_x+n_y-2}$</li>
</ul>
<p>未知方差，不相等</p>
<ul>
<li>$\frac{(\bar{X}-\bar{Y})-(\mu_X-\mu_Y)}{\sqrt{\frac{s_x^2}{n_X}+\frac{s_y^2}{n_Y}}} 约为 t_v$</li>
</ul>
<p>$v&#x3D;\frac{(\frac{s_x^2}{n_x}+\frac{s_y^2}{n_y})^2}{\frac{s_x^4}{n_x^2(n_x-1)}+\frac{s_y^4}{n_y^2(n_y-1)}}$</p>
<h3 id="23-差分方程、马尔科夫过程和概率论"><a href="#23-差分方程、马尔科夫过程和概率论" class="headerlink" title="23. 差分方程、马尔科夫过程和概率论"></a>23. 差分方程、马尔科夫过程和概率论</h3><p>翻倍加一，看起来“让最终成功”的概率很大，但每次的风险是低收益，高损失可能的</p>
<ul>
<li>例如你最多连续下5次</li>
<li>那么 最终失败的代价是$2^{64}$每次成功的收益是1</li>
<li>而 实际上你面对的概率是 n次连续操作中，出现连续失败长度 &gt;&#x3D;5的概率<ul>
<li>100次时 81.01%</li>
<li>200次时 96.59%</li>
</ul>
</li>
<li>fib数列 趋于 $\frac{1}{\sqrt{5}}(\frac{1+\sqrt{5}}{2})^n$<ul>
<li>来自递推数列的启发</li>
<li>上面也可以递推算出</li>
</ul>
</li>
<li>概率 估计 100切成20组每组5个，可以确定一个下界</li>
</ul>
<p>线性递推函数</p>
<ul>
<li>特征方程的根，特征值</li>
</ul>
<hr>
<p>马尔可夫过程</p>
<ul>
<li>群动力学</li>
<li>莱斯利矩阵</li>
<li>随机矩阵论</li>
<li>马尔可夫过程：只需要n时刻状态，已知变化规律（线性？），可以推出n+1时刻状态</li>
</ul>
<h3 id="24-最小二乘法"><a href="#24-最小二乘法" class="headerlink" title="24. 最小二乘法"></a>24. 最小二乘法</h3><p>拟合到一条直线上</p>
<p>我们几乎不可能观察到完美的线性关系</p>
<p>定义误差函数 E(a,b)&#x3D;$\sum_{i&#x3D;1}^N (y_i-(ax_i+b))^2$</p>
<p>最值 $\nabla E(a,b)&#x3D;(\frac{\partial E}{\partial a},\frac{\partial E}{\partial b})&#x3D;(0,0)$</p>
<ul>
<li>$\sum_{i&#x3D;1}^n (y_i-(ax_i+b))x_i&#x3D;0$</li>
<li>$\sum_{i&#x3D;1}^n (y_i-(ax_i+b))&#x3D;0$</li>
</ul>
<h3 id="25-婚姻秘书问题，蒙提霍尔问题"><a href="#25-婚姻秘书问题，蒙提霍尔问题" class="headerlink" title="25. 婚姻秘书问题，蒙提霍尔问题"></a>25. 婚姻秘书问题，蒙提霍尔问题</h3><p>秘书问题</p>
<ul>
<li>n个申请人，每人面试一次，立即决定录用与否，不录用则失去机会，什么策略选到最佳候选人的概率最大</li>
<li>我们假设所有人有排名（均匀离散）</li>
<li>要录用排名第一的人的概率最大，而不是我们要录用的人的 排名概率加权的期望最大，数学模型简单，但和现实更不符合</li>
<li>面试次序等概率。</li>
</ul>
<p>Prob(成功)&#x3D;\sum Prob(成功|第i个是最优秀) * Prob(第i个是最优秀的)</p>
<ul>
<li>期望 基础&#x3D;前k个人最大值，然后 首次遇到超过这个值得就录用，那么需要 最优的人前面的第二优的人在前k人中</li>
<li>在这个模型策略下 k 约为 n&#x2F;e</li>
</ul>
<hr>
<p>蒙提霍尔问题</p>
<ul>
<li>3门，开一门，是否换门的后验概率问题</li>
</ul>
<h2 id="碎片"><a href="#碎片" class="headerlink" title="碎片"></a>碎片</h2><p>随想</p>
<ol>
<li>有习题，没习题答案，习题远超课程讲的</li>
<li>我觉得 这本和之前微积分lifesaver都可以算“导读”类的书，一些细微的，需要教科书，更需要习题册，甚至我觉得带有答案的习题册更重要</li>
<li>这本书很多专业名词首次出现时没有英文</li>
<li>这本书还是有不少公式是 drop from sky的</li>
<li>这书的符号 有的时候还是有些混乱，一会i一会n一会m的</li>
<li>这里不同分布之间的关联讲得很有用<ol>
<li>这书的脉络 联系上是真不错，例子还是不够，非数学的外部带入感感觉还有可以加入的东西，例如我有些没理解的知乎搜的一些相关解释</li>
</ol>
</li>
</ol>
<p>外链</p>
<ul>
<li><a href="https://www.zhihu.com/question/23236070">概率论中，「矩」（moment）的实际含义是什么？高阶矩表示数据的哪些状态？</a></li>
<li><a href="https://www.zhihu.com/question/25344430">随机变量的矩和高阶矩有什么实在的含义？</a></li>
<li><a href="https://www.zhihu.com/question/19915565">统计学中「矩」这个概念是怎么引入的？它为什么被称为矩？它与物理意义上的矩有什么相同与不同？</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/27468615">概率收敛、均方收敛、分布收敛、几乎处处收敛区别与联系的直观解释？</a></li>
</ul>
]]></content>
      <categories>
        <category>概率论</category>
      </categories>
      <tags>
        <tag>概率论</tag>
      </tags>
  </entry>
  <entry>
    <title>普林斯顿 数学分析读本</title>
    <url>/Math/the_real_analysis_lifesaver/</url>
    <content><![CDATA[<p>isbn 9787115543844</p>
<p>这英文是 real analysis, 后缀是 all the tools you need to understand proofs</p>
<p>据说有视频课 calclifesaver.com</p>
<span id="more"></span>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>实分析是第一门 讲究严格性 的数学教程</p>
<p>慢慢来 慢慢读 慢慢写 并仔细思考</p>
<h2 id="1-预备知识"><a href="#1-预备知识" class="headerlink" title="1. 预备知识"></a>1. 预备知识</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>哦 作者也参考了 Walter Rudin的数学分析原理 第三版（这我之后也打算读一读）</p>
<p>数学家把 实分析称作“严格”的微积分，研究微积分的“合理性”</p>
<p>卧槽，这本书 相当于 Rudin的注解版伴读版！？</p>
<h3 id="基础数学与逻辑"><a href="#基础数学与逻辑" class="headerlink" title="基础数学与逻辑"></a>基础数学与逻辑</h3><p>自然数 $\mathbb{N}$ 所有正整数不包括0, natural number</p>
<p>整数 $\mathbb{Z}$ 德语Zahlen</p>
<p>有理数 $\frac{m}{n}\in \mathbb{Q}; m,n \in\mathbb{Z},n\neq 0$, 商 Quotient</p>
<p>实数$\mathbb{R}$ 稍后定义, real number</p>
<hr>
<p>形式逻辑</p>
<ul>
<li>两个命题同时为真或假，命题才等价</li>
<li>蕴含： A $\Rightarrow$ B, 如果A为真 则 B为真</li>
<li>当且仅当: $A \Leftrightarrow B$, 互相蕴含</li>
<li>否命题: $\neg$ 非 \neg</li>
<li>逆命题： 颠倒蕴含关系</li>
<li>逆否命题： $\neg B\Rightarrow \neg A$, 逆否命题和原命题 等价（同为真假）</li>
</ul>
<hr>
<p>常用证明技巧</p>
<ul>
<li>举反例 （用于证明 命题为假），并非每个连续函数可微, f(x)&#x3D;|x|</li>
<li>证明 逆否命题</li>
<li>反证法： 证明($A\Rightarrow \neg B$) 为假</li>
<li>归纳法： 初始状态成立 + $对于&lt; n的状态都成立 能推出 任意状态n成立$， 需要找到一个偏序性<ul>
<li>这另一个用处就是，猜结论证明法 就可以用</li>
</ul>
</li>
<li>分两步直接证明：这里演示的是草稿纸倒推法+正向写（我还挺反感现在的这种 要不写“草稿纸”的部分的，我始终觉得草稿纸的部分应该属于证明的一部分</li>
</ul>
<h3 id="集合论"><a href="#集合论" class="headerlink" title="集合论"></a>集合论</h3><p>定义3.1 集合</p>
<ul>
<li>一堆元素的集体，包含无穷多个元素的集合成为无限集</li>
</ul>
<p>定义3.3 索引族</p>
<ul>
<li>如果每一个$i\in I$都对应着一个集合$A_i$, 那么$\mathscr{A}&#x3D;\lbrace A_i|i\in I \rbrace$ 就是索引集为$I$的集合A的索引族</li>
<li>例如 $A_i&#x3D;\lbrace 1,2,i^2\rbrace$<ul>
<li>$\mathscr{A}&#x3D;\lbrace \lbrace 1,2,1 \rbrace ,\lbrace 1,2,4 \rbrace,\lbrace 1,2,9 \rbrace\cdots \rbrace$</li>
<li>其中第一个 就是$\lbrace 1,2 \rbrace$ 只是书写冗余</li>
</ul>
</li>
</ul>
<p>定义3.5 子集，超集</p>
<ul>
<li>通过元素关系定义的 $A\subseteq B$ ,$\forall x\in A \Rightarrow  x\in B$<ul>
<li>特别的$\subset$表示$\subseteq$且$\neq$ 这念起来，写起来 看起来 是 subseteq &#x3D;subset + eq, 但定义上，上面的subseteq更容易定义, 而很多时候数学家的写法 用的$\subset$ 但同时没有排除不等的可能，所以看到 subset也不一定是真子集，除非特别说明</li>
</ul>
</li>
<li>$\emptyset \subset A$ 任何集合包含空集，因为定义是通过元素来定义的，只要一个集合中所有元素属于另一个集合，而空集没有元素，也就满足</li>
<li>对于证明集合相等，常用的一个证明思路是 $A\subset B,B\subset A$来说明相等</li>
</ul>
<p>定义3.8 区间</p>
<ul>
<li>开区间</li>
<li>闭区间</li>
<li>半开区间<ul>
<li>这三个都是通过 不等式来定义的 例如 $[a,b]&#x3D;\lbrace x\in \mathbb{R} | a \le x \le b \rbrace$</li>
<li>注意到的是 在 数轴上因为只有左右，所以会有这种半开区间，对于二维平面或者更高维度的，一般研究的就是开区间 或 闭区间</li>
</ul>
</li>
</ul>
<p>定义3.10 交集，并集</p>
<ul>
<li>这里定义是通过 元素的属于性质来定义的，交就是同时属于，并就是至少属于其中一个</li>
<li>$\mathbb{Q}\cap \mathbb{R}&#x3D;\mathbb{Q}$</li>
<li>性质：<ul>
<li>$A\cap A&#x3D;A&#x3D;A\cup A$ 自己和自己</li>
<li>交换律</li>
<li>结合律</li>
<li>特殊的 0点，也就是空集, $A\cap \emptyset &#x3D; \emptyset, A\cup \varnothing&#x3D; A$ ,  在tex里面，似乎 零和斜线的是emptyset,而圆的是 varnothing</li>
</ul>
</li>
<li>更复杂的性质<ul>
<li>$(A\cap B)\subset A \subset (A\cup B)$ 一定理解上 交会变小的趋势，并有变大的趋势</li>
<li>$A\cup B&#x3D;B \Leftrightarrow A\subset B$, 属于关系</li>
<li>$A\cap B&#x3D;A \Leftrightarrow A\subset B$</li>
<li>$A\cup (\cap_i B_i)&#x3D;\cap_i (A\cup B_i)$ 类似分配率</li>
<li>$A\cap (\cup_i B_i)&#x3D;\cup_i (A\cap B_i)$ 类似分配率</li>
</ul>
</li>
</ul>
<p>定义3.15 补集</p>
<ul>
<li>$A^c&#x3D;B \textbackslash A &#x3D; \lbrace x\in B | x\not\in A\rbrace$</li>
<li>$B\textbackslash(B\textbackslash A)&#x3D;A$</li>
<li>Augustus De Morgan 命令的 定理, 德摩根律<ul>
<li>$\neg (A或B)\Leftrightarrow (\neg A)且(\neg B)$</li>
<li>$\neg (A且B)\Leftrightarrow (\neg A)或(\neg B)$</li>
<li>$(\cup A_i)^c&#x3D;\cap (A_i^c)$</li>
<li>$(\cap A_i)^c&#x3D;\cup (A_i^c)$</li>
</ul>
</li>
</ul>
<h2 id="2-实数"><a href="#2-实数" class="headerlink" title="2. 实数"></a>2. 实数</h2><h3 id="上确界"><a href="#上确界" class="headerlink" title="上确界"></a>上确界</h3><p>构造了一个$\mathbb{Q}$的超集$\mathbb{R}$ ，它的一个特点是有上确界</p>
<p>定理4.1 存在没有最小数的有理数子集，也存在没有最大数的有理数子集</p>
<ul>
<li>我知道过程能证明这个命题<ul>
<li>但是 这对于 (0,1), 每个p, 取 p&#x2F;2不是一样可以没有最小数吗? 总觉得哪里不对？？？？？</li>
</ul>
</li>
</ul>
<p>定义4.2 有序集</p>
<ul>
<li>集合S, 顺序关系，记作 &lt;, 满足性质：<ul>
<li><ol>
<li>任意两个S中元素，可比较，要么x &lt; y,x&#x3D;y,y &lt; x 这3种一种</li>
</ol>
<ul>
<li>自己和自己 x&#x3D;x</li>
</ul>
</li>
<li><ol start="2">
<li>传递性</li>
</ol>
</li>
</ul>
</li>
<li>集合+顺序 &#x3D; 有序集<ul>
<li>其中  y &lt; x 可以记作 x &gt; y</li>
<li>$x \le y \Leftrightarrow \neg (x &gt; y)$</li>
</ul>
</li>
</ul>
<p>定义4.3 最小值，最大值</p>
<ul>
<li>$A\subset B$ 且 最小最大值存在<ul>
<li>$\min A\ge \min B$</li>
<li>$\max A\le \max B$</li>
</ul>
</li>
<li>有些集合并不存在最小值最大值，例如 <code>(0,1)</code></li>
</ul>
<p>定义4.5 边界</p>
<ul>
<li>有序集S,对于 $E\subset S$,如果存在$a\in S$,使得$\forall b \in E, b \le a$ , 那么a是$E$的上界,E是有上界的<ul>
<li>对称类似的的可以定义下界</li>
<li>注意到的是，这里上界并不要求紧凑，例如2是(0,1)的上界，100也是(0,1)的上界， 1是<code>[0,1]</code>的上界(它同时属于其中)</li>
<li>$(0,+\infty)$没有上界</li>
<li>更精确的写法是 E在S中有上界</li>
</ul>
</li>
<li>回到前面的 问题 $A&#x3D;(0,\sqrt{2})\cap \mathbb{Q},B&#x3D;(\sqrt{2},+\infty)\cap \mathbb{Q}$, <ul>
<li>我们找不到一个有理数能 即是A的上界，又是B的下界，因为 根号2是无理数，也就是 有理数不能很好的切割<ul>
<li>感觉有点怪，因为你切割的点就是根号2,然后 4.1 对实数也成立，</li>
<li>虽然书中给出的不是直接给的根号2，而是靠 $x^2$与$2$比大小得到的集合</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>定义4.7 上确界，下确界</p>
<ul>
<li>上面只限制了 范围，但可选的太多了，一个是希望它能唯一“最简化”最接近化，</li>
<li>如果 S中的上界a满足，$\forall b &lt; a,b\in S$ 且$b$不是E的上界，那么a称作上确界，最小上界，a &#x3D; sup E<ul>
<li>类似定义下确界</li>
<li>那么 这里 和上面最小最大值的问题一样，上确界 一定存在吗？<ul>
<li>(-3,3) ,显然的直觉的，3是一个上确界，且$3\in \mathbb{Q}$</li>
<li>$A &#x3D; \lbrace x | x^2 &lt; 2, x\in \mathbb{Q}\rbrace$ 这样的$A$ 在$\mathbb{R}$中有上确界$\sqrt{2}$, 但是在$\mathbb{Q}$中没有上确界</li>
<li>所以感觉是，一边在E内被向大了推，一边在E外向小了推，最后汇聚一点</li>
<li>{1&#x2F;n} 的上下确界是0,1</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>定理4.9 存在于E中的上界 是 上确界</p>
<ul>
<li>对称下确界同理，</li>
<li>证明：首先 上确界是上界，那么只需要证明比上确界小的（不一定在E中）都不是上界，显然小于当前值，而当前值在E中</li>
</ul>
<p>定义4.10 ！！！有序集S,如果S的每一个有上界的非空子集E都在S中存在 supE, 那么称有序集具有 最小上界性</p>
<ul>
<li>$\mathbb{Q}$没有最小上界性</li>
<li>有的地方 完备性 &#x3D; 最小上界性+最大下界性</li>
</ul>
<p>定理4.12 有序集S, 有最小上界性</p>
<ul>
<li>如果S具有最小上界性，那么S具有最大下界性<ul>
<li>证明：E的下界的集合 根据已知 有上界，这个上界 满足 下确界的性质，从而得证</li>
</ul>
</li>
<li>等价的 $E\subset S$, $U$是E在S上的上界的集合, $\text{sup} E&#x3D;\text{inf} U$ , 上确界 是 所有上界集合的下确界</li>
<li>对称的 定理4.13 上界集的下确界</li>
</ul>
<h3 id="实数域"><a href="#实数域" class="headerlink" title="实数域"></a>实数域</h3><p>$\mathbb{R}$作为实数域 有三个重要的特性</p>
<ul>
<li>阿基米德性质</li>
<li>$\mathbb{Q}$的稠密性</li>
<li>根的存在性</li>
</ul>
<p>域 &#x3D; 集合+ 两种运算(加法，乘法)</p>
<ul>
<li>加法<ul>
<li>封闭</li>
<li>交换</li>
<li>结合</li>
<li>单位元&#x2F;零元</li>
<li>逆元</li>
</ul>
</li>
<li>乘法<ul>
<li>封闭</li>
<li>交换</li>
<li>结合</li>
<li>单位元&#x2F;零元 ， 注意在实数中 乘法的零元是1</li>
<li>逆元，除了加法零元</li>
</ul>
</li>
<li>分配率， x(y+z)&#x3D;xy+xz</li>
<li>其它例子：例如 mod p的域里面，有带mod运算，只有 0~p-1的 新的加法乘法，的域</li>
</ul>
<p>定义5.3 有序域</p>
<ul>
<li>F是域</li>
<li>$\forall x,y,z\in F, y &lt; z \Rightarrow x+y &lt; x+z$</li>
<li>$\forall x,y\in F, x&gt;0,y&gt;0 \Rightarrow xy &gt; 0$</li>
<li>从而有一些常用不等式运算法则</li>
</ul>
<p>定义5.4 实数</p>
<ul>
<li>$\mathbb{R}$ 具有最小上界性 且 包含$\mathbb{Q}$的有序域</li>
<li>有个 完备性（最小上界性，最大下界性）证明叫做 戴德金分割</li>
</ul>
<p>定义5.5 阿基米德性质</p>
<ul>
<li>对于任意$a &gt; 0$,可以找到一个 自然数b，使得 ab任意大<ul>
<li>对于任意大的翻译是， $\forall a,v \in \mathbb{R}, a &gt; 0,\exists b\in \mathbb{N},ab &gt; v$</li>
<li>特别的当a取1时，也就有$\forall v \in\mathbb{R}, \exists b\in\mathbb{N}b &gt;v$</li>
<li>这个性质 有理数也有（有理数更好证明因为可以表示称 n&#x2F;m形式</li>
<li>对于实数， $B&#x3D;\lbrace bx | b\in \mathbb{N}\rbrace$, 如果 无限则证明完成，如果有上确界$c&#x3D;\text{sup} B$, 根据上确界性质$c&#x2F;2 &lt; c$ 所以c&#x2F;2不是上界，存在 $b_ix &gt; c&#x2F;2$，$2b_i x &gt; c$ 而$(2b_i)\in \mathbb{N}$ 所以c不是上界</li>
</ul>
</li>
</ul>
<p>定义5.6 稠密性</p>
<ul>
<li>$\mathbb{Q}$在$\mathbb{R}$中稠密： 任意两个实数间至少存在一个有理数<ul>
<li>$x,y\in \mathbb{R},x &lt; y, \exists p\in \mathbb{Q}, x&lt;p&lt;y$</li>
</ul>
</li>
<li>显然 R本身是稠密  $x &lt; (x+y)&#x2F;2 &lt; y$<ul>
<li>Q本身也是 稠密</li>
<li>N不稠密</li>
</ul>
</li>
<li>稠密性 从至少存在一个保证了 存在无穷多个<ul>
<li>从而任何开区间&#x2F;闭区间, a &lt; b, <code>(a,b),[a,b]</code> 包含无穷多个 （$\cap \mathbb{Q}$也是)</li>
</ul>
</li>
<li>证明：<ul>
<li>想法找  $x &lt; n&#x2F;m &lt; y$ 那么 m足够大, 从而 y-x这段区间 能有一个切割点，那么 m &#x3D; 10 ceil(1&#x2F;(y-x)), 这样<ul>
<li>首先 x落在 $[i&#x2F;m,(i+1)&#x2F;m)$中（阿基米德性质），而 y一定不在 $[(i+1)&#x2F;m,(i+2)&#x2F;m]$中，从而 (i+1)&#x2F;m是一个有理数，左闭右开是为了不要等于x</li>
</ul>
</li>
</ul>
</li>
<li>推论：无理数 在 R中稠密<ul>
<li>神奇的证明，$x &lt; p &lt; y$想找无理数p,特别的，$\sqrt{2} x &lt; \sqrt{2} p &lt; \sqrt{2}y$, 可以找有理数$\sqrt{2} p$ 通过上面的方法，从而除以$\sqrt{2}$就有了无理数稠密</li>
</ul>
</li>
</ul>
<p>定理5.8 R中根存在性</p>
<ul>
<li>$x\in \mathbb{R}, x &gt;0, \exists a \in \mathbb{R}, a^n&#x3D;x$ 且$a_0^n&#x3D;a_1^n \Rightarrow a_0&#x3D;a_1$ 实数中n次方正根 存在 且唯一<ul>
<li>唯一性，根据上面的 有序域 得到的 $0 &lt; a_0 &lt; a_1 \Rightarrow a_0^n&#x3D;x &lt; a_1^n&#x3D;x$</li>
<li>利用上确界 $E&#x3D;\lbrace t\in \mathbb{R} | t&gt;0, t^n &lt; x\rbrace$ 我们希望证明的是 $(\text{sup} E)^n&#x3D;x$<ul>
<li>首先 sup E存在，（非空( x&#x2F;(x+1) )+有上界(x+1)+最小上界性( 完备性））</li>
<li>那么只需要证明 它的n次方既不大于x也不小于x即可</li>
<li>$y^n &lt; x \Rightarrow (y+\min(1,\frac{x-y^n}{n(y+1)^{n-1}}))^n &lt; x$</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>定理5.9 开方运算满足分配率</p>
<ul>
<li>$\forall a,b\in \mathbb{R}, a,b &gt; 0, \forall n\in \mathbb{N}, (ab)^{\frac{1}{n}}&#x3D;a^{\frac{1}{n}}b^{\frac{1}{n}}$<ul>
<li>证明 $()^n&#x3D;ab&#x3D;()^n()^n$</li>
</ul>
</li>
</ul>
<p>定义5.10 扩张的实数系</p>
<ul>
<li>$\mathbb{R}\cup \lbrace +\infty,-\infty \rbrace$</li>
<li>有一些四则运算，个别的没有约定值</li>
</ul>
<h3 id="复数与欧几里得空间"><a href="#复数与欧几里得空间" class="headerlink" title="复数与欧几里得空间"></a>复数与欧几里得空间</h3><p>复数是二维实数+特殊运算</p>
<p>定义6.1 k维向量</p>
<ul>
<li>顺序的 $(x_i)$,</li>
<li>相等当且仅当对应位置相等</li>
</ul>
<p>定义6.2 复数</p>
<ul>
<li>二维实向量，新的加法和乘法</li>
<li>x+y&#x3D;(a+c,b+d)</li>
<li>xy&#x3D;(ac-bd,ad+bc)</li>
<li>$\mathbb{C}$</li>
</ul>
<p>定义6.3 复数是一个域</p>
<ul>
<li>加法 5条性质<ul>
<li>加法单位元(0,0)</li>
<li>逆元(-a,-b)</li>
</ul>
</li>
<li>乘法 五条性质<ul>
<li>乘法单位元(1,0)</li>
<li>逆元 $(\frac{a}{a^2+b^2},\frac{b}{a^2+b^2})$</li>
</ul>
</li>
<li>分配率</li>
<li>注意到 复数域的第二维度 全0,可以得到实数，那么复数域是域，实数域是它的子域</li>
<li>不满足 有序，不是有序域</li>
<li>其它写法 a+bi</li>
</ul>
<p>定义6.4 复共轭</p>
<ul>
<li>z&#x3D;a+bi</li>
<li>a&#x3D;Re(z)</li>
<li>b&#x3D;Im(z)</li>
<li>$\bar{z}&#x3D;a-bi$<ul>
<li>性质</li>
<li>$\overline{z+w}&#x3D;\bar{z}+\bar{w}$</li>
<li>$\overline{zw}&#x3D;\bar{z}\bar{w}$</li>
<li>$\overline{z}+\overline{w}&#x3D;2a,\overline{z}-\overline{w}&#x3D;2ib$</li>
<li>$z\overline{z} \ge 0$ 当且仅当$z&#x3D;0$时取等号</li>
</ul>
</li>
</ul>
<p>定义6.6 绝对值 长度</p>
<ul>
<li>$|z|&#x3D;+(z\bar{z})^{\frac{1}{2}}$</li>
</ul>
<p>定理6.7 绝对值性质:</p>
<ul>
<li>$|z| \ge 0$当且仅当z&#x3D;0时取等号</li>
<li>$|\bar{z}|&#x3D;|z|$</li>
<li>$|zw|&#x3D;|z||w|$ 这个用 长度与夹角的视角更显然</li>
<li>$|Re(z)|\le |z|, |Im(z)|\le z$</li>
<li>$|z+w|\le |z|+|w|$ 三角不等式</li>
</ul>
<p>定理6.8 柯西-施瓦兹不等式</p>
<ul>
<li>$a_i,b_i\in \mathbb{C}$</li>
<li>$|\sum_{i&#x3D;1}^n a_ib_i|\le(\sum_{i&#x3D;1}^n |a_i|^2)(\sum_{i&#x3D;1}^n |b_i|^2)$<ul>
<li>证明：对于n进行归纳法</li>
</ul>
</li>
</ul>
<p>定义6.9 向量空间$\mathbb{R}^k$</p>
<ul>
<li>定义加法和数量乘法</li>
<li>交换 结合 分配，构成向量空间</li>
<li>但不是域，没有定义 $\mathbb{R}^k\times \mathbb{R}^k\Rightarrow \mathbb{R}^k$ 的乘法</li>
<li>因为不是有序的 所以大于小于是无法定义，而 &#x3D; 是可以定义的，特别的x&#x3D;0表示所有它的坐标x_i&#x3D;0</li>
</ul>
<p>定义6.10 欧几里得空间</p>
<ul>
<li>$x,y\in \mathbb{R}^k$ 定义内积$x\cdot y&#x3D;\sum_{i&#x3D;1}^k x_iy_i$， 注意到这不是$\mathbb{R}^k\times \mathbb{R}^k\Rightarrow \mathbb{R}^k$ 而是$\mathbb{R}^k\times \mathbb{R}^k\Rightarrow \mathbb{R}$</li>
<li>范数 $|x|&#x3D;+(\sum_{i&#x3D;1}^k x_i^2)^{\frac{1}{2}}$</li>
<li>欧几里得空间&#x3D;向量空间+内积定义+范数运算</li>
</ul>
<p>定理6.11 范数性质</p>
<ul>
<li>$|x|\ge 0$ 当且仅当 x&#x3D;0时等号成立</li>
<li>数量乘法 |ax|&#x3D;|a||x|</li>
<li>内积 $|x\cdot y|\le |x||y|$</li>
<li>线性加 $|x+y|\le |x|+|y|$<ul>
<li>改写 $|x-z|\le |x-y|+|y-z|$</li>
<li>改写 $|x-y|\ge |x|-|y|$</li>
</ul>
</li>
</ul>
<h2 id="3-拓扑学"><a href="#3-拓扑学" class="headerlink" title="3. 拓扑学"></a>3. 拓扑学</h2><h3 id="双射"><a href="#双射" class="headerlink" title="双射"></a>双射</h3><p>定义7.1 函数</p>
<ul>
<li>$f: A\to B$, A中每一个在B中找到 唯一 的对应元素</li>
<li>$f: x\mapsto f(x)$ \mapsto<ul>
<li>$A$定义域</li>
<li>$B$上域，陪域</li>
<li>需要注意的的是，中文翻译里 这里的“域” ，和上面说的 “实数域“，”复数域“ 的”域“是完全不同的概念<ul>
<li>定义域 英文 domain of definition, 用的是domain, 有区域 区间的意思，因此区间也是domain</li>
<li>而 实数域 中的域 对应的英文是filed,    Field of Real Numbers, real number field</li>
<li><a href="https://www.zhihu.com/question/23830155/answer/25796504">https://www.zhihu.com/question/23830155/answer/25796504</a><ul>
<li>台湾和日本的域都叫做体 ！？</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>例子 $A&#x3D;B&#x3D;\mathbb{R}$<ul>
<li>$f:x\mapsto x^2$, </li>
<li>会发现不同的x可能同样的x^2,B没有被映满</li>
<li>另一方面，“同样的f”，可以$A&#x3D;B&#x3D;\mathbb{Z}$</li>
</ul>
</li>
</ul>
<p>定义7.2 像，值域</p>
<ul>
<li>像$E\subset A$, 那么$f(E)&#x3D;\lbrace f(x) | x\in E\rbrace$ 称作E的像</li>
<li>值域 &#x3D; 定义域的像 &#x3D; f(A)</li>
</ul>
<p>定义7.5 原像</p>
<ul>
<li>逆映射，注意到的是，这里逆映射可能不是函数（值不唯一）</li>
<li>写法上是 $f^{-1}(G)&#x3D;\lbrace x | x\in A,f(x)\in G, G\subset B\rbrace$<ul>
<li>也就是这里 用$^{-1}$表示原像 而不是逆</li>
</ul>
</li>
</ul>
<p>定义7.7 函数的逆</p>
<ul>
<li>感觉应该放在双射一起</li>
<li>那么也就是原像过程是唯一的，那么原函数就是可逆的</li>
<li>上面的 $x\to x^2$ 在$\mathbb{R}$上不可逆, 但是在 $\mathbb{R}^+$上可逆</li>
<li>另外的 这里情况都是R,在线性代数中也有不变子空间</li>
<li>有时写成$f^{-1}(x)$<ul>
<li>但是对于$f: A\to B, A\cap B&#x3D;\varnothing$ 时，才会注意到$f^{-1}(y)$ 接受的应该是$B$的某个子集，只是有时A和B有重叠</li>
</ul>
</li>
</ul>
<p>定义7.9 映上</p>
<ul>
<li>每个 B中的元素，的原像至少存在一个</li>
<li>称作 映上，满射，</li>
</ul>
<p>定义7.11 单射</p>
<ul>
<li>一个对一个：原像至多一个<ul>
<li>不是一一对应（一一对应是双射）</li>
</ul>
</li>
</ul>
<p>定义7.13 双射：</p>
<ul>
<li>单射（原像至多一个）+满射（原像至少一个）<ul>
<li>原像恰有一个</li>
<li>双射&lt;&#x3D;&gt;可逆<ul>
<li>$(f^{-1})^{-1}&#x3D;f$ 原像的原像是f</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>定义7.17 复合函数</p>
<ul>
<li>$f:A\to B, g: B\to C$</li>
<li>$g \circ f: A\to C,  x \mapsto g(f(x))$<ul>
<li>对于可逆</li>
<li>$h^{-1} \circ h: x \mapsto x$</li>
<li>$h \circ h^{-1}: x \mapsto x$</li>
</ul>
</li>
</ul>
<h3 id="可数性"><a href="#可数性" class="headerlink" title="可数性"></a>可数性</h3><p>定义8.1 等价关系</p>
<ul>
<li>关系 g</li>
<li>自反: a g a   为真</li>
<li>对称性: a g b$\Rightarrow$ b g a</li>
<li>传递性: a g b, b g c 则 a g c</li>
<li>那么称这个关系 g是等价关系<ul>
<li>小于 没有自反性</li>
<li>小于等于 没有 对称性</li>
<li>同血缘关系 没有传递性，父亲与孩子，孩子与母亲</li>
</ul>
</li>
<li>相等 显然是一种等价关系</li>
</ul>
<p>定义8.3 势，基数</p>
<ul>
<li>$\sim$, $A \sim B \Leftrightarrow$ 存在$f: A\to B$且f是双射<ul>
<li>A和B一一对应</li>
<li>A和B有相同的基数</li>
</ul>
</li>
</ul>
<p>定理8.4 势是等价关系</p>
<ul>
<li>证明 利用双射复合称新的双射</li>
</ul>
<p>定理8.5 有限集的势</p>
<ul>
<li>个数相同的 势相同（这里依然没有定义具体的“值”，只是证明其相同），通过下标指标集</li>
</ul>
<p>定义8.6 可数性</p>
<ul>
<li>这中文翻译称可数总给人不好的感觉（觉得是有限），我觉得之前有教材的“可列性”翻译感觉更好）</li>
<li>任意集合 $A\sim \mathbb{N}$那么称$A$可数<ul>
<li>有限或可数 称为至多可数</li>
<li>这玩意 似乎就是 实分析最开始最重要的一个结论，所有有理数可数，而所有无理数不可数<ul>
<li>以我思来想去之前看实分析的理解，就是我们需要排列方案，不光知道下标（自然数）能计算出值，又要知道值能反推下标（看起来是求原像的过程）</li>
<li>然后 后续的例如把 整数可数，有理数可数，有限维有理数坐标可数，核心思想就是穿插排列（而这种穿插排列方案只需要存在性，不需要任何映射都是能有逆的，例如 $x\mapsto 2x$ 对于所有整数，会发现奇数没有被排列</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>定理8.7 势与可数性</p>
<ul>
<li>$A\sim B$, 那么A和B的可数性一致，利用等价关系，一个能等价到 自然数，那么都可以</li>
<li>8.8 $\mathbb{Z}$ 可数，</li>
</ul>
<p>定义8.8 无限集</p>
<ul>
<li>至少与它的一个真子集的势相等的集合，</li>
</ul>
<p>定义8.10 不可数集</p>
<ul>
<li>$(0,1)$ 的所有实数 S</li>
<li>对于S的任意可数真子集E的映射方案，这里采用的 i,j同步对角法（康托尔对角法）<ul>
<li>也就是 取 s,其中s的小数i位 与 当前方案中第i个数的第i位不同，从而$s\in S,s\not \in E$, 所以S的任意可数子集是 真子集</li>
<li>这种对角法对于有理数是失效的因为s是个无理数！？</li>
</ul>
</li>
<li>让我们无法按顺序排列所有元素（任何一种排列方式，有元素遗留在外）</li>
</ul>
<p>定义8.11 子集和超集的势</p>
<ul>
<li>$E\subset A$, 那么</li>
<li>$A$至多可数&#x3D;&gt; E至多可数</li>
<li>E不可数 &#x3D;&gt; A不可数</li>
</ul>
<p>推论8.12 $\mathbb{R}不可数$</p>
<ul>
<li>（0,1) 不可数 &#x3D;&gt; $\mathbb{R}$不可数</li>
</ul>
<p>定理8.13 可数集的可数并 可数</p>
<ul>
<li>可数集沿着纵向放置，集合沿着横向放置</li>
<li>和有理数类似的想法，对角游走 可以给一个次序，或者说 按照 集合i的下标j,的i+j的从小到大重新排列</li>
<li>推论8.14 可数集的任意 可数并 可数<ul>
<li>这里没有强调可数并的顺序，但是我们可以给出顺序</li>
<li>这13,14 都要可数并，注意并的“可数”</li>
</ul>
</li>
</ul>
<p>定理8.15 可数集的幂次 可数</p>
<ul>
<li>A可数,$A^n$ 是A中元素构成的全体n元组可数</li>
<li>例如二维有理数 $(a&#x2F;b,n&#x2F;m)$ 可数</li>
</ul>
<p>定理8.16 有理数可数</p>
<ul>
<li>a&#x2F;b &#x3D;&gt; (a,b) 是 (Z,Z) 的子集</li>
<li>推论8.17 无理数集不可数<ul>
<li>反证 R+无理数 &#x3D; 实数，否则实数可数</li>
</ul>
</li>
</ul>
<h3 id="拓扑定义"><a href="#拓扑定义" class="headerlink" title="拓扑定义"></a>拓扑定义</h3><p>定义 9.1 度量空间</p>
<ul>
<li>集合X, 函数d: ${X}\times{X}\to \mathbb{R}$</li>
<li>距离, $d(p,q) \ge 0$ 等号成立当且仅当$p&#x3D;q$</li>
<li>对称, $d(p,q) &#x3D; d(q,p)$</li>
<li>三角不等式, $d(p,q)\le d(p,r)+d(r,q)$</li>
<li>那么称为 距离函数或度量<ul>
<li>例如二维平面</li>
<li>常见的勾股定理  &#x3D;$\sqrt{(x_0-x_1)^2+(y_0-y_1)^2}$</li>
<li>只走直角的距离  &#x3D;$|x_0-x_1|+|y_0-y_1|$</li>
<li>都满足上面的性质</li>
<li>所以三角不等式 另一个 奇怪的理解是，按照规定的移动规则，距离是这个规则下最短的移动代价</li>
<li>对称性，有个小学题目叫做 家到学校 3段路上坡，下坡，平路，速度不同，如果用时间来作为距离的话，发现没有对称性</li>
<li>另一方面，距离 变成了一个 不是理所当然的东西</li>
</ul>
</li>
</ul>
<p>定义9.3 有界集</p>
<ul>
<li>E是度量空间X的一个子集，如果X中存在一点q,使得q到E中任意一点的“距离”均小于某个固定的有限实数M,那么E是有界的</li>
<li>$\exists q\in X,\exists M \in \mathbb{R} 使得\forall p\in E, d(p,q)\le M$ 那么$E\subset X$是有界的</li>
<li>注意到，有界的定义是在 度量空间中的，而上面 上下界的定义是 min &#x2F; max 存在，<ul>
<li>那么如果特别的在R中 把 d(x,y)定义为&#x3D;|x-y|，那么才和之前的有联系</li>
<li>在 度量空间$\mathbb{R}$ 的$\mathbb{Q}$是无界的</li>
</ul>
</li>
</ul>
<p>定理9.5 有界集的并</p>
<ul>
<li>{A_i}是度量空间X的任意子集族，有限并$\cup_{i&#x3D;1}^n A_i$也有界,</li>
<li>任意选点p, 对于A_i中的点p_i 有 d(p_i,p) &lt;&#x3D; d(m_i,p)+M_i， 等式右侧的值只有n个（有限个，且值有限）</li>
</ul>
<p>定理9.6 有界 &lt;&#x3D;&gt; 既有上界又有下界</p>
<p>定义9.7 邻域</p>
<ul>
<li>$N_r(p)&#x3D;\lbrace q | q\in X,d(p,q) &lt; r\rbrace$ , 度量空间中 到点p的距离小于r的点</li>
</ul>
<p>定义9.9 极限点, 聚点，累积点</p>
<ul>
<li>$E\subset X$, $\forall r &gt; 0, N_r(p)\cap E\neq \lbrace p\rbrace, \neq \varnothing$</li>
<li>点p的邻域有其它（非p）的点<ul>
<li>非极限点称为孤立点</li>
</ul>
</li>
<li><code>(0,1),[0,1]</code>每个点都是 聚点，极限点<ul>
<li>其中 0,1 不是(0,1)的元素，同样是它的极限点</li>
</ul>
</li>
<li>称作极限点，就像微积分最开始学极限，学连续时候的感觉一样，</li>
</ul>
<p>定理9.11 极限点的邻域包含无穷多E中的点</p>
<ul>
<li>反证易得，若存在r有限，那么有限可以排距离取min</li>
<li>推论9.12 有限集没有极限点</li>
</ul>
<p>定义9.13 闭集</p>
<ul>
<li>最常见的 是 <code>[a,b]</code> 而这里从 度量空间（新的距离概念，新的极限概念）定义了闭集</li>
<li>度量空间的X一个子集E 包含其所有极限点，那么就是闭集<ul>
<li>$\lbrace p | p\in X,p 是E的极限点 \rbrace \subset E$</li>
</ul>
</li>
<li>推论9.15 度量空间有限子集是闭集<ul>
<li>因为全是孤立点，没有极限点</li>
</ul>
</li>
</ul>
<p>定义9.16 稠密集</p>
<ul>
<li>$E\subset X$<ul>
<li>$X\subset E\cup (E的极限点)$， 那么称E是稠密的</li>
</ul>
</li>
<li>对于度量空间X的任意闭子集E,E在X中稠密当且仅当E&#x3D;X</li>
<li>和前面的稠密不同，前面的稠密 在实数上 x &lt; y中间找q,使得x &lt; q &lt; y</li>
<li>这两种“稠密”的定义下, $\mathbb{Q}$在$\mathbb{R}$中都是稠密的</li>
<li>在度量空间中稠密，也就是 任何 无理数 的 任何邻域 都有 有理数。（这比找有理数列趋于无理数更容易，）</li>
</ul>
<p>定义9.19 内点</p>
<ul>
<li>$\exists r &gt; 0, N_r(p) \subset E$， 点的某个邻域完全属于E， 那么$p$是$E\subset X$的内点</li>
<li>注意到 线段(0,1), 在 数轴上，度量空间R中，每个点都是内点。<ul>
<li>而同样的 $y&#x3D;0,x\in(0,1)$ 在平面上 度量空间$R^2$中, 每个点都不是内点</li>
</ul>
</li>
<li>$[0,1]$的0和1不是内点</li>
</ul>
<p>定义9.21 开集</p>
<ul>
<li>度量空间X的子集E,的所有点都是该集合的内点</li>
<li>$\forall p \in E,\exists r &gt; 0, N_r(p) \subset E$<ul>
<li>(0,1)是开集</li>
</ul>
</li>
<li>注意的是这里和数轴上的开闭通过控制边界的点包不包含不同<ul>
<li>从而 开集 和 闭集 是可能有非空交的</li>
</ul>
</li>
</ul>
<p>定理9.23 邻域是开集</p>
<ul>
<li>也就是证明 每个点能找到r, 三角不等式 + 半长 可证. 图9.1是在 d&#x3D;勾股定理的时候的 特殊情况的感觉</li>
</ul>
<p>定义 9.24 完备集</p>
<ul>
<li>完备集 &#x3D; 闭集 + 所有点都是极限点<ul>
<li>注意到 闭集&#x3D;E 并 E的极限点；孤立点的极限点是空集，</li>
<li>换句话说 极限点是所有点</li>
<li>[0,1]是完备集</li>
<li>$[0,1] \cup \lbrace 2\rbrace$ 是闭集 但不是完备集，（而这在数轴上不是闭区间</li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>-</th>
<th>有界</th>
<th>极限点</th>
<th>闭集</th>
<th>完备集</th>
<th>内点</th>
<th>开集</th>
</tr>
</thead>
<tbody><tr>
<td>空集$\varnothing$</td>
<td>1</td>
<td>无</td>
<td>1</td>
<td>1</td>
<td>无</td>
<td>1</td>
</tr>
<tr>
<td>单点集</td>
<td>1</td>
<td>无</td>
<td>1</td>
<td>否</td>
<td>与 度量空间X有关，对于通常R否，对于R中取整点</td>
<td>同内点判断</td>
</tr>
<tr>
<td>R中[a,b]</td>
<td>1</td>
<td>[a,b]</td>
<td>1</td>
<td>1</td>
<td>(a,b)</td>
<td>否</td>
</tr>
<tr>
<td>R中(a,b)</td>
<td>1</td>
<td>[a,b]</td>
<td>否</td>
<td>否</td>
<td>(a,b)</td>
<td>1</td>
</tr>
<tr>
<td>R中(a,b]</td>
<td>1</td>
<td>[a,b]</td>
<td>否</td>
<td>否</td>
<td>(a,b)</td>
<td>否</td>
</tr>
</tbody></table>
<h3 id="闭集和开集"><a href="#闭集和开集" class="headerlink" title="闭集和开集"></a>闭集和开集</h3><p>定理 10.1 开集的补集</p>
<ul>
<li>X的子集E是开集，当且仅当 E的补集是闭集</li>
<li>在数轴上的开闭主要靠端点</li>
<li>而这里，开集闭集的定义完全看上去是不相关的<ul>
<li>闭集&#x3D;E的极限点（点的任意邻域有点）都属于E</li>
<li>开集&#x3D;E的点全是内点（点的邻域全属于E）</li>
<li>这两个虽然 分别依靠 极限点和内点，但还好再多挖一部，就都和“邻域”有关</li>
<li>$E^c 闭$，$\forall x\in E$, $x\not\in E^c极限点$, $x$存在邻域不包含$E^c$的点，全是$E$的点, E是开集</li>
</ul>
</li>
<li>推论10.2<ul>
<li>闭集的补集是开集</li>
</ul>
</li>
</ul>
<p>定理10.3</p>
<ul>
<li>一组任意开集的并 是开集，采用原来的邻域易证属于 并</li>
<li>一组任意闭集的交 是闭集，证明 交的极限点 都属于新的闭集，（注意原来的极限点可能还存在但是交后变为孤立点，例如[0,1] 交 [1,2]）</li>
</ul>
<p>定理10.4</p>
<ul>
<li>比上面多了”有限”</li>
<li>开集有限交 是开集，例如 (-1&#x2F;n,1&#x2F;n)的无限交 得到{0} 闭集</li>
<li>闭集有限并 是闭集，例如 [0,1-1&#x2F;n] 无限交是 [0,1)</li>
<li>有限性是关键，关键在于邻域的概念<ul>
<li>例如 交 需要点全是内点，内点需要存在邻域全属于，而存在邻域就是存在r &gt; 0，有限时，可以取min r, 而 1&#x2F;n 这种无限时，它的“下确界（最贴近的下界）”不属于集合 { 1&#x2F;n }，这里的无限破坏了可取性</li>
<li>对于 并，那就是 新的极限点 是其中任何一个的极限点，反证法能 min r_i找到</li>
</ul>
</li>
<li>而10.3 不需要有限性，是因为 不需要进行这种 min的处理，也就是无穷数列求min&#x2F;max 趋于上下确界（如果存在），而上下确界不一定属于原来的集合，从而破坏了这种（保持性质）</li>
</ul>
<p>定义10.5 闭包</p>
<ul>
<li>度量空间X的子集E的所有极限点集合记作 E’, E的闭包$\bar{E}&#x3D;E\cup E’$</li>
<li>闭包是闭集<ul>
<li>我们注意到 E’是E的所有极限点，那么 E的闭包根据 定义 包含了E的所有极限点.</li>
<li>那么问题是，有没有可能 $(E\cup E’)’ \not \subset (E\cup E’)$ 也就是 闭包有了新的极限点，而新的极限点还不属于闭包</li>
<li>这里用的是 开集闭集互补+邻域定义去证明<ul>
<li>$\bar{E}^c&#x3D;(E\cup E’)^c$ 是开集</li>
<li>$\forall p\in \bar{E}^c$ 那么p不属于E也不是E的极限点，存在r 与E交为空，如果能和E’交也为空 即是内点<ul>
<li>如果任意r 交E’ 非空，那么E’的对应点因为是极限点，在r内能找到E中的点，从而 对于任意r, 三角不等式 2r内能找到E的点，则 这个点也是极限点，应该属于E’, 反证法知道</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>推论10.8 X的任意子集E, $E&#x3D;\bar{E}$ 当且仅当E是闭集</li>
<li>推论10.9 闭包是每个闭超集的子集<ul>
<li>$E\subset F \subset X$, $F$是闭集, 那么$\bar{E}\subset F$</li>
<li>根据上面闭包定义 E闭包多出来的点都是E的极限点，这个也就是在说，闭包的子集的极限点一定在闭包内，这就显然的因为E的极限点也是F的极限点 $E’\subset F’$</li>
</ul>
</li>
</ul>
<p>定理10.10 闭包中的实数，上确界和下确界</p>
<ul>
<li>下确界对称同理</li>
<li>$E\subset \mathbb{R}$ 非空有上界E, $\text{sup}E\in \bar{E}$<ul>
<li>实数上也可能有孤立点 和 不连续多段，所以 这里右边是闭包而不是 极限点或其它</li>
</ul>
</li>
<li>推论, $\mathbb{R}$中任意一个有上界E,如果E是闭集，那么 $\text{sup} E\in E$</li>
</ul>
<p>定义10.12 相对开集</p>
<ul>
<li>E是一个集合. 如果对于任意$p\in E$存在$r &gt; 0$使得$q\in Y$且$d(p,q) &lt; r \Rightarrow q\in E$, 那么集合E相对于Y是开集</li>
<li>和开集定义类似，不同的是这里多了一个Y<ul>
<li>之前是 邻域 属于E</li>
<li>现在是 邻域与Y的交 属于E</li>
<li>例如二维平面一条不含端点的线段 在二维平面不是开集，在一维对应直线中是开集</li>
</ul>
</li>
</ul>
<p>定理10.14 相对开集</p>
<ul>
<li>度量空间$Y \subset X$， Y的子集E相对于Y是开集，当且仅当存在X的某个开子集G,使得 $E&#x3D;Y\cap G$</li>
<li>每个Y的相对开子集，都可以表示为X的开集G和Y的交</li>
<li>E&#x3D;交 &#x3D;&gt; E在G中存在邻域 全属于G，也就 邻域交Y 属于 G交Y，是相对开集</li>
<li>是相对开集  &#x3D;&gt; E每个点p存在$r_p$,  X中邻域交Y属于E是开集，考虑把这些X中的邻域并起来，开集任意并是开集所以构造出了G</li>
</ul>
<p>类似的</p>
<p>定义10.15 相对闭集</p>
<ul>
<li>$p\in Y$, 且p是E的极限点，那么$p\in E$,那么E相对于Y是闭集, 书上符号是不是还用错了？</li>
<li>$E&#x3D;[1,2)$ 在$Y&#x3D;[0,2)$中是闭集</li>
</ul>
<hr>
<p>一点感受，这里拓扑定义 这么多吗，开集闭集来来回回，感觉核心的就两点 1. 度量空间（距离）, 2 邻域r存在性，从而导出&#x2F;新定义的一系列的东西</p>
<h3 id="紧集"><a href="#紧集" class="headerlink" title="紧集"></a>紧集</h3><p>实分析中不可或缺的部分</p>
<p>定义11.1 开覆盖</p>
<ul>
<li>$E\subset X$</li>
<li>$E$的开覆盖是一族集合{G_a},其中每个$G_a$都是相对于X的开集，并且E包含在这些集合的并中<ul>
<li>$\forall a, G_a相对于X是开集, E\subset \cup_a G_a$ 那么 称 {G_a}是E的一个开覆盖</li>
</ul>
</li>
<li>E的开覆盖 的有限子覆盖是由 {G_a}中有限多个集合组成的一族集合，并且E仍包含在这有限多个集合的并中<ul>
<li>$n\in\mathbb{N}, E\subset \cup_{i&#x3D;1}^n G_{a_i}$</li>
</ul>
</li>
</ul>
<p>定义11.3 紧集</p>
<ul>
<li>K是度量空间X的一个子集，如果K的每一个开覆盖都有一个有限子覆盖，那么K就是紧集</li>
<li>$\forall K的开覆盖$ {G_a},存在 $a_1\cdots,a_n$使得 $K\subset \cup_{i&#x3D;1}^n G_{a_i}$, 那么K是紧集<ul>
<li><ol>
<li>这里要 任意的开覆盖 都有，不是存在一个有限开覆盖</li>
</ol>
</li>
<li><ol start="2">
<li>要的是 有限 子覆盖</li>
</ol>
</li>
</ul>
</li>
<li>先从简单开始<ul>
<li>空集一定是紧集，因为 任意开覆盖，选任意一个 空集是它的子集，是有限子覆盖</li>
<li>单点集一定是紧集，因为 任意开覆盖，至少一个覆盖了它，选择那个覆盖了它的，是有限子覆盖</li>
<li>有限个数点集一定是紧集，因为 任意开覆盖，每次选一个涵盖其中至少一点的集合，就变成归纳的子问题，从而构造出有限子覆盖</li>
</ul>
</li>
</ul>
<p>定理 11.5 开区间不是紧集</p>
<ul>
<li>(a,b) 可以用 {G_n}&#x3D;(a+1&#x2F;n,b-1&#x2F;n) 来覆盖，它不存在有限子集也是开覆盖，其实注意到这和上面的 “开区间的任意并还是开区间”，“开区间有限交不一定是开区间”的 思路很像，但结论不像</li>
<li>这里的 无限并的感觉，就是在掰扯 先找点能找到n包含它，反的寻找顺序 先找n,那么能找到不属于这一段的点</li>
</ul>
<p>任何度量空间是子集的闭子集（包含所有极限点），也是自己的开子集（全是内点）</p>
<p>定义11.6 相对紧</p>
<ul>
<li>度量空间$Y\subset X$， Y的子集K相对于X是紧集，当且仅当K相对于Y是紧集</li>
<li>也就是 Y中的开覆盖可以扩展到X中的开覆盖，反过来X的开覆盖可以和Y求交得到Y中的开覆盖<ul>
<li>也就是定理10.14</li>
</ul>
</li>
</ul>
<p>定理11.7 紧子集是闭集</p>
<ul>
<li>度量空间X的任意紧子集K,K是X中的闭集</li>
<li>证明：证明$X^c$是开集，也就是$\forall p\in X^c$, p是内点(存在 领域 在$X^c$中)<ul>
<li>对于任意点$p \in X^c$, $W_q&#x3D;\lbrace N_{d(p,q)&#x2F;3}(q) | q\in K\rbrace$ 是一个开覆盖，也就是 K中所有点q的邻域的并（而邻域的半径选择 是 p到q距离的1&#x2F;3, 所以这样的是一个开覆盖</li>
<li>因为紧集, 所以 $W_q$有有限子集，也就是有限多个$q_1,\cdots,q_n$ 以及它们的邻域，同样是开覆盖$W\subset \cup_{i&#x3D;1}^n W_{q_i}$</li>
<li>有限的好处就是 可以取min,max, 那么这个时候，我们的目标是p的邻域在$X^c$, 也就是 找半径&#x3D;min d(p,q_i)&#x2F;3, 显然在这样的半径下，所有q_i的邻域 的交为空, 从而证明了 任意p能找到全在X^c中的邻域，从而X^c是开集，从而X是闭集</li>
<li>所以紧集的有限性 带来了 可以取min max,从而可以找到邻域 从而才有了全是内点</li>
</ul>
</li>
</ul>
<p>定理11.8 紧集的闭子集仍是紧集</p>
<ul>
<li>$K\subset X$,如果K是紧集，并且K的子集F相对于X是闭集，那么F也是紧集</li>
<li>(F的任意开覆盖)+$F^c$ 是X的开覆盖, 也是K的开覆盖<ul>
<li>K紧，所以有限开覆盖 覆盖K, 同时覆盖F,所以F的任意也有有限子开覆盖（如果选了$F^c$去掉就行，所以F也紧</li>
</ul>
</li>
<li>推论11.9 闭集与紧集的交<ul>
<li>$K\subset X$ ,如果K是紧，X的子集F相对于X是闭集，那么$F\cap K$也是紧集</li>
<li>这个推论告诉我们，如果把紧集K嵌入到任何一个度量空间中，那么K与该度量空间中任何闭集的交都是紧集</li>
</ul>
</li>
</ul>
<p>定理11.10 紧集也是有界的</p>
<ul>
<li>对于度量空间X的任意紧子集K,K在X中有界<ul>
<li>有界：存在点q,存在距离M,使得所有$d(q,p \in K) \le M$</li>
</ul>
</li>
<li>证明 逆否命题：无界&#x3D;&gt;不是紧集<ul>
<li>无界: 任意点q,任意距离M,使得存在$d(p\in K,q) &gt; M$</li>
</ul>
</li>
<li>说半天 最后没有证明逆否命题，还是正向证明，取所有点的半径1的开覆盖，因为紧，所有存在有限，因为有限，所以距离最远两点的距离r, 三角不等式 1+r+1 能覆盖所有 <code>p_1-q_i-q_j-p_2</code> 的路径</li>
</ul>
<p>定理11.11 紧集交集</p>
<ul>
<li>{K_a}是度量空间X中一族非空紧集，如果 任意 有限 交 非空，那么 所有的交 非空</li>
<li>这书上反例不够直接啊， 换一个：(0,1&#x2F;n) 它不是紧集，它的任意有限交 非空，但是 它的所有交是空集</li>
<li>反证：如果所有交为空，<ul>
<li>那么 K_1 交 （其它所有的交）&#x3D; 空集</li>
<li>K_1 属于 (其它所有的补（是开集） 的并)</li>
<li>K_1紧，所以存在 有限多个  其它补的并 覆盖了K_1</li>
<li>K_1 交，有限多个  其它的交&#x3D; 空集</li>
</ul>
</li>
<li>这里要求任意有限交为非空，推论让结构更简单“嵌套” $K_{n+1}\subset K_n$<ul>
<li>推论 11.12，嵌套非空紧集，的所有的交非空（马上就是闭区间套定理了）</li>
<li>原来 俄罗斯套娃有名字 Olga,Galina,Anastasia</li>
</ul>
</li>
</ul>
<p>定理11.13 紧集中的极限点</p>
<ul>
<li>紧集K中的任意一个无限子集E, E在K中至少有一个极限点</li>
<li>首先得是无限子集才有可能有极限点</li>
<li>反证：如果没有极限点<ul>
<li>对于K中每个点p，能找到$r_p$邻域交E 只有p（p属于E时）,或者为空（p不属于E时）</li>
<li>从而 找到一个K的开覆盖（不考虑交E），而K紧，所有有有限开覆盖覆盖K,同时覆盖E,而每个开覆盖至多含一个E的点，从而E是有限的</li>
</ul>
</li>
</ul>
<hr>
<p>小总结:</p>
<ul>
<li>紧集定义是 任意 开覆盖，有 有限 子覆盖</li>
<li>从而 在紧集条件下 向下推 运算关系，常见紧集&#x3D;&gt;闭集, 不是紧集&#x3D;&gt;开集，而中间证明的核心部分其实没有变，还是用的上面的 距离定义，邻域，有限才有min max 以及 距离三角不等式</li>
<li>但 这里似乎没有说 当证明是紧集以后，能有什么“用途和特别的性质”，就是有限开覆盖吗？</li>
</ul>
<h3 id="海涅-博雷尔定理"><a href="#海涅-博雷尔定理" class="headerlink" title="海涅-博雷尔定理"></a>海涅-博雷尔定理</h3><p>$\mathbb{R}^k$的子集是紧集 当且仅当 它即是闭集又是有界集</p>
<ul>
<li>上面证明了 紧集 &#x3D;&gt; 有界闭集</li>
<li>那么这里 是对于$\mathbb{R}^k$ 要证明 有界闭集 &#x3D;&gt; 紧集<ul>
<li>反例 $(-\pi,\pi)\cap \mathbb{Q}$在$\mathbb{Q}$中是有界闭集，但不是紧集</li>
</ul>
</li>
</ul>
<p>定理12.1 闭区间套性质</p>
<ul>
<li>$\mathbb{R}$中的闭区间套$I_n$的无限交非空。运用上面紧集的交集中的结论</li>
<li>也可以 $[a_i,b_i]$, $A&#x3D;\lbrace a_i |i\in \mathbb{N}\rbrace,x&#x3D;\text{sup}A$, 证明x属于所有，利用任意两个交非空</li>
</ul>
<p>定义12.2 k维格子</p>
<ul>
<li>$x_i\in  [a_i,b_i],i&#x3D;1\cdots k, x&#x3D;(x_1,\cdots,x_k)$ 就是长方形，矩体的样子</li>
<li>定理12.3 k维格子嵌套性质<ul>
<li>对于每个维度单独用闭区间嵌套性质，所以最后汇总出来存在一个x</li>
</ul>
</li>
<li>定理12.4 k维格子是紧集<ul>
<li>反证：如果不紧，存在一个开覆盖没有“有限”子覆盖，那么对于当前格子切割<ul>
<li>至少切割的一部分没有有限子覆盖</li>
<li>继续反复切割，这样得到了一系列 嵌套切割，每一个都没有有限子覆盖（这要切割有限次才行吧？？？？</li>
<li>那么 这个切割嵌套至少包含一个点x,找任一个包含x的覆盖Gx,那么因为Gx开，所以Gx包含x的一个可确定大小的邻域 ，矛盾</li>
<li>总觉得怪怪的呢？<ul>
<li>反复看了下，如果不紧，存在一个开覆盖，反复的（无限切割？块还严格变小？包含一个点没有处理所有点？）</li>
<li>预先完成无限切割（二分所有维度）<ul>
<li>那么对于任意给定n_1,可以找到一个序列是不被覆盖的，</li>
<li>再任意给定n_2,可以在上面基础上继续延长这个序列</li>
<li>再任意给定n_3,还是可以继续延长</li>
<li>还是好怪啊，而且没用到闭集的性质也是</li>
</ul>
</li>
</ul>
</li>
<li>对于k维格子，令$\delta&#x3D; \sqrt{\sum (a_i-b_i)^2}$ 距离平方和开根，就是最长对顶点距离<ul>
<li>任意两点距离$\le \delta$</li>
<li>然后这里的确是 二分所有维度(任意两点距离最大值减半)，切割成了一个 {I_n} 族，其中每一个都不能被有限覆盖，（且看起来是无限(?)切割）</li>
<li>存在点x属于所有的 嵌套的格子，</li>
<li>x 属于I,所以存在Gx覆盖x, 且是开集，x的某r邻域属于Gx, 那么注意到上面二分让最大距离减半，所以可以控制n来控制r</li>
<li>从而存在 $n$, x所在的切割 $I_n \subset N_r(x) \subset G_x$, 那么I_n被G_x覆盖，和前面的“能找到”矛盾</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>定理 12.5 $\mathbb{R}^k$ 中的有界集</p>
<ul>
<li>子集E有界，那么包含在某个k维格子中</li>
<li>证明: 有界&#x3D;&gt; 距离表达 存在上限M &#x3D;&gt; 距离展开不等式，每个维度的上下变化不超过-M,+M</li>
</ul>
<p>定理 12.6 海涅-博雷尔定理</p>
<ul>
<li>$\mathbb{R}^k$的子集E是紧集 当且仅当 它既是闭集又是有界集<ul>
<li>这里 闭集 和 有界集，指的是$\mathbb{R}^k$中的 闭集和有界集</li>
<li>紧集&#x3D;&gt; 闭(11.7),有界(11.10)</li>
<li>有界闭 &#x3D;&gt; 在某个k维格子I中(12.5)，I紧， &#x3D;&gt; 是紧(11.8 紧中的闭是紧)</li>
</ul>
</li>
</ul>
<p>定理12.7 实紧集中的极限点</p>
<ul>
<li>$\mathbb{R}^k$的一个子集E是紧集，当且仅当 E的每个无限子集 在E中 都有一个极限点</li>
<li>证明：<ul>
<li>紧 &#x3D;&gt; 每个无限子集都有极限点(11.13)</li>
<li>每个无限子集都有极限点 &#x3D;&gt; 是紧集 （证明是有界闭集）<ul>
<li>逆否命题，不是有界或不是闭集 &#x3D;&gt; 存在无限子集 没有极限点</li>
<li>无限：q&#x3D;0, 找点，（计算距离，翻倍距离找新点） 重复，可以得到一个无限点集，每个点都是孤立点</li>
<li>不是闭集：E有不属于E的极限点x_0,对于r,每次折半，取E中的点，这样x_0是唯一极限点 但又不属于E</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>对于任意$E\subset \mathbb{R}^k$ 下面三个命题是等价的</p>
<ul>
<li>E既是闭集又是有界集</li>
<li>E是紧集</li>
<li>E的每个无限子集在E中都有一个与极限点</li>
</ul>
<p>定理12.8 （魏尔斯特拉斯定理）</p>
<ul>
<li>如果$\mathbb{R}^k$的无限子集E有界，那么E在$\mathbb{R}^k$中有一个极限点</li>
<li>证明：<ul>
<li>12.5 存在格子I, $E\subset I$,</li>
<li>12.4 I是紧集</li>
<li>11.3 I中任意无限子集有极限点，E在I中有极限点</li>
<li>I是$\mathbb{R}^k$子集，E在$\mathbb{R}^k$中有集贤殿</li>
</ul>
</li>
</ul>
<hr>
<p>小总结</p>
<ul>
<li>从 拓扑，回到了$\mathbb{R}^k$, 从 交非空 来到了 嵌套</li>
<li>从更普适的拓扑，回到$\mathbb{R}^k$ 上以后甚至$\mathbb{R}$上以后，反过来，有界闭集&#x3D;&gt;是紧集&#x3D;&gt; 也就是有界闭集的任意开覆盖存在有限子覆盖，也有有界闭集的任意嵌套并非空</li>
</ul>
<h3 id="完备集与连通集"><a href="#完备集与连通集" class="headerlink" title="完备集与连通集"></a>完备集与连通集</h3><p>我们将 引入连通集的概念来结束对拓扑学的研究。</p>
<p>不仅区间不可数，每一个实完备集也都是不可数的。</p>
<p>完备集：A, A的所有极限点属于A, A的所有点都是A的极限点</p>
<p>定理 13.1 实完备集是不可数的</p>
<ul>
<li>如果$\mathbb{R}^k$的非空子集P是完备集，那么P就是不可数的</li>
<li>实际上值 P中有不可数各元素</li>
<li>证明：P非空 &#x3D;&gt; 至少包含点x &#x3D;&gt; 因为完备（x是极限点），x的任意邻域包含无限多点 &#x3D;&gt; P是无限集<ul>
<li>若P 是可数的, 那么存在一个写成有序点列的方法?</li>
<li>P中$x_1$选半径，因为 完备&#x3D;&gt;$x_1$极限点，闭邻域 $r_1$, 开邻域中存在 $x_2$, 取$r_2$ 使得邻域完全在$x_1,r_1$中但是 不含$x_1$<ul>
<li>这个方法可以在P中选择出一系列点，和一系列闭邻域 层层嵌套，</li>
<li>$K_n&#x3D;\bar{V_n}\cap P$  每个闭邻域与P的交，<ul>
<li>每个闭邻域有界闭，所以 根据海涅-博泪尔 &#x3D;&gt; 紧, </li>
<li>根据11.9（闭交紧&#x3D;得到紧，这里P是闭，所以K_n 也紧。</li>
<li>根据$\bar{V_n}$嵌套,$K_n$也嵌套</li>
<li>这里矛盾的是 K_n无限可数交非空，但是任意点给定n,都不输于这个可数交，然后就矛盾了？</li>
<li>为啥？为啥是给了一个方法，证明了矛盾，而不是证明不存在方法呢？</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>康托尔集：每次3等分闭集，去掉中间<ul>
<li>这样 取这个可数交，得到的是不可数集，长度还为0</li>
<li>是实完备集，不是任何闭区间的超集</li>
</ul>
</li>
</ul>
<p>定理13.3 康托尔集非空</p>
<ul>
<li>每个 $E_n$ (构造的每一层)，都是有界闭集，是紧集。紧集的嵌套非空</li>
<li>$P&#x3D;\cap^{\infty} E_n$ ,P本身是 有界 闭集（无穷多闭集的交），所以P也紧</li>
</ul>
<p>定理13.4 不包含开区间</p>
<ul>
<li>任意 (a,b) , 不是子集(a &lt; b), 区间长度总能 &lt; b-a, 类似的不包含任何非单点的闭区间</li>
<li>从而包含的所有闭集都是单点集</li>
</ul>
<p>定理13.5 康托尔集是完备集</p>
<ul>
<li>度量空间$\mathbb{R}$中 康托尔集P是完备集</li>
<li>完备: 极限点属于P,(闭)，所有点是极限点<ul>
<li>只需要证明 所有点是极限点即可，也就是每个点任意邻域内有点</li>
</ul>
</li>
</ul>
<p>定义13.6 分离集</p>
<ul>
<li>A,B是度量空间X的两个子集，如果$A\cap \bar{B}&#x3D;\varnothing, \bar{A}\cap B&#x3D;\varnothing$那么称为分离的，也就是互相不与对方闭包相交</li>
<li>例如 $A&#x3D;[-1,0),B&#x3D;(0,1]$ 是分离的 而如果其中一个取到零就不是分离的了<ul>
<li>$A&#x3D;[-1,0),B&#x3D;[0,1]$ 是不相交的，但不是分离的 因为 B交 A的闭包 &#x3D; <code>&#123;0&#125;</code> 非空</li>
</ul>
</li>
<li>上面 康托尔集构造中 $E_n$中每一对闭区间都是分离的</li>
</ul>
<p>定理13.8 分离子集</p>
<ul>
<li>A,B分离, $A_1\subset A,B_1\subset B$ ,那么$A_1,B_1$也是分离，核心还是 闭包不会超过父集的闭包</li>
</ul>
<p>定义 13.9 连通集</p>
<ul>
<li>不连通： 度量空间X,的子集E是两个非空分离集的并集（可以表示成），那么E是不连通的</li>
<li>存在 $A,B \subset, A\neq \varnothing,B\neq \varnothing$,</li>
<li>$E&#x3D;A\cup B$</li>
<li>$A\cap \bar{B}&#x3D;\varnothing, \bar{A}\cap B&#x3D;\varnothing$</li>
<li>连通 &#x3D; 不是 不连通<ul>
<li>感觉上就是能否切开（而且切开处不会有闭包“粘黏感”</li>
<li>空集是连通的</li>
<li>上面的例子 <code>[-1,1]</code>是连通的， 例如切割$[-1,0),[0,1]$ 不是分离的</li>
<li>康托尔集不连通</li>
</ul>
</li>
</ul>
<p>定理13.11 不连通的另一种定义</p>
<ul>
<li>E 不连通</li>
<li>存在$U,V\subset X$使得</li>
<li>$U,V$都是开集</li>
<li>$E\subset U\cap V$</li>
<li>$E\cap U\neq \varnothing,E\cap V\neq \varnothing$</li>
<li>$E\cap U\cap V &#x3D;\varnothing$<ul>
<li>感觉上，像是两个 U,V泡泡 包裹E的部分</li>
<li>另一方面，可以用上面A,B的并集的补作为U,V, 这样的话是对应的感觉</li>
</ul>
</li>
</ul>
<p>定理13.12 实直线上的连通集</p>
<ul>
<li>$\mathbb{R}$的子集E是连通的，当且仅当对于任意给定的两点$x,y\in E$和任意$z\in \mathbb{R}$, 如果$x &lt; z &lt; y$那么$z\in E$</li>
<li>也就是 连通 &#x3D;&gt; 任意两点中间所有点， 任意两点中间所有点&#x3D;&gt; 连通</li>
<li>证明：<ul>
<li>逆否命题 不包含其中某个点 &#x3D;&gt; 不连通，因为不包含p,那么可以用 $U&#x3D;(-\infty,p),V&#x3D;(p,\infty)$ 包裹</li>
<li>逆否 不连通 &#x3D;&gt;  不包含某点，存在分离集A,B,每个中存在点x,y,那么 $z&#x3D;\sup\lbrace a | a\in A,x\le a \le y\rbrace$<ul>
<li>需要证明 $z\not\in E$， z 一方面是A的闭包上的（是A的极限点），根据13.9 的定义 B交A的闭包为空，所以z不属于B</li>
<li>如果 z不属于A,那么 两个不属于，保证了 x &lt; z &lt; y</li>
<li>如果 z属于A, 因为 A交 B的闭包为空，所以 A中的点 不是B的极限点，所以z存在邻域 交B的闭包为空，邻域中取一点$z_1&#x3D;z+r&#x2F;2$，$x &lt; z_1 &lt; y$</li>
</ul>
</li>
</ul>
</li>
<li>推论，开区间(a,b), 闭区间<code>[a,b]</code>都是连通的，也就是任意两点之间的点都包含</li>
</ul>
<h2 id="4-序列"><a href="#4-序列" class="headerlink" title="4. 序列"></a>4. 序列</h2><h3 id="收敛"><a href="#收敛" class="headerlink" title="收敛"></a>收敛</h3><p>定义14.1 序列</p>
<ul>
<li>也就是 把 自然数映射到 度量空间中的点的函数</li>
<li>$f:\mathbb{N}\to X, f:n \mapsto p_n$ （序列长度无限）</li>
<li>可能值的集合称为 范围，如果范围有界则称为有界<ul>
<li>范围：取值个数：可能无限，但是有界， $1&#x2F;n$</li>
</ul>
</li>
<li>可数集 都有办法排成序列</li>
</ul>
<p>定义14.3 收敛</p>
<ul>
<li>对于任意 $\epsilon &gt;0$存在$N &gt; 0$ 每个$n &gt; N$, 有$d(p_n,p) &lt; \epsilon$ 那么收敛到$p\in X$, 称作$p_n$的极限</li>
<li>可以就是可以通过控制N来控制 距离</li>
<li>发散 &#x3D; 不收敛</li>
</ul>
<p>定理14.5 收敛另一个定义</p>
<ul>
<li>{p_n}是度量空间X中的任意一个序列， 收敛到$p\in X$,当且仅当p的每一个邻域，在邻域外之存在{p_n}的有限多个元素</li>
<li>对于 想被控制的 邻域，能找到N,那么 不超过N个元素在外面所有有限</li>
<li>反过来 如果有无限多，无法通过N控制</li>
</ul>
<p>定理14.6 极限的唯一性</p>
<ul>
<li>核心还是邻域，用上面14.5的好处是 r直接选1&#x2F;3距离</li>
</ul>
<p>定理14.7 收敛 则 有界</p>
<ul>
<li>14.5的划分， 界&#x3D;有限 与 邻域的max可以控制</li>
</ul>
<p>定理14.8 收敛到极限点</p>
<ul>
<li>$E\subset X$,且p是E的极限点，E中存在一个收敛到p的序列 {p_n}</li>
<li>也就是 按照极限点性质，每次严格缩小邻域(1&#x2F;2) 都可以有存在的点，极限点显然是序列的极限，而序列极限存在则唯一，所以</li>
</ul>
<p>推论14.9 紧集的无限子集中的序列</p>
<ul>
<li>K是一个紧集，E是K的任意一个无限子集，那么E包含一个收敛到K中某点的序列</li>
<li>根据11.3 紧集K的任意无限子集E有一个极限点$p\in K$, 注意可能不属于E,</li>
<li>根据14.8 这个 极限点可以构造对应序列</li>
</ul>
<p>推论14.10 有界无限实数集中的序列</p>
<ul>
<li>$\mathbb{R}^k$的每个有界无限子集 E都包含一个收敛到$\mathbb{R}^k$中某点的序列</li>
<li>12.8 维尔斯特拉斯定理：$\mathbb{R}^k$ 有界无限子集 E，在$\mathbb{R}^k$ 中存在极限点</li>
<li>从而 14.8 的方式构造出序列</li>
</ul>
<h3 id="极限与子序列"><a href="#极限与子序列" class="headerlink" title="极限与子序列"></a>极限与子序列</h3><p>序列之间的运算 与 自序列考察</p>
<p>定理15.1 代数运算</p>
<ul>
<li><ol>
<li>（加法&#x2F;减法）收敛序列的 元素对应下标相加，新的序列 收敛于 原来两个收敛值相加</li>
</ol>
<ul>
<li>注意到恒为c的序列收敛于c,所以 运用1,有常数加法</li>
</ul>
</li>
<li><ol start="2">
<li>常数乘法, 收敛序列 每个元素 乘c, 新收敛值 &#x3D; c * 原收敛值</li>
</ol>
</li>
<li><ol start="3">
<li>序列 对应下标相乘，收敛于 收敛值相乘。这个 稍微配个待定系数 加 max限制以下可以控制，</li>
</ol>
</li>
<li><ol start="4">
<li>如果 极限非零，且序列任意元素非零，那么 极限趋于 1&#x2F;极限，这个用邻域控制了符号，再二次控制半径即可</li>
</ol>
</li>
</ul>
<p>定理15.2 实向量的收敛性</p>
<ul>
<li>向量的收敛，也就是每个维度的收敛（当且仅当）</li>
<li>本质是源于 距离公式的定义</li>
</ul>
<p>定理15.3 $\mathbb{R}^k$中极限的代数运算，向量</p>
<ul>
<li>保持加法</li>
<li>保持数乘</li>
<li>保持内积</li>
</ul>
<p>定义15.4 子序列</p>
<ul>
<li>保持，下标递增的取出</li>
<li>子序列 也是一个序列</li>
</ul>
<p>定理 15.6 收敛 &lt;&#x3D;&gt; 所有子序列都收敛</p>
<ul>
<li>&lt;&#x3D; 很好证明，因为自身也是自身的子序列</li>
<li>&#x3D;&gt; 收敛：存在p, 通过N控制p的范围，那么 子序列 同样被控制，所以p也是子序列极限，极限唯一，子序列都收敛到p</li>
</ul>
<p>定理15.7 紧集中的子序列</p>
<ul>
<li>紧度量空间X中任意子序列，那么$p_n$的某个子序列将收敛到某个点$p\in X$</li>
<li>如果 取值有限，那么一定有值出现无穷多次，那么子序列取 等于这个值的即可</li>
<li>如果取值无限，那么利用11.13（紧中无限存在属于紧的集贤殿）存在极限点p, 也就是p任何邻域包含 序列E中无限多点，每次取一个，r&#x2F;&#x3D;2,注意到子序列要保证下标顺序，所以要取的 E中下标更大与 p邻域的交集，而因为无限总能取到，从而完成构造。</li>
</ul>
<p>定理15.8 波尔查诺-维尔斯特拉斯 定理</p>
<ul>
<li>$\mathbb{R}^k$中的任意一个序列，如果$p_n$有界，那么某个子序列 将收敛到某个点$p\in \mathbb{R}^k$</li>
<li>和前面的感觉有点像，前面是 有界无限 能有 极限点</li>
<li>这里 其实就是 找到包裹的 有限格子I,紧集，然后用15.7</li>
</ul>
<p>定理15.9 全体子序列极限组成的集合$E^*$是相对于X的闭集</p>
<ul>
<li>闭集也就是 极限点属于自己</li>
<li>那么 q 是 $E^*$的一个极限点 <ul>
<li>如果 存在 N, n&gt;N, p_n&#x3D;q, 那么 p_n就是有唯一极限为q的序列，每个子序列极限也是q</li>
<li>核心想法是三角不等式+严格趋于0的领域，$r_n &#x3D; d(p_{n_i},q) &lt; d(p_{n_1},q)&#x2F;i$, 也就是 每次找q的一个$r_n&#x2F;2$中$E^*$中的点，再这个点又可以邻域$r_n&#x2F;2$ 且 坐标比当前最大坐标更大的一个点，从而 三角不等式两个邻域完成了找点</li>
<li>从而 我们能找出一个序列的极限是q,所以q也属于$E^*$,</li>
<li>这里的过程 和 之前证明 闭包 不会产生新的 极限点的思路可以说完全一样</li>
</ul>
</li>
</ul>
<h3 id="柯西序列与单调序列"><a href="#柯西序列与单调序列" class="headerlink" title="柯西序列与单调序列"></a>柯西序列与单调序列</h3><p>是否存在一种与收敛性相似，但不依赖于度量空间的性质？有就像紧性那样，</p>
<ul>
<li>柯西序列是在任何度量空间中都成立的性质。</li>
<li>某个度量空间中的柯西序列 在 任何度量空间中都是柯西序列</li>
</ul>
<p>定义16.1 柯西序列</p>
<ul>
<li>{p_n} 是度量空间X中的任意一个序列。如果任意$\epsilon &gt; 0$存在某个自然数N，对于任意大于等于N的n和m均有$d(p_n,p_m) &lt; \epsilon$ 那么 ${p_n}$ 是一个柯西序列</li>
<li>从理解上，都是控制N来控制“度量空间中的距离”，但不同的是，这里我们“不知道”极限的具体，而是后面任意选择n,m, 从形状上理解，原来的更像知道中心在控制半径，而这里像在控制直径不知道中心。</li>
</ul>
<p>定理16.3 收敛序列 &#x3D;&gt; 柯西序列</p>
<ul>
<li>序列收敛到p,那么这个序列也是柯西序列</li>
<li>这里终于说直径的概念了</li>
</ul>
<p>定义16.4 直径，</p>
<ul>
<li>集合中 元素距离的 上确界</li>
</ul>
<p>定理16.6 柯西序列的直径</p>
<ul>
<li>子序列{P_N,P_{N+1}…</li>
<li>p_n是柯西序列，当且仅当 上述从N开始子序列，当N趋于无穷时，直径趋于0</li>
</ul>
<p>定理16.7 闭包的直径</p>
<ul>
<li>度量空间X的任意子集 E, $\text{diam} \bar{E}&#x3D;\text{diam} E$</li>
<li>闭包的直径和原来的直径一致</li>
<li>这里用 &gt;&#x3D;, &lt;&#x3D; 来证明，&gt;&#x3D;是显然的，因为闭包多了点，只可能变大</li>
<li>要证明 $\text{diam} \bar{E} \le \text{diam} E$, 那么 也就是证明 任意 $\epsilon &gt; 0$,  $\text{diam} \bar{E} \le \text{diam} E+\epsilon$<ul>
<li>这样 p-q vs p-p1-q1-q,的想法，其中p1,q1是E中，p-q是闭包中，三角不等式<ul>
<li>任意p-q, 找到分别邻域 p1,q1, 左侧 &lt;&#x3D; r+右侧距离+r &lt;&#x3D; r+sup+r, 所以r&#x3D;epsilon &#x2F;2整理顺序苛政</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>定理16.8  嵌套紧集，直径趋于0, 无穷交恰好包含一个点</p>
<ul>
<li>嵌套紧集 至少一个，如果两个直径趋于0矛盾，</li>
</ul>
<p>定理16.9 紧集中，柯西序列&#x3D;&gt; 收敛序列</p>
<ul>
<li>每个子集的闭包 构成嵌套，直径趋于0,所以恰好存在一个点，这个点是极限</li>
</ul>
<p>定理16.10 在$\mathbb{R}^k$ 中 柯西序列 &#x3D;&gt; 收敛序列</p>
<ul>
<li>柯西序列，有界，格子，紧集，16.9 &#x3D;&gt; 收敛</li>
</ul>
<p>定义16.11 完备性</p>
<ul>
<li>如果X中每个柯西序列都收敛到X中的某个点，那么度量空间X就是完备的</li>
<li>任何紧度量空间都是完备的，</li>
<li>任何欧几里得空间$\mathbb{R}^k$都是完备度量空间<ul>
<li>例如 有理数空间不完备，可以收敛到不属于有理数空间的有力柯西序列</li>
</ul>
</li>
</ul>
<p>任意有序域F,下面两个命题等价</p>
<ul>
<li>F有最小上界性<ul>
<li>有序域才能定义一个有意义的上界</li>
</ul>
</li>
<li>F是完备的并且有阿基米德性质</li>
</ul>
<p>定理16.13 完备度量空间的闭子集</p>
<ul>
<li>E是完备度量空间X的子集，如果E是闭集，那么E也是完备的</li>
<li>X完备，所以E中的柯西序列收敛于X中的某个点，p的每个邻域也包含E的无限多点，p是E的极限点。p是闭集所有已p属于E,所以E完备</li>
</ul>
<p>定义16.14 单调序列</p>
<ul>
<li>有序域， s_n&lt;&#x3D;s_{n+1}单调递增</li>
<li>对称同理 定义</li>
</ul>
<p>定理16.16 有界单调序列</p>
<ul>
<li>{s_n} 是有序域F中的单调序列，并且F具有最小上界性，那么{s_n}在F中收敛当且仅当{s_n}有界</li>
<li>收敛&#x3D;&gt;有界 之前证明过</li>
<li>有界&#x3D;&gt; 收敛， 有界-&gt; 有上确界s, s的任意邻域有无限多值，从而控制 半径，</li>
</ul>
<h3 id="子序列极限"><a href="#子序列极限" class="headerlink" title="子序列极限"></a>子序列极限</h3><p>定义17.1 发散到无穷大</p>
<ul>
<li>{s_n} 是度量空间$\mathbb{R}$ 中的任意一个序列，如果任意$M\in \mathbb{R}$, 存在某个自然数N,使得对于每一个大于等于N的n有$s_n\ge M$那么{s_n}就发散到无穷大</li>
<li>负无穷大类似</li>
</ul>
<p>定理17.3 无界 &lt;&#x3D;&gt; 一个子序列发散到无穷大</p>
<ul>
<li>无界 任意点和半径存在点很远，这里要多控制一个下标，这样能完成构建</li>
<li>发散到 无穷大，如果有界，只需要 M_1 &#x3D; M_0+ 界限的控制</li>
</ul>
<p>定义17.4 上极限和下极限</p>
<ul>
<li>定义是 子序列收敛点 集合的sup,inf<ul>
<li>有的地方 记作 limsup 一个整体</li>
</ul>
</li>
<li>这里有讨论 无穷大，负无穷大，本质上不是极限</li>
</ul>
<p>定理17.6 收敛序列的上极限和下极限</p>
<ul>
<li>$\mathbb{R}$中任意一个序列，收敛到有限数s，当且仅当 上极限&#x3D;下极限&#x3D;s</li>
<li>&#x3D;&gt; 前面证明过</li>
<li>&lt;&#x3D; 每个收敛子序列都收敛到s,那么 是否可能原序列不收敛，对于任意s邻域，s_n中有无穷多在邻域外的，而根据15.8 这些中可以选出一个序列收敛于一个新的点，和“每个收敛子序列都收敛于s”矛盾<ul>
<li>这里的&#x3D;&gt; 太直观了，而&lt;&#x3D; 很“神奇”</li>
</ul>
</li>
</ul>
<p>定理17.7 上极限下极限都是子序列极限</p>
<ul>
<li>又是 和之前类似的，双重邻域接上三角不等式</li>
</ul>
<p>定理17.8 作为序列边界的上极限和下极限</p>
<ul>
<li>{s_n}是度量空间$\mathbb{R}$中的任意一个序列，E是其子序列极限的集合，s&#x3D;lim sup_{n\to \infty } s_n,对于任意x&gt;s,存在N,使得 n&gt;&#x3D;N时有 s_n &lt; x</li>
<li>也就是大于上极限的数，可以序列从某处截断后面都比它小<ul>
<li>反证法，找不到，就有无穷多个构成 新子序列有新极限</li>
</ul>
</li>
</ul>
<p>定理17.9 上极限和下极限存在性和唯一性，</p>
<ul>
<li>在扩张的实数系中，存在且唯一。<ul>
<li>扩张是指 +\infty, -\infty</li>
<li>这里也是运用15.8，无穷中能抽出子序列有新极限来证明过</li>
</ul>
</li>
</ul>
<p>定理 17.10 上极限和下极限的比较</p>
<ul>
<li>两个序列，如果下标对应有一致大小关系，那么它们的上极限下极限有同样的大小关系。</li>
</ul>
<h3 id="特殊序列"><a href="#特殊序列" class="headerlink" title="特殊序列"></a>特殊序列</h3><p>定理18.1 夹逼定理</p>
<ul>
<li>$a_n \le s_n \le b_n$ 如果左右都收敛到同一个点，那么中间也是</li>
</ul>
<p>定理18.2</p>
<ul>
<li>p &gt; 0 $\lim_{n\to \infty} \frac{1}{n^p}&#x3D;0$</li>
</ul>
<p>定理18.3</p>
<ul>
<li>$\lim_{n\to\infty} p^{\frac{1}{n}}&#x3D;1$</li>
</ul>
<p>定理18.4 $\lim_{n\to \infty}n^{1&#x2F;n}&#x3D;1$</p>
<p>定理18.5 $\lim_{n\to\infty} \frac{n^a}{(1+p)^n}&#x3D;0,p&gt;0,a\in\mathbb{R}$</p>
<p>定理18.6 $|x|&lt;1, \lim_{n\to\infty} x^n&#x3D;0$</p>
<h3 id="级数"><a href="#级数" class="headerlink" title="级数"></a>级数</h3><p>部分和$s_n&#x3D;\sum_{i&#x3D;1}^n a_i$</p>
<p>级数: 部分和序列</p>
<ul>
<li>级数不是和 是 序列</li>
</ul>
<p>级数收敛: 部分和序列收敛到某个点</p>
<ul>
<li>否则发散</li>
</ul>
<p>定理19.2 级数收敛性</p>
<ul>
<li>当且仅当 任意$\epsilon &gt;0$存在自然是N,使得对于任意大于N的n和m有 之间的 原序列a_{n~m} 的和的绝对值在epsilon内</li>
<li>就是柯西序列的想法</li>
<li>推论19.3 必要不充分<ul>
<li>级数收敛，原序列趋于0</li>
</ul>
</li>
</ul>
<p>定理19.4 a_i &gt;&#x3D;0</p>
<ul>
<li>级数 收敛，当且仅当 部分和序列 {s_n} 有界</li>
<li>也就是 单调递增有界，所以收敛</li>
</ul>
<p>定理19.5 收敛的比较判别法</p>
<ul>
<li>某个N以后 |a_n| &lt;&#x3D; c_n, 并且c_n的级数收敛，那么a_n的级数也收敛</li>
<li>三角不等式 + 柯西压缩法可以控制 a_n和的范围</li>
</ul>
<p>定理19.6 发散的比较判别法</p>
<ul>
<li>0 &lt;&#x3D; d_n &lt;&#x3D;a_n</li>
<li>d_n的级数发散，那么a_n的级数翻上，用上面反证</li>
</ul>
<p>定理19.7 几何级数</p>
<ul>
<li>|x| &lt; 1 级数 $\sum_{n&#x3D;0}^{\infty} x^n$收敛到$\frac{1}{1-x}$, 其它范围发散</li>
</ul>
<p>定理19.9 柯西凝聚判别法</p>
<ul>
<li>$\sum_{n&#x3D;1}^{\infty}a_n$是单调递减非负项级数,  它收敛 &lt;&#x3D;&gt; $\sum_{k&#x3D;0}^{\infty} 2^ka_{2^k}$收敛</li>
<li>通过配项  1&#x2F;2 右侧 &lt;&#x3D; 左侧 &lt;&#x3D;右侧， 可以得到它们同时有界或无界，而单调性从而同时收敛或发散</li>
<li>可以用于调和级数</li>
</ul>
<p>定理19.10 p级数</p>
<ul>
<li>p &gt; 1 $\sum_{n&#x3D;1}^\infty \frac{1}{n^p}$ 收敛</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol start="3">
<li>集合相等 常用 互相包含证明</li>
<li>最小上界：任何集合中的不大于它，任何小于它的不是上确界</li>
<li>阿基米德性质：任意x,y能找到nx&gt;y</li>
<li>三角不等式</li>
<li>双射：是函数，单射+满射</li>
<li>集合可数：建立与自然数的双射，或者自然数到它的满射，忽略重复项</li>
<li>邻域 钦定半径，有限才有min,max</li>
<li>补集（颠倒开闭方便证明）</li>
<li>紧（任意开覆盖 有 有限子覆盖），无穷多嵌套紧集非空</li>
<li>$\mathbb{R}^k$ 中 紧集&#x3D;有界闭</li>
<li>拓扑问题 一些证明 讨论p的属于与不属于的情况</li>
<li>数列收敛 控制N来控制范围</li>
<li>子序列构造：三角不等式+邻域+控制下标</li>
<li>柯西序列控制直径 &#x3D;&gt; 收敛，证明是柯西序列就证明收敛</li>
<li>子序列的子序列，在增广定义下能找到收敛的子序列</li>
<li>夹逼定理</li>
<li>级数不适合，比较判别法 柯西凝聚判别法</li>
</ol>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2>]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
        <tag>微积分</tag>
      </tags>
  </entry>
</search>
