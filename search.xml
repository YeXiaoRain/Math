<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>一个积分</title>
    <url>/Math/2020-08-29-a-integral/</url>
    <content><![CDATA[<h1 id="题目-amp-解答"><a href="#题目-amp-解答" class="headerlink" title="题目 &amp; 解答"></a>题目 &amp; 解答</h1><p>$ \int_0^1 (x-x^2)^n dx$ (换元$t&#x3D;x-\frac{1}{2}$</p>
<p>$&#x3D; \int_{-\frac{1}{2}}^{\frac{1}{2}} (\frac{1}{4} - x^2)^n dx$ (偶函数</p>
<p>$&#x3D; 2 \int_{0}^{\frac{1}{2}} (\frac{1}{4} - x^2)^n dx $(换元$t&#x3D;2x$</p>
<p>$&#x3D; \frac{1}{4^n}\int_0^1 (1 - x^2)^n dx$(换元$t&#x3D;sin(x)$</p>
<p>$&#x3D; \frac{1}{4^n} \int_0^{\frac{\pi}{2}} (1 - sin(x)^2)^n d(sin(x))$</p>
<p>$&#x3D; \frac{1}{4^n} \int_0^{\frac{\pi}{2}} cos(x)^{2n+1} d x$ (<code>Wallis&#39;_integrals</code></p>
<p>$&#x3D; \frac{1}{4^n} \cdot \frac{2n(2n-2)\cdots 2}{(2n+1)(2n-1)3}$</p>
]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>\integral</tag>
      </tags>
  </entry>
  <entry>
    <title>甜甜圈数学 from 2006</title>
    <url>/Math/2021-12-31-donut/</url>
    <content><![CDATA[<h1 id="本文尽量逐句翻译"><a href="#本文尽量逐句翻译" class="headerlink" title="本文尽量逐句翻译"></a>本文尽量逐句翻译</h1><h2 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h2><p><code>donut.c</code>:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">             k;<span class="type">double</span> <span class="title function_">sin</span><span class="params">()</span></span><br><span class="line">         ,<span class="title function_">cos</span><span class="params">()</span>;main()&#123;<span class="type">float</span> A=</span><br><span class="line">       <span class="number">0</span>,B=<span class="number">0</span>,i,j,z[<span class="number">1760</span>];<span class="type">char</span> b[</span><br><span class="line">     <span class="number">1760</span>];<span class="built_in">printf</span>(<span class="string">&quot;\x1b[2J&quot;</span>);<span class="keyword">for</span>(;;</span><br><span class="line">  )&#123;<span class="built_in">memset</span>(b,<span class="number">32</span>,<span class="number">1760</span>);<span class="built_in">memset</span>(z,<span class="number">0</span>,<span class="number">7040</span>)</span><br><span class="line">  ;<span class="keyword">for</span>(j=<span class="number">0</span>;<span class="number">6.28</span>&gt;j;j+=<span class="number">0.07</span>)<span class="keyword">for</span>(i=<span class="number">0</span>;<span class="number">6.28</span></span><br><span class="line"> &gt;i;i+=<span class="number">0.02</span>)&#123;<span class="type">float</span> c=<span class="built_in">sin</span>(i),d=<span class="built_in">cos</span>(j),e=</span><br><span class="line"> <span class="built_in">sin</span>(A),f=<span class="built_in">sin</span>(j),g=<span class="built_in">cos</span>(A),h=d+<span class="number">2</span>,D=<span class="number">1</span>/(c*</span><br><span class="line"> h*e+f*g+<span class="number">5</span>),l=<span class="built_in">cos</span>      (i),m=<span class="built_in">cos</span>(B),n=s\</span><br><span class="line">in(B),t=c*h*g-f*        e;<span class="type">int</span> x=<span class="number">40</span>+<span class="number">30</span>*D*</span><br><span class="line">(l*h*m-t*n),y=            <span class="number">12</span>+<span class="number">15</span>*D*(l*h*n</span><br><span class="line">+t*m),o=x+<span class="number">80</span>*y,          N=<span class="number">8</span>*((f*e-c*d*g</span><br><span class="line"> )*m-c*d*e-f*g-l        *d*n);<span class="keyword">if</span>(<span class="number">22</span>&gt;y&amp;&amp;</span><br><span class="line"> y&gt;<span class="number">0</span>&amp;&amp;x&gt;<span class="number">0</span>&amp;&amp;<span class="number">80</span>&gt;x&amp;&amp;D&gt;z[o])&#123;z[o]=D;;;b[o]=</span><br><span class="line"> <span class="string">&quot;.,-~:;=!*#$@&quot;</span>[N&gt;<span class="number">0</span>?N:<span class="number">0</span>];&#125;&#125;<span class="comment">/*#****!!-*/</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\x1b[H&quot;</span>);<span class="keyword">for</span>(k=<span class="number">0</span>;<span class="number">1761</span>&gt;k;k++)</span><br><span class="line">   <span class="built_in">putchar</span>(k%<span class="number">80</span>?b[k]:<span class="number">10</span>);A+=<span class="number">0.04</span>;B+=</span><br><span class="line">     <span class="number">0.02</span>;&#125;&#125;<span class="comment">/*****####*******!!=;:~</span></span><br><span class="line"><span class="comment">       ~::==!!!**********!!!==::-</span></span><br><span class="line"><span class="comment">         .,~~;;;========;;;:~-.</span></span><br><span class="line"><span class="comment">             ..,--------,*/</span></span><br></pre></td></tr></table></figure>

<p><code>gcc -o donut donut.c -lm &amp;&amp; ./donut</code></p>
<p>这是作者第一次尝试混淆C代码, 这个版本是相对简单优雅的</p>
<h2 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h2><p><strong>注意</strong> 下面13行,因为我本地的hexo相关工具不能正确工作,为了尽可能展示代码,我在<code>&lt;</code>和<code>.</code>之间加了一个空格,实际上是没有空格的,所以如果从这里拷贝代码,记得去掉多出的空格</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">_,x,y,o       ,N;<span class="type">char</span>       b[<span class="number">1840</span>]       ;p(n,c)</span><br><span class="line">&#123;<span class="keyword">for</span>(;n       --;x++)       c==<span class="number">10</span>?y       +=<span class="number">80</span>,x=</span><br><span class="line">o<span class="number">-1</span>:x&gt;=       <span class="number">0</span>?<span class="number">80</span>&gt;x?       c!=<span class="string">&#x27;~&#x27;</span>?       b[y+x]=</span><br><span class="line">c:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>       ;&#125;c(q,l       ,r,o,v)       <span class="type">char</span>*l,</span><br><span class="line">       *r;&#123;<span class="keyword">for</span>       (;q&gt;=<span class="number">0</span>;       )q=(<span class="string">&quot;A&quot;</span>       <span class="string">&quot;YLrZ^&quot;</span></span><br><span class="line">       <span class="string">&quot;w^?EX&quot;</span>           <span class="string">&quot;novne&quot;</span>     <span class="string">&quot;bYV&quot;</span>       <span class="string">&quot;dO&#125;LE&quot;</span></span><br><span class="line">       <span class="string">&quot;&#123;yWlw&quot;</span>      <span class="string">&quot;Jl_Ja|[ur]zovpu&quot;</span>   <span class="string">&quot;&quot;</span>       <span class="string">&quot;i]e|y&quot;</span></span><br><span class="line">       <span class="string">&quot;ao_Be&quot;</span>   <span class="string">&quot;osmIg&#125;r]]r]m|wkZU&#125;&#123;O&#125;&quot;</span>         <span class="string">&quot;xys]]\</span></span><br><span class="line"><span class="string">x|ya|y&quot;</span>        <span class="string">&quot;sm||&#123;uel&#125;|r&#123;yIcsm||ya[&#123;uE&quot;</span>  <span class="string">&quot;&#123;qY\</span></span><br><span class="line"><span class="string">w|gGor&quot;</span>      <span class="string">&quot;VrVWioriI&#125;Qac&#123;&#123;BIY[sXjjsVW]aM&quot;</span>  <span class="string">&quot;T\</span></span><br><span class="line"><span class="string">tXjjss&quot;</span>     <span class="string">&quot;sV_OUkRUlSiorVXp_qOM&gt;E&#123;BadB&quot;</span>[_/<span class="number">6</span>  ]-</span><br><span class="line"><span class="number">62</span>&gt;&gt;_++    %<span class="number">6</span>&amp;<span class="number">1</span>?r[q]:l[q])-o;<span class="keyword">return</span> q;&#125;E(a)&#123;<span class="keyword">for</span> (</span><br><span class="line">       o= x=a,y=<span class="number">0</span>,_=<span class="number">0</span>;<span class="number">1095</span>&gt;_;)a= <span class="string">&quot; &lt; .,`&#x27;/)(\n-&quot;</span>  <span class="string">&quot;\\_~&quot;</span>[</span><br><span class="line">       c  (<span class="number">12</span>,<span class="string">&quot;!%*/&#x27;)#3&quot;</span>  <span class="string">&quot;&quot;</span>     <span class="string">&quot;+-6,8&quot;</span>,<span class="string">&quot;\&quot;(.$&quot;</span> <span class="string">&quot;01245&quot;</span></span><br><span class="line">       <span class="string">&quot; &amp;79&quot;</span>,<span class="number">46</span>)+<span class="number">14</span>],  p(<span class="string">&quot;&quot;</span>       <span class="string">&quot;#$%&amp;&#x27;()0:439 &quot;</span>[ c(<span class="number">10</span></span><br><span class="line">       , <span class="string">&quot;&amp;(*#,./1345&quot;</span> ,<span class="string">&quot;&#x27;)&quot;</span>       <span class="string">&quot;+%-$02\&quot;! &quot;</span>, <span class="number">44</span>)+<span class="number">12</span>]</span><br><span class="line"><span class="number">-34</span>,a);  &#125;main(k)&#123;<span class="type">float</span>     A=<span class="number">0</span>,B= <span class="number">0</span>,i,j,z[<span class="number">1840</span>];</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>  <span class="string">&quot;\x1b[2J&quot;</span>);;;      <span class="keyword">for</span>(;; )&#123;<span class="type">float</span> e=<span class="built_in">sin</span></span><br><span class="line">(A), n=  <span class="built_in">sin</span>(B),g=<span class="built_in">cos</span>(      A),m=  <span class="built_in">cos</span>(B);<span class="keyword">for</span>(k=</span><br><span class="line"><span class="number">0</span>;<span class="number">1840</span>&gt;   k;k++)y=<span class="number">-10</span>-k/    <span class="number">80</span>   ,o=<span class="number">41</span>+(k%<span class="number">80</span><span class="number">-40</span></span><br><span class="line">       )* <span class="number">1.3</span>/y+n,N=A<span class="number">-100.0</span>/y,b[k]=<span class="string">&quot;.#&quot;</span>[o+N&amp;<span class="number">1</span>],  z[k]=<span class="number">0</span>;</span><br><span class="line">       E(  <span class="number">80</span>-(<span class="type">int</span>)(<span class="number">9</span>*B)%<span class="number">250</span>);<span class="keyword">for</span>(j=<span class="number">0</span>;<span class="number">6.28</span>&gt;j;j   +=<span class="number">0.07</span>)</span><br><span class="line">       <span class="keyword">for</span>  (i=<span class="number">0</span>;<span class="number">6.28</span>&gt;i;i+=<span class="number">0.02</span>)&#123;<span class="type">float</span> c=<span class="built_in">sin</span>(    i),  d=</span><br><span class="line">       <span class="built_in">cos</span>(  j),f=<span class="built_in">sin</span>(j),h=d+<span class="number">2</span>,D=<span class="number">15</span>/(c*h*e+f     *g+<span class="number">5</span>),l</span><br><span class="line">=<span class="built_in">cos</span>(i)        ,t=c*h*g-f*e;x=<span class="number">40</span>+<span class="number">2</span>*D*(l*h*  m-t*n</span><br><span class="line">),y=<span class="number">12</span>+       D  *(l*h*n+t*m),o=x+<span class="number">80</span>*y,N  =<span class="number">8</span>*((f*</span><br><span class="line">e-c*d*g       )*m   -c*d*e-f*g-l*d*n)     ;<span class="keyword">if</span>(D&gt;z</span><br><span class="line">[o])z[o       ]=D,b[     o]=<span class="string">&quot; .&quot;</span>          <span class="string">&quot;.,,-+&quot;</span></span><br><span class="line">       <span class="string">&quot;+=#$@&quot;</span>       [N&gt;<span class="number">0</span>?N:       <span class="number">0</span>];;;;&#125;       <span class="built_in">printf</span>(</span><br><span class="line">       <span class="string">&quot;%c[H&quot;</span>,       <span class="number">27</span>);<span class="keyword">for</span>       (k=<span class="number">1</span>;<span class="number">18</span>       *<span class="number">100</span>+<span class="number">41</span></span><br><span class="line">       &gt;k;k++)       <span class="built_in">putchar</span>       (k%<span class="number">80</span>?b       [k]:<span class="number">10</span>)</span><br><span class="line">       ;;;;A+=       <span class="number">0.053</span>;;       B+=<span class="number">0.03</span>       ;;;;;&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>同样的编译和运行命令, 这次是有背景, 有弹幕的版本</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>2011 年,有人提起了作者的2006年的作品,有很多请求作者讲解原理的,但过去了5年,作者并不能清晰记得,所以作者打算从零开始,非常详尽的细节,希望能得到相近的结果</p>
<span id="more"></span>

<p>这个内容的核心是利用 帧buffer 和 Z-buffer 来渲染像素(通过ascii渲染低分辨率的图像)</p>
<p>通过固定的角度增量的,来绘制对应的环面(torus), 亮度是从暗到亮对应的<code>ASCII</code>是<code>.,-~:;=!*#$@</code>.(不需要射线追踪</p>
<h3 id="3D物体-到-2D屏幕"><a href="#3D物体-到-2D屏幕" class="headerlink" title="3D物体 到 2D屏幕"></a>3D物体 到 2D屏幕</h3><p><img data-src="https://www.a1k0n.net/img/perspective.png" alt="3D和2D映射"></p>
<p>如图, 当一个人看一个3D 物体时,眼睛和物体连线与屏幕的交点, 就是我们要的投影</p>
<p>把3D物品渲染到2D屏幕上</p>
<p>$(x,y,z)$实际的点投影到 距离眼睛为$z’$的屏幕的$(x’,y’)$上</p>
<p>显然相似三角形</p>
<p>$\frac{y’}{y}&#x3D;\frac{x’}{x}&#x3D;\frac{z’}{z}$</p>
<p>换句话说$(x’,y’) &#x3D; (z’\frac{x}{z},z’\frac{y}{z})$, 左边是要求的,右边是三维空间中已知</p>
<p>其中呢,人到屏幕距离$z’$是常量, 这个常量变化相当于把屏幕推远或拉近,取决于你希望展示多少内容</p>
<hr>
<p>因为物体有深度,所以可能多个点对应到2D屏幕上同一个点,那我们需要一个记录每个我们绘制的点的z坐标,这样可以保证后面的点不会覆盖前面的点</p>
<p>在记录<code>z-buffer</code>同时,我们可以同时增加<code>1/z-buffer</code>.</p>
<ol>
<li><code>1/z</code> 表示无穷远</li>
<li>计算$x’,y’$时,可以直接乘<code>1/z</code>,比除两次代价小(?</li>
</ol>
<p>现在可以开始绘制 甜甜圈了(torus)</p>
<hr>
<p>torus 是一个旋转体, 一个方法是把2D的圆,绕着一个圆外的轴旋转, 下图是个示意的切面</p>
<p><img data-src="https://www.a1k0n.net/img/torusxsec.png" alt="圆绕轴旋转"></p>
<p>先谈圆, 一个半径$R_1$的圆,其圆心在$(R_2,0,0)$</p>
<p>那么圆上的点$(x,y,z) &#x3D; (R_2,0,0) + (R_1 \cos \theta,R_1 \sin \theta,0)$</p>
<p>如果绕y轴旋转, 其y轴不变, 根据旋转矩阵为</p>
<p>$\left( \begin{matrix} R_2 + R_1 \cos \theta, &amp; R_1 \sin \theta, &amp; 0 \end{matrix} \right)<br>\cdot \left( \begin{matrix} \cos \phi &amp; 0 &amp; \sin \phi \\ 0 &amp; 1 &amp; 0 \\ -\sin \phi &amp; 0 &amp; \cos \phi \end{matrix} \right)$</p>
<p>$&#x3D; \left( \begin{matrix} (R_2 + R_1 \cos \theta)\cos \phi, &amp; R_1 \sin \theta, &amp; -(R_2 + R_1 \cos \theta)\sin \phi \end{matrix} \right)$</p>
<p>如果你希望也绕 x轴转$A$,或者 z轴旋转$B$, 只需要多乘上对应的旋转矩阵就完了</p>
<p>$\left( \begin{matrix}<br>1 &amp; 0 &amp; 0 \\<br>0 &amp; \cos A &amp; \sin A \\<br>0 &amp; -\sin A &amp; \cos A \end{matrix} \right)<br>\cdot<br>\left( \begin{matrix}<br>\cos B &amp; \sin B &amp; 0 \\<br>-\sin B &amp; \cos B &amp; 0 \\<br>0 &amp; 0 &amp; 1 \end{matrix} \right)$</p>
<hr>
<p>但对于上面来说, 会发现它其实整个的旋转中心都是原点,而我们上面给出的3D到2D的投影,过原点的是屏幕而不是物品, 不过幸运的是,我们仅需要把物体沿着z轴平移,就可以让它不再在原点上</p>
<p>对此,我们 令$K_1 &#x3D; z’$控制人屏之间的距离,$K_2 &#x3D; $ 人到物体旋转中心的距离,</p>
<p>$(x’,y’) &#x3D; (z’\frac{x}{z},z’\frac{y}{z}) &#x3D; (\frac{K_1 x}{K_2+z},\frac{K_1 y}{K_2+z})$</p>
<p>其中,第二第三个式子中的z并不相同,第二个是描述的距离人的z,而第三个是距离旋转中心的z</p>
<hr>
<p>把上述的矩阵展开</p>
<p>$\left( \begin{matrix} x \\ y \\ z \end{matrix} \right) &#x3D; \left( \begin{matrix} (R_2 + R_1 \cos \theta) (\cos B \cos \phi + \sin A \sin B \sin \phi) - R_1 \cos A \sin B \sin \theta \\ (R_2 + R_1 \cos \theta) (\cos \phi \sin B - \cos B \sin A \sin \phi) + R_1 \cos A \cos B \sin \theta \\  \cos A (R_2 + R_1 \cos \theta) \sin \phi + R_1 \sin A \sin \theta \end{matrix} \right) &#x3D; \left( \begin{matrix} C_x(\cos B \cos \phi + \sin A \sin B \sin \phi) - C_y \cos A \sin B  \\ C_x(\cos \phi \sin B - \cos B \sin A \sin \phi) + C_y \cos A \cos B \\  C_x \cos A \sin \phi + C_y \sin A \end{matrix} \right)$</p>
<p>其中$C_x,C_y$ 表示绕轴旋转前,圆上的点</p>
<p>实际上和最开始代码中的乘法因子完全不同(留给读者展开,原来的代码也交换了A的sin和cos, 高效的旋转90度,所以估计原来推导有些不同,但都能用)</p>
<hr>
<p>现在呢,知道了像素放在哪里,但是还没有阴影的概念, (也有意义,如果把投影全部同色绘制,就可以当影子看</p>
<p>要计算照明, 我们需要知道平面上每一点的法向量</p>
<p>如果知道了法向量,再和光的方向点积,其中光的方向自定义, </p>
<p>接下来就是向量点级的绝对值越大,亮度越大,正负选一面为看不见(根据法向量方向不同)</p>
<p>如何求法向量呢, 首先注意到法向量和平面同时一起旋转的, 那么对于圆上的点的法向量</p>
<p>是 $(\cos \theta,\sin \theta, 0)$</p>
<p>剩下的无非是乘上旋转矩阵了</p>
<p>$\left( \begin{matrix} N_x, &amp; N_y, &amp; N_z \end{matrix} \right) &#x3D; \left( \begin{matrix} \cos \theta, &amp;<br>\sin \theta, &amp; 0 \end{matrix} \right) \cdot \left( \begin{matrix} \cos \phi &amp; 0 &amp; \sin \phi \\ 0 &amp; 1 &amp; 0 \\ -\sin \phi &amp; 0 &amp; \cos \phi \end{matrix} \right) \cdot \left( \begin{matrix} 1 &amp; 0 &amp; 0 \\<br>0 &amp; \cos A &amp; \sin A \\ 0 &amp; -\sin A &amp; \cos A \end{matrix} \right) \cdot \left( \begin{matrix} \cos B &amp; \sin B &amp; 0 \\ -\sin B &amp; \cos B &amp; 0 \\ 0 &amp; 0 &amp; 1 \end{matrix} \right)$</p>
<p>光的方向,这里选择45度夹角的光$(0,1,-1)$ (这里不是单位向量,长度根号2)</p>
<p>$\begin{aligned} L &amp;&#x3D; \left( \begin{matrix} N_x, &amp; N_y, &amp; N_z \end{matrix} \right) \cdot \left( \begin{matrix} 0, &amp; 1, &amp;  -1 \end{matrix} \right) \\  &amp;&#x3D; \cos \phi \cos \theta \sin B - \cos A \cos \theta \sin \phi - \sin A \sin \theta +  \cos B ( \cos A \sin \theta - \cos \theta \sin A \sin \phi) \end{aligned}$</p>
<p>这样我们有了亮度</p>
<p>剩下的就是选择你希望的 $K_1$(眼睛屏幕距离, 缩放大小),$K_2$(眼睛物体距离),$R_1$ 切面圆形半径,$R_2$ 圆形中心到旋转轴距离</p>
<p>对于代码中,选取的是$R_1&#x3D;1,R_2&#x3D;2$</p>
<hr>
<p>综上</p>
<p>$(x,y,z)$ 由 两个半径,枚举旋转体角度,和绕x轴,z轴旋转 得到</p>
<p>$(x,y,z)$ 投影到$(\frac{K_1 x}{K_2+z},\frac{K_1 y}{K_2+z})$</p>
<p>亮度为$L$</p>
<p>我们有了伪代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">float</span> theta_spacing = <span class="number">0.07</span>; <span class="comment">// 旋转体切面的圆上的点弧度旋转</span></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> phi_spacing   = <span class="number">0.02</span>; <span class="comment">// 旋转体绕轴每份旋转弧度</span></span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> R1 = <span class="number">1</span>; <span class="comment">// 旋转体切面圆半径</span></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> R2 = <span class="number">2</span>; <span class="comment">// 旋转体切面圆心和旋转轴距离</span></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> K2 = <span class="number">5</span>; <span class="comment">// 人和旋转体旋转中心的距离</span></span><br><span class="line"><span class="comment">// 基于屏幕大小计算 K1 </span></span><br><span class="line"><span class="comment">// 对于torus的边缘, 也就是距离旋转中心$R1+R2$</span></span><br><span class="line"><span class="comment">// 我们希望它能被展示到屏幕的 3/8,也就是整个展示到屏幕的6/8,上下左右留白1/8</span></span><br><span class="line"><span class="comment">// 根据3D和2D转换关系</span></span><br><span class="line"><span class="comment">// 屏幕宽度*3/8 = K1*(R1+R2)/(K2+0)</span></span><br><span class="line"><span class="type">const</span> <span class="type">float</span> K1 = screen_width*K2*<span class="number">3</span>/(<span class="number">8</span>*(R1+R2));</span><br><span class="line"></span><br><span class="line"><span class="built_in">render_frame</span>(<span class="type">float</span> A, <span class="type">float</span> B) &#123; <span class="comment">// A,B就是上面的旋转角度</span></span><br><span class="line">  <span class="comment">// 预计算 A,B的sin和cos</span></span><br><span class="line">  <span class="type">float</span> cosA = <span class="built_in">cos</span>(A), sinA = <span class="built_in">sin</span>(A);</span><br><span class="line">  <span class="type">float</span> cosB = <span class="built_in">cos</span>(B), sinB = <span class="built_in">sin</span>(B);</span><br><span class="line">  <span class="comment">// 输出字符</span></span><br><span class="line">  <span class="type">char</span> output[<span class="number">0.</span>.screen_width, <span class="number">0.</span>.screen_height] = <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">  <span class="comment">// 2D屏幕上的点原来在3D物体上的z坐标记录</span></span><br><span class="line">  <span class="type">float</span> zbuffer[<span class="number">0.</span>.screen_width, <span class="number">0.</span>.screen_height] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 且面圆上的点</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">float</span> theta=<span class="number">0</span>; theta &lt; <span class="number">2</span>*pi; theta += theta_spacing) &#123;</span><br><span class="line">    <span class="comment">// 预先计算 theta 的sin和cos</span></span><br><span class="line">    <span class="type">float</span> costheta = <span class="built_in">cos</span>(theta), sintheta = <span class="built_in">sin</span>(theta);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 旋转体 ,上面的圆绕旋转轴旋转phi</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">float</span> phi=<span class="number">0</span>; phi &lt; <span class="number">2</span>*pi; phi += phi_spacing) &#123;</span><br><span class="line">      <span class="comment">// 同样预先计算 phi 的 sin和cos</span></span><br><span class="line">      <span class="type">float</span> cosphi = <span class="built_in">cos</span>(phi), sinphi = <span class="built_in">sin</span>(phi);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 绕y轴旋转前 圆上的点 的 x,y</span></span><br><span class="line">      <span class="type">float</span> circlex = R2 + R1*costheta;</span><br><span class="line">      <span class="type">float</span> circley = R1*sintheta;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 计算出最终的 3D (x,y,z) 坐标, 上面公式是想对于旋转中心,这里z加上K2 表示相对于人的眼睛的</span></span><br><span class="line">      <span class="type">float</span> x = circlex*(cosB*cosphi + sinA*sinB*sinphi)</span><br><span class="line">        - circley*cosA*sinB; </span><br><span class="line">      <span class="type">float</span> y = circlex*(sinB*cosphi - sinA*cosB*sinphi)</span><br><span class="line">        + circley*cosA*cosB;</span><br><span class="line">      <span class="type">float</span> z = K2 + cosA*circlex*sinphi + circley*sinA;</span><br><span class="line">      <span class="type">float</span> ooz = <span class="number">1</span>/z;  <span class="comment">// &quot;one over z&quot;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 计算在屏幕上的x和y,因为是屏幕上原点要移动到 屏幕中心, 至此有了2D上的位置</span></span><br><span class="line">      <span class="type">int</span> xp = (<span class="type">int</span>) (screen_width/<span class="number">2</span> + K1*ooz*x);</span><br><span class="line">      <span class="type">int</span> yp = (<span class="type">int</span>) (screen_height/<span class="number">2</span> - K1*ooz*y);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 计算光照</span></span><br><span class="line">      <span class="type">float</span> L = cosphi*costheta*sinB - cosA*costheta*sinphi -</span><br><span class="line">        sinA*sintheta + cosB*(cosA*sintheta - costheta*sinA*sinphi);</span><br><span class="line">      <span class="comment">// 因为选取的光的模长度sqrt2, 所以光强度[-sqrt2,sqrt2]之间, 小于零的视作在背面直接看不见</span></span><br><span class="line">      <span class="keyword">if</span> (L &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 检查z级别, z越小ooz越大,离人越近,覆盖优先级更高</span></span><br><span class="line">        <span class="keyword">if</span>(ooz &gt; zbuffer[xp,yp]) &#123;</span><br><span class="line">          zbuffer[xp, yp] = ooz;</span><br><span class="line">          <span class="type">int</span> luminance_index = L*<span class="number">8</span>;</span><br><span class="line">          <span class="comment">// luminance_index 现在范围是 0..11 (8*sqrt(2) = 11.3)</span></span><br><span class="line">          <span class="comment">// 因此字符映射如下</span></span><br><span class="line">          output[xp, yp] = <span class="string">&quot;.,-~:;=!*#$@&quot;</span>[luminance_index];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 最后输出output到屏幕即可</span></span><br><span class="line">  <span class="comment">// 在终端里 控制光标到终端的起始,可以重用屏幕输出</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\x1b[H&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; screen_height; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; screen_width; i++) &#123;</span><br><span class="line">      <span class="built_in">putchar</span>(output[i,j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><code>index.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>donut.js<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">async</span>=<span class="string">&quot;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;anim1();&quot;</span>&gt;</span>toggle animation<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">pre</span> <span class="attr">id</span>=<span class="string">&quot;d&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color:#000; color:#ccc; font-size: 10pt;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;anim2();&quot;</span>&gt;</span>toggle animation<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvasdonut&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;240&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">        	<span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;anim3();&quot;</span>&gt;</span>toggle animation<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvascube&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;240&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>index.js</code>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">_onload</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> pretag = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> canvastag = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvasdonut&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> canvascube = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvascube&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> tmr1 = <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">let</span> tmr2 = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This is copied, pasted, reformatted, and ported directly from my original</span></span><br><span class="line">  <span class="comment">// donut.c code</span></span><br><span class="line">  <span class="keyword">let</span> asciiframe= (<span class="function">(<span class="params">A,B</span>) =&gt;</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> b=[];</span><br><span class="line">    <span class="keyword">let</span> z=[];</span><br><span class="line">    A += <span class="number">0.07</span>;</span><br><span class="line">    B += <span class="number">0.03</span>;</span><br><span class="line">    <span class="keyword">let</span> cA=<span class="title class_">Math</span>.<span class="title function_">cos</span>(A), sA=<span class="title class_">Math</span>.<span class="title function_">sin</span>(A),</span><br><span class="line">        cB=<span class="title class_">Math</span>.<span class="title function_">cos</span>(B), sB=<span class="title class_">Math</span>.<span class="title function_">sin</span>(B);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> k=<span class="number">0</span>;k&lt;<span class="number">1760</span>;k++) &#123;</span><br><span class="line">      b[k]= k%<span class="number">80</span> == <span class="number">79</span> ? <span class="string">&quot;\n&quot;</span> : <span class="string">&quot; &quot;</span>;</span><br><span class="line">      z[k]= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;<span class="number">6.28</span>;j+=<span class="number">0.07</span>) &#123; <span class="comment">// j &lt;=&gt; theta</span></span><br><span class="line">      <span class="keyword">let</span> ct=<span class="title class_">Math</span>.<span class="title function_">cos</span>(j),st=<span class="title class_">Math</span>.<span class="title function_">sin</span>(j);</span><br><span class="line">      <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6.28</span>;i+=<span class="number">0.02</span>) &#123;   <span class="comment">// i &lt;=&gt; phi</span></span><br><span class="line">        <span class="keyword">let</span> sp=<span class="title class_">Math</span>.<span class="title function_">sin</span>(i),cp=<span class="title class_">Math</span>.<span class="title function_">cos</span>(i),</span><br><span class="line">            h=ct+<span class="number">2</span>, <span class="comment">// R1 + R2*cos(theta)</span></span><br><span class="line">            D=<span class="number">1</span>/(sp*h*sA+st*cA+<span class="number">5</span>), <span class="comment">// this is 1/z</span></span><br><span class="line">            t=sp*h*cA-st*sA; <span class="comment">// this is a clever factoring of some of the terms in x&#x27; and y&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> x=<span class="number">0</span>|(<span class="number">40</span>+<span class="number">30</span>*D*(cp*h*cB-t*sB)),</span><br><span class="line">            y=<span class="number">0</span>|(<span class="number">12</span>+<span class="number">15</span>*D*(cp*h*sB+t*cB)),</span><br><span class="line">            o=x+<span class="number">80</span>*y,</span><br><span class="line">            N=<span class="number">0</span>|(<span class="number">8</span>*((st*sA-sp*ct*cA)*cB-sp*ct*sA-st*cA-cp*ct*sB));</span><br><span class="line">        <span class="keyword">if</span>(y&lt;<span class="number">22</span> &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; x&gt;=<span class="number">0</span> &amp;&amp; x&lt;<span class="number">79</span> &amp;&amp; D&gt;z[o]) &#123;</span><br><span class="line">          z[o]=D;</span><br><span class="line">          b[o]=<span class="string">&quot;.,-~:;=!*#$@&quot;</span>[N&gt;<span class="number">0</span>?<span class="attr">N</span>:<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pretag.<span class="property">innerHTML</span> = b.<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;)(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="title class_">Math</span>.<span class="property">PI</span>,<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="title class_">Math</span>.<span class="property">PI</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">anim1</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(tmr1 === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      tmr1 = <span class="built_in">setInterval</span>(asciiframe, <span class="number">50</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(tmr1);</span><br><span class="line">      tmr1 = <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This is a reimplementation according to my math derivation on the page</span></span><br><span class="line">  <span class="keyword">let</span> canvasframe = (<span class="function">(<span class="params">A,B</span>) =&gt;</span> <span class="function">(<span class="params">R1,R2,K1,K2,rA,rB</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> ctx = canvastag.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">    ctx.<span class="property">fillStyle</span>=<span class="string">&#x27;#000&#x27;</span>;</span><br><span class="line">    ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, ctx.<span class="property">canvas</span>.<span class="property">width</span>, ctx.<span class="property">canvas</span>.<span class="property">height</span>);</span><br><span class="line"></span><br><span class="line">    A += rA*(<span class="title class_">Math</span>.<span class="title function_">random</span>()+<span class="number">0.5</span>);</span><br><span class="line">    B += rB*(<span class="title class_">Math</span>.<span class="title function_">random</span>()+<span class="number">0.5</span>);</span><br><span class="line">    <span class="comment">// precompute cosines and sines of A, B, theta, phi, same as before</span></span><br><span class="line">    <span class="keyword">let</span> cA=<span class="title class_">Math</span>.<span class="title function_">cos</span>(A), sA=<span class="title class_">Math</span>.<span class="title function_">sin</span>(A),</span><br><span class="line">        cB=<span class="title class_">Math</span>.<span class="title function_">cos</span>(B), sB=<span class="title class_">Math</span>.<span class="title function_">sin</span>(B);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;<span class="number">6.28</span>;j+=<span class="number">0.3</span>) &#123; <span class="comment">// j &lt;=&gt; theta</span></span><br><span class="line">      <span class="keyword">let</span> ct=<span class="title class_">Math</span>.<span class="title function_">cos</span>(j),st=<span class="title class_">Math</span>.<span class="title function_">sin</span>(j); <span class="comment">// cosine theta, sine theta</span></span><br><span class="line">      <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6.28</span>;i+=<span class="number">0.1</span>) &#123;   <span class="comment">// i &lt;=&gt; phi</span></span><br><span class="line">        <span class="keyword">let</span> sp=<span class="title class_">Math</span>.<span class="title function_">sin</span>(i),cp=<span class="title class_">Math</span>.<span class="title function_">cos</span>(i); <span class="comment">// cosine phi, sine phi</span></span><br><span class="line">        <span class="keyword">let</span> ox = <span class="variable constant_">R2</span> + <span class="variable constant_">R1</span>*ct, <span class="comment">// object x, y = (R2,0,0) + (R1 cos theta, R1 sin theta, 0)</span></span><br><span class="line">            oy = <span class="variable constant_">R1</span>*st;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> x = ox*(cB*cp + sA*sB*sp) - oy*cA*sB; <span class="comment">// final 3D x coordinate</span></span><br><span class="line">        <span class="keyword">let</span> y = ox*(sB*cp - sA*cB*sp) + oy*cA*cB; <span class="comment">// final 3D y</span></span><br><span class="line">        <span class="keyword">let</span> ooz = <span class="number">1</span>/(<span class="variable constant_">K2</span> + cA*ox*sp + sA*oy); <span class="comment">// one over z</span></span><br><span class="line">        <span class="keyword">let</span> xp=(<span class="number">150</span>+<span class="variable constant_">K1</span>*ooz*x); <span class="comment">// x&#x27; = screen space coordinate, translated and scaled to fit our 320x240 canvas element</span></span><br><span class="line">        <span class="keyword">let</span> yp=(<span class="number">120</span>-<span class="variable constant_">K1</span>*ooz*y); <span class="comment">// y&#x27; (it&#x27;s negative here because in our output, positive y goes down but in our 3D space, positive y goes up)</span></span><br><span class="line">        <span class="comment">// luminance, scaled back to 0 to 1</span></span><br><span class="line">        <span class="keyword">let</span> L=<span class="number">0.7</span>*(cp*ct*sB - cA*ct*sp - sA*st + cB*(cA*st - ct*sA*sp));</span><br><span class="line">        <span class="keyword">if</span>(L &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          ctx.<span class="property">fillStyle</span> = <span class="string">`rgba(255,255,255,<span class="subst">$&#123;L&#125;</span>`</span>;</span><br><span class="line">          ctx.<span class="title function_">fillRect</span>(xp, yp, <span class="number">10</span>*L, <span class="number">10</span>*L);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="title class_">Math</span>.<span class="property">PI</span>,<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="title class_">Math</span>.<span class="property">PI</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">anim2</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(tmr2 === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      tmr2 = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> <span class="title function_">canvasframe</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">150</span>,<span class="number">5</span>,<span class="number">0.07</span>,<span class="number">0.03</span>), <span class="number">50</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(tmr2);</span><br><span class="line">      tmr2 = <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Cube</span></span><br><span class="line">  <span class="keyword">let</span> canvasframe2 = (<span class="function">(<span class="params">A,B</span>) =&gt;</span> <span class="function">(<span class="params">W,K1,K2,rA,rB,sX,sY</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> ctx = canvascube.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">    ctx.<span class="property">fillStyle</span>=<span class="string">&#x27;#000&#x27;</span>;</span><br><span class="line">    ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, ctx.<span class="property">canvas</span>.<span class="property">width</span>, ctx.<span class="property">canvas</span>.<span class="property">height</span>);</span><br><span class="line"></span><br><span class="line">    A += rA*(<span class="title class_">Math</span>.<span class="title function_">random</span>()+<span class="number">0.5</span>);</span><br><span class="line">    B += rB*(<span class="title class_">Math</span>.<span class="title function_">random</span>()+<span class="number">0.5</span>);</span><br><span class="line">    <span class="comment">// precompute cosines and sines of A, B, theta, phi, same as before</span></span><br><span class="line">    <span class="keyword">let</span> cA=<span class="title class_">Math</span>.<span class="title function_">cos</span>(A), sA=<span class="title class_">Math</span>.<span class="title function_">sin</span>(A),</span><br><span class="line">        cB=<span class="title class_">Math</span>.<span class="title function_">cos</span>(B), sB=<span class="title class_">Math</span>.<span class="title function_">sin</span>(B);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=-W/<span class="number">2</span>;j&lt;W/<span class="number">2</span>;j+=<span class="number">0.2</span>) &#123; <span class="comment">// j &lt;=&gt; theta</span></span><br><span class="line">      <span class="keyword">for</span>(i=-W/<span class="number">2</span>;i&lt;W/<span class="number">2</span>;i+=<span class="number">0.2</span>) &#123;   <span class="comment">// i &lt;=&gt; phi</span></span><br><span class="line">        <span class="keyword">for</span>(z=-W/<span class="number">2</span>;z&lt;W/<span class="number">2</span>;z+=<span class="number">0.2</span>)&#123; <span class="comment">// (j,i,z)</span></span><br><span class="line">          <span class="keyword">let</span> x = j*cB - z*sA*sB - i*cA*sB; <span class="comment">// final 3D x coordinate</span></span><br><span class="line">          <span class="keyword">let</span> y = j*sB + z*cB*sA + i*cA*cB; <span class="comment">// final 3D y</span></span><br><span class="line">          <span class="keyword">let</span> ooz = <span class="variable constant_">K1</span>/(<span class="variable constant_">K2</span> - z*cA + i*sA); <span class="comment">// one over z</span></span><br><span class="line">          <span class="keyword">let</span> xp=(sX/<span class="number">2</span>+ooz*x); <span class="comment">// x&#x27; = screen space coordinate, translated and scaled to fit our 320x240 canvas element</span></span><br><span class="line">          <span class="keyword">let</span> yp=(sY/<span class="number">2</span>-ooz*y); <span class="comment">// y&#x27; (it&#x27;s negative here because in our output, positive y goes down but in our 3D space, positive y goes up)</span></span><br><span class="line">          <span class="comment">// luminance, scaled back to 0 to 1</span></span><br><span class="line">          <span class="keyword">let</span> L=(y + W/<span class="number">2</span> + (z*cA - i*sA)+W/<span class="number">2</span>)/(<span class="number">2</span>*W);</span><br><span class="line">          <span class="keyword">if</span>(L &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ctx.<span class="property">fillStyle</span> = <span class="string">`rgba(255,255,255,<span class="subst">$&#123;L&#125;</span>`</span>;</span><br><span class="line">            ctx.<span class="title function_">fillRect</span>(xp, yp, <span class="number">10</span>*L, <span class="number">10</span>*L);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="title class_">Math</span>.<span class="property">PI</span>,<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="title class_">Math</span>.<span class="property">PI</span>);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">anim3</span> = (<span class="function">(<span class="params">tmr</span>)=&gt;</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(tmr === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      tmr = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> <span class="title function_">canvasframe2</span>(<span class="number">1</span>,<span class="number">300</span>,<span class="number">5</span>,<span class="number">0.07</span>,<span class="number">0.03</span>,<span class="number">300</span>,<span class="number">240</span>), <span class="number">50</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(tmr);</span><br><span class="line">      tmr = <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">anim1</span>();</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">anim2</span>();</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">anim3</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">document</span>.<span class="property">all</span>)</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">attachEvent</span>(<span class="string">&#x27;onload&#x27;</span>,_onload);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>,_onload,<span class="literal">false</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h2 id="去掉数学库"><a href="#去掉数学库" class="headerlink" title="去掉数学库"></a>去掉数学库</h2><p><a href="https://www.youtube.com/watch?v=DEqXNfs_HhY">Lex Fridman Youtube</a></p>
<p><a href="https://www.youtube.com/watch?v=sW9npZVpiMI">Joma Tech</a></p>
<p>早知道会受到这么多关注,我就会在它上面花更多时间</p>
<p>对于程序中来说,<code>sin</code>,<code>cos</code>这两个函数消耗最大,并且需要<code>-lm</code></p>
<p>既然有旋转公式,那么</p>
<p>$\begin{bmatrix} c’ \\ s’ \end{bmatrix} &#x3D; \begin{bmatrix} \cos \theta &amp; -\sin \theta \\ \sin \theta &amp; \cos \theta \end{bmatrix} \begin{bmatrix} c \\ s \end{bmatrix}$</p>
<p>可以每次旋转一度,来完成转换,而不是计算<code>sin/cos</code>, 我们只需要硬编码<code>sin(2pi/314),cos(2pi/314)</code> 即可</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> c=<span class="number">1</span>, s=<span class="number">0</span>;  <span class="comment">// c for cos, s for sin</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">314</span>; i++) &#123;  <span class="comment">// 314 * .02 ~= 2π</span></span><br><span class="line">  <span class="comment">// (use c, s in code)</span></span><br><span class="line">  <span class="type">float</span> newc = <span class="number">0.9998</span>*c - <span class="number">0.019998666</span>*s;</span><br><span class="line">  s = <span class="number">0.019998666</span>*c + <span class="number">0.9998</span>*s;</span><br><span class="line">  c = newc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然而如果如此做下去,会出现误差累积(不论多少精度),最终导致不是个圆形</p>
<p><img data-src="https://www.a1k0n.net/img/sincos-mag.png" alt="误差累积后"></p>
<p>一个思路是每次单位化结果.但如果直接去根号,那还是需要数学库,这一块可以用牛顿切线,不论是直接处理根号,还是根号分之1, 即使没有牛顿切的知识,二分也是类似的思路,就是手动实现开根</p>
<p>不过这里 作者说只做一步牛顿切,觉得它足够接近1</p>
<h2 id="CORDIC"><a href="#CORDIC" class="headerlink" title="CORDIC"></a>CORDIC</h2><ol>
<li>提取cos</li>
</ol>
<p>$\begin{bmatrix} c’ \\ s’ \end{bmatrix} &#x3D; \frac{1}{\cos \theta}\begin{bmatrix} 1 &amp; -\tan \theta \\ \tan \theta &amp; 1 \end{bmatrix} \begin{bmatrix} c \\ s \end{bmatrix}$</p>
<ol start="2">
<li>cos足够接近1, 我们甚至可以省略它,直接只用tan的部分加上牛顿切</li>
</ol>
<p>其中t 是 tan, 宏编程</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> R(t,x,y) \</span></span><br><span class="line"><span class="meta">  f = x; \</span></span><br><span class="line"><span class="meta">  x -= t*y; \</span></span><br><span class="line"><span class="meta">  y += t*f; \</span></span><br><span class="line"><span class="meta">  f = (3-x*x-y*y)/2; \</span></span><br><span class="line"><span class="meta">  x *= f; \</span></span><br><span class="line"><span class="meta">  y *= f;</span></span><br></pre></td></tr></table></figure>

<h2 id="去掉float"><a href="#去掉float" class="headerlink" title="去掉float"></a>去掉float</h2><p>We can use exactly the same ideas with integer fixed-point arithmetic, and not use any float math whatsoever. I’ve redone all the math with 10-bit precision and produced the following C code which runs well on embedded devices which can do 32-bit multiplications and have ~4k of available RAM:</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol>
<li>本身上数学难度算不高,但是涉及了不少现有技术的基础,如3D到2D,光照计算,3D物体旋转,ASCII亮度表现法</li>
<li>混乱后的代码看上去更”有趣”,不过博主没有介绍混淆,只介绍了实现,实际上混淆方法多,用就是了.</li>
<li>基于每一步的详细解读,修改内容可以实现正方体,不同光源,的渲染,如上面代码中就有正方体的渲染</li>
</ol>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p><a href="https://www.a1k0n.net/2006/09/15/obfuscated-c-donut.html">原文0 2006</a></p>
<p><a href="https://www.a1k0n.net/2006/09/20/obfuscated-c-donut-2.html">原文1 2006</a></p>
<p><a href="https://www.a1k0n.net/2011/07/20/donut-math.html">原文2 2011</a></p>
<p><a href="https://www.a1k0n.net/2021/01/13/optimizing-donut.html">原文3 2021</a></p>
<p><a href="https://en.wikipedia.org/wiki/Z-buffering">Z-buffering</a></p>
<p><a href="https://en.wikipedia.org/wiki/Torus">环面 torus</a></p>
<p><a href="https://en.wikipedia.org/wiki/Solid_of_revolution">旋转体 solid of revolution</a></p>
<p><a href="https://en.wikipedia.org/wiki/Rotation_matrix">旋转矩阵 rotation matrix</a></p>
<p><a href="http://en.wikipedia.org/wiki/Surface_normal">平面法线 surface normal</a></p>
<p><a href="https://en.wikipedia.org/wiki/CORDIC">CORDIC</a></p>
]]></content>
      <categories>
        <category>解析几何</category>
      </categories>
      <tags>
        <tag>math</tag>
        <tag>甜甜圈</tag>
      </tags>
  </entry>
  <entry>
    <title>立直麻将 麻雀（マージャン）</title>
    <url>/Math/2023-07-23-Japanese_Mahjong/</url>
    <content><![CDATA[<p>有很多细则这里不一定提及(比如十三幺可以抢按杠,比如宝牌), 主要还是常见普适一点的内容</p>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><p><del>他立任他立,我当他没立</del></p>
<span id="more"></span>

<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>数字牌: 1-9</p>
<p>风牌: 东南西北,其中(当场的风为场风,自家的风为自风(可以重叠计算),非自风的是客风)</p>
<p>三元牌: 白发中</p>
<p>役牌: 三元牌+场风+自风</p>
<p>幺九牌: 1&#x2F;9+风牌+三元牌</p>
<p>总张数$4 * (3 * 9+4+3) &#x3D; 108$</p>
<hr>
<p>对子: X,X</p>
<p>刻子: X,X,X</p>
<p>杠子(杠子要杠出来发挥”刻子的作用”,下面所有刻子包含杠子的意义): X,X,X,X</p>
<p>顺子,(A为数牌,且三张同色): A,A+1,A+2</p>
<p>面子: 刻子(杠子) or 顺子</p>
<p>雀头: 对子</p>
<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>m万p筒s条</p>
<p>黑数字1-9直接1-9, 红5用数字0表示</p>
<p>字牌<strong>没有</strong>统一表示方式,有的地方用下面对应方式</p>
<table>
<thead>
<tr>
<th>东</th>
<th>南</th>
<th>西</th>
<th>北</th>
<th>白</th>
<th>发</th>
<th>中</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>2</td>
<td>3</td>
<td>4</td>
<td>5</td>
<td>6</td>
<td>7</td>
</tr>
</tbody></table>
<h2 id="胡牌-x2F-和"><a href="#胡牌-x2F-和" class="headerlink" title="胡牌&#x2F;和"></a>胡牌&#x2F;和</h2><p>极端情况: 十三幺: 19m19p19s1234567z + 前面任意一张</p>
<p>偶尔可用: 7个对子</p>
<p>最常见: 4面子+1雀头</p>
<p>其中 至少一番才能胡牌</p>
<p>分为自摸(自己抓起胡牌),荣和(其它家弃掉不要的牌正好可以胡牌)</p>
<p><del>振听: 多玩两把就知道了, 主要就是打了的不能作为荣和牌(但是可以自摸)</del></p>
<hr>
<p>那么听牌(再来一张就胡牌了)时:</p>
<p>两对: 3面子+XX,YY</p>
<p>单骑: 4面子+X</p>
<p>边张: 3面子+1雀头+ (12 or 89)</p>
<p>两面: 3面子+1雀头+ (A,A+1) 且不是(12 or 89)</p>
<p>坎张: 3面子+1雀头+ (A,A+2)</p>
<h3 id="打点"><a href="#打点" class="headerlink" title="打点"></a>打点</h3><h3 id="亲-x2F-子"><a href="#亲-x2F-子" class="headerlink" title="亲&#x2F;子"></a>亲&#x2F;子</h3><p>同样牌情况下自己亲家(庄家(东家))时赚得更多(大约是1.5倍)</p>
<p>自己亲家,子家自摸时,自己大约被扣$\frac{1}{2}$的打点</p>
<hr>
<h4 id="番"><a href="#番" class="headerlink" title="番"></a>番</h4><p>一般来讲 番越大赚越多, 基本分为(子), 30符为例</p>
<table>
<thead>
<tr>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4~5</th>
<th>6~7</th>
<th>8~10</th>
<th>11~12</th>
<th>13+</th>
</tr>
</thead>
<tbody><tr>
<td>1000</td>
<td>2000</td>
<td>3900</td>
<td>7700</td>
<td>12000</td>
<td>16000</td>
<td>24000</td>
<td>32000</td>
</tr>
</tbody></table>
<p>基本上可以看作 1,2,4,8,8,12,12,16,16,16,24,24,32..</p>
<p><del>牌型带来的番 基本游戏内会列出</del></p>
<p>同时多个牌型(两杯口 or 七对子) 按番大的算</p>
<h4 id="符"><a href="#符" class="headerlink" title="符"></a>符</h4><blockquote>
<p>平和: 两面 且 雀头不是役牌</p>
</blockquote>
<p>主要体现在 1-4番(低番)时 增加打点,</p>
<p>&#x3D;固定符(七对子25(降为80%), 平和自摸20(降为65%), 副露且20则变为30(基准))</p>
<p>&#x3D;20(符底)+听牌+雀头+刻&#x2F;杠, 向上整十取值</p>
<ul>
<li>听牌(门清荣和+10, 自摸+2, 边张&#x2F;单骑&#x2F;坎张+2(也就是”唯一”听一张时(实际可能同时听多张 例如1234听1,4)))</li>
<li>雀头: 自风&#x2F;场风&#x2F;三元+2 (也就是本来做三张可以带来役&#x2F;一番的牌)</li>
<li>刻&#x2F;杠: 简单说基础是+2, 幺九是非幺九的2倍, 暗是明的2倍, 杠是刻的4倍, 所以从最小 非幺九明刻+2,到最大 幺九暗杠+32</li>
</ul>
<p>对点数影响(子30%基础(30符的点数) &#x2F;每10符)</p>
<ul>
<li>1番时 大约是450庄&#x2F;350子 每10符</li>
<li>2番时 大约是950庄&#x2F;650子 每10符</li>
<li>3番时 大约是1950庄&#x2F;1250子 每10符</li>
<li>4番时 直接和满贯(40符)很接近</li>
</ul>
<p>而常见的</p>
<ul>
<li>25符 7对子(大约是正常的30符的80%)</li>
<li>平和自摸 20符(大约是正常30符的65%)</li>
<li>平和荣和 30符</li>
<li>30符 副露, $\le 1$刻子</li>
<li>$\ge 40符$ 门清荣和(无平和), (因为首先有+10, 然后如果 +2 都不满足 则一定是荣和,所以至少一个+2满足)</li>
</ul>
<p>子家, 括号里是(其他子家,庄家)的陪点数</p>
<p><img data-src="https://i0.hdslb.com/bfs/article/8caca65d808c161412902cf4577dd0786d8af369.jpg@!web-article-pic.avif" alt="图例"></p>
<p>注意到常见的</p>
<ul>
<li>平和+其它2番 的 荣和 &#x3D;3番 只有3900</li>
<li>平和+自摸+其它2番&#x3D;4番 只有5200</li>
<li>立直+平和+自摸+其它2番 的五番 8000</li>
<li>立直+平和+其它2番 的 荣和, 4番30符 7700</li>
</ul>
<p>而且立直还有可能里宝牌加番</p>
<hr>
<p>综上,在不考虑 其他玩家看到立直可能采取防守&#x2F;可能点炮 的情况下, 把番做大(番高了是阶梯函数)赢得越多</p>
<h2 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h2><p>在不考虑其它情况下, 如何尽快做胡</p>
<h3 id="x向听"><a href="#x向听" class="headerlink" title="x向听"></a>x向听</h3><p>胡牌</p>
<p>最少差1张胡牌 &#x3D; 听牌</p>
<p>最少差x张胡牌 &#x3D; x向听</p>
<p>最多6向听: 因为任意牌, 如果摸存在的6张, 则听七对</p>
<p>显然 每次摸牌x至多减1</p>
<h3 id="有效牌-x2F-补强牌"><a href="#有效牌-x2F-补强牌" class="headerlink" title="有效牌&#x2F;补强牌"></a>有效牌&#x2F;补强牌</h3><p>有效牌: 摸一张后, x变为x-1</p>
<p>补强牌: 摸一张后, x还是x, 但是有效牌数量变多</p>
<h3 id="数字两张"><a href="#数字两张" class="headerlink" title="数字两张"></a>数字两张</h3><p>$23 &gt; 13 &gt; 12$</p>
<p><del>数学上显然</del></p>
<p>不妨设 顺子分数为$x$, 显然概率频次下 $8x &gt; 4x$</p>
<p>而$13 \to (1)34,123$, 这$12 \to 123$</p>
<hr>
<p>$14\to 4$, 都是等23,56, 所以不看作2张,是筋</p>
<hr>
<p>对子</p>
<p>0个对子, $3 * 13&#x2F;108&#x3D;0.36111~&#x3D;\frac{1}{3}$ 概率摸成对子,所以做顺子优先级大于对子(??????)</p>
<p>1个对子, 不提供 有效牌张数</p>
<p>2个对子, 提供4张有效牌(相对高的效率)</p>
<p>3个对子, 提供6张有效牌</p>
<p>4+个对子, 考虑七对子&#x2F;对对和路线</p>
<h3 id="单张"><a href="#单张" class="headerlink" title="单张"></a>单张</h3><p>中数字 &gt; 2,8 &gt; 1,9 &gt; 客风</p>
<p>役牌 虽然也是只能刻子, 但是 本身能带来役的作用, 有时为了胡牌,它的役意义会大于好摸的意义, 特别是有很多坎张和幺九时</p>
<p>当然 如果是 混一色的情况, 客风的优点更高</p>
<hr>
<p>不妨设 两连为$x$, 两坎为$y$, $x&gt;y$</p>
<p>那么概率频次下:</p>
<ul>
<li>中间的数字 &#x3D; 8x+8y</li>
<li>2,8 &#x3D; 8x+4y</li>
<li>1,9 &#x3D; 4x+4y</li>
</ul>
<hr>
<p>听牌时,</p>
<p>单骑听牌: 自由度高, 多个A,A+1,A+2时换单骑有 4+3+3+4 种变成复合形</p>
<h2 id="三张"><a href="#三张" class="headerlink" title="三张"></a>三张</h2><p>两面对 344</p>
<p>坎对 244</p>
<p>边对 112&#x2F;122</p>
<p>两坎 A,A+2,A+4</p>
<hr>
<p>XX, 233, 577</p>
<p>三对降二对, 建议 拆3, 损失的是 两个3的听, 其实就是考虑 打3和打7 对方无法达到的状态, 两个都能达到的状态就个数相等不考虑了</p>
<p>拆3频次: 8(XX, 23, 777)+8(XXX, 23, 77)</p>
<p>拆7频次: 4(XX, 333, 5 7)+4(XXX, 33, 5 7)</p>
<p>延伸, 334567m,677p,12388s, 3m比7p还要强,3对降2对,拆3m</p>
<hr>
<p>A,A+1, 233, 577</p>
<p>两对,维持两对, 打5, 也是同理对比对方不能达到的状态</p>
<hr>
<p>简单总结: 降对拆强对, 2对拆弱搭</p>
<hr>
<p>两坎, A,A+2,A+4</p>
<p>一定程度浪费了一张, 但是因为和1坎比多了4张有效牌,所以价值还是高于1坎, 也高于边两张</p>
<p>注意的是,很可能有 镶嵌式的两坎, 356778 &#x3D; 357(两坎)+678 &#x3D; 3+567+78</p>
<h2 id="四张"><a href="#四张" class="headerlink" title="四张"></a>四张</h2><p>A,A+1,A+2,A+3</p>
<p>3-6,4-7 最强(进张多)!, 例如3-6来说1~8 都是进张</p>
<p>但是 1234~&#x3D;4</p>
<hr>
<p>中膨形 A-1,A,A,A+1</p>
<p>强度也不错, 比上面4连弱一点, 把原来单牌的坎进牌变成两面进牌了</p>
<p>同样 1223~&#x3D;2 甚至比单张还差</p>
<hr>
<p>亚两面 A,A,A+1,A+2, (注意1233不算亚两面)</p>
<p>对子越多, a,a,a,a+1,a+2 (暗刻符合形) 价值越低</p>
<p>对子为0,或1 价值稍微高</p>
<p>原理同上面 3对需要降2对</p>
<p>约等于 单张</p>
<p>好处是,一杯口机会&#x2F;平和机会&#x2F;吃上家的A+1改良为A,A+1</p>
<hr>
<p><strong>注意 上面主要在牌的初期阶段, 在接近听牌时拆掉4张成3连 更有利于进张</strong></p>
<p>所以核心还是  缺搭子 缺好搭子时 很有用,而 区块基本都形成后,还有的话就可以拆了</p>
<hr>
<p>螺丝形</p>
<p>3444</p>
<p>6888</p>
<p>1112</p>
<p>从听牌的角度很好, 4+3+4张</p>
<p>缺少对子时很好用,而不缺对子时 甚至比单张数牌还差, 看作 刻子 + 单张</p>
<p>但例子: 88,6777,白白, 如果白被打出来, 则会碰掉(未来会完成的刻子), 从而可以看成只有一个对子88</p>
<p>一向听的时候一般拆掉,</p>
<hr>
<p>跳张形</p>
<p>1345 &gt; 13 </p>
<p>当可以吃上家时更强, 1在一定程度上加强了, (1)345 &gt; 13, (1)345 &gt; 2</p>
<p>而类似的 3 &gt;(2)456 &gt; 2</p>
<p>最强 3567</p>
<p>(4)678 就相对弱 还是比单张4强一点</p>
<p>(5)789&#x3D;5</p>
<p>核心的分析方式还是 枚举所有有效进张带来变化,</p>
<h2 id="五组理论-普通型"><a href="#五组理论-普通型" class="headerlink" title="五组理论(普通型)"></a>五组理论(普通型)</h2><p>23356m889p279s444z, <code>[23356m][889p]2[79s][444z]</code>, 2组1组1组1组, 打2s</p>
<p>133m5579p12367s33z, 对于5579是1组还是两组从其它组反推,</p>
<p>1278m3458p367s367z, 最多找到4组,搭子不足, 单张数牌 重要性提升</p>
<p>33567m34799p126s3z,<code>[33][567m][34][799p][12]6s3z</code>, 虽然有5组,但是799p和12s都是愚形搭子,而且6是中张,这时候6更需要保留,期待摸到45678中的一张,打3z</p>
<p>当牌型好的时候 单张中间也可以放弃</p>
<p>当牌型差的时候,可以考虑保留中间张,为未来换搭子做准备</p>
<p>甚至6组时,去拆弱搭子</p>
<p>45999m677p3478s44z, <code>[45][999m][677p][34][78s][44z]</code>, 只看进张是打7p,但是始终有6组变5组的问题, 而这样的话到1向听的进张反而更少,所以更建议拆78s</p>
<p>拆12的时候,建议先打2</p>
<hr>
<p>例子</p>
<p>3899m123345p2558s, <code>3[899m][123][345p]2[55]8s</code>, 所以考虑2,8s, 而不是9m, 所以9m当前最大进张,但是等到1向听会变少</p>
<p>46999m677p2479s44z, 很多愚形搭子, 不如打7p更多见机行事机会</p>
<hr>
<p>一向听集中理论, 很多时候 一向听到听牌 比 听牌到胡牌更难, 而且如果有 副露高打点,或者立直, 还有施加压力效果(当前 低分段很多头铁哥 ,他立任他立,我当他没立,和他大任他大)</p>
<hr>
<p>当前进张期望 &#x3D; 可进张牌 &#x2F; 未出现的牌(包括对手未知的手牌)</p>
<p>巡数期望 &#x3D; 1&#x2F;进张期望</p>
<hr>
<p>再谈<code>45999m677p3478s44z</code></p>
<p>4z vs 拆78s</p>
<p>难比较, 可以量化麻将, 下面pystyle</p>
<p>这里999m换成123p,从总期望上打7p更大</p>
<p>而且北风是一种安全牌(是一种续航力)</p>
<p>最长立直在7~10巡左右, 早巡立直其实也倾向完全弃和</p>
<p>先制两面立直,平均有60%的胡牌率</p>
<h2 id="有效牌重复"><a href="#有效牌重复" class="headerlink" title="有效牌重复"></a>有效牌重复</h2><p>1,4</p>
<p>(2)5 还是比1&#x2F;9好</p>
<p>(3)6 就还是比 2&#x2F;8好</p>
<hr>
<p>1245, 拆1不会损失, 甚至 先于 单张数牌先拆</p>
<p>1224&#x2F;1334 都推荐弃1</p>
<p>中张会相对好一些例如3556</p>
<hr>
<p>2356m,34p,建议拆23m, 只有4才有相对好的效果过</p>
<p>2356m,24p,建议拆24p</p>
<p>67m5566p, 建议拆6p</p>
<p>68m5566p, 建议拆8m</p>
<p>68m5577p, 建议拆7p</p>
<p>356的3差,而3567的3好</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p><img data-src="https://tiebapic.baidu.com/forum/pic/item/b65ad6c4b74543a9cc5fe6fc58178a82b9011478.jpg?tbpicau=2023-07-29-05_482fb31942430e387069bf586419990a"></p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p><a href="https://tenhou.net/">天凤</a></p>
<p><a href="https://pystyle.info/apps/mahjong-nanikiru-simulator/">https://pystyle.info/apps/mahjong-nanikiru-simulator/</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>bilibili: 星野Poteto 日麻牌效率 合集</p>
]]></content>
      <categories>
        <category>游戏</category>
        <category>立直麻将</category>
      </categories>
      <tags>
        <tag>游戏</tag>
        <tag>立直麻将</tag>
      </tags>
  </entry>
  <entry>
    <title>求手算出x^3+101=y^2的正整数解</title>
    <url>/Math/2024-08-14-Mordell_equation/</url>
    <content><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>$x^3+101&#x3D;y^2$ 求手算一组正整数解</p>
<p>这道题目来自2009年初中数学竞赛的一道题</p>
<p><a href="https://zhidao.baidu.com/question/123254978.html">https://zhidao.baidu.com/question/123254978.html</a></p>
<p><a href="https://zhidao.baidu.com/question/114242326.html">https://zhidao.baidu.com/question/114242326.html</a></p>
<hr>
<p><a href="https://www.zhihu.com/question/664003966">https://www.zhihu.com/question/664003966</a></p>
<p><a href="https://math.stackexchange.com/questions/4957099">https://math.stackexchange.com/questions/4957099</a></p>
<h2 id="一些不算成功的尝试"><a href="#一些不算成功的尝试" class="headerlink" title="一些不算成功的尝试"></a>一些不算成功的尝试</h2><p>在场上 有尝试做一些mod,但没有很多，然后以为不会太大，就开始了暴力计算，当然当场是没有做出这个题目</p>
<hr>
<p>当时赛后 问了汀舅，汀舅给的方案是</p>
<p>做了更多的mod,进一步缩小枚举范围，但没有特别如意</p>
<hr>
<p>最近在整理一些东西，突然又看到了这个，自己尝试了一下</p>
<p>通过 $x^3+1 &#x3D; (x+1)(x^2-x+1)&#x3D;(y-10)(y+10)$ 的变形，让我对于2相关的 幂次很感兴趣</p>
<p>比较容易的得到了 $x\equiv 3\pmod{16}, y\equiv 0 \pmod{4}$ 或 $x\equiv -1\pmod{16}, y\equiv 2 \pmod{4}$</p>
<p>这对于知道答案的来说，的确已经可以暴力手动计算了，但对于不知道答案的来说，其实不知道自己会需要枚举多少个</p>
<h2 id="来自math-stackexchange的提速方案"><a href="#来自math-stackexchange的提速方案" class="headerlink" title="来自math.stackexchange的提速方案"></a>来自math.stackexchange的提速方案</h2><p>$x^3+101&#x3D;y^2\pmod 9$</p>
<p>容易得到 $x\equiv 2 \pmod{3}$,  计算量也不大，因为$x$侧只用关心 $\mod 3$, $y$侧考虑$0\to8$</p>
<hr>
<p>然后 考察</p>
<p>$x^3+101&#x3D;y^2\pmod 8$</p>
<p>可以得到 $x\equiv 3\pmod{8}, y\equiv 0 \pmod{4}$ 或 $x\equiv -1\pmod{8}, y\equiv 2 \pmod{4}$</p>
<hr>
<p>两者结合可以得到 </p>
<p>$x\equiv -1 \pmod{24}, y \equiv 2 \pmod{4}$</p>
<p>$x\equiv 11 \pmod{24}, y \equiv 0 \pmod{4}$</p>
<hr>
<p>$x&#x3D;24a-1,y&#x3D;4b+2$ 通过测试$\pmod{16}$可以得到$a$是偶数,$x&#x3D;48c-1$, 再尝试$\pmod{32}$可以得到$x&#x3D;96d-1$</p>
<p>$x&#x3D;24a+11,y&#x3D;4b$ 通过测试$\pmod{16}$可以得到$a$是奇数$x&#x3D;48c+35$ ??TODO</p>
<h2 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h2><p><a href="https://zhuanlan.zhihu.com/p/27159180">知乎 椭圆曲线的一些基础性质 陆zz</a></p>
<p><a href="https://www.zhihu.com/question/491035924">知乎 </a></p>
<p><a href="https://hr.userweb.mwn.de/numb/mordell.html">https://hr.userweb.mwn.de/numb/mordell.html</a></p>
<p><a href="https://math.stackexchange.com/a/4957401/728591">Travis Willse</a> 大佬说  The following routine in Sage 的结果 看来只有 x&#x3D;-1,和x&#x3D;95两个解</p>
<p><a href="https://math.stackexchange.com/a/4958295/728591">Sayan Dutta</a>  大佬说 这是 Mordell’s equation</p>
<p><a href="http://alpha.math.uga.edu/%7Epete/4400MordellEquation.pdf">http://alpha.math.uga.edu/%7Epete/4400MordellEquation.pdf</a></p>
<p><a href="https://kconrad.math.uconn.edu/blurbs/gradnumthy/mordelleqn1.pdf">https://kconrad.math.uconn.edu/blurbs/gradnumthy/mordelleqn1.pdf</a></p>
<p><a href="https://www.math.leidenuniv.nl/%7Eevertsejh//dio2011-diophantine.pdf">https://www.math.leidenuniv.nl/%7Eevertsejh//dio2011-diophantine.pdf</a></p>
]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>Mordell_s_equation</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>高等代数 零 汇总以及其它</title>
    <url>/Math/Advanced_algebra_0/</url>
    <content><![CDATA[<p>ISBN 978-7-302-22518-8</p>
<p>b站: <a href="https://www.bilibili.com/video/BV1jR4y1M78W">https://www.bilibili.com/video/BV1jR4y1M78W</a></p>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ul>
<li>II 页的总览图</li>
<li>序 其实就是整个脉络，学完后可以保留序</li>
</ul>
<h2 id="随想"><a href="#随想" class="headerlink" title="随想"></a>随想</h2><p>视频 相对于书的优点是push和动态清晰</p>
<p>书相对于视频的优点是，自我节奏和多页快速来回翻看</p>
]]></content>
      <categories>
        <category>高等代数</category>
      </categories>
      <tags>
        <tag>高等代数</tag>
      </tags>
  </entry>
  <entry>
    <title>高等代数 一 线性方程组的解法</title>
    <url>/Math/Advanced_algebra_1/</url>
    <content><![CDATA[<h1 id="第1章-线性方程组的解法"><a href="#第1章-线性方程组的解法" class="headerlink" title="第1章 线性方程组的解法"></a>第1章 线性方程组的解法</h1><p>视频 p3~p7</p>
<h2 id="什么是线性代数"><a href="#什么是线性代数" class="headerlink" title="什么是线性代数"></a>什么是线性代数</h2><ol>
<li>数</li>
<li>代数</li>
<li>方程</li>
<li>方程组</li>
<li>系数矩阵</li>
</ol>
<span id="more"></span>

<h2 id="如何解方程组"><a href="#如何解方程组" class="headerlink" title="如何解方程组"></a>如何解方程组</h2><p>在数域中(有理数集,实数集,复数集)系数矩阵, 一行的倍数加减到另一行, 消元成阶梯矩阵(初等变化)</p>
<p>未知量的系数列向量均不为0, 否则意味着该变量不存在</p>
<h2 id="解的组数"><a href="#解的组数" class="headerlink" title="解的组数"></a>解的组数</h2><p>转换成阶梯矩阵后</p>
<ol start="0">
<li>无解: 转换时出现 $0 &#x3D; d(\ne 0)$ (左侧系数矩阵0,右侧非零)</li>
<li>有且只有一个解: 非零行的数目r &#x3D; 未知数的数目n </li>
<li>有无穷多解: 非零行的数目r &lt; 未知数的数目n</li>
</ol>
<h2 id="数域"><a href="#数域" class="headerlink" title="数域"></a>数域</h2><p>定义: 复数集的一个非空子集$K$如果满足</p>
<ol>
<li>$0,1\in K$</li>
<li>$a,b\in K \to a \pm b , ab\in K$</li>
<li>$a,b \in K, b\ne 0 \to \frac{a}{b} \in K$</li>
</ol>
<p>$K$ 是一个<a href="#%E6%95%B0%E5%9F%9F">数域</a></p>
<p>常见: 有理数域(最小的数域),实数域,复数域(最大的数域)</p>
<h2 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR"></a>TLDR</h2><ul>
<li>矩阵: 解线性方程组提出的 m行n列的 系数<ul>
<li>增广矩阵，包含解的部分</li>
<li>方阵: n&#x3D;m</li>
<li>解法: rref(可以用matlabn), 阶梯型 高斯消元法<ul>
<li>性质：同解</li>
<li>初等行变换<ul>
<li>交换两行位置</li>
<li>一行加到另一行上</li>
<li>一行乘上一个非零数</li>
</ul>
</li>
<li>rref 特点<ul>
<li>是阶梯型</li>
<li>主元全1</li>
<li>左下全0</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>解的情况<ul>
<li>无解</li>
<li>一个解</li>
<li>多个解<ul>
<li>这里的r用的是rref非零行的数目 与 列作比较</li>
</ul>
</li>
</ul>
</li>
<li>数域<ul>
<li>这个感觉 拆分得不够细粒度啊</li>
<li>感觉按后面对域的讲解 应该分成元素 和 运算符</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>高等代数</category>
      </categories>
      <tags>
        <tag>高等代数</tag>
      </tags>
  </entry>
  <entry>
    <title>高等代数 二 行列式</title>
    <url>/Math/Advanced_algebra_2/</url>
    <content><![CDATA[<h1 id="第2章-行列式"><a href="#第2章-行列式" class="headerlink" title="第2章 行列式"></a>第2章 行列式</h1><p>视频 p8~p18</p>
<ol>
<li>希望不做消元探索矩阵性质</li>
<li>考虑2阶矩阵有唯一解充要, 定义行列式代数表达式和符号记法</li>
<li>从2阶拓展到n阶的表达式定义和符号技法(n元排列知识,交换操作与逆序对性质)</li>
<li>相关性质研究(转置,交换,倍数一行, 倍数一行加到另一行上)</li>
</ol>
<h2 id="为什么要行列式"><a href="#为什么要行列式" class="headerlink" title="为什么要行列式"></a>为什么要行列式</h2><p>在没有行列式时, 只有对方程组的系数矩阵消元以后,才知道解的情况, 期望不需要处理矩阵,就能知道相关性质</p>
<span id="more"></span>

<h2 id="n-元排列"><a href="#n-元排列" class="headerlink" title="n 元排列"></a>n 元排列</h2><p>$n$的排列有$n!$个</p>
<p>性质1: 交换相邻元素得到新排列, 会改变<code>逆序对个数</code> 奇偶性</p>
<p>性质2: 交换i和j得到新排列,会改变<code>逆序对个数</code>奇偶性,(相当于多次相邻交换)</p>
<p>性质3: 保持下标和值的对应关系,让值有序而下标不一定有序,那么下标的<code>逆序对个数</code>的奇偶性和变化前的<code>逆序对</code>奇偶性一致S</p>
<p>显然一个数列<code>逆序对个数</code> 的奇偶性只与它内容有关,与交换的具体过程无关</p>
<h2 id="二阶行列式"><a href="#二阶行列式" class="headerlink" title="二阶行列式"></a>二阶行列式</h2><p>考虑$2\cdot 2$矩阵的解的个数</p>
<p>$a_{11}a_{22}-a_{21}a_{12} \ne 0$ 唯一解</p>
<p>$a_{11}a_{22}-a_{21}a_{12} &#x3D; 0$ 无穷多</p>
<p>定义符号$\left |\begin{array}{hls} a_{11} &amp; a_{12} \\ a_{21} &amp; a_{22} \end{array}\right| &#x3D; a_{11}a_{22}-a_{21}a_{12}$</p>
<p>二阶行列式$|A| \ne 0 \Leftrightarrow$   有唯一解</p>
<h2 id="n-阶行列式"><a href="#n-阶行列式" class="headerlink" title="n 阶行列式"></a>n 阶行列式</h2><p>从二阶出发进行思考, 类似的定义n阶, 符号类似用系数表示</p>
<p>对于值的定义: </p>
<ol>
<li>求和的每一项是, 不同行,不同列的元素的乘积</li>
<li>行下标按照顺序, 列下标为全排列</li>
<li>符号为$-1$的<code>列下标逆序对个数</code>的<code>幂次</code></li>
</ol>
<p>即是 $\sum_{j_1j_2\cdots j_n} (-1)^{\tau(j_1j_2\cdots j_n)}\prod_{i&#x3D;1}^n{a_{ij_i}}$ 这才是行列式的定义, 写成 $n\cdot n$的形状只是为了方便书写</p>
<p>$n$阶行列式 称作$n$阶矩阵的行列式</p>
<p>上三角形行列式: 主对角线下方全为$0$ 其值$&#x3D;\prod_{i&#x3D;1}^n a_{ii}$ </p>
<hr>
<p>这里有个后面(克莱姆法则)会解决的问题, 虽然二阶说明了与有唯一解的充要关系, 而这里虽然定义了n阶行列式, 却没有说明和原矩阵之间唯一解的充要关系</p>
<h2 id="行列式性质"><a href="#行列式性质" class="headerlink" title="行列式性质"></a>行列式性质</h2><ol>
<li><p>行列式交换两行, 等于所有被加的元素中的列下标中的两个交换, 因此行列式的两行交换&#x3D;值$\cdot -1$</p>
</li>
<li><p>可以得到$\sum_{i_1i_2\cdots i_n} (-1)^{\tau(i_1i_2\cdots i_n)}\prod_{j&#x3D;1}^na_{i_jj}$</p>
</li>
<li><p>转置:行列互换, 常见的3种写法$A’,A^T,A^t$, 显然行列式值相等$|A|&#x3D;|A^T|$</p>
</li>
<li><p>一行的$k$倍: 考虑代数表达式所有被加的元素都乘了k, 所以显然值也是k倍</p>
</li>
<li><p>一行加另一行上: 考虑代数表达式可以把所有加的括号拆开, 变成两个符号记法之和</p>
</li>
</ol>
<p>$\left |\begin{array}{equation}\cdots &amp; \cdots &amp; \cdots \\ (b_1+c_1) &amp; \cdots &amp; (b_n+c_n) \\ \cdots &amp; \cdots &amp; \cdots \end{array}\right| &#x3D; \left |\begin{array}{equation}\cdots &amp; \cdots &amp; \cdots \\ b_1 &amp; \cdots &amp; b_n \\ \cdots &amp; \cdots &amp; \cdots \end{array}\right| + \left |\begin{array}{equation}\cdots &amp; \cdots &amp; \cdots \\ c_1 &amp; \cdots &amp; c_n \\ \cdots &amp; \cdots &amp; \cdots \end{array}\right|$</p>
<ol start="6">
<li><p>两行成倍数, 考虑分别为$i_0,i_1$ 两行, 那么它的表达式中加法的项 不含符号部分一定有 $\cdots a_{i_0j_{i_0}} a_{i_1j_{i_1}}$ 和 $\cdots a_{i_1j_{i_0}} a_{i_0j_{i_1}}$ , 它们其它项一样,而仅有下标交换, 又有行成倍数, 因此它们绝对值相等而符号相反, 所以行列式的值为$0$, (另一个角度是, 它们可以互换互为相反数则只能是0</p>
</li>
<li><p>一行倍数加到另一行, 根据上面加法和倍数性质, 显然值不变</p>
</li>
<li><p>按一行(列)展开</p>
</li>
</ol>
<p>$&#x3D; a_{11}M_{11}-a_{12}M_{12}+a_{13}M_{13} + \cdots$</p>
<p>去掉行列剩下按照顺序拼接出的叫做<code>余子式</code>$M_{ij}$,带上<code>-1</code>幂次的叫做<code>代数余子式</code>$A_{ij}&#x3D; (-1)^{i+j}M_{ij}$</p>
<p>$&#x3D; a_{11}A_{11}+a_{12}A_{12}+a_{13}M_{13} + \cdots$</p>
<p>证明相等: 显然考虑表达式本来有$-1$的逆序对的幂次, 而移除了$a_{ij}$剩下按原来排列, 那么其内部和之间的逆序对未变化, 都是关于$a_{ij}$相关的, 那么分别是$a_{&lt;i,&gt;j}$和$a_{&gt;i,&lt;j}$ 的个数之和, 设$k &#x3D; a_{&lt;i,&gt;j}$, 那么有$a_{&lt;i,&lt;j} &#x3D; i-1-k$, $a_{&gt;i,&lt;j} &#x3D; j-1-(i-1-k) &#x3D; j-i+k$个, 所以一共$j-i+2k$个, 只考虑奇偶性的话$i+j$的奇偶性,也就有上面的等式, (另一个角度,考虑使用相邻交换把i行和j列分别交换到1行,1列,这样交换了(i-1+j-1)次, 再只需要考虑$a_{11}$的情况即可</p>
<ol start="9">
<li>反过来$i_0\ne i_1$ 时,考虑从代数表达式变成符号记法,带回去会让两行相等, $\sum_{j&#x3D;1}^n a_{i_0j}A_{i_1j} &#x3D;0$</li>
</ol>
<h2 id="克莱姆法则"><a href="#克莱姆法则" class="headerlink" title="克莱姆法则"></a>克莱姆法则</h2><p>n元线性方程组有唯一解的条件</p>
<p>增广矩阵$\to$初等行变换阶梯形, 无解有非零行$(0,\cdots,0,d \ne 0)$, 无穷解非零行数$r &lt; n$,唯一解$r &#x3D; n$</p>
<p>系数矩阵$\to$初等行变换阶梯形</p>
<p>也就对应系数矩阵$\to$初等行变换阶梯形 上三角 有唯一解 (初等变换过程中行列式值不变), 行列式$\ne 0$</p>
<p>同样上面的无解和无穷解都对应行列式$&#x3D; 0$</p>
<p>至此得到了行列式的值与n元线性方程组有唯一解之间的关系</p>
<hr>
<p>推论1: 对于没有常数项的n元齐次n个方程组, 只有0解 $\Leftrightarrow |A|\ne 0$, 有非零解 $|A| &#x3D; 0$</p>
<hr>
<p>取$A$中$k$行$k$列的交叉点按原顺序排,称作$k$阶子式, 对应剩下的是余子式, 根据上面提出$a_{ij}$ 类似的思路,可以考虑先把选定的$k$行$k$列通过相邻交换,换到开头的$k$行$k$列,这样操作次数是, $(i_1-1)+(i_2-2)+\cdots +(i_k-k) + (j_1-1)+(j_2-2)+\cdots +(j_k-k)$, 剩下的就是选定的$k$阶子式子和它的<code>余子式</code>相乘,其<code>余子式</code>乘上$(-1)^(i_1-1)+(i_2-2)+\cdots +(i_k-k) + (j_1-1)+(j_2-2)+\cdots +(j_k-k) &#x3D; (-1)^{\sum_{p&#x3D;1}^k (i_p+j_p)}$则称作代数余子式</p>
<h2 id="laplace定理-指定k行的展开"><a href="#laplace定理-指定k行的展开" class="headerlink" title="laplace定理(指定k行的展开)"></a>laplace定理(指定k行的展开)</h2><p>$|A|&#x3D;$ 任意的指定$k$行后, 所有$k$阶子式和它的代数余子式的乘积之和</p>
<p>上面证明了每一项会怎么变化, 下面证明原行列式的每一项存在且唯一存在于一个乘积之中</p>
<p>其实和一行展开类似, 任何一项对于指定的$k$行来说其列是确定的,则唯一确定了所在的$k$阶子式,证明了每一个都唯一存在于一个</p>
<p>任意两个不同的k阶子式和它的代数余子式的乘积,都是行列式的项,且不会产生相同的加和项</p>
<p>得证</p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>$\left|\begin{array}{d2} A &amp; O \\ C &amp; B \end{array}\right| &#x3D; |A||B|$</p>
<h2 id="行列式在其它地方的应用"><a href="#行列式在其它地方的应用" class="headerlink" title="行列式在其它地方的应用"></a>行列式在其它地方的应用</h2><p>二阶行列式$\left|\begin{array}{d2} a_1 &amp; b_1 \\ a_2 &amp; b_2 \end{array}\right|$ 表示向量$(a_1,a_2)$和$(b_1,b_2)$所构成平行四边形,从$a$到$b$定向面积</p>
<p>三阶行列式, 表示向量$(a_1,a_2,a_3)$,$(b_1,b_2,b_3)$,$(c_1,c_2,c_3)$所构成的平行六面体的定向体积,$a\to b$,c大拇指右手系</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>范德蒙行列式 $&#x3D;\prod_{i&lt;j} (a_j-a_i)$</p>
<hr>
<p>找 f(x,y,z)&#x3D;x3+y3+z3-3xyz 的一次因式?</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x y z</span><br><span class="line">z x y</span><br><span class="line">y z x</span><br><span class="line">感觉还是很妙的</span><br></pre></td></tr></table></figure>

<p>这里有三对角行列式的一般情况的 公式推导</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a b</span><br><span class="line">c a b</span><br><span class="line">  c a b</span><br><span class="line">    c a ...</span><br></pre></td></tr></table></figure>

<p>&#96;</p>
<h2 id="思路总结"><a href="#思路总结" class="headerlink" title="思路总结"></a>思路总结</h2><p>有不少是先看看二阶三阶怎么设计,再推广</p>
<p>但看了18.06我认为这么早上行列式并不好啊，感觉第二第三章顺序可以交换</p>
<ul>
<li>排列<ul>
<li>逆序数 &#x3D; 交换次数奇偶性<ul>
<li>归纳法易证，对于n-1成立，那么对于n个数，考虑n 相邻交换一直到最后 的 操作次数 &#x3D; 额外逆序数</li>
</ul>
</li>
</ul>
</li>
<li>定义：<ul>
<li>这上这个公式，虽然 从2阶，3阶 有端倪，但的确不如18.06的三个基础性质得到公式</li>
</ul>
</li>
<li>性质：<ul>
<li>能代数化前置的一个优点是 证明“更暴力，更不直观，更容易”</li>
<li>图2-1</li>
</ul>
</li>
<li>按一列&#x2F;一行展开<ul>
<li>代数余子式： 也就是 展开时看作 aij的系数的部分，</li>
<li>规律化的推导</li>
<li>特殊Vandermonde 范德蒙行列式<ul>
<li>用处:<ul>
<li>f(x)是n-1次多项式,那么 拟合n个不同的输入 和 n个输出，只有唯一解<ul>
<li>找规律与 f(x)&#x3D;a0+a1x+a2x2+a3x3的线性代数</li>
<li>对于 圆的公式相关 也可以转换成线性方程组</li>
</ul>
<p>				</p>
</li>
<li>因为 输入对应了一个范德蒙矩阵det非零，而 f(x)的系数是要求的 向量，输出 是目标向量</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>Cramer法则<ul>
<li>解的公式表达形式（虽然实际对于大矩阵，还是高斯消元靠谱）</li>
<li>这里Carmer法则又是先给公式再证明，没有推导，从天而来<ul>
<li>18.06是，展开&#x3D;&gt;代数余子式的逆矩阵&#x3D;&gt; 解&#x3D;逆 * 目标 &#x3D;&gt; 逆展开</li>
</ul>
</li>
</ul>
</li>
<li>Laplace定理<ul>
<li>这个18.06倒是没有，相当于行列式计算的分块切割的性质，而分块的每块还可以不连续</li>
</ul>
</li>
<li>应用小天地<ul>
<li>这里也是fib递推 和  解微分方程，但这里连 特征值都还没讲</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>高等代数</category>
      </categories>
      <tags>
        <tag>高等代数</tag>
      </tags>
  </entry>
  <entry>
    <title>高等代数 三 n维向量空间$K^n$</title>
    <url>/Math/Advanced_algebra_3/</url>
    <content><![CDATA[<h1 id="n维向量空间-K-n"><a href="#n维向量空间-K-n" class="headerlink" title="n维向量空间$K^n$"></a>n维向量空间$K^n$</h1><p>P19-P55</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p> $K^n:&#x3D;\lbrace (a_1,a_2,\cdots,a_n) | a_i\in K,i&#x3D;1,2,\cdots,n \rbrace$</p>
<p>其中$K$是数域</p>
<p>规定: </p>
<ol>
<li>向量相等:对应位置元素相等</li>
<li>向量相加:对应位置元素相加</li>
<li>数量乘法:所有元素乘上k倍</li>
<li>零向量:所有元素都为0</li>
</ol>
<p>对应映射$f: A\to B$ , $a$ 在$f$下的像$f(a)$, $a$是$f(a)$的一个原像</p>
<p>满射:$f(A) &#x3D; B$ </p>
<p>单射:不同$a$的$f(a)$不同</p>
<p>双射(一一对应): 单射+满射</p>
<p>笛卡尔积: $A\times B &#x3D; ((a_1,b_1),(a_2,b_2),\cdots,(a_n,b_n))$, $A$,$B$等长</p>
<h2 id="线性空间"><a href="#线性空间" class="headerlink" title="线性空间"></a>线性空间</h2><p>线性空间 &#x3D; 4条加法法则+4条数乘法则</p>
<span id="more"></span>

<p>加法</p>
<ol>
<li>加法交换 $\alpha + \beta &#x3D; \beta + \alpha$</li>
<li>加法结合 $(\alpha + \beta ) + \gamma &#x3D; \alpha + (\beta + \gamma)$</li>
<li>零元$\alpha + 0 &#x3D; \alpha$</li>
<li>负元$\alpha + \beta &#x3D; 0$, 互为负元</li>
</ol>
<p>数乘</p>
<ol start="5">
<li>$1\alpha &#x3D; \alpha$</li>
<li>$(kl)\alpha &#x3D; k(l\alpha)$</li>
<li>$(k+l)\alpha &#x3D; k\alpha + l\alpha$</li>
<li>$k(\alpha+\beta) &#x3D; k\alpha + k\beta$</li>
</ol>
<hr>
<p>线性空间例子</p>
<ol>
<li>几何空间, 以O为起点的所有向量</li>
<li>向量空间 是 数域$K$的一个线性空间</li>
<li>$f(\mathbb{R})\to \mathbb{R}$, 数域$X$上的函数$\mathbb{R}^X$, $(f+g)(\mathbb{R}) &#x3D; f(\mathbb{R})+g(\mathbb{R})$, (3对应零函数,4对应负函数)</li>
</ol>
<h2 id="线性空间性质"><a href="#线性空间性质" class="headerlink" title="线性空间性质"></a>线性空间性质</h2><ol>
<li>唯一$0$元(反证法+交换律+加法性质3) 0a &#x3D; 0a+0b &#x3D; 0b + 0a&#x3D; 0b</li>
<li>每个元素唯一负元(反证法) $\beta_0 &#x3D; \beta_0 + \alpha +\beta_1 &#x3D; \beta_1$</li>
<li>$0\alpha &#x3D; 0$ (数乘+结合率+负元) $0\alpha &#x3D; 0\alpha + 0 &#x3D; 0\alpha + (0\alpha + (-0\alpha)) &#x3D; (0\alpha + 0\alpha) + (-0\alpha) &#x3D; 0\alpha + (-0\alpha) &#x3D; 0$</li>
<li>$k0 &#x3D; 0$</li>
<li>$k\alpha &#x3D; 0$, 则$k &#x3D;0$或$\alpha &#x3D; 0$, ($k\ne 0$时,数乘上$k^{-1}$)</li>
<li>$(-1)\alpha &#x3D; -\alpha$, (结合律+负元定义)</li>
</ol>
<h2 id="线性子空间"><a href="#线性子空间" class="headerlink" title="线性子空间"></a>线性子空间</h2><p>$V$是数域$K$上的一个线性空间,$U$是$V$一个非空子集, 也满足线性空间八条法则,则$U$是$V$的子空间, (注意元素的定义要一致</p>
<p>生成的子空间 $W &#x3D; &lt;\alpha_1,\alpha_2,\cdots,\alpha_s&gt;$ , W的元素都是$\sum k_i \alpha_i$ 得到的, 其中$k_i \in K$, 对于可以被表示的, 称作可以被这些向量线性表出</p>
<p>所以原本的n元线性方程组的问题有解变成: 系数的列向量能否线性表出值的列向量? $\beta \in &lt;\alpha_1,\alpha_2,\cdots,\alpha_s&gt;$?</p>
<h2 id="线性相关与线性无关的向量组"><a href="#线性相关与线性无关的向量组" class="headerlink" title="线性相关与线性无关的向量组"></a>线性相关与线性无关的向量组</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>2个向量: 共线(线性相关): $\exists k_1,k_2$不全为零,让$k_1\alpha + k_2\beta &#x3D; 0$, 否则不共线(线性无关)</p>
<p>线性相关: $\exists k_1,k_2,\cdots,k_s$不全为零,让$\sum_{i&#x3D;1}^s k_i\alpha_i &#x3D; 0$, 否则线性无关</p>
<p>线性<strong>相</strong>关 $\Leftrightarrow$ 相应n元齐次线性方程组有非零解 $\Leftrightarrow$ 行列式$&#x3D;0$</p>
<p>线性<strong>无</strong>关 $\Leftrightarrow$ 相应n元齐次线性方程组只有零解 $\Leftrightarrow$ 行列式$\ne 0$</p>
<p>对于单个向量, 定义$0$向量是线性相关, 非零则线性无关</p>
<h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>线性相关 本身不含0向量的话, 至少有一个向量可以由其它向量线性表出</p>
<p>线性无关: 每一个都不能由其它向量线性表出</p>
<p>命题一: $\beta$可以由线性无关的向量组 $&lt;\alpha_1,\cdots,\alpha_s&gt;$线性表出, 则表出方式唯一(充要)</p>
<p>命题二: 线性无关,添加向量后线性相关, 则添加的向量可被线性表出</p>
<p>极大线性无关组: 当前无关任意添加都会线性相关, 换句话说任意都可以被线性表出</p>
<p><code>基</code>: 线性无关,任何向量可以由它线性表出,和极大线性无关组的关系 (见下面注记)</p>
<p>如果两个向量组可以互相线性表出,则称它们等价, 可以相互线性表出的两个向量组 定义为 “等价”关系, “等价”关系有 自反性, 对称性, 传递性(拆开证)</p>
<p>向量组(r个)能由向量组(s个)线性表出(r&gt;s), 则前面一定线性相关, 相当于带入去解r未知数,s个等式的方程组 一定有非零解</p>
<p>m的大小唯一: 因为如果两个个数不同(m&gt;n)的极大线性无关组,因为可以互相表出, 反过来就是考虑一个m元齐次n个的方程组 是否有非零解? 因为m&gt;n则必有非零解,所以大的个数的不可能是极大线性无关组, 所以所有极大线性无关组的个数两两相等</p>
<p>$&lt;\alpha_1,\cdots,\alpha_s&gt;$ 的任意一个极大线性无关组的个数唯一决定,称作向量组的秩(<code>rank</code>, r只含0的规定为0)</p>
<p>等价 的两个向量组 <code>rank</code>相等: 因为分别取它们的极大线性无关组+线性表出传递性</p>
<p>等价 线性无关的两个向量组 <code>rank</code>相等</p>
<p>空间(集合)与向量组的关系</p>
<p>有限子集线性相关 定义为 其向量组 线性相关</p>
<p>无限子集线性相关 定义为 有一个有限子集 线性相关</p>
<p>空集定义是 线性无关</p>
<p>存在性: 一定存在(教材)</p>
<p>V有一个基是有限子集,则V是有限维的, <code>基</code>的个数叫做<code>维数</code> $dimV$, 只含$0$的线性空间维数为0</p>
<p>V有一个基是无限子集,则V是无限维的</p>
<p>坐标: 列向量 在基中的唯一表出的系数</p>
<p>例子: 三维空间中三个不共面的向量是一个基, 平面是二维的(过定点O的平面), 直线是1维的 (过定点O的直线)</p>
<p>$K^n$ 的标准基$(1,0,\cdots)^T,(0,1,\cdots)^T,\cdots,(0,0,\cdots,1)^T$</p>
<p>$K^n$的$n$个线性无关的向量组都是它的基,(因为任加一个,从个数上一定线性相关,则任加的可以被线性表出)</p>
<p>$dim(V)&#x3D;n$ 则空间$V$中任意$n$个线性无关的一定是基(任意增加,n+1个显然线性相关)</p>
<p>A线性表出B: $rank(B) \le rank(A)$</p>
<hr>
<p>矩阵&#x3D;&gt; 列向量组 &#x3D;&gt; 列秩 &#x3D; dim(列空间) </p>
<p>矩阵&#x3D;&gt; 行向量组 &#x3D;&gt; 行秩 &#x3D; dim(行空间) &#x3D;&gt; 转化阶梯矩阵</p>
<p>线性无关的向量组做延伸组依然线性无关, 先考虑阶梯形矩阵(取主元所在列 得到 线性无关) rank(列向量) &#x3D; 主元个数 &#x3D; rank(行向量)</p>
<p>定理2 初等行变换不改变矩阵行rank</p>
<ol>
<li>交换显然</li>
<li>行倍加到另一行, 变后的可以用原来的行线性表出, 原的也可以用现在的线性表出, 所以两个等价, rank 相等</li>
<li>某行乘倍数, 同样 也是变前后相互可以表出, 所以等价,所以rank相等</li>
</ol>
<p>定理3 矩阵的初等行变换不改变列rank</p>
<p>考虑 方程组 随着初等行变换, 和原方程组同解, 因此 变化前后 的有非零解和无非零解 和 变化后一致 所以 不改变列rank(既然rank与极大线性无关组有关,而极大线性无关组与运算得到0元有关, 同解保证了 原来能得到表达式, 在新的里才能得到0元, (因为非0元不能通过初等行变化变为0元))</p>
<p>综上 对于一般矩阵 初等行变换 行列rank 不变 成为阶梯形矩阵, 行rank &#x3D; 列 rank</p>
<p>定理4 因此也有矩阵的rank &#x3D; 矩阵的转置的rank</p>
<p>定理5 A的rank &#x3D; A的不为0的子式的最高阶数(找线性无关rank行得到子矩阵,再找线性无关rank列 构成的rank x rank 的线性无关, 那么变化阶梯形 行列式不变 最终不为0,说明存在,不为0的rank乘rank的A的子式)</p>
<p>矩阵的初等行&#x2F;列变换 不改变矩阵的秩</p>
<hr>
<p>空间 的 交并 与 空间基的集合的交并 并不等价</p>
<h2 id="子空间"><a href="#子空间" class="headerlink" title="子空间"></a>子空间</h2><p>直和 : V的子空间$V_1,V_2$ 如果$V_1+V_2$中的每个向量$\alpha&#x3D;\alpha_1+\alpha_2,\alpha_1\in V_1,\alpha_2\in V_2$ 表法唯一，那么称作直和, 充要条件$V_1 交 V_2 &#x3D; 0向量$</p>
<ul>
<li>0的表法也唯一, 说明 两个空间之间无线性相关的向量</li>
<li>所以 两个的基的 代数和为0的解 只有零解,  所以所有基线性无关，所以 dim(V1+V2)&#x3D;dim(V1)+dim(V2)-dim(V1 交 V2)</li>
</ul>
<h2 id="线性映射"><a href="#线性映射" class="headerlink" title="线性映射"></a>线性映射</h2><p>对应书的4.7</p>
<p>穿插了一点 集合知识</p>
<ul>
<li>定义域</li>
<li>陪域 (值域包含于陪域，值域中的元素是 定义域元素经过变化得到所有值的集合，陪域并不保证元素都有定义域的来源)</li>
<li>值域 $\mathrm{Im} f$</li>
<li>满射：值域&#x3D;陪域</li>
<li>单射 不同元素的象不同</li>
<li>双射 （一一对应<ul>
<li>可逆映射</li>
</ul>
</li>
<li>核 Ker sigma: $\alpha \in K^n | \sigma(\alpha)&#x3D;0$</li>
<li>同构映射$\sigma: V\to V’$ 那么$V$与$V’$同构, 这里也感觉不够精确，括号里的运算是$V$中的,而外部的运算是$V’$中的，应该区分这个加和乘?<ul>
<li>$\sigma(x+y)&#x3D;\sigma(x)+\sigma(y)$ 保持加法</li>
<li>$\sigma(kx)&#x3D;k\sigma(x)$ 保持乘法</li>
<li>性质 $V$的基 通过$\sigma$ 映射到$V’$也是基</li>
<li>两个有限维的线性空间同构，则 dim相等，也就是极大线性无关组个数相同，也就是唯一表出相同</li>
</ul>
</li>
</ul>
<p>映射结合律</p>
<ul>
<li>fgh(x)&#x3D;f(gh(x))&#x3D;fg(h(x))</li>
</ul>
<p>TODO 三十一 ~ 三十六</p>
<h2 id="注记"><a href="#注记" class="headerlink" title="注记"></a>注记</h2><p>向量组里是秩rank, 空间集合集合里是维数dim, $dim&lt;\alpha_1,\cdots,\alpha_s&gt; &#x3D; rank\lbrace \alpha_1,\cdots,\alpha_s \rbrace$, 都是研究极大线性无关组(内线性无关,未被选的若加入都可表示(线性相关)), 注意的是并不是按照V的个数, 比如 (x,x,y) 看起来3维, 但基(对于空间无序)只有2个,所以是2维</p>
<p>向量组是有序有限的, 而空间是由基础的一系列向量做加法和数乘构成的集合</p>
<p>这里的特殊条件就是 只含$0$向量的时候有些需要特殊定义(规定),</p>
<p>例如 $\emptyset$是只含0向量的一个极大线性无关集, 规定为它是{0}的基</p>
<p>这里过程也是很多从2个到多个, 从特殊的阶梯形到一般矩阵</p>
<h3 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR"></a>TLDR</h3><p>先4条加法，4条乘法 定义线性空间</p>
<ul>
<li>然后 矩阵的列向量 运算 与 n维度空间基 做一一对应，把研究 列向量组合 变为研究n维空间的基，把求解与属于空间 唯一表示做关联</li>
</ul>
<p>线性相关</p>
<ul>
<li>线性组合&#x2F;可表示 &lt;-&gt; 属于生成空间</li>
</ul>
<p>秩</p>
<ul>
<li>极大线性无关组<ul>
<li>向量组 &#x3D;等价&#x3D; 极大无关线性组</li>
<li>个数称为秩</li>
</ul>
</li>
<li>表出的性质 </li>
<li>向量空间，子空间的基与维数</li>
<li>向量组的rank &#x3D; 生成空间的最大线性无关组<ul>
<li>初等变换<ul>
<li>可表示原理 不改变行rank</li>
<li>同解原理 不改变列rank</li>
<li>所以初等变化成阶梯形 行rank 列rank未改变，又都是主元个数</li>
</ul>
</li>
<li>满秩 &lt;&#x3D;&gt; det \neq 0</li>
<li>有解 解空间和解，这里 丘老师 是通过秩 与 增广矩阵秩 来研究解的存在性 个数，而mit18.06 是通过 先nullspace,再所有解&#x3D; 特解+nullspace来完成的</li>
</ul>
</li>
<li>视频比 书多了很多章的 子空间相关的</li>
</ul>
]]></content>
      <categories>
        <category>高等代数</category>
      </categories>
      <tags>
        <tag>高等代数</tag>
      </tags>
  </entry>
  <entry>
    <title>高等代数 四 矩阵的运算</title>
    <url>/Math/Advanced_algebra_4/</url>
    <content><![CDATA[<h1 id="矩阵的运算"><a href="#矩阵的运算" class="headerlink" title="矩阵的运算"></a>矩阵的运算</h1><p>P55-65</p>
<span id="more"></span>

<p>矩阵和 $C&#x3D;A+B, C_{ij}&#x3D;A_{ij}+B_{ij}$</p>
<p>矩阵乘 $C&#x3D;AB, C_{ij}&#x3D;\sum_{k} A_{ik}B_{kj}$</p>
<p>特殊矩阵</p>
<ul>
<li>对角矩阵</li>
<li>基本矩阵: 只有一个元素是1,其它全是0</li>
<li>上&#x2F;下 三角矩阵</li>
<li>初等矩阵：初等变换操作的“操作矩阵”</li>
<li>对称矩阵 $A^T &#x3D; A$</li>
<li>反对称&#x2F;斜对称矩阵 $A^T&#x3D;-A$</li>
</ul>
<p>矩阵乘积</p>
<p>用旋转的矩阵表达 来讲矩阵乘法 同时有了自然的 和差化积 积化和差</p>
<ul>
<li><p><code>[cos,-sin;sin,cos]</code></p>
</li>
<li><p>秩 rank(AB) &lt;&#x3D; min(rank(A),rank(B)), 从表出容易证明，小于存在的例子 [0,1;0,0]</p>
</li>
<li><p>行列式 |AB|&#x3D;|A||B| </p>
<ul>
<li>证明 分块矩阵技术<code>|[A,0;-I,B]|=|A||B|</code></li>
</ul>
</li>
<li><p>Binet-Cauthy</p>
<ul>
<li>$|A_{mn}B_{nm}| &#x3D; 0, m &gt; n$</li>
<li>$|A_{mn}B_{nm}| &#x3D; \sum |A’<em>{m}B’</em>{m}|, m \le n$ 算法比赛用到过，右边是 $A,B$的所有$m$阶子式子相乘（其中 A选的列序号 和 B选的行序号相等）<ul>
<li>依然是分块矩阵技术 $[A,0;-I,B]$ 需要注意和上面不同的是，这里A,B不是方阵</li>
</ul>
</li>
<li>cauchy恒等式, $n\ge 2$时 $\displaystyle (\sum_{i&#x3D;1}^n a_ic_i)(\sum_{i&#x3D;1}^n b_id_i)-(\sum_{i&#x3D;1}^n a_id_i)(\sum_{i&#x3D;1}^n b_ic_i)&#x3D;\sum_{1\le j&lt;k\le n} (a_jb_k-a_kb_j)(c_jd_k-c_kd_j)$</li>
<li>Cauchy-Bunyakovsky 不等式 $\displaystyle (\sum_{i&#x3D;1}^n {a_i^2})(\sum_{i&#x3D;1}^n {b_i^2}) \ge (\sum_{i&#x3D;1}^n {a_ib_i})^2$ , 等号成立当且仅当 a和b线性相关</li>
</ul>
</li>
</ul>
<p>$AA’&#x3D;I,|A|&#x3D;-1$ 证明$|I+A|&#x3D;0$</p>
<p>$|I+A|&#x3D;|AA’+AI|&#x3D;|A(A’+I)|&#x3D;|A||A’+I|&#x3D;(-1)|(A+I)’|&#x3D;(-1)|A+I|$ 得证</p>
<p>例6~例8 全部用的 矩阵的元素是$\sum$, 然后通过拆解成两个矩阵相乘来解</p>
<p>A和B都是n阶矩阵 AB和BA的r阶的所有主子式和相等：（n阶矩阵乘法的非交换性中提取的可交换的量）</p>
<p>例题 4.3.16 对于$A$,如果 存在$m$使得$rank(A^m)&#x3D;rank(A^{m+1})$那么$rank(A^m)&#x3D;rank(A^{m+k})$</p>
<ul>
<li>y属于$A^{m+1}$列空间存在$x$,使得$y&#x3D;A^{m+1}x&#x3D;A(A^{m}x)$, 注意到右侧是$A^m$的列空间中的向量，而$A^{m+1}$的列空间是$A^m$的列空间的子空间，却维度相等，所以两个列空间相等，所以$A^mx$ 也可以用$A^{m+1}z$ 表示, 所以$y&#x3D;A(A^{m+1}z)$, 说明 任何$A^m$的列空间向量都可以在$A^{m+2}$中表出，而$A^{m+2}$的列空间又是它的子空间，所以两个列空间相等，得证</li>
<li>再配上容斥原理 可得 4.4.例12 对于n阶矩阵 $rank(A^n)&#x3D;rank(A^{n+k})$</li>
</ul>
<p>4.4 例13 A&#x3D;LU</p>
<h2 id="可逆矩阵"><a href="#可逆矩阵" class="headerlink" title="可逆矩阵"></a>可逆矩阵</h2><ul>
<li>$A^{-1}A&#x3D;I$</li>
<li>伴随矩阵 $A^{*}A&#x3D;|A|I$</li>
<li>$|A^{-1}|&#x3D;\frac{1}{|A|}A^{*}$</li>
<li>高斯消元法 初等变化 + 增广矩阵 求 逆矩阵</li>
</ul>
<h2 id="4-5-矩阵的分块"><a href="#4-5-矩阵的分块" class="headerlink" title="4.5 矩阵的分块"></a>4.5 矩阵的分块</h2><ul>
<li>分块情况下的运算，这感觉很偏应用吧，能加快运算</li>
<li>另一个用处就是这里很多 秩相关的，行列式相关的，可以用分块来证明</li>
</ul>
<p>Sylvester秩不等式  $A_{sn},B_{nm}$: 有$rank(AB)\ge rank(A)+rank(B)-n$</p>
<ul>
<li>$(I_n,0;0,AB)&#x3D;(B,I_n;0,A)$</li>
</ul>
<p>幂等矩阵 充要: $rank(A)+rank(I-A)&#x3D;n$</p>
<ul>
<li>$A^2&#x3D;A$ 即$A-A^2&#x3D;0$ 即 $(A,0;0,I-A)&#x3D;(A-A^2,0;0,I)$</li>
</ul>
<h2 id="4-6-正交矩阵-欧几里得空间-R-n"><a href="#4-6-正交矩阵-欧几里得空间-R-n" class="headerlink" title="4.6 正交矩阵 欧几里得空间$R^n$"></a>4.6 正交矩阵 欧几里得空间$R^n$</h2><p>这个 视频上没有？我看视频课，矩阵运算p65结束，p66就开始多项式了，而多项式是高代的第七章</p>
<p>实数域上 正交$AA^T&#x3D;I$</p>
<ul>
<li>$A^{-1}&#x3D;A^T$ 也是正交</li>
<li>可逆</li>
<li>$A,B$是正交则$AB$也是正交</li>
<li>$\det A&#x3D; 1,-1$<ul>
<li>$|A|^2&#x3D;|A^TA|&#x3D;|I|$</li>
</ul>
</li>
</ul>
<h2 id="4-7-K-n-到-K-s-的线性映射"><a href="#4-7-K-n-到-K-s-的线性映射" class="headerlink" title="4.7 $K^n$到$K^s$的线性映射"></a>4.7 $K^n$到$K^s$的线性映射</h2><p>这部分在视频课里是第三章中间p45-p54</p>
]]></content>
      <categories>
        <category>高等代数</category>
      </categories>
      <tags>
        <tag>高等代数</tag>
      </tags>
  </entry>
  <entry>
    <title>Fermat&#39;s two square theorem</title>
    <url>/Math/Fermat_s_two_square_theorem/</url>
    <content><![CDATA[<h1 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h1><p>对于奇素数$p$有能被表示成$p &#x3D; a^2+b^2$和$p &#x3D; 4k+1$为充要条件</p>
<h1 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h1><h2 id="一定不是-4k-3"><a href="#一定不是-4k-3" class="headerlink" title="一定不是$4k+3$"></a>一定不是$4k+3$</h2><p>众所周知</p>
<p>$(4k+0)^2 \equiv 0 \pmod 4$</p>
<p>$(4k+1)^2 \equiv 1 \pmod 4$</p>
<p>$(4k+2)^2 \equiv 0 \pmod 4$</p>
<p>$(4k+3)^2 \equiv 1 \pmod 4$</p>
<p>所以</p>
<p>$a^2 + b^2 \not\equiv 3 \pmod 4$</p>
<p>那么有了充分, 如果$p &#x3D; a^2+b^2$则一定$p &#x3D; 4k+1$</p>
<h2 id="p-x3D-4k-1-to-p-x3D-a-2-b-2"><a href="#p-x3D-4k-1-to-p-x3D-a-2-b-2" class="headerlink" title="$p&#x3D;4k+1 \to p&#x3D;a^2+b^2$"></a>$p&#x3D;4k+1 \to p&#x3D;a^2+b^2$</h2><p>现在问题剩下就是如果 奇素数$p &#x3D; 4k+1$, 如何证明它可以被表示成$a^2+b^2$</p>
<h2 id="Euler’s-proof-by-infinite-descent"><a href="#Euler’s-proof-by-infinite-descent" class="headerlink" title="Euler’s proof by infinite descent"></a>Euler’s proof by infinite descent</h2><h3 id="如果两个整数都能表示为两个平方数之和，则它们的积也能表示为两个平方数之和"><a href="#如果两个整数都能表示为两个平方数之和，则它们的积也能表示为两个平方数之和" class="headerlink" title="如果两个整数都能表示为两个平方数之和，则它们的积也能表示为两个平方数之和"></a>如果两个整数都能表示为两个平方数之和，则它们的积也能表示为两个平方数之和</h3><p><code>Brahmagupta-Fibonacci Identity</code></p>
<p>$(a^2+b^2)(c^2+d^2) &#x3D; (ac+bd)^2 + (ad-bc)^2$</p>
<blockquote>
<p>只有$ad&#x3D;bc$ 时右侧有0的平方 , 也就是两个整数成$c^2&#x2F;a^2$的倍数</p>
</blockquote>
<span id="more"></span>

<h3 id="如果一个能表示为两个平方数之和的整数被另一个能表示为两个平方数之和的素数整除，则它们的商也能表示为两个平方数之和"><a href="#如果一个能表示为两个平方数之和的整数被另一个能表示为两个平方数之和的素数整除，则它们的商也能表示为两个平方数之和" class="headerlink" title="如果一个能表示为两个平方数之和的整数被另一个能表示为两个平方数之和的素数整除，则它们的商也能表示为两个平方数之和"></a>如果一个能表示为两个平方数之和的整数被另一个能表示为两个平方数之和的素数整除，则它们的商也能表示为两个平方数之和</h3><p>$a^2+b^2 &#x3D; k (c^2+d^2)$,$(c^2+d^2) &#x3D; p$为素数</p>
<p>$(cb-ad)(cb+ad) &#x3D; c^2(a^2+b^2)-a^2(c^2+d^2) &#x3D; (c^2k-a^2)p$</p>
<p>若$cb-ad$ 是 p 的倍数(另一半假设,对称同理)</p>
<p>$kp^2 &#x3D; (a^2+b^2)(c^2+d^2) &#x3D; (ac+bd)^2+(ad-bc)^2$</p>
<p>得到 $ap+bq$ 也是 p的倍数</p>
<p>$k &#x3D; (\frac{ac+bd}{p})^2+(\frac{ad-bc}{p})^2$ 能表示成整数的平方和</p>
<h3 id="如果一个能表示为两个平方数之和的整数被另一个不能表示为两个平方数之和的整数整除，则它们的商也必有一个不能表示为两个平方数之和的因子"><a href="#如果一个能表示为两个平方数之和的整数被另一个不能表示为两个平方数之和的整数整除，则它们的商也必有一个不能表示为两个平方数之和的因子" class="headerlink" title="如果一个能表示为两个平方数之和的整数被另一个不能表示为两个平方数之和的整数整除，则它们的商也必有一个不能表示为两个平方数之和的因子"></a>如果一个能表示为两个平方数之和的整数被另一个不能表示为两个平方数之和的整数整除，则它们的商也必有一个不能表示为两个平方数之和的因子</h3><p>$a^2+b^2 &#x3D; x \cdot p_1 \cdot p_2 \cdots p_n$ x不能表示为两个数的平方和, 则 $p_i$ 中至少有一个不能表示为两个平方数之和的因子</p>
<p>如果$p_i$ 都能表示成，那么根据上面的结论，必定能表示成平方和，矛盾</p>
<h3 id="如果-a-b-互素，那么-a-2-b-2-所有因子都能表示为两个平方数之和"><a href="#如果-a-b-互素，那么-a-2-b-2-所有因子都能表示为两个平方数之和" class="headerlink" title="如果$a,b$互素，那么$a^2+b^2$ 所有因子都能表示为两个平方数之和"></a>如果$a,b$互素，那么$a^2+b^2$ 所有因子都能表示为两个平方数之和</h3><p>$a^2+b^2 &#x3D; x \cdot p_1 \cdot p_2 \cdots p_n $</p>
<p>$a &#x3D; mx \pm c, b &#x3D; nx \pm d$, 其中 $ 2|c| \leq x,2|d| \leq x$</p>
<p>有 $a^2+b^2 &#x3D; m^2x^2 \pm 2mxc + c^2 + n^2x^2 \pm 2nxd + d^2 &#x3D; Ax+(c^2+d^2)$</p>
<p>$c^2+d^2 &#x3D; kx$</p>
<p>令$g &#x3D; gcd(c,d)$</p>
<p>因为$\gcd(a,b)&#x3D;1 \Rightarrow \gcd(a,x)&#x3D;1 \Rightarrow \gcd(c,x)&#x3D;1$, 同理 $\gcd(d,x)&#x3D;1$, 所以$\gcd(g,x)&#x3D;1$</p>
<p>$g^2((\frac{c}{g})^2+(\frac{d}{g})^2) &#x3D; kx$, 说明中间的部分也是$x$的倍数</p>
<p>能得到 $e^2+f^2&#x3D;k_1x$ 且$e,f$互素</p>
<p>$k_1x &#x3D; e^2+f^2 \leq c^2+d^2 \leq (\frac{x}{2})^2 + (\frac{x}{2})^2 &#x3D; \frac{x^2}{2}$</p>
<p>有 $k_1 \leq \frac{x}{2}$</p>
<p>由上一个定理，若x非平方和，那么k包含非平方和因子,令这个因子为$x’$</p>
<p>$x’ \leq k_1 \leq \frac{x}{2} &lt; x $</p>
<p>综上 如果$a,b$互质,$x$是 $a^2+b^2$ 的因子，且$x$不能被表示成两个数的平方和，那么存在一个小于$x$的数$x’$，也满足是$e^2+f^2$的因子($\gcd(e,f)&#x3D;1,e\le a,f\le b$),且$x’ &lt; x$小，同时也是不能表示成两个数的平方和。</p>
<p>然而整数无法无限下降，所以所有因子都能表示成两个数的平方和</p>
<p>即若$\gcd(a,b)&#x3D;1$,那么$a^2+b^2$的质因子只有$2$和$4k+1$形式的</p>
<h3 id="4n-1-形式的素数是平方分解数"><a href="#4n-1-形式的素数是平方分解数" class="headerlink" title="$4n+1$形式的素数是平方分解数"></a>$4n+1$形式的素数是平方分解数</h3><p>$p &#x3D; 4n + 1$</p>
<p>$1,2^{4n},3^{4n},…,(4n)^{4n}$ 模$p$余1 (费马小定理)</p>
<p>$2^{4n}-1,3^{4n}-2^{4n},…,(4n)^{4n}-(4n-1)^{4n}$ 均是$p$的倍数</p>
<p>$a^{4n} - b^{4n} &#x3D; (a^{2n}+b^{2n})(a^{2n}-b^{2n})$</p>
<ol>
<li>若 $p$ 是任意一个 $a^{2n}+b^{2n}$ 的因子，注意到 $a,p$ 互质, $b,p$互质,$a,b$ 互质（a&#x3D;b+1）</li>
</ol>
<p>由上一条引理，$p$ 是互素平方和的因子，所以$p$可以拆解成两个数的平方和</p>
<ol start="2">
<li>否则 $p$ 是所有 $a^{2n}-b^{2n}$ 的因子</li>
</ol>
<p>$(x+1)^{2n} - x^{2n} &#x3D; ((x+1)^n + x^n) ((x+1)^n - x^n)$</p>
<h4 id="差分-f-x-为-n-次多项式，那么-f-x-的-n-阶差分为-n-a-n"><a href="#差分-f-x-为-n-次多项式，那么-f-x-的-n-阶差分为-n-a-n" class="headerlink" title="差分 $f(x)$ 为$n$次多项式，那么 $f(x)$ 的$n$阶差分为 $n!a_n$"></a>差分 $f(x)$ 为$n$次多项式，那么 $f(x)$ 的$n$阶差分为 $n!a_n$</h4><p><img data-src="http://nonagon.org/ExLibris/sites/default/files/images/Differences-Cubes.jpg" alt="差分"></p>
<p>$ f(x) &#x3D; a_0 + a_1x $</p>
<p>$ f(x+1) - f(x) &#x3D; a_1 $ 一次多项式得证</p>
<p>若 $n-1$次多项式成立</p>
<p>设 $f$ 是$n$次多项式 $ f(x) &#x3D; a_0 + a_1x+ \cdots + a_nx^n $</p>
<p>$ g(x) &#x3D; f(x+1) - f(x) &#x3D; k_0 + k_1x+ \cdots + a_n \cdot n x^{n-1} $</p>
<p>$g$是 $n-1$次多项式，且其最高项的系数为 $a_n \cdot n $</p>
<p>因为 $g(x)$ 的$n-1$阶差分为 $(n-1)!(a_n \cdot n)  &#x3D; n! a_n$，归纳法递推得证</p>
<p>回到上面 我们因为p是所有减法式子的因子，因此$f(x) &#x3D; x^{2n}$的$2n$阶差分为$(2n)!$, 差分过程中始终是$p$的倍数</p>
<p>而$(2n)!$不是$p$的倍数，所以矛盾。必然$p$是上面某个加法的因子</p>
<blockquote>
<p>综上，$4n+1$ 形式的素数是平方分解数</p>
</blockquote>
<p>$4n+3$ 根据模4的余数，显然不是</p>
<blockquote>
<p>综上充要得证: 一个奇素数是平方分解数，那么它是$4n+1$, 一个素数是$4n+1$形式，那么它是平方分解数</p>
</blockquote>
<h3 id="补充性质"><a href="#补充性质" class="headerlink" title="补充性质"></a>补充性质</h3><p>$p &#x3D; x^2+y^2$ 质数唯一表示</p>
<p>$p &#x3D; a^2+b^2&#x3D;c^2+d^2$</p>
<p>轮换性质，不妨设$a&gt;c&gt;d&gt;b$</p>
<p>$(ac+bd)(ad+bc) &#x3D; (a^2+b^2)cd +(c^2+d^2)ab &#x3D; p(cd+ab)$</p>
<p>至少一个是p的倍数, 若 $(ac+bd) &#x3D; Kp$ ,</p>
<p>$0 &lt; (a-c)^2+(b-d)^2 &#x3D; a^2+b^2+c^2+d^2-2ac-2bd &#x3D; 2p-2Kp &lt; 2p $，</p>
<p>同时除2,$0 &lt; p-Kp &lt; p $ 矛盾</p>
<p>因此$p$ 唯一表示成两个</p>
<h2 id="Lagrange’s-proof-through-quadratic-forms"><a href="#Lagrange’s-proof-through-quadratic-forms" class="headerlink" title="Lagrange’s proof through quadratic forms"></a>Lagrange’s proof through quadratic forms</h2><p>TODO</p>
<h2 id="Dedekind’s-two-proofs-using-Gaussian-integers"><a href="#Dedekind’s-two-proofs-using-Gaussian-integers" class="headerlink" title="Dedekind’s two proofs using Gaussian integers"></a>Dedekind’s two proofs using Gaussian integers</h2><p>TODO</p>
<h2 id="Proof-by-Minkowski’s-Theorem"><a href="#Proof-by-Minkowski’s-Theorem" class="headerlink" title="Proof by Minkowski’s Theorem"></a>Proof by Minkowski’s Theorem</h2><p>TODO</p>
<h2 id="Zagier’s-“one-sentence-proof”"><a href="#Zagier’s-“one-sentence-proof”" class="headerlink" title="Zagier’s “one-sentence proof”"></a>Zagier’s “one-sentence proof”</h2><p><a href="https://people.mpim-bonn.mpg.de/zagier/files/doi/10.2307/2323918/fulltext.pdf">https://people.mpim-bonn.mpg.de/zagier/files/doi/10.2307/2323918/fulltext.pdf</a></p>
<h2 id="Roger-Heath-Brown-in-1971"><a href="#Roger-Heath-Brown-in-1971" class="headerlink" title="Roger Heath-Brown in 1971"></a>Roger Heath-Brown in 1971</h2><p>$p &#x3D; 1 + 4k$</p>
<p>如果可以拆分，显然一奇一偶</p>
<p>$p &#x3D; x^2+ (2y)^2 &#x3D; x^2+4y^2$</p>
<p>考虑</p>
<p>$p &#x3D; x^2+4yz$</p>
<p>有解$(x,y,z) &#x3D; (1,1,k)$, 注意到如果 $y\neq z$,那么$(x,y,z)$如果是一组解,则有$(x,z,y)$,形成配对</p>
<p>那么如果能证明$p&#x3D;x^2+4yz$的所有解的个数是奇数个，那么必定有不能配对的就是$y&#x3D;z$的, 就是一个解了(这种方法不会直接给到如何计算，但是从存在性上完成证明)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   b</span><br><span class="line">cccb</span><br><span class="line"> dob</span><br><span class="line"> daaa</span><br><span class="line"> d</span><br><span class="line"></span><br><span class="line">   b</span><br><span class="line">cooo</span><br><span class="line"> ooo</span><br><span class="line"> oooa</span><br><span class="line"> d</span><br></pre></td></tr></table></figure>

<p>以$x^2$拼<code>o</code>,然后以类似上面形式拼4个$yz$</p>
<p>那么 只有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   c</span><br><span class="line">   c</span><br><span class="line">   c</span><br><span class="line">dddobbb</span><br><span class="line">   a</span><br><span class="line">   a</span><br><span class="line">   a</span><br></pre></td></tr></table></figure>

<p>唯一对应$(y,z)$ (因为 相当于$y&#x3D;x$的情况,即$p&#x3D;x^2+4xz&#x3D;x(x+4z)$只有$x&#x3D;1$)</p>
<p>而其它的都对应两个不同的$(y,z)$的解</p>
<p>得证</p>
<h1 id="x-2-ny-2"><a href="#x-2-ny-2" class="headerlink" title="$x^2+ny^2$"></a>$x^2+ny^2$</h1><p>原文见Cox的书</p>
<p>有几个性质(稍后证明):</p>
<p>$p&#x3D;x^2+y^2, x,y \in \mathbb{Z} \Leftrightarrow p\equiv 1 \pmod 4$</p>
<p>$p&#x3D;x^2+2y^2, x,y \in \mathbb{Z} \Leftrightarrow p\equiv 1 \mathrm{or} 3 \pmod 8$</p>
<p>$p&#x3D;x^2+3y^2, x,y \in \mathbb{Z} \Leftrightarrow p&#x3D;3 \mathrm{or} p \equiv 1 \pmod 3$</p>
<hr>
<p>$(x^2+ny^2)(z^2+nw^2) &#x3D; (zx\pm nyw)^2+n(xw\mp yz)^2$</p>
<hr>
<p>若$N &#x3D; x^2+ny^2, p | N,p&#x3D;a^2+nb^2,\gcd(a,b) &#x3D; 1$, $p$是质数</p>
<p>参考$n&#x3D;1$时</p>
<p>$(ax-nby)(ax+nby) &#x3D; a^2x^2-n^2b^2y^2 &#x3D; a^2(x^2+ny^2) - ny^2(a^2+nb^2) &#x3D; a^2N - ny^2p$</p>
<p>因此前面至少一个是p的倍数, 不妨设$c&#x3D;\frac{ax-nby}{p}$,则$d&#x3D;\frac{bx+ay}{p}$,均为整数</p>
<p>因此如果$N&#x3D;x^2+ny^2$且有质因子也能表示成$p&#x3D;a^2+ny^2$,那么$\frac{N}{p}$也可以表示成$c^2+nd^2$</p>
<hr>
<p>若$N&#x3D;x^2+ny^2, N &#x3D; zz’$,而$z$无法被表示成$a^2+nb^2$,则$z’$中有无法被表示成$a^2+nb^2$形式的质因子</p>
<p>反证法, 若$z’$的的所有质数因子都能被表示,根据上面的$\frac{N}{p_1}$能被表示$\frac{N}{p_1p_2}$,这样逐个除$z’$中的质因子,最终$z$也可以被表示矛盾</p>
<hr>
<p>对于$p | x^2+ny^2,\gcd(x,y)&#x3D;1$, 因为知道$t^2 \equiv (p-t)^2\pmod p$, 所以可以取$x &#x3D; min(|x| \bmod p, p - |x| \bmod p) \le \frac{p}{2}$, 对于$y$同理</p>
<p>注意的是，在调整到$\le \frac{p}{2}$的过程中 $\gcd(x,y)&#x3D;1$可能会不满足,但是注意到$gcd(x,p)&#x3D;1,gcd(y,p)&#x3D;1$,即$\gcd(\gcd(x,y),p) &#x3D; 1$,因此即使过程$\gcd(x,y)\neq 1$,只需要$x,y$同时除以$gcd(x,y)$即可</p>
<p>因此可以取$|x|,|y|\le \frac{p}{2}$ 因为$\gcd(x,y)&#x3D;1$，只有$x&#x3D;y&#x3D;\frac{p}{2} &#x3D; 1$时才会有同时小于等于取等,也就是$p&#x3D;2$的特殊q情况</p>
<p>对于一般$p&gt;3$的情况, 则当$n\le 3$时, $x^2+ny^2 &lt; (\frac{p}{2})^2 + n(\frac{p}{2})^2 &#x3D;\frac{1+n}{4}p^2 \le p^2$时</p>
<p>这就是Fermat的当$p &gt; 3$是$x^2+ny^2$的因子时,可以通过调整$x,y$让$x^2+ny^2 &lt; p^2$</p>
<p>那么有如果$p$不可被表示,则$1 &lt; \frac{x^2+ny^2}{p} &lt; p$且不可被表示,无法无穷下降</p>
<p>综上$x^2+ny^2,n\le 3,\gcd(x,y)&#x3D;1$时, 它的质因子形式都是$a^2+nb^2$</p>
<p>特殊的</p>
<p>对于$n&#x3D;2$时，如果$2|x$则考虑$y^2+2(\frac{x}{2})^2$, 最后会递降到3</p>
<p>其中对于$n&#x3D;3$ 时,如果$3|x$则考虑$y^2+3(\frac{x}{3})^2$,可能有$4$也是因子, 即$4p | x^2+3y^2,gcd(x,y)&#x3D;1$</p>
<p>但是注意到$x-3y,x+3y$ 至少一个是4的倍数,因此同上面拆的部分可得到$p|x’^2+3y’^2$, 也就是当$x,y$同时为奇数的时候，可以除以$1^2+3\cdot 1^2$来完成下降,直到$p$可以表示或者$x,y$一个奇一个偶数</p>
<hr>
<p>$p&#x3D;x^2+ny^2$ and Quadratic Reciprocity</p>
<p>($n&#x3D;5$时Euler和Fermat都知道这个结论不一定 $21&#x3D;1^2+5\cdot 2^2, 3|21$,但是$3$不能被表示)</p>
<p>Legendre symbol (a是整数,p是奇质数)</p>
<p>${\displaystyle \left({\frac {a}{p}}\right)&#x3D;{\begin{cases}1&amp;{\text{if }}a{\text{ is a quadratic residue modulo }}p{\text{ and }}a\not \equiv 0{\pmod {p}},\\ -1&amp;{\text{if }}a{\text{ is a quadratic nonresidue modulo }}p,\\ 0&amp;{\text{if }}a\equiv 0{\pmod {p}}.\end{cases}}}$</p>
<p>或者$(\frac{a}{p}) &#x3D; a^{\frac{p-1}{2}} \pmod p$</p>
<p>对于$1,-1$也就是是否存在$x^2 \equiv a \pmod p$,因为存在时显然$a^{\frac{p-1}{2}} \equiv x^{p-1} \equiv 1 \pmod p$</p>
<p>设$g$为模$p$的一个原根,则存在$k$使$g^k\equiv n \pmod p$,所以$(g^k)^{\frac{p-1}{2}} \equiv 1 \pmod p$, 因为$g$是原根,所以$p-1 | k\cdot \frac{p-1}{2}$, 因此$\frac{k}{2}$是整数,所以$n \equiv (g^{\frac{k}{2}})^2$</p>
<p>综上$x^2 \not\equiv a\pmod p \Leftrightarrow (\frac{a}{p}) &#x3D; -1$</p>
<hr>
<p>定理1.7: $n$是非零整数, $p$是奇质数且$p\nmid n$, 则 $p \mid x^2+ny^2,\gcd(x,y)&#x3D;1 \Leftrightarrow (\frac{-n}{p})&#x3D;1$</p>
<p>因为$x^2+ny^2\equiv 0 \pmod p, gcd(x,y)&#x3D;1$ 则$gcd(y,p) &#x3D; 1$</p>
<p>$x^2 \equiv -ny^2 \pmod p$</p>
<p>$(x^2)^{\frac{p-1}{2}} \equiv (-ny^2)^{\frac{p-1}{2}} \pmod p$</p>
<p>$x^{p-1} \equiv (-n)^{\frac{p-1}{2}}y^{p-1} \pmod p$</p>
<p>$1 \equiv (-n)^{\frac{p-1}{2}}\cdot 1 \pmod p$</p>
<p>正向得证</p>
<p>即存在$z^2 \equiv -n \pmod p$</p>
<p>即$z^2 + n\cdot 1^2 \equiv -n+n \equiv 0 \pmod p, gcd(z,1)&#x3D;1$</p>
<p>反向得证，充要得证</p>
<hr>
<p>然后欧拉发现了一些</p>
<p>$(\frac{-3}{p}) &#x3D; 1 \Leftrightarrow p\equiv 1,7 \mod 12$</p>
<p>$(\frac{-5}{p}) &#x3D; 1 \Leftrightarrow p\equiv 1,3,7,9 \mod 20$</p>
<p>$(\frac{-7}{p}) &#x3D; 1 \Leftrightarrow p\equiv 1,9,11,15,23,25 \mod 28$</p>
<p>$(\frac{3}{p}) &#x3D; 1 \Leftrightarrow p\equiv \pm 1 \mod 12$</p>
<p>$(\frac{5}{p}) &#x3D; 1 \Leftrightarrow p\equiv \pm 1,\pm 9 \mod 20$, (注这里$\pm 9$也可以写成$\pm 11$,但是$\pm 9$会让人发现都是奇数平方)</p>
<p>$(\frac{7}{p}) &#x3D; 1 \Leftrightarrow p\equiv \pm 1,\pm 9,\pm 25 \mod 28$</p>
<hr>
<p>但不是所有都能变成平方，比如</p>
<p>$(\frac{6}{p}) &#x3D; 1 \Leftrightarrow p\equiv \pm 1,\pm 5 \mod 24$</p>
<p>但6不是质数</p>
<hr>
<p>若$p$是奇质数,</p>
<p>若$p\equiv 1 \pmod 4, (\frac{-1}{p}) &#x3D; 1$</p>
<p>若$p\equiv 3 \pmod 4, (\frac{-1}{p}) &#x3D; -1$</p>
<p>证明 $(\frac{-1}{p}) \equiv (-1)^{\frac{p-1}{2}} \pmod p$, 显然得证</p>
<hr>
<p>猜想1.9, 如果$p,q$是不同的质数,则$(\frac{q}{p}) &#x3D; 1 \Leftrightarrow p\equiv \pm \beta^2 \bmod 4q$对于一些奇数$\beta$, (待证明)</p>
<p>命题1.10(重要,也就是而二次互反律quadratic reciprocity) 若$p,q$是不同奇质数,则1.9等价于 $(\frac{p}{q})(\frac{q}{p}) &#x3D; (-1)^{\frac{(p-1)(q-1)}{4}}$</p>
<p>证明: 显然$(\frac{-1}{p}) &#x3D; (-1)^{\frac{p-1}{2}}$,$(\frac{ab}{p}) &#x3D; (\frac{a}{p})(\frac{b}{p})$</p>
<p>????????</p>
<p>Page 27&#x2F;363</p>
<h1 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h1><p><a href="https://yexiaorain.github.io/Blog/pe/233">https://yexiaorain.github.io/Blog/pe/233</a></p>
<p><a href="https://mathoverflow.net/a/299696/500903">https://mathoverflow.net/a/299696/500903</a></p>
<p><a href="http://www.math.toronto.edu/~ila/Cox-Primes_of_the_form_x2+ny2.pdf">http://www.math.toronto.edu/~ila/Cox-Primes_of_the_form_x2+ny2.pdf</a></p>
<p><a href="https://nonagon.org/ExLibris/euler-proves-fermats-theorem-sum-two-squares">https://nonagon.org/ExLibris/euler-proves-fermats-theorem-sum-two-squares</a></p>
<p><a href="https://en.wikipedia.org/wiki/Legendre_symbol">https://en.wikipedia.org/wiki/Legendre_symbol</a></p>
<p><a href="https://www.youtube.com/watch?v=VBPrP4nChbo">https://www.youtube.com/watch?v=VBPrP4nChbo</a></p>
<p><a href="http://ramanujan.math.trinity.edu/rdaileda/teach/f20/m3341/lectures/lecture18_slides.pdf">http://ramanujan.math.trinity.edu/rdaileda/teach/f20/m3341/lectures/lecture18_slides.pdf</a></p>
<p><a href="https://egrove.olemiss.edu/cgi/viewcontent.cgi?article=2539&amp;context=etd">https://egrove.olemiss.edu/cgi/viewcontent.cgi?article=2539&amp;context=etd</a></p>
]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>Fermat</tag>
        <tag>平方和定理</tag>
      </tags>
  </entry>
  <entry>
    <title>高等代数 五 矩阵的相抵与相似</title>
    <url>/Math/Advanced_algebra_5/</url>
    <content><![CDATA[<h1 id="矩阵的相抵与相似"><a href="#矩阵的相抵与相似" class="headerlink" title="矩阵的相抵与相似"></a>矩阵的相抵与相似</h1><p>没有视频课？？？</p>
<hr>
<p>希望把矩阵分类</p>
<p>定义1, S非空集合, $W$是$S\times S$的一个子集,叫做二元关系, $(a,b)\in W$,那么称它们有该二元关系$aWb,a\sim b$</p>
<p>定义2, 等价关系</p>
<ul>
<li>$a\sim a$ 反身性</li>
<li>$a\sim b\rightarrow b\sim a$ 对成性</li>
<li>$a\sim b,b\sim c\rightarrow a\sim c$ 传递性</li>
</ul>
<p>定义3, $\sim$是等价关系$\bar{a}$表示等价类</p>
<p>$a,b\in S$</p>
<ul>
<li>$\bar{a}&#x3D;\bar{b}$或$\bar{a}\cap\bar{b}&#x3D;\emptyset$</li>
</ul>
<p>定义4, $S&#x3D;\cup S_i,S_i\cap S_j&#x3D; \emptyset$ 则是$S$ 的一个划分$\pi(S)$</p>
<p>所有等价类组成划分</p>
<p>定义5, $\sim$是$S$ 上的一个等价关系, 有所有等价类组成的集合称为$S$对于关系$\sim$的商集, 记作$S&#x2F;\sim$</p>
<p>例子,</p>
<ul>
<li>实数集R,二元关系 $a\sim b, a-b\in Z$, 再附加 $\sigma : R&#x2F;Z \to [0,1)$</li>
<li>实数集R, 二元关系$a\sim b,\lfloor a\rfloor &#x3D; \lfloor b \rfloor$</li>
<li>平面点集$\pi$, $p_1\sim p_2, x_1-x_2\in Z 且 y_1-y_2\in Z$</li>
</ul>
<h2 id="矩阵的相抵"><a href="#矩阵的相抵" class="headerlink" title="矩阵的相抵"></a>矩阵的相抵</h2><p>数域K上$A_{sn},B_{sn}$</p>
<p>如果A经过一系列初等变化 变成 矩阵B,那么A与B相抵</p>
<ul>
<li>存在可逆矩阵P,Q, 使得$PAQ&#x3D;B$</li>
</ul>
<p>定理1 设r&#x3D;rank(A),则A相抵于 $[I_r,0;0,0]$ 相抵标准形</p>
<p>定理2 A,B形状相同，那么rank(A)&#x3D;rank(B) &lt;-&gt; 相抵</p>
<h2 id="5-3-广义逆矩阵"><a href="#5-3-广义逆矩阵" class="headerlink" title="5.3 广义逆矩阵"></a>5.3 广义逆矩阵</h2><p>Ax&#x3D;b</p>
<ul>
<li>如果A可逆，唯一解</li>
<li>如果不可逆，且有解 如何找到这个“表达”<ul>
<li>希望找到 $AXA&#x3D;A$ 说实在的还是 神奇中有些自然，自然中有些神奇</li>
<li>$A_{sn}&#x3D;P_s[I_r,0;0,0]Q_n$, 其中$P,Q$是可逆的</li>
<li>$X&#x3D;Q^{-1}[I_r,B;C,D]P^{-1}$, 其中B,C,D是 任意的 （这里B,C,D的观感的确没有SVD好，但是从这个角度上给出了 多个广义的逆</li>
</ul>
</li>
<li>记作$A^{-}$</li>
</ul>
<p>$Ax&#x3D;b$ 有解的充要条件是$b&#x3D;AA^{-}b$</p>
<p>通解为$A^{-}\beta$: 说人话就是i任意一个解$x$可以找到对应$A^{-}$使得 $x&#x3D;A^{-}\beta$</p>
<ul>
<li>同样按照上面 拆A,的方式去凑</li>
<li>这样看来又比SVD的好，因为SVD的视角是唯一的</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 0 1</span><br><span class="line">0 1 1</span><br><span class="line">0 0 0</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A=[1,0,1;0,1,1;0,0,0];</span><br><span class="line">[U,S,V]=svd(A);</span><br><span class="line">W=[1/sqrt(3),0,0;0,1,0;0,0,0];</span><br><span class="line">RA=V*W*U&#x27;; </span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">U:</span><br><span class="line">1/sqrt(2)  -1/sqrt(2)</span><br><span class="line">1/sqrt(2)   1/sqrt(2)</span><br><span class="line">                      1</span><br><span class="line">  </span><br><span class="line">S:</span><br><span class="line">sqrt(3)</span><br><span class="line">        1</span><br><span class="line">           0</span><br><span class="line">           </span><br><span class="line">V:</span><br><span class="line">1/sqrt(6)  -1/sqrt(2) -1/sqrt(3)</span><br><span class="line">1/sqrt(6)   1/sqrt(2) -1/sqrt(3)</span><br><span class="line">2/sqrt(6)   0          1/sqrt(2)</span><br><span class="line"></span><br><span class="line">这里 A= U*S*V&#x27;</span><br><span class="line"></span><br><span class="line">发现 A*RA = [1,0,0;0,1,0;0,0,0] 但是RA*A并不如此好看， 不过这样 是满足了这里的 A*RA*A = A (容易证明)</span><br></pre></td></tr></table></figure>

<p>这里的P,Q没有个一个具体的实践方案，主要讨论其存在性和可表示性，而svd切实的提出了 通过$AA^T$和$A^TA$的特征向量组成的单位正交基矩阵</p>
<hr>
<p>$Ax&#x3D;0$的通解为 $x&#x3D;(I_n-A^{-}A)Z$, Z是$K^n$中任意向量 (可证明充要性)</p>
<p>因此$Ax&#x3D;b$的通解还可以写做 $x&#x3D;A^{-}b+(I_n-A^{-}A)Z$</p>
<h3 id="Penrose-方程组"><a href="#Penrose-方程组" class="headerlink" title="Penrose 方程组"></a>Penrose 方程组</h3><p>定义 Morre-Penrose 广义逆 满足</p>
<ul>
<li>$AXA&#x3D;A$</li>
<li>$XAX&#x3D;X$</li>
<li>$(AX)^H&#x3D;AX$</li>
<li>$(XA)^H&#x3D;XA$</li>
</ul>
<p>定理5: 复数域上 非零矩阵，Penrose方程组总是有唯一解（这就是SVD的那个解吧）？</p>
<p>$A&#x3D;BC$,其中B和C分别是 列满秩和行满秩的矩阵</p>
<p>则唯一解是 $X&#x3D;C^H(CC^H)^{-1}(B^HB)^{-1}B^H$, 不是这然后就带入证明了？？？这突兀感觉太强了。TODO 如何drop from sky的</p>
<p>你看SVD的理论基础 矩阵Ax如果x属于行向量空间那么输出和列向量空间一一对应且满足线性关系，所以才有了 (A * (行向量空间的基+nullspace的基))&#x3D;(列空间基+nullspace(A^T)的基) * 对角Sigma的想法，就感觉上更自然，这里直接甩我一个表达式，然后证明 是解又唯一真的怪</p>
<h2 id="5-4-矩阵的相似"><a href="#5-4-矩阵的相似" class="headerlink" title="5.4 矩阵的相似"></a>5.4 矩阵的相似</h2><p>好好好，先讲相似后讲特征值是吧！？！？</p>
<p>定义还是 $A&#x3D;QBQ^{-1}$</p>
<ul>
<li>行列式相等</li>
<li>同时可逆或不可逆（由上）</li>
<li>相等的rank</li>
</ul>
<p>trace(AB)&#x3D;trace(BA) ： 证明：展开对角项 （这里其实 需要保证A和B^T的形状相同）</p>
<ul>
<li>相似有 trace相等, trace(A)&#x3D;trace(QBQ^{-1})&#x3D;trace(Q^{-1}QB)&#x3D;trace(B)</li>
</ul>
<p>可对角化: n个线性无关的列向量, $Q^{-1}AQ&#x3D;\Lambda$，写了特征值形式，但没提到特征值</p>
<h3 id="5-5-特征值与特征向量"><a href="#5-5-特征值与特征向量" class="headerlink" title="5.5 特征值与特征向量"></a>5.5 特征值与特征向量</h3><ul>
<li>定义与等价命题</li>
<li>特征多项式的根 对应特征值(注意不是充要 比如 <code>[1,1;0,1]</code>和<code>[1,0;0,1]</code>)&#96;<ul>
<li>相似矩阵特征多项式相同 $|A-xI|&#x3D;|QBQ^{-1}-xQQ^{-1}|&#x3D;|Q||B-xI||Q^{-1}|$</li>
</ul>
</li>
<li>对于“重复特征值”<ul>
<li>对应的特征向量 维度 叫做 几何重数</li>
<li>对于 特征多项式根的重数 叫做 代数重数<ul>
<li>几何重数 &lt;&#x3D; 代数重数:  证明: 维数选基 &#x3D;&gt; 类似对角化 &#x3D;&gt; 特征多项式 &#x3D;&gt; 幂次不少于</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="5-6-可对角化条件"><a href="#5-6-可对角化条件" class="headerlink" title="5.6 可对角化条件"></a>5.6 可对角化条件</h2><ul>
<li>n个线性无关的特征向量<ul>
<li>不同特征值对应的 特征子空间维数 和为n</li>
</ul>
</li>
<li>不同特征值 的特征向量 两两线性无关<ul>
<li>不同特征值 的特征向量 任意个线性无关</li>
<li>n个不同特征值 一定可以对角化</li>
</ul>
</li>
<li>定理5： 全部复根属于数域K,且每个特征值的几何重数&#x3D;代数重数</li>
</ul>
<p>幂等矩阵</p>
<ul>
<li>一定可以对角化:<ul>
<li>特征值0和1 : $(\lambda-\lambda^2)b&#x3D;0$</li>
<li>0特征值 对应解空间 rank(A)&#x3D;n-r</li>
<li>根据4.5章节通过分块证明了 幂等矩阵充要 rank(A)+rank(I-A)&#x3D;n<ul>
<li>所以1的特征值 对应 n-rank(I-A)&#x3D;r个特征向量</li>
</ul>
</li>
<li>相似trace不变 ，所以trace &#x3D; trace(对角化后) &#x3D; 特征向量1的个数 &#x3D; rank(A)</li>
</ul>
</li>
</ul>
<p>例3. $\sum_i^s A_i&#x3D;I$, 且$A_i$全为幂等矩阵，那么$\sum_{i&#x3D;1}^s rank(A_i)&#x3D;n$</p>
<ul>
<li>n&#x3D;trace(I)&#x3D;trace(sum ai)&#x3D;sum trace(ai) &#x3D; sum rank(ai)</li>
</ul>
<p>例4, 不为零矩阵的幂零矩阵不能对角化</p>
<ul>
<li>幂零矩阵特征值 只有0<ul>
<li>0 &#x3D; det 0 &#x3D; det A^l &#x3D; (det a)^l<ul>
<li>det a &#x3D; 0, 所以0是特征值</li>
<li>$\lambda^lb&#x3D;A^lb&#x3D;0b&#x3D;0$ 只有0</li>
</ul>
</li>
<li>0对应特征空间维数 &lt; n</li>
</ul>
</li>
</ul>
<h2 id="5-7-实对称矩阵的对角化"><a href="#5-7-实对称矩阵的对角化" class="headerlink" title="5.7 实对称矩阵的对角化"></a>5.7 实对称矩阵的对角化</h2><p>$x^2+4y^2+z^2-4xy-8xz-4yz&#x3D;1$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(x,y,z) (1  -2 -4) (x)</span><br><span class="line">        (-2  4 -2) (y)</span><br><span class="line">        (-4 -2  1) (z)                  </span><br></pre></td></tr></table></figure>

<p>$a^TAa$的形式</p>
<p>希望把$A$对角化 $a^TQ^{-1}\Lambda Qa$ 这样反过去$Qa$对应新的$x,y,z$ 变来只有平方项的表达</p>
<p>实对称矩阵</p>
<ul>
<li>每个特征值都是实数</li>
<li>不同特征值 的特征向量正交</li>
<li>一定 正交相似于 对角矩阵<ul>
<li>归纳法+分块</li>
</ul>
</li>
</ul>
<p>正交相似于对角矩阵一定是对称矩阵</p>
<ul>
<li>$A^T&#x3D;(Q\Lambda Q^{-1})^T&#x3D;(Q^{-1})^TB^TQ^{T}&#x3D;QBQ^{-1}&#x3D;A$</li>
</ul>
<p>两个实对称 正交相似 充要条件 它们相似, 从而有了传递性</p>
<ul>
<li>额外的 两个矩阵正交相似 则有相同的 特征方程，这两个矩阵可以不是实对称</li>
</ul>
<p>实对称矩阵+幂零矩阵&#x3D;&gt; A&#x3D;0, 证明: 因为可以相似对角化</p>
<p>$A^TA$ 的特征值都是非负实数</p>
<p>实矩阵A正交相似于 上三角矩阵 充要条件 A的特征多项式在复数域中的根都是实数</p>
<ul>
<li>必要性：正交相似 于B 所以A,B特征多项式相同，所以特征值为B的对角线的值</li>
<li>充分性：归纳法+分块</li>
</ul>
<p>A的特征多项式在复数域中的根都是实数，且$AA’&#x3D;A’A$那么A是对称矩阵</p>
<ul>
<li>因为都是实数， 所以A正交相似于一个上三角矩阵 <ul>
<li>带入得$Q^{-1}UQ (Q^{-1}UQ)^T&#x3D;(Q^{-1}UQ)^TQ^{-1}UQ$, 其中$U$是上三角实(?)矩阵</li>
<li>即 $Q^{-1}UU^TQ&#x3D;Q^{-1}U^TUQ$</li>
<li>即 $UU^T&#x3D;U^TU$<ul>
<li>考虑 结果的对角线上的两边相等，可推出$U$是对角矩阵<ul>
<li>所以$A$是 对称矩阵</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>任意复矩阵一定相似于一个上三角矩阵</p>
<ul>
<li>类似的： 归纳法+分块</li>
</ul>
<p>$A&#x3D;-A^T$ 则 特征多项式在复数域的根为 0 或 纯虚数</p>
<ul>
<li>特征值+共轭 &#x3D;&gt; $(\lambda+\bar{\lambda})\alpha^T\bar{\alpha}&#x3D;0$</li>
</ul>
]]></content>
      <categories>
        <category>高等代数</category>
      </categories>
      <tags>
        <tag>高等代数</tag>
      </tags>
  </entry>
  <entry>
    <title>MIT18.06线性代数</title>
    <url>/Math/MIT_18.06_linear_algebra/</url>
    <content><![CDATA[<h1 id="MIT-线性代数公开课"><a href="#MIT-线性代数公开课" class="headerlink" title="MIT 线性代数公开课"></a>MIT 线性代数公开课</h1><p><a href="http://web.mit.edu/18.06">http://web.mit.edu/18.06</a></p>
<p><a href="https://www.youtube.com/playlist?list=PLE7DDD91010BC51F8">https://www.youtube.com/playlist?list=PLE7DDD91010BC51F8</a></p>
<p><a href="https://ocw.mit.edu/courses/18-06sc-linear-algebra-fall-2011/download/">https://ocw.mit.edu/courses/18-06sc-linear-algebra-fall-2011/download/</a></p>
<span id="more"></span>

<h2 id="1-方程组的几种解释"><a href="#1-方程组的几种解释" class="headerlink" title="1 方程组的几种解释"></a>1 方程组的几种解释</h2><p>问题：当我们小学学到鸡兔同笼时会用方程组，如果未知量更多变量更多的方程组有什么解决方案？</p>
<p>从2个未知量，2个方程开始</p>
<p>$1x+1y&#x3D;2$ 头</p>
<p>$2x+4y&#x3D;6$ 脚</p>
<p>此时为了简化书写,定义了矩阵</p>
<p>$\pmatrix{1 &amp; 1 \\ 2 &amp; 4 }\pmatrix{x \\ y}&#x3D;\pmatrix{2 \\ 6}$</p>
<p>这里 在矩阵定义上扩充一下行列都$\ge 1$，定义多行多列的矩阵乘法运算为</p>
<p>$A_{m\times n}\cdot B_{n\times s}&#x3D;C_{m\times s}$</p>
<p>其中$C_{i,j}&#x3D;\sum_{k&#x3D;1}^{n} A_{i,k}\cdot B_{k,j}$</p>
<p>原问题变成$Ax&#x3D;b$</p>
<hr>
<p>由这个定义可以 容易的得到</p>
<ul>
<li>矩阵乘法有结合率</li>
<li>矩阵乘法<strong>没有</strong>交换</li>
<li>矩阵乘法可以块状乘法</li>
</ul>
<hr>
<ul>
<li>把一<code>行</code>拿出来看 对应的函数图像是 线的交点求解</li>
<li>把一<code>列</code>拿出来看，对应的函数图像是 多个向量的线性组合方案求解</li>
</ul>
<p>考虑 维度增加，那么</p>
<ul>
<li><code>行</code>就是高维平面的交</li>
<li><code>列</code>就是高维向量的组合方案</li>
</ul>
<h2 id="2-矩阵消元（高斯消元）"><a href="#2-矩阵消元（高斯消元）" class="headerlink" title="2 矩阵消元（高斯消元）"></a>2 矩阵消元（高斯消元）</h2><p>初中解答鸡兔同笼，有的时候用的是用y表示x,再带入x</p>
<p>而还有一种方法，就是 整行做减法</p>
<p>把第二个方程变为 $(2x+4y)-2(x+y)&#x3D;6-2\cdot2$</p>
<p>这里有性质：</p>
<ul>
<li>原方程组的解一定是新方程组的解（假设先带入满足原方程则后续方程左右都是同样的操作）</li>
<li>新方程的解一定是原方程的解（当我们把方程i+&#x3D;k倍方程j时，只需要逆向操作是 -&#x3D;k倍 方程j 就可以还原）</li>
</ul>
<p>所以 把方程的行变换（i行+&#x3D;k倍j行，或交换行）操作对应到矩阵的上来看，这些操作最终不会影响结果</p>
<hr>
<p>类似的 如果 做类似的列操作 相当于定义新的变量 <code>y_new=(y_old+kx)</code></p>
<p>综上</p>
<ul>
<li>基础行变化 是 在对方程之间加减</li>
<li>基础列变化 是 在对未知数之间加减</li>
</ul>
<hr>
<p>然后如果我们希望不要用文字描述操作而是矩阵描述的话，会发现 左乘是行操作，</p>
<p>当我们进行阶梯型变换时，全是左乘上下三角</p>
<h2 id="3-乘法和逆矩阵"><a href="#3-乘法和逆矩阵" class="headerlink" title="3 乘法和逆矩阵"></a>3 乘法和逆矩阵</h2><p>首先单位矩阵 $AI&#x3D;A&#x3D;IA$, 显然存在(对角是1)且唯一$I_1&#x3D;I_1I_2&#x3D;I_2$</p>
<p>那么考虑如果存在逆矩阵 $A^{-1}A&#x3D;I$</p>
<p>注意矩阵乘法不满足交换率，所以还需要证明一下 左侧逆&#x3D;右侧逆，</p>
<ul>
<li>若左右逆存在 $A^{-1}_l&#x3D;A^{-1}_l(AA^{-1}_r)&#x3D;(A^{-1}_lA)A^{-1}_r&#x3D;A^{-1}_r$ 根据结合率</li>
<li>若一侧逆存在，另一侧逆不存在  ??????????????????</li>
</ul>
<hr>
<p>用 gauss-jordan的 行变换 把$Ax&#x3D;b$写成$A|b$的增广矩阵，然后把A通过多次行变换尽量变成单位矩阵</p>
<p>因此有 $x&#x3D;A^{-1}b$</p>
<h2 id="4-LU分解"><a href="#4-LU分解" class="headerlink" title="4 LU分解"></a>4 LU分解</h2><p>$(AB)^{-1}&#x3D;B^{-1}A^{-1}$</p>
<p>对于$Ax&#x3D;b$对A进行向阶梯形变换时，左侧乘上的一直是 下(Lower)三角矩阵（长宽相等）</p>
<p>而 多个下三角矩阵的乘积显然还是 下三角矩阵(根据矩阵乘法定义易证)</p>
<p>所以 $A&#x3D;LU$ 可以变成 下（Lower）三角矩阵 乘上 上（Upper）三角矩阵</p>
<p>注意到的是 $A$在向阶梯矩阵变换时，还可能因为行的主元位置是0,需要进行行交换</p>
<p>所以另$P$为预先完成目标行交换的 行交换矩阵，所以上面的变成</p>
<p>先完成行交换$PA&#x3D;LU$再进行阶梯矩阵的行变换操作</p>
<h2 id="5-转置"><a href="#5-转置" class="headerlink" title="5 转置"></a>5 转置</h2><p>$A_{i,j}&#x3D;A^T_{j,i}$</p>
<p>对称矩阵: $A&#x3D;A^T$</p>
<p>显然$RR^T$ 是对称矩阵</p>
<p>行交换矩阵 的逆等于它的转置 $P^{-1}&#x3D;P^T$,显然</p>
<hr>
<h2 id="6-列空间，nullspace"><a href="#6-列空间，nullspace" class="headerlink" title="6 列空间，nullspace"></a>6 列空间，nullspace</h2><p>$A_{m\times n}$列向量是$n$条在$R^{m}$中的向量，它们的生成空间是$C(A)$, 是$R^{m}$的子空间</p>
<p>向量空间：需要加法，数乘封闭（所有线性组合还在空间中）</p>
<p>$Ax&#x3D;0$ 对应的$x$的解叫做解的0空间 null space</p>
<h2 id="7-Ax-x3D-0-主变量，特解"><a href="#7-Ax-x3D-0-主变量，特解" class="headerlink" title="7 Ax&#x3D;0,主变量，特解"></a>7 Ax&#x3D;0,主变量，特解</h2><p>echelon form（阶梯形式）</p>
<p>计算$Ax&#x3D;0$ 还是对A阶梯型，$A_{m\times n}$对于变换后</p>
<ul>
<li>列数n</li>
<li>主元数,pivot variables: r， rank（秩）&#x3D;行变换主元的个数</li>
<li>自由变量(free variables): n-r</li>
</ul>
<p>对于主元不止后面行变换成零，前面行也边，主元再变为1, 就是 matlab 的<code>rref(A)</code>,(reduced row echelon form)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 2 2 2        1 2 2 2       1 2 0 -2</span><br><span class="line">2 4 6 8    =&gt;  0 0 2 4  =&gt;   0 0 1  2 (reduced)</span><br><span class="line">3 6 8 10       0 0 0 0       0 0 0  0</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主元列， 自由列</span><br><span class="line">1 0    2 -2</span><br><span class="line">0 1    1  2</span><br><span class="line">0 0    0  0</span><br><span class="line"></span><br><span class="line">是</span><br><span class="line">I F</span><br><span class="line">0 0</span><br><span class="line">的形式</span><br><span class="line"></span><br><span class="line">[I F]*[x_p,x_f]^T=0</span><br></pre></td></tr></table></figure>

<p>那么 <code>nullspace维数=n-r</code></p>
<p>$x_{pivot} &#x3D; -Fx_{free}$</p>
<p>$x&#x3D;c\pmatrix{-F \\ I}$</p>
<h2 id="8-Ax-x3D-b，可解性和可解结构"><a href="#8-Ax-x3D-b，可解性和可解结构" class="headerlink" title="8 Ax&#x3D;b，可解性和可解结构"></a>8 Ax&#x3D;b，可解性和可解结构</h2><p>类似的 阶梯化到reduced形，然后对于自由的设为0, 非自由的计算对应值 得到特解</p>
<p>然后加上 上面nullspace，也就是经过特定点（一个特解） 指定偏移形状（nullspace）的 子空间</p>
<hr>
<p>$A_{m\times n}$</p>
<p>显然 $r\le m, r \le n$ 不会超过行列数</p>
<p>满列 $r&#x3D;n \le m$时 无自由变量 nullspace为单点,$N(A)&#x3D;\lbrace 0\rbrace$ 只有0向量，所以0个或1个解</p>
<p>满行$r&#x3D;m \le n$时 有1个或多个解</p>
<p>$r&#x3D;m&#x3D;n$时1个解</p>
<p>这里结论: </p>
<ul>
<li>解 &#x3D; 特解+nullspace</li>
<li>而 矩阵的rank决定了 特解存在性 与 nullspace的形状，也就决定了解的数目</li>
</ul>
<h2 id="9-线性相关性，基，维"><a href="#9-线性相关性，基，维" class="headerlink" title="9 线性相关性，基，维"></a>9 线性相关性，基，维</h2><ul>
<li>线性相关&#x2F;线性无关</li>
<li>生成（张成）空间spanning a space</li>
<li>BASIS and dimension</li>
</ul>
<p>$\sum_{a_i} a_i \alpha_i &#x3D;0$ 只存在 全$0$的$a_i$解 则线性相关，否则线性无关</p>
<p>所以 矩阵A 的 nullspace 只有零解 当且仅当 A的列向量 线性无关（因为 线性相关 对应 $a_i$ 就对应到了 nullspace 的非零解），rank &#x3D; n(列数)</p>
<hr>
<p>span（生成，长成）：由向量组 线性组合得到的所有向量的集合， 向量组 生成 空间（space)</p>
<p>引出 “基”（Basis) 的概念：</p>
<ul>
<li>基basis for a space is a sequence of vectors v1,v2,…,vd, with 2 性质:<ul>
<li>它们 线性无关（限制多了不行，多了些不必要的）</li>
<li>它们 能生成span the 空间space, (限制少了不行，会无法完全表示)</li>
</ul>
</li>
</ul>
<p>给定一个空间，every basis for the space has the same number of vectors, 这个 个数 称作 空间的维数（dimension）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A =</span><br><span class="line">1 2 3 1</span><br><span class="line">1 1 2 1</span><br><span class="line">1 2 3 1</span><br><span class="line"></span><br><span class="line">列向量 能生成 space C(A)</span><br><span class="line">列向量不是基，因为线性相关</span><br><span class="line">nullspace 例如 N(A) = [-1,-1,1,0]^T，[1,0,0,-1]^T</span><br><span class="line"></span><br><span class="line">&#123;列1+列2&#125; 可以作为基</span><br></pre></td></tr></table></figure>

<p>rank(A) &#x3D; 主元的列数 &#x3D; C(A)的维数dim</p>
<p>dim(N(A)) &#x3D; 自由变量个数 &#x3D; n - rank(A)</p>
<h2 id="10-四个基本子空间"><a href="#10-四个基本子空间" class="headerlink" title="10 四个基本子空间"></a>10 四个基本子空间</h2><p>对于$A_{m\times n}$ 是$m$行$n$列的矩阵</p>
<p>C(A): 列空间 column , in $R^m$</p>
<p>N(A): nullspace, in $R^n$</p>
<p>row space: 行的所有组合 &#x3D;&gt; $C(A^T)$, in $R^n$</p>
<p>null space of $A^T$ &#x3D;&gt; $N(A^T)$, 常用名字 left nullspace, in $R^m$</p>
<p>![[mit_la_10.png]]</p>
<hr>
<p>$R^n$ 空间中： nullspace(n-r) 和 row space (r)正交，且维度和为n</p>
<p>$R^m$ 空间中： N(A^T) 和 C(A) 正交，且维度和为m</p>
<hr>
<p>因为 basis for rowspace is first <code>r</code> row of <code>rref(A)</code>, 注意行变换后 C(A) 不一定等于 C(rref(A)), 但是行还是，</p>
<p>因为逆操作保证了rref(A)的行能表示原始A的行，所以$C(A^T)&#x3D;C(\mathrm{rref}(A)^T)$</p>
<p>rref的过程 是行变换 相当于乘上 操作组合的矩阵E,而乘了以后，A变为rref(A)，它的倒数m-r全为0,正好说明了 E的后m-r行对应的 正是 left nullspace 的基，而且 因为E是单位矩阵  和 A相同的基础行变换得到，的所有E的行之间是线性无关的。</p>
<p>$R^n$ 延伸到 $R^{n\times n}$, 把矩阵看成向量</p>
<p>例如 $R^3$的所有对角矩阵的 集合（space），的基可以是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 0 0</span><br><span class="line">0 0 0</span><br><span class="line">0 0 0</span><br><span class="line"></span><br><span class="line">1 0 0</span><br><span class="line">0 3 0</span><br><span class="line">0 0 0</span><br><span class="line"></span><br><span class="line">0 0 0</span><br><span class="line">0 0 0</span><br><span class="line">0 0 7</span><br></pre></td></tr></table></figure>

<h2 id="11-矩阵空间，rank-x3D-1矩阵，小世界图"><a href="#11-矩阵空间，rank-x3D-1矩阵，小世界图" class="headerlink" title="11 矩阵空间，rank&#x3D;1矩阵，小世界图"></a>11 矩阵空间，rank&#x3D;1矩阵，小世界图</h2><ul>
<li>Base of new vector spaces</li>
<li>rank one matrices</li>
<li>small world graphs</li>
</ul>
<p>因为矩阵，可以数乘，相加（线性要求的基础）</p>
<p>$R^3$ 的所有矩阵的 基，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 0 0</span><br><span class="line">0 0 0</span><br><span class="line">0 0 0</span><br><span class="line"></span><br><span class="line">0 1 0</span><br><span class="line">0 0 0</span><br><span class="line">0 0 0</span><br><span class="line"></span><br><span class="line">0 0 1</span><br><span class="line">0 0 0</span><br><span class="line">0 0 0</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0 0 0</span><br><span class="line">0 0 0</span><br><span class="line">0 0 1</span><br></pre></td></tr></table></figure>

<p>类似的，对称矩阵(symm) 的基的个数是6个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">100</span><br><span class="line">000</span><br><span class="line">000</span><br><span class="line"></span><br><span class="line">010</span><br><span class="line">100</span><br><span class="line">000</span><br><span class="line"></span><br><span class="line">001</span><br><span class="line">000</span><br><span class="line">100</span><br><span class="line"></span><br><span class="line">000</span><br><span class="line">010</span><br><span class="line">000</span><br><span class="line"></span><br><span class="line">000</span><br><span class="line">001</span><br><span class="line">010</span><br><span class="line"></span><br><span class="line">000</span><br><span class="line">000</span><br><span class="line">001</span><br></pre></td></tr></table></figure>

<p>S(对称矩阵) and U(上三角矩阵) &#x3D; diag(对角矩阵)</p>
<p>dim(S交U) &#x3D; 3</p>
<p>S并U &#x3D;&gt; 不是一个空间，运算不封闭</p>
<p>S+U &#x3D;&gt; 组合 而不是并，也就是 “不是两个空间之和，而是空间S中任意元素+U中任意元素“ &#x3D; ”两者基的集合之和 再 span生成的空间”</p>
<p>dim(S+U) &#x3D; 9</p>
<p>dim(S并U)+dim(S+U)&#x3D;dim(S)+dim(U)</p>
<hr>
<p>$y’’+y&#x3D;0$</p>
<p>$y&#x3D;\cos x, \sin x, e^{ix}$ 找所有解, 也是解空间的基的线性组合</p>
<p>$y&#x3D;c_1\cos x+c_2\sin x$</p>
<p>dim(解空间)&#x3D;2</p>
<hr>
<p>秩为1的矩阵 总可以表示成 $A&#x3D;uv^T$, 一列乘上1行</p>
<p>这一章，主要就是用 更特殊的例子（把矩阵看作向量，来构成矩阵空间，用例子来再度回顾，什么是space,什么是基，什么是线性组合 ）</p>
<hr>
<p>图论 和 线性代数 的关系，人与人之间的6步认识理论</p>
<h2 id="12-图和网络"><a href="#12-图和网络" class="headerlink" title="12 图和网络"></a>12 图和网络</h2><ul>
<li>graphs &amp; networks</li>
<li>incidence matrices （关联矩阵）</li>
<li>kirchnoff’s laws</li>
</ul>
<p>与实际应用相关的</p>
<p>Graphs: 点 和 边, 也可以表示电路系统，液压系统，桥系统</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A = </span><br><span class="line">         列对应点</span><br><span class="line">行对应 边 [        ], -1表示出，1表示入点</span><br></pre></td></tr></table></figure>

<p>$Ax&#x3D; [x入-x出…]^T&#x3D;0$</p>
<hr>
<p>对于“连通图”</p>
<p>零空间是 <code>[1,1,1,1,1,1]</code> </p>
<p>看成电势能，可以选一个点接地（xi&#x3D;0）</p>
<p>$N(A^T) &#x3D; m-r$</p>
<p>$A^Ty&#x3D;0$, Kirchoff’s 基尔霍夫电流定律 KCL, 每一行 说明 节点上不累计电子</p>
<p>nullspace(A^T) &#x3D; 那么 线性无关的 A^T 的列 对应的图中的边 不含环loop</p>
<p>连通图的不含回边含有所有点的图是树</p>
<p>dim N(A^T) &#x3D; m - r &#x3D; 独立loops个数 &#x3D; edges - (点数-1) </p>
<p>点数-边数+独立环数&#x3D;1</p>
<p>Euler‘s 公式 视角：空间里 面对应这里的点，边对应这里的边，而点对应这里的 独立loops</p>
<p>$A^TCAx&#x3D;f$ 稳定电流问题，</p>
<hr>
<p>延伸：图论里还有生成树个数计算</p>
<h2 id="13-复习1"><a href="#13-复习1" class="headerlink" title="13 复习1"></a>13 复习1</h2><ul>
<li>review for exam 1</li>
<li>emphasites chapter 3</li>
</ul>
<p>练习1. 是非题  $A^2&#x3D;0 \to A&#x3D;0$ ?, False, 我觉得这个很“反例，因为在线代之前都是单个的数，就算到了复数,只要结果是0,那么乘数一定有零，而这里的反例反过来再次强调了乘法规则的变化”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 1</span><br><span class="line">0 0</span><br></pre></td></tr></table></figure>

<p>练习2. if C 是 可逆的， N(CD)&#x3D;N(D), 左乘可逆不会改变nullspace</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rref(A) =</span><br><span class="line">  I   F  的形状</span><br><span class="line">    O</span><br><span class="line">解形状 = </span><br><span class="line">  -F</span><br><span class="line">   O</span><br></pre></td></tr></table></figure>


<p>解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1 1 0][1 0  1 2]     1</span><br><span class="line">[0 1 0][0 1 -1 1] x = 0</span><br><span class="line">[1 0 1][0 0  0 0]     1</span><br></pre></td></tr></table></figure>

<p>这里 nullspace用上面的N(CD)&#x3D;N(D)来算</p>
<p>而<code>特解</code> 注意到 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1 1 0] [1]   1</span><br><span class="line">[0 1 0] [0] = 0</span><br><span class="line">[1 0 1] [0]   1</span><br><span class="line">只需要再解</span><br><span class="line">[1 0  1 2]     1</span><br><span class="line">[0 1 -1 1] x = 0</span><br><span class="line">[0 0  0 0]     0</span><br><span class="line">就好了，这样就很easy!?</span><br></pre></td></tr></table></figure>

<p>练习3. 如果m&#x3D;n,那么 行空间&#x3D;列空间，错，相等的只是维数而生成空间不一定相等, <code>[0 1 ; 0 0]</code></p>
<p>练习4. A和-A是否拥有相同的四个空间, True</p>
<p>练习5. 如果A和B的四个子空间相同,那么A是B的倍数? 错 反例<code>[1 0;0 1]</code>和 <code>[0 1;1 0]</code></p>
<p>练习5. 为什么 一个向量 不能同时 是行向量 且 在 nullspace里？</p>
<p>想说 多个平方和吗？这样想的花 i,1 就可以</p>
<p>这里要引入零空间和行空间正交</p>
<h2 id="14-正交向量与子空间"><a href="#14-正交向量与子空间" class="headerlink" title="14 正交向量与子空间"></a>14 正交向量与子空间</h2><ul>
<li>orthogonal vectors &amp; subspaces</li>
<li>nullspace 正交 row space 和 column space 正交$N(A^T)$</li>
<li>$N(A^TA)&#x3D;N(A)$</li>
</ul>
<p>毕达哥拉斯pythagoras, 勾股定理与正交: $x^Ty&#x3D;0$</p>
<p>高维空间中</p>
<p>$||x||^2+||y||^2&#x3D;||x+y||^2$</p>
<p>$x^Tx+y^Ty&#x3D;(x+y)^T(x+y)&#x3D;x^Tx+y^Ty+x^Ty+y^Tx$, 最后两项 点乘是一样的</p>
<hr>
<p>向量正交 推广到 空间正交：A空间中的任意向量 和 B空间中的任意向量正交</p>
<p>&#x2F;&#x2F; 这时候会发现3维不是一个很好的高维示例，因为当想拆两个子空间时，如果拆成 1维和2维，总有一个维度会显得不够灵活</p>
<hr>
<p>row space和 nullspace 正交:</p>
<p>nullspace: $Ax &#x3D; 0$, $x$所属的space</p>
<p>只需要展开A就能 看到 A的原始的row 乘上x 的到的 数值为0</p>
<p>所以A的行全部和x正交，所以行的生成空间（原始行的任意线性组合）</p>
<p>这里不止正交，而且一个r维,一个n-r维,所以一个是$R^n$中另一个的剩下所有垂直向量生成的空间</p>
<hr>
<p>研究 $A^TA$ ，因为很多情况下$A$并不一定是方阵，而是长方形</p>
<ul>
<li>n阶方阵</li>
<li>角对称</li>
</ul>
<p>$Ax&#x3D;b$ 可变成 $A^TA\hat{x}&#x3D;A^Tb$, 特别当$m &gt; n$时</p>
<p>$x$的解一定是 $\hat{x}$的解, 而如果$A^TA$又可逆，那么一定有解</p>
<p>于是要用到 rank(A^TA) &#x3D; rank(A), 第15章证明</p>
<p>hat $\hat{x}$表示最优,而不是准确</p>
<h2 id="15-子空间投影"><a href="#15-子空间投影" class="headerlink" title="15 子空间投影"></a>15 子空间投影</h2><ul>
<li>projections， 从投影到1维，延伸到 投影到空间</li>
<li>least squares and best straight line</li>
</ul>
<p>从二维 向量a,b投影 谈起</p>
<p>也就是 a方向上的向量p&#x3D;ka, 与 b-p垂直, 其中$k$是某个<code>数</code>,a,b是向量</p>
<p>$(k\vec{a})^T(\vec{b}-k\vec{a}) &#x3D; 0$</p>
<p>即 $a^T(b-ka) &#x3D; 0$</p>
<p>即 $a^Tb &#x3D; ka^Ta$, 注意到这里 $a^Tb$和$a^Ta$都是数</p>
<p>即 $k &#x3D; \frac{a^Tb}{a^Ta}$</p>
<p>$p&#x3D;a\frac{a^Tb}{a^Ta}$</p>
<p>$P(b) &#x3D; \frac{aa^T}{a^Ta} b$, 注意分子是矩阵 而分母是数 , 这里是”投影矩阵”，rank&#x3D;1</p>
<p>两个好的性质</p>
<ul>
<li>$P^T&#x3D; P$ 根据表达式显然</li>
<li>$P^2 &#x3D; P$ 幂等, 意义证明也就是投影的投影是不变的，代数证明根据结合律也显然</li>
</ul>
<hr>
<p>why project? 为什么做投影?</p>
<p>因为 $Ax&#x3D;b$ 可能无解</p>
<p>变成找$Ax&#x3D;p$, 其中$p$是$b$在$A$的列空间的投影</p>
<p>那么$b$ 关于$A$的每个列向量的投影都可以用类似上面的过程</p>
<p>$(A)^T(b-A\hat{x})&#x3D;[0,\cdots,0]^T$, 左边是列向量的转置，右边是 $e&#x3D;b-(p&#x3D;A\hat{x})$, 这样说明$e$和$A$的所有列向量正交，也就和列空间正交</p>
<p>注 这里根据前面 子空间正交性和充满空间 有$e$在$N(A^T)$中</p>
<p>注 这里不能单独的和每个列向量正交再加起来，因为和一个列向量正交的同时可能和另一个列向量不正交，这里需要同时和所有列向量正交</p>
<p>$A^Tb &#x3D; A^TA\hat{x}$</p>
<p>$\hat{x}&#x3D;(A^TA)^{-1}A^Tb$ ?? 不需要保证 可逆性吗?????</p>
<p>$p &#x3D; A\hat{x} &#x3D; A(A^TA)^{-1}A^T b$</p>
<p>$P(b) &#x3D; A(A^TA)^{-1}A^T b$, 这里的一个结论是，如果$A$是方阵且可逆，则 $P(b)&#x3D;b$</p>
<p>性质 </p>
<ul>
<li>$P^T&#x3D; P$, 这里要用到 对称矩阵的逆 是对称矩阵？啊？？？？？？</li>
<li>$P^2 &#x3D; P$，这个同样从意义上 投影的投影幂等，从表达式上结合律</li>
</ul>
<hr>
<p>应用: 最小二乘法 拟合直线 Least squares fitting by a line</p>
<p>3个点: (1,1),(2,2),(3,2)</p>
<p>直线$y&#x3D;b+kx$</p>
<p>那么对应</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b+k=1</span><br><span class="line">b+2k=2</span><br><span class="line">b+3k=2</span><br></pre></td></tr></table></figure>

<p>显然是无解的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[1 1]       [1]</span><br><span class="line">[1 2] [b] = [2]</span><br><span class="line">[1 3] [k]   [2]</span><br></pre></td></tr></table></figure>

<p>下节课</p>
<h2 id="16-投影矩阵-最小二乘法"><a href="#16-投影矩阵-最小二乘法" class="headerlink" title="16. 投影矩阵,最小二乘法"></a>16. 投影矩阵,最小二乘法</h2><ul>
<li>projections</li>
<li>least squares and best straight line</li>
</ul>
<p>$P&#x3D;A(A^TA)^{-1}A^T$ 投影矩阵</p>
<p>如果 b 在 列空间中,那么 Pb &#x3D; b 投影是自己</p>
<p>如果 b 垂直于 列空间,那么 Pb &#x3D; b 投影是0， $b \in N(A^T)$</p>
<p>其它情况 b,即不在列空间，也不垂直列空间</p>
<p>对于b</p>
<ul>
<li>把b投影到 列空间 的部分称作p</li>
<li>投影到N(A^T)的部分叫做e</li>
<li>b &#x3D; p+e (因为 列空间 和 N(A^T)正交！ 不正交的话投影和就不一定等)</li>
<li>p&#x3D;Pb</li>
<li>e&#x3D;(I-P)b</li>
<li>这里小p是投影，大P是投影矩阵</li>
</ul>
<hr>
<p>回到best line fitting, 那么要评价best line需要指标？</p>
<p>指标 $\min ||Ax-b||$ 这里描绘的是 y方向的差的平方最小，并不是点到直线的投影，（线性回归 linear regreation)</p>
<p>$&#x3D;\min (b+k-1)^2 +(b+2k-2)^2 +(b+3k-2)^2$</p>
<p>微积分视角 偏导数，也会得到下面的方程</p>
<figure class="highlight m"><figcaption><span>matlab</span></figcaption><table><tr><td class="code"><pre><span class="line">A <span class="built_in">=</span> [<span class="number">1</span> <span class="number">1</span>; <span class="number">1</span> <span class="number">2</span>;<span class="number">1</span> <span class="number">3</span>];</span><br><span class="line">A <span class="built_in">=</span> [<span class="number">1</span>;<span class="number">2</span>;<span class="number">2</span>];</span><br><span class="line">ata <span class="built_in">=</span> A<span class="string">&#x27; * A;</span></span><br><span class="line"><span class="string">atb = A&#x27;</span> * b;</span><br><span class="line">x <span class="built_in">=</span> ata\atb; // [<span class="number">2</span>/<span class="number">3</span>;<span class="number">1</span>/<span class="number">2</span>] <span class="built_in">=&gt;</span> 最优 直线 y <span class="built_in">=</span> <span class="number">2</span>/<span class="number">3</span> + <span class="number">1</span>/<span class="number">2</span> x</span><br><span class="line">p <span class="built_in">=</span> A * x;</span><br><span class="line">// <span class="number">3</span>  <span class="number">6</span>  | <span class="number">5</span></span><br><span class="line">// <span class="number">6</span> <span class="number">14</span>  | <span class="number">11</span></span><br><span class="line">// normal eqn</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    [1]             [7 /6]       [-1/6]</span><br><span class="line">b = [2] = (p = Ax = [5 /3]) + (e=[ 2/6])</span><br><span class="line">    [2]             [13/6]       [-1/6]</span><br><span class="line"></span><br><span class="line">p 垂直 e</span><br><span class="line">e 垂直 原来列向量 [1;1;1],[1;2;3]</span><br></pre></td></tr></table></figure>

<p>这里核心要导出的结论是: 如果A的列 线性无关, 那么$A^TA$是可逆的</p>
<p>也就是要证明 $A^TAx&#x3D;0$ 只有零解</p>
<p>那么 $x^TA^TAx&#x3D;0$</p>
<p>那么 $(Ax)^TAx&#x3D;0$ 这里是  $列向量^T列向量 &#x3D;0$, 所以</p>
<p>即是 $Ax&#x3D;0$， 列向量线性无关所以只有零解，所以$A^TA$可逆</p>
<hr>
<p>columns definitely independent if they are (perp.unit vectors&#x2F;orthogornal vectors) , 列如果恰好单位向量&#x2F;相互垂直，那么它们线性无关</p>
<p><code>[-sin cos]</code>和 <code>[cos sin]</code></p>
<h2 id="17-正交矩阵-Gram-Schmidt-正交化"><a href="#17-正交矩阵-Gram-Schmidt-正交化" class="headerlink" title="17. 正交矩阵,Gram-Schmidt 正交化"></a>17. 正交矩阵,Gram-Schmidt 正交化</h2><ul>
<li>orthogornal basis, q1,…,qn, n条正交基</li>
<li>orthogornal matrix Q</li>
<li>Gram-Schmidt A-&gt;Q</li>
</ul>
<p>orthog-normal vectors: 基两两正交，且每个基长度为1</p>
<p>$Q&#x3D;[q_1,\cdots,q_n]$ </p>
<p>正交矩阵:</p>
<ul>
<li>$Q^TQ &#x3D; I$, 注意 虽然名字里没有 normal,只有orthog,但正交矩阵是要求normal的</li>
</ul>
<p>如果$Q$是 方阵, 那么$Q^T&#x3D;Q^{-1}$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">例子</span><br><span class="line">[0 0 1]</span><br><span class="line">[1 0 0]</span><br><span class="line">[0 1 0]</span><br><span class="line"></span><br><span class="line">[cos -sin]</span><br><span class="line">[sin  cos]</span><br><span class="line"></span><br><span class="line">adhermar matrix, 全是1,-1组成的，还有系数的</span><br><span class="line"></span><br><span class="line">    [1 -2  2] </span><br><span class="line">1/3 [2 -1 -2]</span><br><span class="line">    [2  2  1]</span><br></pre></td></tr></table></figure>

<p>如果$Q$的列是 标准(normal 单位长度)正交的</p>
<p>$P&#x3D;Q(Q^TQ)^{-1}Q^T &#x3D; QQ^T$</p>
<ul>
<li>再次,如果Q是方阵,那么$P&#x3D;I$</li>
<li>再次 对称</li>
<li>再次 幂等</li>
</ul>
<p>这种情况下 $\hat{x_i} &#x3D; q_i^T b$ </p>
<hr>
<p>Gram-Schmidt 正交化</p>
<ul>
<li>把一般的矩阵的线性无关的列向量 转化为正交列向量</li>
</ul>
<p>从两个向量开始 $(a,b) \to (a_1&#x3D;a,b_1&#x3D;b-\frac{aa^T}{a^Ta}b)$, 上面学的投影，完成后，再进行单位化$(q_1&#x3D;\frac{a}{||a||},q_2&#x3D;\frac{b}{||b||})$， </p>
<ul>
<li>这里视频上是$\frac{a^Tb}{a^Ta}a$的形式，这表现出是向量$a$的某个倍数，而且更容易计算</li>
<li>因为“数”可以交换位置 $\frac{aa^T}{a^Ta}b &#x3D; \frac{a^Tb}{a^Ta} a$</li>
</ul>
<p>三个向量 $(a,b,c) \to (a_1&#x3D;a,b_1&#x3D;b-\frac{aa^T}{a^Ta}b,c)$, </p>
<p>$\to (a_1&#x3D;a,b_1&#x3D;b-\frac{aa^T}{a^Ta}b,c_1&#x3D;c-\frac{a_1a_1^T}{a_1^Ta_1}c-\frac{b_1b_1^T}{b_1^Tb_1}c)$, 这里因为前两项已经完成了正交，所以后面的减法才能合并成立</p>
<p>整个操作 列空间没有变化，也就是保持列空间不变的情况下，选了一组normal 正交基</p>
<p>回过头来看</p>
<ul>
<li>$A&#x3D;LU$ 描述 之前的 rref阶梯化</li>
<li>$A&#x3D;QR$ 描述了这里 ,A$列变化提出normal正交列向量, R是上三角矩阵</li>
</ul>
<h2 id="18-行列式-及其性质"><a href="#18-行列式-及其性质" class="headerlink" title="18 行列式 及其性质"></a>18 行列式 及其性质</h2><ul>
<li>Determinants det A &#x3D; |A|, 而 determinate的英文是确定的</li>
<li>properties</li>
</ul>
<p>eigen values(固有值， 特征值)</p>
<p>本章 重要结论之一 可逆 &lt;-&gt; 行列式非零</p>
<p>由3条性质基础得到行列式，而不是先行列式有什么性质</p>
<ul>
<li>性质1. det I &#x3D; 1</li>
<li>性质2. 交换行，影响行列式的 符号<ul>
<li>任意的 置换矩阵 det P &#x3D; 1 or -1</li>
</ul>
</li>
<li>性质3. 每行都是可以独立考虑线性性质的，也就是固定其它行 有数乘和加法<ul>
<li>3.1. 单行乘上t, 结果乘上t<ul>
<li>$\det kA &#x3D; k^n \det A$</li>
</ul>
</li>
<li>3.2. 两个矩阵n-1行相同, 那么它们的行列式相加 &#x3D; 这相同的n-1行以及 对应的对位相加 的 矩阵的行列式.</li>
</ul>
</li>
</ul>
<p>虽然直接上代数式更代数，但这里3个性质更 直观，但这样的性质有一些潜在的风险，例如 性质2<br>    - 这里 数学一点 需要证明如果行两两不同，那么奇数次交换 和 偶数次交换 无法得到同样的矩阵， 而隐藏在里面的 正是排列数的内容，</p>
<hr>
<p>根据基础性质有</p>
<ul>
<li>性质4. 相等的两行 det &#x3D; 0, （根据性质2)</li>
<li>性质5. 行i -&#x3D; k * 行j $(j\neq i)$, 行列式不变，根据性质4和性质3</li>
<li>性质6. 有全零行, 则 det A &#x3D; 0, 根据性质3 乘上 0</li>
<li>性质7. U(上三角矩阵)行列式 &#x3D;对角线上的乘积, 根据1,5,3,以得到</li>
<li>性质8. 当A is singular(奇异 不可逆), det A &#x3D; 0<ul>
<li>前面 可逆 &lt;-&gt; rref后每行有主元 &lt;-&gt; U , det U!&#x3D; 0</li>
<li>对于2维 |[a,b;c,d]| &#x3D; ad-bc, 根据上面推出的而不是定义的！</li>
<li>对于n维的同样 推出 代数式 ！！！！（不过同样的在下一章）</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>性质9: det (AB) &#x3D; det(A) det(B)<ul>
<li>若不可逆，和0的关系易证</li>
<li>那么对于 A,B 均可逆，证明？？？？？？？？？？？？<ul>
<li>代数式倒是易证，然而是第19章</li>
<li>首先特别的 对于简单的行变化 R, det (RA) &#x3D;  det(R)det(A)</li>
<li>这里是 只看B的行向量，而通过对A进行变换（是左，那么左右同步同样变化，直到A完全变成 对角矩阵，得证</li>
</ul>
</li>
<li>推论 det $A^{-1}$ &#x3D; 1&#x2F;det A</li>
</ul>
</li>
<li>性质10: $\det A^T &#x3D; \det A$<ul>
<li>证明: $|U^T||L^T| &#x3D; |A^T| &#x3D; |A| &#x3D; |L||U|$, 用上面性质</li>
<li>推论 零列 &#x3D;&gt; det 0</li>
<li>推论 det Q &#x3D; 1 or -1, 因为$Q^TQ&#x3D;I$</li>
</ul>
</li>
</ul>
<p>&#x2F;&#x2F; 这样看来3x4的行列式，主要是性质1难以满足，而且本身长矩阵 无可逆一说，这样的值没有用处，后续9,10也不行，而想满足其它有些性质还真可以</p>
<h2 id="19-行列式公式-cofactors代数余子式"><a href="#19-行列式公式-cofactors代数余子式" class="headerlink" title="19 行列式公式, cofactors代数余子式"></a>19 行列式公式, cofactors代数余子式</h2><p><code>[a,b;c,d] = [a,0;c,d]+[0,b;c,d] = [a,0;c,0]+[a,0;0,d]+[0,b;c,0]+[0,b;0,d]</code> 简单的利用性质3，一直拆就行了</p>
<p>amazing比 先走表达式，漂亮多了，从我们需要的性质去导出一个满足的</p>
<p>$\det A &#x3D; \sum_{(t_i,\cdots)排列} \pm \prod_{i&#x3D;1}^n a_{i{t_i}}$</p>
<p>下个问题 是这里$\pm$的具体取值能否 通过排列判断出</p>
<p>上面的性质 是 列号 &#x3D; 经过多少次 交换能变成 (1,…,n) 那就决定了-1的奇偶</p>
<hr>
<p>cofactors 代数余子式, 啊这因为字面意思是 co-(共，伴随) factors因子， 有的时候这种 中文就太别扭不精确</p>
<p>把第一行 的每个数拆出来</p>
<p>$&#x3D; a_{11}(a_{22}a_{33}-a_{23}a_{32})+a_{12}(-(a_{21}a_{33}-a_{23}a_{31}))+a_{13}(a_{})$, 括号里的就是代数余子式</p>
<p>$\det A &#x3D;a_{11}C_{11}+a_{12}C_{12}+\cdots+a_{1n}C_{1n}$</p>
<p>回到上面的问题, cofactor of $a_{ij}$的 符号问题，容易猜出 再证明$(-1)^{i+j}$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+ - + - +</span><br><span class="line">- + - + -</span><br><span class="line">+ - + - +</span><br><span class="line">- + - + -</span><br><span class="line">+ - + - +</span><br></pre></td></tr></table></figure>

<p>代数余子式的想法的拆解，能对于一些有规律的大矩阵得到递推公式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 1 </span><br><span class="line">1 1 1 </span><br><span class="line">  1 1 1</span><br><span class="line">    1 1 1</span><br><span class="line">      1 1 ...</span><br></pre></td></tr></table></figure>

<h2 id="20-Cramers-Rules-克拉默法则"><a href="#20-Cramers-Rules-克拉默法则" class="headerlink" title="20 Cramers Rules 克拉默法则"></a>20 Cramers Rules 克拉默法则</h2><ol>
<li>Formula for $A^{-1}$</li>
<li>Cramers Rules for x&#x3D;$A^{-1}b$</li>
<li>行列式应用 |Det A| &#x3D; volume of box</li>
</ol>
<p>对于2阶矩阵 $[a,b;c,d]^{-1} &#x3D; \frac{1}{|[a,b;c,d]|} [d,-b;-c,a]$</p>
<p>本章 重要结论$A^{-1}&#x3D;\frac{1}{\det A} C^T$, 其中$C$是上一章的 代数余子式</p>
<p>证明:</p>
<p>就是 乘法展开，会发现$AC^T$的对角 是$\det A$, 而 非对角$i,j$，相当于把$A$的$j$行 换成$i$行 再去求$\det$,而我们知道 有两个相同行的$\det$为0, 所以得证</p>
<p>这个公式也帮助理解 原矩阵变化 对 逆矩阵的影响</p>
<hr>
<p>Cramers Rules: $x&#x3D;A^{-1}b&#x3D;\frac{1}{\det A}C^T b$</p>
<p>看向量$x$的每个 分量</p>
<p>$x_{i}&#x3D;\frac{\det B_i}{\det A}$, 其中 $B_i &#x3D;$ 把$A$的第i列换成$b$, 这也是 从 余子式 和 行列式 的关系 得到的</p>
<p>感觉算法竞赛里 常见的还是高斯消元，但那偏应用，而这里是数学性质的推导</p>
<p>这个的主要价值 是 提供了一个表达式，但不易于计算</p>
<hr>
<p>行列式应用： 求体积</p>
<p>命题：行列式的值 &#x3D; 箱子的体积</p>
<p>箱子的三条边，三个行向量，（行列式的值可能为负（告诉我们手性），则取绝对值）</p>
<p>直觉的证明 如果能证明上面18章的3个基础性质 和体积变化同步，那么就可以证明</p>
<ul>
<li>性质1. det I &#x3D; 1 对应 单位标准立方体</li>
<li>性质2. 行交换 乘上-1, 对应空间的维度交换</li>
<li>性质3. 固定其它维度，单行的加和乘满足线性关系。 对应箱子单边的伸缩！！</li>
</ul>
<p>延伸，2维的det 求面积</p>
<p>延伸，三角形面积 非原点 用三维det, 因为 做两次 行相减，就能让非1的部分回到原点。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1/2 * det(</span><br><span class="line">x1 y1 1</span><br><span class="line">x2 y2 1</span><br><span class="line">x3 y3 1</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="21-eigenvalues特征值-与-eigenvectors特征向量"><a href="#21-eigenvalues特征值-与-eigenvectors特征向量" class="headerlink" title="21 eigenvalues特征值 与 eigenvectors特征向量"></a>21 eigenvalues特征值 与 eigenvectors特征向量</h2><ul>
<li>eigen values , eigen vectors</li>
<li>$\det (A-\lambda I) &#x3D; 0$</li>
<li>trace &#x3D; $\lambda_1+\lambda_2+\cdots+\lambda_n$</li>
</ul>
<p>还是对于方阵</p>
<p>eigen(自身的)</p>
<p>看成函数 $f(x)&#x3D;Ax$</p>
<p>那么希望研究其中, 运算后和x平行的, parallel to x (eigen vectors)</p>
<p>$Ax&#x3D; \lambda x$, 其中$\lambda$ 是数值，eigen values</p>
<p>if A is Singular, 存在非零x, $A x &#x3D; 0 x$, 也就是0是它的特征值,</p>
<p>这里要研究所有特征值.</p>
<hr>
<p>what are the x’s and \lambda ‘s for project matrix? 投影矩阵的 特征值 和 特征向量 是什么？</p>
<p>根据之前的内容，不在空间外的 到子空间的投影 一定不是平行的(parallel)</p>
<p>而在空间中的向量到空间的投影，就是它本身$Px&#x3D;x$, 这里$\lambda &#x3D; 1$</p>
<p>正交于空间的，投影都是0, 所以$Px &#x3D; 0$, 这里$\lambda &#x3D; 0$</p>
<p>所以只有1 和 0</p>
<hr>
<p>置换矩阵 <code>[0,1;1,0]</code>, 因为交换顺序， 所以只有交换前 平行</p>
<ul>
<li>$x&#x3D;[1;1],\lambda &#x3D; 1$</li>
<li>$x&#x3D;[1;-1],\lambda &#x3D; -1$</li>
</ul>
<p>而且 两个$x$是正交的</p>
<hr>
<p>性质:</p>
<ul>
<li>n个 特征值, 因为 上面会变成n次方程</li>
<li>trace $&#x3D; \sum_i \lambda_i &#x3D; A_{ii}$<ul>
<li>证明 注意 特征方程 的$n-1$次方只能来源于对角线, 而$\prod_i (\lambda - \lambda_i)$的$n-1$ 次系数 对应$\sum_i$, 因此得证</li>
</ul>
</li>
<li>$\det &#x3D; \prod_i {\lambda_i}$<ul>
<li>其实 右边是$\prod_i (\lambda - \lambda_i)$的零次系数，那么直接把$\lambda &#x3D;0$带入就是左边</li>
</ul>
</li>
</ul>
<hr>
<p>how to solve $Ax&#x3D;\lambda x$?</p>
<p>$(A-\lambda I)x &#x3D;0$ 如果存在非零向量$x$,那么左侧一定是奇异的，所以$\det (A-\lambda I) &#x3D; 0$, 所以变成关于$\lambda$的$n$次方程 (特征方程)</p>
<p>可能相同，也可能不同</p>
<p>如果有$\lambda$, 那么只需要带回去 高斯消元 求nullspace就能有x</p>
<p>简单例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 1</span><br><span class="line">1 3</span><br><span class="line">显然有2,4</span><br><span class="line">而上面例子</span><br><span class="line">0 1</span><br><span class="line">1 0</span><br><span class="line">的特征值-1,1， 对矩阵的对角同时增加k，那么特征值同时增加k，而特征向量不变</span><br></pre></td></tr></table></figure>

<p>$Q&#x3D;[0,-1;1,0]$， 90度旋转矩阵，会遇到$\lambda^2 &#x3D; -1$, 会出现 复数</p>
<p>上三角矩阵的特征值 就在 对角线上 显然</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3 1</span><br><span class="line">0 3</span><br><span class="line">特征值3, (lambda -3)(lambda - 3) =0</span><br><span class="line"></span><br><span class="line">(A-3I)x = [0 1] = [0]</span><br><span class="line">          [0 0]   [0]</span><br><span class="line"></span><br><span class="line">degenerate matrix(退化矩阵，重复的特征值 可能造成 特征向量短缺，只有[1;0]）</span><br></pre></td></tr></table></figure>

<h2 id="22-对角化-A的幂"><a href="#22-对角化-A的幂" class="headerlink" title="22 对角化, A的幂"></a>22 对角化, A的幂</h2><ul>
<li>Diagonaliging a matrix $S^{-1}AS&#x3D;\Lambda$</li>
<li>Powers of A &#x2F; equation $u_{k+1}&#x3D;A u_{k}$</li>
</ul>
<p>假设A有n个线性无关 特征向量</p>
<p>S是特征向量 组成的矩阵（必定可逆）</p>
<p>$AS&#x3D;A[特征向量列]&#x3D;A[\lambda_i x_i…]&#x3D;S [\lambda_i 特征值对角矩阵] &#x3D; S\Lambda$</p>
<p>$S^{-1}AS &#x3D; \Lambda$</p>
<p>$A&#x3D;S\Lambda S^{-1}$， 这里也可以得到 如果 $\forall |\lambda_i| &lt; 1$那么 $k\to \infty, A^k\to O$</p>
<p>$A^n&#x3D;S\Lambda^n S^{-1}$ 这就很amazing了，，，我还是隐约觉得fft 转化过程 有这种类似的感觉，转化成一个高效计算的，然后转化回来</p>
<p>不走这一步的话 也能得到 $A^n$的特征值有$\lambda^n$, 通过最开始的特征值定义</p>
<hr>
<p>A is Sure to have n indep evectors (and be diagonaligable) if all the $\lambda$ are different (no repeated \lambda’s) 如果A有n个不同的特征值，那么它有n个线性无关特征向量(对角化), 这里是充分不是充要，prove：</p>
<ul>
<li>搜了不少内容，很多都在说 两个不同特征值对应的特征向量线性无关<ul>
<li>两个很好证，因为 第一个对应的 组合 成$\alpha_1$,第二个组合成$\beta_1$,那么有 $\alpha_1 &#x3D; \beta_1$, $\lambda_1\alpha_1 &#x3D; A\alpha_1 &#x3D;A\beta_1&#x3D; \lambda_2 \beta_1$ 矛盾</li>
<li>但这里我需要的是 要组成$A&#x3D;S\Lambda S^{-1}$,也就是$S$的部分，需要证明的是所有个，而不是其中两个，如果三个特征值对应的三个特征向量是<code>[1;0;0],[1;1;0],[0;1;0]</code>,它们的确两两无关，但是3个是相关的</li>
<li>一个是归纳法 对于s-1成立 若 $\sum_{i&#x3D;1}^s k_i\alpha_i&#x3D;0$ 有非零解<ul>
<li>$\times (A-\lambda_s)$ 有$0&#x3D;\sum_{i&#x3D;1}^s k_i(A-\lambda_s)\alpha_i&#x3D;\sum_{i&#x3D;1}^s k_i(\lambda_i-\lambda_s)\alpha_i$</li>
<li>则有 找到一个s-1有非零解，矛盾</li>
</ul>
</li>
<li>另一个是空间意义的反证法<ul>
<li>如果 特征向量 和前面的特征向量集合线性相关，那么就是在前面向量的生成空间中，而前面的可以看作生成空间的基（不一定正交）的放缩，容易证明在基的生成空间中，每个基的放缩不同时，对于非平行于基的点的变化一定带有旋转，</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>当有重复特征值时</p>
<ul>
<li>不满足的例子 <code>[1,1;0 1]</code></li>
<li>满足的例子 <code>[1,0;0,1]</code></li>
</ul>
<hr>
<p>给定初始向量和地推式$u_0$, $u_{k+1}&#x3D;Au_{k}&#x3D;A^{k+1}u_0$</p>
<p>把$u_0&#x3D;\sum_{i} c_ix_i$ 拆分成 $A$的特征向量的组合。 (一定可拆分吗？？？？？？？</p>
<p>那么有$u_{k} &#x3D; A^k (\sum_i c_ix_i)&#x3D; \sum_{i} c_i \lambda_i^k x_i &#x3D; \Lambda^k S C$, 注意 最后的 Lambda,S(特征向量组成的矩阵),C(拆分的系数向量)， 三者的i的顺序要对应一致</p>
<hr>
<p>例子 Fibonacci</p>
<p>$F_{k+2}&#x3D;F_{k+1}+F_k$</p>
<p>$u_k&#x3D;[F_{k+1};F_k]$</p>
<p>$A&#x3D;[1 ,1;1 ,0]$</p>
<p>也就是 经常用到的线性递推转幂次 $\lambda &#x3D;\frac{1\pm \sqrt{5}}{2}$</p>
<p>$\lambda^2-\lambda-1&#x3D;0$ 和原始递推式非常像，TODO ??? 应该可以延伸吧</p>
<p>另一方面 $F_{100} \sim c_1 (\frac{1+\sqrt{5}}{2})^{100}$, 较大的特征值描述了区域无限时的增长趋势</p>
<p>这里 注意到$[1-\lambda,1;1,-\lambda] [\lambda;1]&#x3D; [0;0]$ 所以两个特征向量 $[\lambda_1;1],[\lambda_2;1]$</p>
<h2 id="23-微分方程-Exp-At"><a href="#23-微分方程-Exp-At" class="headerlink" title="23 微分方程, Exp(At)"></a>23 微分方程, Exp(At)</h2><ul>
<li>Differential Eqns $\frac{du}{dt} &#x3D; Au$</li>
<li>Exponential $e^{At}$ of Matrix</li>
</ul>
<p>$u(0)&#x3D;[1;0]$</p>
<p>$\frac{du_1}{dt}&#x3D;-u_1+2u_2$</p>
<p>$\frac{du_2}{dt}&#x3D;u_1-2u_2$</p>
<p>$A[-1,2;1,-2]$</p>
<p>$\lambda &#x3D;0,-3$</p>
<p>$\lambda_1&#x3D;0, x_1&#x3D;[2;1]$</p>
<p>$\lambda_2&#x3D;3, x_1&#x3D;[1;-1]$</p>
<p>solution: $u(t)&#x3D;c_1e^{\lambda_1 t}x_1+c_2e^{\lambda_2 t}x_2$, drop from sky</p>
<p>check:  $\frac{du}{dt}&#x3D;c_1\lambda_1 e^{\lambda_1 t}x_1+c_2\lambda_2 e^{\lambda_2 t}x_2 &#x3D; \lambda_1 x_1 c_1 e^{\lambda_1 t}x_1+\lambda_2 x_2 c_2e^{\lambda_2 t} &#x3D; A(c_1e^{\lambda_1 t}x_1+c_2e^{\lambda_2 t}x_2 )&#x3D;Au$<br>带入得 $u(t)&#x3D;c_1\cdot 1 [2;1]+c_2e^{-3t}[1;-1]$</p>
<p>利用$u(0)&#x3D;[2;1]$</p>
<p>解得$c_1&#x3D;\frac{1}{3},c_2&#x3D;\frac{1}{3}$</p>
<p>$u(t)&#x3D;\frac{1}{3}[2;1]+\frac{1}{3}e^{-3t}[1;-1]$</p>
<p>$u(\infty)&#x3D;\frac{1}{3}[2;1]$</p>
<p>这也能描绘 系统是否趋于稳定性</p>
<ul>
<li>如果$\lambda&#x3D;-3+6i$, 而$i$的部分虚数意义是旋转 不影响大小， 实部 &lt; 0</li>
<li>稳态: $\lambda_1 &#x3D;0$ 其它$\lambda$实部&lt;0</li>
</ul>
<p>2阶 稳定性，两个特征值 都 &lt; 0, 那么 trace &lt; 0, det &gt; 0</p>
<p><code>[a,b;c,d]</code> 即 a+d &lt; 0, ad-bc &gt; 0</p>
<hr>
<p>$\frac{du}{dt}&#x3D;Au$</p>
<p>令$u&#x3D;Sv$, S是 e vectors</p>
<p>$S\frac{dv}{dt} &#x3D; ASv$， 带入</p>
<p>$\frac{dv}{dt} &#x3D; S^{-1}ASv&#x3D;\Lambda v$</p>
<p>$v(t)&#x3D;e^{\Lambda t}v(0)$， 等下解释幂次的矩阵， drop from sky</p>
<p>$u(t)&#x3D;Se^{\Lambda t}S^{-1}u(0)$</p>
<p>$e^{At}&#x3D;Se^{\Lambda t}S^{-1}$, 根据下面的展开 也能得到， 这里处理的也是能够对角化的</p>
<p>解释:</p>
<p>$e^{At}&#x3D;I+At+\cdots+\frac{(At)^i}{i!}+\cdots$ 泰勒级数展开</p>
<p>类似的$(I-At)^{-1}&#x3D;I+At+\cdots+(At)^i+\cdots$</p>
<p>$e^{\Lambda t}&#x3D;$对角矩阵，对角线上$e^{\lambda_it}$</p>
<hr>
<p>例子: y’’+by’+ky&#x3D;0</p>
<p>如何把二阶微分方程 转化成 方程组</p>
<p>$u &#x3D; [y’;y]$</p>
<p>$u’&#x3D;[y’’;y’]$</p>
<p>$\frac{du}{dx} &#x3D; u’ &#x3D; [-b,-k;1,0] u$</p>
<h2 id="24-特征值应用，马尔可夫矩阵，傅里叶级数投影"><a href="#24-特征值应用，马尔可夫矩阵，傅里叶级数投影" class="headerlink" title="24 特征值应用，马尔可夫矩阵，傅里叶级数投影"></a>24 特征值应用，马尔可夫矩阵，傅里叶级数投影</h2><ul>
<li>Fouries series projections</li>
<li>steady state<ul>
<li>lambda &#x3D; 1</li>
<li>lambda &#x3D; 0, 得到 $e^{0t}$</li>
</ul>
</li>
<li>Markov matrix</li>
</ul>
<p>马尔可夫矩阵(与概率论有关)</p>
<ul>
<li>例子<code>A = [.1,.01,.3;.2,.99,.3;.7,0,.4]</code></li>
<li>所有元素非负</li>
<li>所有列的和 &#x3D; 1<ul>
<li>保证了 1是它的一个特征值，因为$A-I$进行行变换 n行相加 是0<ul>
<li>这里视频似乎还没有使用 行秩 &#x3D; 列秩一类的，用的行线性相关 &#x3D;&gt; det((A-I)^T) &#x3D; 0, 又有 det((A-I)^T)&#x3D;det(A-I)</li>
</ul>
</li>
<li>所有 其它特征值 $|\lambda_i| &lt; 1$, prove???</li>
<li>$u_k&#x3D;A^ku_0 &#x3D; c_1\lambda_1^kx_1+\cdots$, 这样一个特征1,其它无限迭代趋于0， 是一个 steady state 稳态</li>
</ul>
</li>
<li>用途一般用来表示 多个状态变化迁移（所以总和是1）<ul>
<li>因为特征值是1,和绝对值小于1的，那么再无穷多步以后有“趋于的稳态”的性质</li>
</ul>
</li>
</ul>
<p>例子</p>
<p>$u_{k+1}&#x3D;Au_k$</p>
<p>$[c;m]_{k+1}&#x3D;[.9,.2;.1,.8][c;m]_k$</p>
<p>$u_0&#x3D;[c;m]_0&#x3D;[0;1000]$</p>
<p>特征值特征向量 $1,[2;1],.7,[1;-1]$</p>
<p>$u_{k}&#x3D;c_1 1^k[2;1]+c_2(.7)^k[-1;1]$</p>
<p>通过$u_0$可得到$c_1 &#x3D; \frac{1000}{3},c_2&#x3D;\frac{2000}{3}$</p>
<hr>
<p>projections with orthonormal basis, $q_1,\cdots,q_n$</p>
<p>要拆解 $v &#x3D; x_1q_1+\cdots+x_nq_n$</p>
<p>如何得到$x_1$, 利用q的正交性</p>
<p>$x_1 &#x3D; q_1^Tv$</p>
<p>也就是$Qx&#x3D;v$的解是$Q^Tv&#x3D;x&#x3D;Q^{-1}v$</p>
<hr>
<p>fourier series 函数 $f(x) &#x3D; a_0+a_1\cos(x)+b_1\sin(x)+a_2\cos(2x)+b_2\sin(2x)+\cdots$</p>
<p>这里是无穷多个正交的函数，而函数正交的定义类似向量</p>
<ul>
<li>向量 内积 $u^Tv&#x3D;\sum_{i} u_iv_i$</li>
<li>函数$f^Tg &#x3D; \int_0^{2\pi}f(x)g(x)dx$, 因为上面研究的周期是$2\pi$<ul>
<li>例如 $\int_{0}^{2\pi}\sin(x)\cos(x) dx &#x3D; \frac{1}{2} (\sin(x))^2 |_0^{2\pi} &#x3D; 0$</li>
</ul>
</li>
<li>那么类似上面分解$v$到$q_i$计算系数$x_i$, 同样的想法，这里要做的 乘上对应正交基，$\int_0^{2\pi} f(x)\cos(x) dx$<ul>
<li>那么注意到 $\int_0^{2\pi}(cos(kx))^2 dx&#x3D;\pi$, 所以上面系数再乘上$\frac{1}{\pi}$, 其中 $\int_{0}^{2\pi} dx &#x3D; 2\pi$ 所以$a_0$的系数是$\frac{1}{2\pi}$</li>
</ul>
</li>
</ul>
<figure class="highlight m"><table><tr><td class="code"><pre><span class="line">f <span class="built_in">=</span> @(x) (cos(x)).^<span class="number">2</span>;</span><br><span class="line">q <span class="built_in">=</span> integral(f,<span class="number">0</span>,<span class="number">2</span>*pi);</span><br></pre></td></tr></table></figure>

<hr>
<p>？？？ 感觉这两章有些公式 drop from sky, 例如 $e^{\lambda t}$, 例如</p>
<h2 id="25-复习-2"><a href="#25-复习-2" class="headerlink" title="25 复习 2"></a>25 复习 2</h2><p>总览</p>
<p>标准正交矩阵 $Q&#x3D;[q_1,\cdots,q_n]$, $Q^TQ&#x3D;I$</p>
<ul>
<li>Projections-Least Squares, 无解的投影解，以及最小二次<ul>
<li>投影矩阵的对称性和幂等性</li>
</ul>
</li>
<li>Gram-Schmidt, 一个向量减去它投影到另一个向量的部分来逐渐建立正交系<ul>
<li>当 另一组 向量内部是两两正交的，那么就可以互不影响的相减了</li>
<li>$\displaystyle a_{i_{new}}&#x3D;a_i-\sum_{j&lt;i} \frac{a_{j_{new}}^Ta_i}{a_{j_{new}}^Ta_{j_{new}}}a_{j_{new}}$</li>
</ul>
</li>
</ul>
<p>行列式， 3个基础性质，导出</p>
<ul>
<li>延伸性质</li>
<li>公式</li>
<li>定义代数余子式<ul>
<li>导出 逆矩阵公式</li>
<li>利用代数余子式求一些有规律的大矩阵的递推式</li>
</ul>
</li>
</ul>
<p>特征值，特征向量</p>
<ul>
<li>特征向量</li>
<li>sum &#x3D; trace, prod &#x3D; det</li>
<li>对角化<ul>
<li>幂次</li>
</ul>
</li>
<li>差分&#x2F;递推 方程<ul>
<li>fib</li>
<li>周期的递推，在特征值视角上 也是 复平面的单位圆</li>
<li>微分方程</li>
</ul>
</li>
</ul>
<hr>
<p>例题：</p>
<p><code>a = [2;1;2]</code>, 任意向量到a的投影矩阵P $&#x3D;\frac{aa^T}{a^Ta}$, 空间是$A(A^TA)^{-1}A^T$</p>
<p> $P &#x3D; 1&#x2F;9 [4,2,4;2,1,2;4,2,4]$, </p>
<p> 特征值: 维度是1,所以现有有两个是0, 另一个 &#x3D; $trace - 0-0&#x3D;1$</p>
<p>特征值 对应的特征向量是a,因为$Pa&#x3D;a$</p>
<p>$u_{k+1}&#x3D;Pu_k$, $u_0&#x3D;[9;9;0]$</p>
<p>$u_{k+1}&#x3D;u_1&#x3D;Pu_0&#x3D;[6;3;6]$, 幂等性质</p>
<p>$u_0&#x3D;c_1x_1+c_2x_2+c_3x_3$的展开</p>
<p>$u_k&#x3D;A^ku_0&#x3D;c_1\lambda_1^kx_1+c_2\lambda_2^kx_2+c_3\lambda_3^ku_3$</p>
<hr>
<p>例题： 拟合最好y&#x3D;kx直线 (1,4),(2,5),(3,8)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1       4</span><br><span class="line">2 [k] = 5</span><br><span class="line">3       9   </span><br></pre></td></tr></table></figure>

<p>$a^Ta \hat{k}&#x3D;a^Tb$</p>
<p>$14\hat{k}&#x3D;38$</p>
<p>$\hat{k} &#x3D; \frac{38}{14}$</p>
<p>最小二乘法，看作 把 目标向量 投影到 列向量空间的结果是“最好”</p>
<hr>
<p>4x4 矩阵 $\lambda_{1,2,3,4}$</p>
<ul>
<li>$\forall \lambda_i \neq 0$&lt;&#x3D;&gt; 可逆</li>
<li>$det(A^{-1}) &#x3D; \prod \frac{1}{\lambda_i}$<ul>
<li>$x&#x3D;Ix&#x3D;A^{-1}Ax&#x3D;A^{-1}\lambda x$<ul>
<li>$A^{-1}x&#x3D;\frac{1}{\lambda}x$, 总感觉之前和现在一直没证明 有重复存在时的一些对应关系</li>
</ul>
</li>
</ul>
</li>
<li>$trace(A+I) &#x3D; \sum_i (\lambda_i+1)$</li>
</ul>
<hr>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A4 = [</span><br><span class="line">0,1,0,0;</span><br><span class="line">1,0,2,0;</span><br><span class="line">0,2,0,3;</span><br><span class="line">0,0,3,0</span><br><span class="line">]</span><br><span class="line">det A4=9</span><br></pre></td></tr></table></figure>

<p>P&#x3D;? $A(A^TA)^{-1}A^T$ 可逆矩阵的投影矩阵都是$I$,因为占满了$R^n$</p>
<p>哈哈 “not difficult”</p>
<h2 id="26-对称矩阵，-正定性"><a href="#26-对称矩阵，-正定性" class="headerlink" title="26 对称矩阵， 正定性"></a>26 对称矩阵， 正定性</h2><ul>
<li>symmetric matrices 对称矩阵</li>
<li>positive definite matrices</li>
<li>特征值，和特征向量有何特殊之处</li>
</ul>
<p>$A&#x3D;A^T$ 性质</p>
<ul>
<li>特征值 是 实数 （下面证明）<ul>
<li>稍后证明</li>
</ul>
</li>
<li>特征向量， <strong>是</strong> 垂直的（perpendicular(老师写墙上了黑板不够长)<ul>
<li>证明<ul>
<li>$x_1^TAx_2&#x3D;x_1^T\lambda_2x_2&#x3D;\lambda_2x_1^Tx_2$</li>
<li>$x_1^TAx_2&#x3D;x_2^TA^Tx_1&#x3D;x_2^TAx_1 &#x3D; x_2^T\lambda_1 x_1$</li>
<li>那么有 $\lambda_1 x_1^Tx_2&#x3D;\lambda_2 x_2^Tx_1$, 要么正交，要么 相等<ul>
<li>这里还说明 $A$和$A^T$ 的不同特征值的特征向量 正交</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>来自复习3 特征向量正交+特征值实数 &#x3D;&gt; 是对称矩阵 prove ???？？？</p>
<p>通常$A&#x3D;S\Lambda S^{-1}$</p>
<p>那么 对于 对称矩阵，根据上面垂直的性质, $A&#x3D;Q\Lambda Q^{-1}&#x3D;Q\Lambda Q^T$, spectral theorem , 力学上 主轴定理</p>
<hr>
<p>why real eigenvalues? 为什么 对称矩阵的特征值一定是实数</p>
<p>$Ax&#x3D;\lambda x$ 对两边取共轭，有$\bar{A}\bar{x}&#x3D;\bar{\lambda}\bar{x}$</p>
<p>这里$A\bar{x}&#x3D;\bar{\lambda}\bar{x}$说明实矩阵 的特征值共轭是成对出现的</p>
<p>转置 $\bar{x}^TA&#x3D;\bar{\lambda} \bar{x}^T$</p>
<p>$\bar{x}^TAx&#x3D;\bar{\lambda} \bar{x}^Tx$</p>
<p>$\bar{x}^T \lambda x&#x3D;\bar{\lambda} \bar{x}^Tx$, 注意到 向量点积是数, 那么取决于$\bar{x}^Tx$的值非0, 只要$x$非全零 显然</p>
<ul>
<li>同时这里知道$\bar{x}^Tx$表示 有复数的向量的长度</li>
<li>$(\lambda-\bar{\lambda})\bar{x}^T x&#x3D;0$<ul>
<li>得证</li>
</ul>
</li>
<li>根据同样的过程也知道如果是复矩阵，只要$A&#x3D;\bar{A}^T$ 有一样的性质</li>
</ul>
<p>$A&#x3D;Q\Lambda Q^T$展开看</p>
<p>$&#x3D;\sum \lambda_i q_i q_i^T$, 注意每个后面是 投影矩阵，所以 实对称矩阵是 投影矩阵的组合</p>
<hr>
<p>正主元(???)的个数 &#x3D; 正 lambda的个数 sign of pivot same as sign’s of lambda’s ????</p>
<hr>
<p>positive definite symmetric matrix 正定对称矩阵</p>
<ul>
<li>所有 特征值 是正的</li>
<li>所有 pivots 是 positive<ul>
<li>$\det &#x3D; \prod pivots &gt; 0$</li>
</ul>
</li>
<li>all subdeterminants are positive, 所有 余子式非负</li>
<li>上面 这三条 是相互可推的？prove？？？？？？</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 2 </span><br><span class="line">2 3</span><br><span class="line">主元, 5, 11/5</span><br><span class="line">特征值, 4\pm sqrt(5)</span><br></pre></td></tr></table></figure>

<h2 id="27-复数矩阵，FFT-傅里叶矩阵"><a href="#27-复数矩阵，FFT-傅里叶矩阵" class="headerlink" title="27 复数矩阵，FFT 傅里叶矩阵"></a>27 复数矩阵，FFT 傅里叶矩阵</h2><p>相当于一个插入的分支章节</p>
<ul>
<li>complex vectors matrices</li>
<li>inner products</li>
<li>DISCRETE Fourier FAST Transform<ul>
<li>Fourier matrix F_n</li>
<li>算法竞赛里 现在NTT更多（数域变为mod 998244353)</li>
</ul>
</li>
</ul>
<p>$z&#x3D;[z_1;z_2,\cdots;z_n] \in C^n$ 复数域里的向量 如何算长度</p>
<p>上面有提到$z^Tz$ 不再好 not good</p>
<p>而是 $\bar{z}^Tz$</p>
<p>Hermition写法$z^Hz$ 表示 <code>共轭</code>+<code>转置</code>, inner product</p>
<p>symmetric $A^T&#x3D;A$ no good if A complex</p>
<p>$\bar{A}^T&#x3D;A$或者$A^H&#x3D;A$ 例如 $[2,3+i;3-i,5]$ </p>
<p>同时 重新 定义 正交, 也重新定义 $Q$</p>
<ul>
<li>$q_i^Hq_j&#x3D;0,i\neq j$</li>
<li>$q_i^Hq_j&#x3D;1,i &#x3D;j$</li>
</ul>
<p>unitary matrix酉矩阵, 幺正举证，厄米(Hermitian)共轭， 其中unitary是归一或单位的意思</p>
<ul>
<li>“酉”是Unitary的音译，据说是华罗庚的建议_。中英文都有“一”和“元”的意思。同样，后来对“Simplectic”的翻译也遵循了同样的做法，音译为“辛”</li>
</ul>
<hr>
<p>傅里叶矩阵</p>
<p>It’s just math starts counting with one, and electrical engineers start counting at zero. Actually they’re probably right So anyway, we’ll give them – humor them</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0-index Fn = []</span><br><span class="line">1 1       1          ... 1</span><br><span class="line">1 w       w2         ... w^&#123;(n-1)&#125;</span><br><span class="line">1 w^2     w4         </span><br><span class="line">...</span><br><span class="line">1 w^&#123;n-1&#125; w^&#123;2(n-1)&#125; ... w^&#123;(n-1)(n-1)&#125;</span><br></pre></td></tr></table></figure>

<p>$(F_n)_{ij}&#x3D;w^{ij}$</p>
<p>want $w^n&#x3D;1$, so $w&#x3D;e^{\frac{i2\pi}{n}}$</p>
<p>对于 n &#x3D; 4, $w&#x3D;e^{\frac{2\pi i}{4}}&#x3D;i$</p>
<p>$F_4&#x3D;$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1  1  1  1      1  1  1  1</span><br><span class="line">1  i  i2 i3  =  1  i -1 -i</span><br><span class="line">1  i2 i4 i6     1 -i  1 -1</span><br><span class="line">1  i3 i6 i9     1 -i -1  i</span><br></pre></td></tr></table></figure>

<p>这个矩阵 各列正交，因此 $Q_4 &#x3D;\frac{1}{\sqrt{4}} F_4, Q_4^HQ_4&#x3D;I$</p>
<p>$F_4^{-1}&#x3D;\frac{1}{\sqrt{4}} Q_4^{H}&#x3D;\frac{1}{\sqrt{4}}Q_4^{-1}&#x3D;\frac{1}{\sqrt{4}}Q_4^{T}&#x3D;\frac{1}{\sqrt{4}}Q_4&#x3D;\frac{1}{4}F_4$, 所以逆举运算和正运算核心一样</p>
<p>这只是离散的傅里叶变换</p>
<p>那么问题是如何快速，也就是降低计算量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[F8] = [I  D][F4  O][P  ]</span><br><span class="line">       [I -D][O  F4][   ]</span><br><span class="line"></span><br><span class="line">P 的形状: (奇偶穿插矩阵)</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">  1</span><br><span class="line">    1</span><br><span class="line">      1</span><br><span class="line"> 1      </span><br><span class="line">   1</span><br><span class="line">     1</span><br><span class="line">       1</span><br><span class="line">D 的形状</span><br><span class="line">1</span><br><span class="line">  w</span><br><span class="line">    w2</span><br><span class="line">       w3</span><br><span class="line">         ...</span><br><span class="line">例子</span><br><span class="line">1  1  1  1  [1    1   ][1 1    ][1    ]</span><br><span class="line">1  i -1 -i =[  1     i][1 i    ][   1 ]</span><br><span class="line">1 -1  1 -1  [1   -1   ][    1 1][ 1   ]</span><br><span class="line">1 -i -1  i  [  1    -i][    1 i][    1]</span><br></pre></td></tr></table></figure>

<p>matlab</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I=[1,0;0,1];</span><br><span class="line"></span><br><span class="line">D=[1,0;0,i];</span><br><span class="line"></span><br><span class="line">O=[0,0;0,0];</span><br><span class="line"></span><br><span class="line">F2=[1,1;1,i];</span><br><span class="line"></span><br><span class="line">P=[1,0,0,0;0,0,1,0;0,1,0,0;0,0,0,1];</span><br><span class="line"></span><br><span class="line">F4=[I,D;I,-D]*[F2,O;O,F2]*P;</span><br></pre></td></tr></table></figure>

<p>伪代码+复杂度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f_8(x): F_8 * x</span><br><span class="line">	最右侧矩阵</span><br><span class="line">	px = p_8 * x, n次计算（换奇偶</span><br><span class="line">	px_0,px_1 = px, 分成前一半和后一半</span><br><span class="line">	中间矩阵</span><br><span class="line">	tmp_x_0 = f_4(px_0)</span><br><span class="line">	tmp_x_1 = f_4(px_1)</span><br><span class="line">	最左矩阵</span><br><span class="line">	res_x_0 = tmp_x_0 + D * tmp_x_1, n次计算</span><br><span class="line">	res_x_1 = tmp_x_0 - D * tmp_x_1, n次计算</span><br><span class="line">	return concat(res_x_0,res_x_1)</span><br><span class="line"></span><br><span class="line">f_n(x) 的运算量 = 3n + 2*f_&#123;n/2&#125;(x) 所以总运算量是n log n</span><br></pre></td></tr></table></figure>

<p>算法竞赛中，因为浮点数准确问题，采用了NTT,其核心原理就是</p>
<ul>
<li>fft的数域是复数域，用的F_n中的w 是满足 $w^n&#x3D;1,w^{&lt;n} \neq 1$的也就是$e^{\frac{i2\pi}{n}}$</li>
<li>NTT的数域是mod p(p是质数，最常见的是$998244353$ 因为p-1含有p原根的较高次幂的因数),用的F_n中的w也是满足 $w^n\equiv 1 \pmod{p},w^{&lt; n}\equiv 1 \pmod{p}$ 所以两个是“一致逻辑”的，而NTT全是整数运算，不用担心精度，作为算法正确性校验更友好</li>
</ul>
<h2 id="28-正定矩阵"><a href="#28-正定矩阵" class="headerlink" title="28 正定矩阵"></a>28 正定矩阵</h2><ul>
<li><p>正定 首先是对称矩阵 $A&#x3D;Q\Lambda Q^T$</p>
</li>
<li><p>Positive Definite matrix(Tests) 如何判断正定矩阵</p>
</li>
<li><p>Tests for Minumum (x^TAx &gt;0) Ellipsoids in $R^n$， 找极小值</p>
</li>
</ul>
<p>why什么对正定性感兴趣，椭圆&#x2F;双曲线</p>
<p>从2x2矩阵开始<code>[a,b;b,c]</code></p>
<p>判定方式</p>
<ul>
<li>特征值均正 $\lambda_1 &gt;0, \lambda_2 &gt;0$, 有等于零 则 是semi半正定</li>
<li>从左上角的子det均正 $a &gt;0,ac-b^2&gt;0$ </li>
<li>rref以后的主元为正，pivots $a &gt; 0, \frac{ac-b^2}{a} &gt; 0$</li>
<li>$x^TAx &gt; 0$</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2 6</span><br><span class="line">6 (那么这里要 大于 6^2/2 = 18)</span><br></pre></td></tr></table></figure>

<p>如果18,那么 半正定 pos semidefinite,</p>
<ul>
<li>有特征值0</li>
<li>only 1 pivots</li>
<li>$x^TAx&#x3D;2x_1^2+12x_1x_2+18x_2^2$</li>
</ul>
<p>matlab </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f=@(x,y) 2*x.^2+12*x.*y+1*y.^2;</span><br><span class="line"></span><br><span class="line">fsurf(f,[-10,10,-10,10]);</span><br></pre></td></tr></table></figure>

<p>非正定：二维向量$x&#x3D;[x_1;x_2]$那么$y(x_1,x_2)$马鞍面：某个点 一个方向的极大值，另一个方向的极小值</p>
<p>正定 $x^TAx$除了$0,0$处处为正</p>
<ul>
<li>微积分： 最小值 二阶导数为正</li>
<li>18.06： matrix 是 pos def(正定)</li>
</ul>
<p>$2x^2+12xy+24y^2$ 在 &gt;0的横截面 还是椭圆</p>
<p>$&#x3D;2(x+3y)^2+4y^2&#x3D;1$是个椭圆， 这里(2,4)是主元，而3是消元时的倍数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[2 6]</span><br><span class="line">[6 24]</span><br><span class="line"></span><br><span class="line">= LU</span><br><span class="line">= [1  ][2 6]</span><br><span class="line">  [3 1][  4]</span><br><span class="line"></span><br><span class="line">2阶导矩阵 一定程度上是，这里还有额外的幂次2</span><br><span class="line">[fxx  fxy]</span><br><span class="line">[fyx  fyy]</span><br></pre></td></tr></table></figure>

<hr>
<p>例子3x3</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 2 -1  0</span><br><span class="line">-1  2 -1</span><br><span class="line"> 0 -1  2</span><br><span class="line"></span><br><span class="line">dets: A_1 = 2, A_2 = 3, A_3 = 4</span><br><span class="line"></span><br><span class="line">pivots 2,3/2,4/3 (因为 prod pivots = det, 所以pivot_i = det_i/det_&#123;i-1&#125;)</span><br><span class="line"></span><br><span class="line">eigenvalues: 2-sqrt(2),2,2+sqrt(2)</span><br></pre></td></tr></table></figure>

<p>关联函数 $x^TAx &#x3D; 2x_1^2+2x_2^2+2x_3^2-2x_1x_2-2x_2x_3 &gt; 0$</p>
<p>在大于 0 的位置切割，得到椭圆体（3个主要方向（3个特征值不同））</p>
<h2 id="29-相似矩阵，Jordan-form-若尔当形"><a href="#29-相似矩阵，Jordan-form-若尔当形" class="headerlink" title="29 相似矩阵，Jordan form 若尔当形"></a>29 相似矩阵，Jordan form 若尔当形</h2><ul>
<li>$A^TA$ is positive definite</li>
<li>similar matrices A,B， $B&#x3D;M^{-1}AM$, Jordan form</li>
</ul>
<p>正定矩阵:</p>
<ul>
<li>与最小二乘法有关</li>
<li>$x^TAx &gt;0,x \neq 0$</li>
</ul>
<p>A是正定矩阵,A的逆是什么？</p>
<ul>
<li>特征值 &#x3D; 1&#x2F;原矩阵的特征值，所以$A^{-1}$也是正定的</li>
</ul>
<p>A,B是 正定的</p>
<ul>
<li>A+B: $x^T(A+B)x &gt; 0$ 所以也是正定的</li>
</ul>
<p>A是长方形 $A^TA$ 是正定的吗？</p>
<ul>
<li>$x^TA^TAx &#x3D; (Ax)^T(Ax)$ 非负，半正定的<ul>
<li>如果 A的列线性无关，则是正定的</li>
</ul>
</li>
</ul>
<hr>
<p>A,B相似，意味着,存在$M$</p>
<p>$B&#x3D;M^{-1}AM$</p>
<ul>
<li>性质： 相似矩阵有相同的特征值，因为她们都能变化为 特征值的对角矩阵, 但这个性质不充分，见下</li>
<li></li>
<li>$Ax&#x3D;\lambda x$<ul>
<li>$(M^{-1}AM)(M^{-1}x)&#x3D;\lambda(M^{-1}x)$</li>
</ul>
</li>
</ul>
<p>核心依然是 $S^{-1}AS&#x3D;\Lambda$, $S$是特征向量矩阵</p>
<p>$A&#x3D;[2,1;1,2], B&#x3D;[-2,-15,1,6]$</p>
<p>它们有相同“特征值”</p>
<hr>
<p>bad case, 如果有重复的特征值，可能无法对角化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 0</span><br><span class="line">0 4</span><br><span class="line">和</span><br><span class="line">4 1</span><br><span class="line">0 4</span><br><span class="line">不属于同一类 （不相似）</span><br></pre></td></tr></table></figure>

<p>注意到第一个 $M^{-1}AM&#x3D;A$ 相似的 只有它自己</p>
<p>第二个是，jordan form 最接近标准型 但是又不相似于标准型</p>
<p>例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 5  1</span><br><span class="line">-1  3</span><br><span class="line">相似于</span><br><span class="line">4  0</span><br><span class="line">17 4</span><br></pre></td></tr></table></figure>

<p>Jordan block(每个block有一个 evector)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0100</span><br><span class="line">0010</span><br><span class="line">0000</span><br><span class="line">0000</span><br><span class="line">和</span><br><span class="line">0100</span><br><span class="line">0000</span><br><span class="line">0001</span><br><span class="line">0000</span><br><span class="line">不相似</span><br></pre></td></tr></table></figure>

<p>Jordan定理： 每个方阵A 相似于 Jordan matrix J</p>
<ul>
<li>也就是解决 特征值重复的问题</li>
<li>现在 主要关注还是上面的可分解型，没有关注这种形式</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">J1</span><br><span class="line">   J2</span><br><span class="line">      J3</span><br><span class="line">         ...</span><br><span class="line">J的数量 = evector的数量</span><br></pre></td></tr></table></figure>

<h2 id="30-奇异值分解"><a href="#30-奇异值分解" class="headerlink" title="30 奇异值分解"></a>30 奇异值分解</h2><ul>
<li>Singular Value Decomposition (SVD)</li>
<li>$A&#x3D;U\Sigma V^T&#x3D;U\Sigma V^{-1}$, 两边是 正交矩阵，中间是对角矩阵<ul>
<li>A&#x3D;(orthog)(diag)(orthog) every A</li>
<li>对角一定非负（视频33）<ul>
<li>下面计算过程表示了Lambda一定是正的，这里开根 不能取负号吗？？</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>回顾之前</p>
<ul>
<li>对于一般可逆矩阵有$A&#x3D;S\Lambda S^{-1}$ 这个的缺点就是$S$的列不是正交的，</li>
<li>对于实对称矩阵（包含 正交矩阵），有$A&#x3D;Q\Lambda Q^T$</li>
</ul>
<p>希望 $AV&#x3D;U\Sigma$</p>
<ul>
<li>A乘上 来自行空间的基列向量V, &#x3D; 来自列空间的基列向量U * 对角乘数因子Sigma</li>
<li>因此 $Av_i &#x3D; u_i\sigma_i$</li>
<li>目标： to find an orthogonal basis in the orthonormal, even basis in the row space and an orthonormal basis in the column space</li>
</ul>
<p>例子</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 4 4</span><br><span class="line">-3 3</span><br><span class="line">找 v1,v2 in row space R^2， v1,v2 标准+正交</span><br><span class="line">找 u1,u2 in col space R^2， u1,u2 标准+正交</span><br><span class="line">以及 sigma_1,sigma_2 &gt; 0</span><br></pre></td></tr></table></figure>


<p>$A&#x3D;U\Sigma V^{-1}&#x3D;U\Sigma V^{T}$</p>
<p>$A^TA&#x3D;V\Sigma^TU^TU\Sigma V^{T}&#x3D;V\Sigma^2V^T$</p>
<p>$AA^T&#x3D;U\Sigma V^{T}V\Sigma^TU^T&#x3D;U\Sigma^2U^T$</p>
<ul>
<li>它们 特征值相同, AB和BA特征值相同</li>
</ul>
<p>因此 $V,U$分别为$A^TA,AA^T$的 正交化的特征向量组成的矩阵, 注意两边的Sigma中的特征值顺序要一致, 另外的 注意上面的 U,V的正负号 因为平方的原因 没有影响， 所以需要“指定”夷夏政府 再回到 $Av_i&#x3D;u_i \sigma_i$ 确定符号</p>
<p>$\Sigma$为 $A^TA,AA^T$的特征值开根</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">A=[<span class="number">4</span>,<span class="number">4</span>;<span class="number">-3</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">ATA=A&#x27;*A;</span><br><span class="line"></span><br><span class="line">[V,D1]=eig(ATA); <span class="comment">% D1是特征值对角矩阵, V是norm 特征向量矩阵</span></span><br><span class="line"></span><br><span class="line">AAT=A*A&#x27;;</span><br><span class="line"></span><br><span class="line">[U,D2]=eig(AAT); <span class="comment">% D2 == D1</span></span><br><span class="line"></span><br><span class="line">S=sqrtm(D2); <span class="comment">% Sigma = sqrt(</span></span><br><span class="line"></span><br><span class="line">U*S*V&#x27;; <span class="comment">% = A</span></span><br></pre></td></tr></table></figure>

<hr>
<p>例子2, rank&#x3D;1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A=</span><br><span class="line">4 3</span><br><span class="line">8 6</span><br></pre></td></tr></table></figure>

<p>row space: k[4;3]</p>
<p>col space: [4;8]</p>
<p><code>v_1 = 1/5[4;3]= [.8;.6]</code></p>
<p><code>u_1 = [1/sqrt(5);2/sqrt(5)]</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4 3          [1  2][sqrt(125)  ][.8  .6]</span><br><span class="line">8 6 =(1/sqrt5[2 -1][          0][.6 -.8]</span><br><span class="line">A     U            Sigma         V^T</span><br></pre></td></tr></table></figure>


<h2 id="31-线性变换-及-对应矩阵"><a href="#31-线性变换-及-对应矩阵" class="headerlink" title="31 线性变换 及 对应矩阵"></a>31 线性变换 及 对应矩阵</h2><p>Linear transformations</p>
<ul>
<li>without coordinates: no matrix</li>
<li>with coordinates -&gt; matrix</li>
</ul>
<p>线性变换</p>
<ul>
<li>T(v+w)&#x3D;T(v)+T(w)</li>
<li>T(cv) &#x3D; cT(v)</li>
</ul>
<p>例1: projection 投影</p>
<p>T: $R^2\to R^2$</p>
<p>例2: shift whole plane, 平移整个面点。不是线性变换</p>
<p>例3: T(v)&#x3D;||v||^2不是线性变换</p>
<p>例4: 旋转45度,是线性变换</p>
<p>例5: T(v)&#x3D;Av,是线性变换</p>
<p>例6: $T(v)&#x3D;A_{2\times 3}v$ 这里$T:R^3\to R^2$,是线性变换,</p>
<p>那么对于一个线性变换T的“关键要素有什么”</p>
<ul>
<li>其实是 对输入进行基的拆解，然后T只关心对 基的变换，变换后再组合（而这可以拆分与组合 正式因为T是线性变换）</li>
<li>那么 coordinates是 所选定基的拆分结果而已</li>
</ul>
<p>那么目标，对于给定的 $T:R^{n}\to R^m$,希望找一个$A_{m\times n}$来描述</p>
<p>所以 A的第i列表示输入的第i个基 变为的新的基的 坐标</p>
<hr>
<p>例子 求导， $T&#x3D;\frac{d}{dx}$</p>
<p>输入 $c_0+c_1x+c_2x^3$, 基$1,x,x^2$</p>
<p>输出 $c_1+2c_2x$, 基$1,x$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  c0</span><br><span class="line">A c1 =   c1</span><br><span class="line">  c2    2c2 </span><br><span class="line"></span><br><span class="line">A= 0 1 0</span><br><span class="line">   0 0 2</span><br></pre></td></tr></table></figure>

<h2 id="32-基变换-图像压缩"><a href="#32-基变换-图像压缩" class="headerlink" title="32  基变换 图像压缩"></a>32  基变换 图像压缩</h2><p>应用</p>
<ul>
<li>change of basis</li>
<li>compression of Images</li>
<li>Transformation &lt;-&gt; matrix</li>
</ul>
<p>lossy compression: 有损压缩</p>
<p>图像存储 &#x3D; 像素个数 * 颜色 大小的长向量</p>
<p>JPEG &#x3D; Joint Photograpihc Experts Group</p>
<p>标准基 &#x3D; $I_n \in R^n$的列向量</p>
<p>better basis</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1  1      1 </span><br><span class="line">1  1     -1</span><br><span class="line">1 -1      1</span><br><span class="line">1 -1 ... -1</span><br></pre></td></tr></table></figure>

<p>JPEG用了 Fourier basis,  $w&#x3D;e^{\frac{i2\pi}{n}}$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">signal x</span><br><span class="line">    无损 change basis</span><br><span class="line">coeffs c  &lt;-  线性代数能帮助 系数的计算</span><br><span class="line">    lossy compression</span><br><span class="line">    丢掉肉眼看不见的帧</span><br><span class="line">hat&#123;c&#125;</span><br><span class="line">    复原</span><br><span class="line">hat&#123;x&#125; = sum hat&#123;ci&#125; vi, 不再是64个基向量</span><br></pre></td></tr></table></figure>

<p>视频， sequence images, 期望上 连续的图像高度相关，</p>
<hr>
<p>傅里叶基的竞争对手， 小波基 wavelets, FWT, 全是0,-1， 正交的， 也和 傅里叶那样可以快速计算</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1  1  1  0</span><br><span class="line">1  1 -1  0</span><br><span class="line">1 -1  0  1</span><br><span class="line">1 -1  0 -1</span><br></pre></td></tr></table></figure>

<p>change of basis</p>
<p>标准基中坐标x&#x3D; P新基 c新基中的坐标</p>
<p>$c&#x3D;P^{-1}x$</p>
<p>然后$P^{-1}$的具体计算要足够快，比如 之前学过FFT的 快速计算 方法</p>
<p>总结：不论是 fft还是fwt</p>
<ul>
<li>能扔掉维度 对视觉影响小</li>
<li>快速运算</li>
</ul>
<hr>
<p>对于一个变换， 如果用 （A和基v…）能表示，用(B和基础w…)能表示，</p>
<p>那么 A和B相似，坐标+相似 乘上M得到另一个里的坐标，同一个东西，那么一定存在可逆$M$$ ????</p>
<hr>
<p>如果 我们的选的 正好是 eigenvector basis, 特征向量基</p>
<p>那么 就会发现 原来的向量就是 各个角度的 特征值倍数的放缩</p>
<p>再换句话说 ，这是 A就是 $\Lambda$</p>
<h2 id="33-复习3"><a href="#33-复习3" class="headerlink" title="33 复习3"></a>33 复习3</h2><p>大纲</p>
<ul>
<li>lambda ,x 特征值和特征向量<ul>
<li>解 det lambda-AI</li>
<li>例如 投影矩阵因为幂等性，特征值 只能是0或1</li>
<li>用du&#x2F;dt&#x3D;Au解微分方程, e^{At}</li>
<li>A&#x3D;A^T 对称矩阵<ul>
<li>特征值 实数</li>
<li>总是存在足够的特征向量 prove?????</li>
<li>特征向量可以构成正交矩阵<ul>
<li>一定可以对角化 成 A&#x3D;Q Lambda Q^T, Q是norm特征向量列</li>
</ul>
</li>
<li>正定矩阵<ul>
<li>多种判别法<ul>
<li>所有 特征值正</li>
<li>rref主元全正</li>
<li>$x^TAx &gt;0$</li>
<li>最常用： 主(左上角开始的i * i)子行列式 全正</li>
</ul>
</li>
</ul>
</li>
<li>相似矩阵<ul>
<li>特征值一致（必要不充分），且可以转化</li>
<li>$A^n 相似于 B^n$</li>
<li>意义 通过不同的基表示同样的东西</li>
</ul>
</li>
<li>SVD: $A&#x3D;U Sigma V^T$ 对于非对称矩阵的 正交矩阵 对角矩阵 正交矩阵 的分解</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<p>题目1: $du&#x2F;dt&#x3D;Au&#x3D;[0,-1,0;1,0,-1;0,1,0]u$</p>
<p>$u(t)&#x3D;c_1e^{\lambda_1t}x_1+c_2e^{\lambda_2t}x_2+c_3e^{\lambda_3t}x_3$</p>
<p>找特征值: $0, \pm \sqrt{2}i$</p>
<p>$u(t)&#x3D;c_1x_1+c_2e^{\sqrt{2}it}x_2+c_3e^{-\sqrt{2}it}x_3$</p>
<hr>
<p>orthogonal evectors什么时候 特征向量正交</p>
<p>如果 满足$AA^T&#x3D;A^TA$，则特征向量正交</p>
<ul>
<li>例如 $A^T&#x3D;A$，A&#x3D;Q, $A^T&#x3D;-A$</li>
</ul>
<hr>
<p>解的形状 $u(t)&#x3D;e^{At}u(0)$</p>
<p>if $A&#x3D;S \Lambda S^{-1}$</p>
<ul>
<li>$e^{At}&#x3D;Se^{\Lambda t}S^{-1}$, 中间 看成 $e^{\lambda_i t}$的对角矩阵</li>
</ul>
<hr>
<p>A 对称 且 正交矩阵</p>
<ul>
<li>特征值？<ul>
<li>$|\lambda|&#x3D;1$<ul>
<li>$Qx&#x3D;\lambda x$两边同时求长度$a^Ta$ 可得</li>
</ul>
</li>
</ul>
</li>
<li>证明 1&#x2F;2 (A+I) 是一个投影矩阵<ul>
<li>特征值 只有0,1</li>
<li>对称:显然</li>
<li>幂等: 1&#x2F;4(A^2+2A+I) &#x3D; 1&#x2F;2(A+I)? <ul>
<li>因为$A&#x3D;A^T&#x3D;A^{-1}$ 得证</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="34-左逆，右逆，伪逆"><a href="#34-左逆，右逆，伪逆" class="headerlink" title="34 左逆，右逆，伪逆"></a>34 左逆，右逆，伪逆</h2><ul>
<li>Left-inverses</li>
<li>Right-inverses</li>
<li>Pseudo-inverses</li>
</ul>
<p>2-sided inverse</p>
<p>$AA^{-1}&#x3D;I&#x3D;A^{-1}A$</p>
<ul>
<li>当 $r&#x3D;m&#x3D;n$时 有 这个完美的逆矩阵</li>
</ul>
<p>列向量线性无关，0&#x2F;1个解，</p>
<p>$(A^TA)^{-1}A^TA&#x3D;I$</p>
<p>$A_{\mathrm{left}}^{-1} &#x3D; (A^TA)^{-1}A^T$ 称作 $A$的左逆矩阵，A可以不是方阵</p>
<p>类似的 ，行向量线性无关</p>
<p>$AA^T(AA^T)^{-1}&#x3D;I$</p>
<p>$A_{\mathrm{right}}^{-1}&#x3D;A^T(AA^T)^{-1}$</p>
<p>但是 $AA_{\mathrm{left}^{-1}} &#x3D;A(A^TA)^{-1}A^T$ 是 投影矩阵！！ 向列向量投影</p>
<p>$A_{\mathrm{right}}^{-1} A$是 向行向量空间的投影矩阵</p>
<p>所以对于可逆矩阵 $Ax$可以看成把一个行空间中的 向量x 投射到列空间中</p>
<ul>
<li>左逆的意思是(列线性无关时） 列空间向量到行空间（更大），再到列空间不变</li>
<li>右逆的意思是(行线性无关时） 行空间向量到列空间（更大），再到行空间不变</li>
</ul>
<hr>
<p>所以理解Ax实际是行空间 到列空间一一对应的转化，只是 不属于行空间的，例如nullspace, 属于大$R^n$的 也会 被映射到列空间罢了</p>
<ul>
<li>也就是，只看定义域（行空间）和值域（列空间））那么A就是一一映射</li>
<li>而如果定义域$R^n$,值域$R^m$ 那么就不是一一映射了</li>
<li>而这个视角看，那么在缩小定义域和值域的时候，那么映射逆就是 一个很优雅的逆</li>
<li>从而 这样去看 转置的意义就哇哦了</li>
</ul>
<p>既然都是rank(row)&#x3D;rank(col) 那么有期望 是 row space和col space 中向量一一对应</p>
<ul>
<li>x,y 在行空间中，且不同，那么 列空间中$Ax\neq Ay$<ul>
<li>理解</li>
<li>如果 Ax &#x3D; Ay, 有 A(x-y)&#x3D;0, 说明x,y在nullspace不在行空间，说明 了 不同行空间向量映射到不同列空间向量</li>
</ul>
</li>
</ul>
<hr>
<p>find the pseudoinverse $A^{+}$</p>
<p>然而是从SVD思考</p>
<p>$A&#x3D;U\Sigma V^T$</p>
<p>$A^{+}&#x3D;V\Sigma^{+}U^{T}$ ,其中  所有$\sigma_i$变成$1&#x2F;\sigma_i$</p>
<p>$\Sigma \Sigma^{+}$  是个对角矩阵，11110000</p>
<h2 id="35-期末复习"><a href="#35-期末复习" class="headerlink" title="35 期末复习"></a>35 期末复习</h2><p>举例 有正交向量组，但是非实对称的矩阵</p>
<ul>
<li>skew-symmetric 反对称: <code>[0,-1;1,0]</code><ul>
<li>一般性吗?<ul>
<li>同样的方法能得到 当 $\lambda_1 + \lambda_2\neq 0$时特征向量是正交的</li>
<li>那么根据 $x^2-9&#x3D;x^2-25+16$<ul>
<li>容易构造矩阵$[5,4;-4,-5]$ 特征值是$3,-3$			- 而特征向量是<code>[-2;1];[1;-2]</code> 果然不正交</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>正交矩阵: <code>[sin,-cos;cos,sin]</code><ul>
<li>特征值是1,-1对应两个特征空间，两个特征空间里取分别的正交系</li>
<li>不同特征值 通过 $x_2^Tx_1&#x3D;x_2^TQ^TQx_1&#x3D;(Qx_2)^T(Qx_1)&#x3D;-(x_2)^T(x_1)$ 可以证明只能正交</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A=[[1;1;1]/sqrt(3),[1;-1;0]/sqrt(2),[1;1;-2]/sqrt(6)]</span><br><span class="line">[V,D]=eig(A)</span><br><span class="line">V&#x27;*V;</span><br></pre></td></tr></table></figure>


<h2 id="想法随记"><a href="#想法随记" class="headerlink" title="想法随记"></a>想法随记</h2><p><a href="https://matlab.mathworks.com/">matlab</a> 比py的numpy更香，现在还有网页版了, 还有<a href="https://ww2.mathworks.cn/help/matlab/index.html?s_tid=hc_panel">官方中文入门文档</a></p>
<p>有些内容用代码 或者 matlab代码可以更好的表述</p>
<p>从多元一次方程组开始，逐个拆分，从小到大，从特例到一般</p>
<p>每次都是例子先行！！相比于定义先行，更intuition！！</p>
<p>习题 的检验反馈环很重要，虽然这个笔记没记录什么习题。</p>
<p>3维作为高维空间，进行子空间关系讲解，拆分的1维空间缺少灵活感</p>
<p>大小写字母在“表现值，向量，矩阵”也有“局限感”, 要是有小，中，大 写就好了</p>
<p>所以“有限的练习题”会误以为掌握，所以应该设计无限的练习题，不要依赖于数量来认为是否掌握</p>
<p>矩阵的一些证明，有一种反除法习惯的感觉。</p>
<p>全部学完以后，感觉 中间的4个子空间 非常关键</p>
<p>当一个新的“定理理论”出现时，可以举一个满足的和一个不满足的双向加深理解</p>
<h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><p>TODO 相关的???  ？？？prove补充</p>
<p>TODO 自己整理一个速通关键记要</p>
]]></content>
      <categories>
        <category>线性代数</category>
      </categories>
      <tags>
        <tag>线性代数</tag>
        <tag>MIT</tag>
      </tags>
  </entry>
  <entry>
    <title>数学分析 CheatSheet</title>
    <url>/Math/Mathematical_analysis-cheatsheet/</url>
    <content><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p><a href="https://zh.wikipedia.org/wiki/%E4%B8%89%E8%A7%92%E6%81%92%E7%AD%89%E5%BC%8F">三角横等式</a></p>
<p>$\tan^2x+1&#x3D;\sec^2x$</p>
<p>$\sinh x &#x3D; \frac{e^x}{2} - \frac{e^{-x}}{2}$</p>
<p>$\cosh x &#x3D; \frac{e^x}{2} + \frac{e^{-x}}{2} &#x3D; \sqrt{1+\sinh^2x}$</p>
<p>$sech(x) &#x3D; \frac{2}{e^x + e^{-x}}$</p>
<p>$sin(x)cos(y) &#x3D; \frac{sin(x+y) + sin(x-y)}{2}$</p>
<p>$sin(x)sin(y) &#x3D; \frac{cos(x-y) - cos(x+y)}{2}$</p>
<p>$cos(x)cos(y) &#x3D; \frac{cos(x-y) + cos(x+y)}{2}$</p>
<p>$sin(x) + sin(y) &#x3D; 2sin(\frac{x+y}{2})cos(\frac{x-y}{2})$</p>
<p>$cos(x) + cos(y) &#x3D; 2cos(\frac{x+y}{2})cos(\frac{x-y}{2})$</p>
<p>$cos(x) - cos(y) &#x3D; -2sin(\frac{x+y}{2})cos(\frac{x-y}{2})$</p>
<span id="more"></span>

<h1 id="微分"><a href="#微分" class="headerlink" title="微分"></a>微分</h1><p>$\sin’x &#x3D; \cos x$</p>
<p>$\cos’x &#x3D; - \sin x$</p>
<p>$\tan’x &#x3D; \sec^2x$</p>
<p>$\cot’x &#x3D; - \csc^2x$</p>
<p>$\sec’x &#x3D; \tan x \cdot \sec x$</p>
<p>$\csc’x &#x3D; - \cot x \cdot \csc x$</p>
<p>$\cosh’ x &#x3D; \sinh x$</p>
<p>$\sinh’ x &#x3D; \cosh x$</p>
<p>$\tanh’ x &#x3D; sech^2 x$</p>
<p>$arctanh(x)’ &#x3D; \frac{1}{1-x^2}$</p>
<p>$arcsinh(x)’ &#x3D; \frac{1}{\sqrt{1+x^2}}$</p>
<p>$arccosh(x)’ &#x3D; \frac{1}{\sqrt{x-1}\sqrt{x+1}}$</p>
<p>有些地方<code>^(-1)</code>表示不是<code>-1</code>次方而是逆函数 $\tan^{-1} x &#x3D; \arctan x$</p>
<p>$\arctan’x &#x3D; \frac{1}{1+x^2}$</p>
<p>$arccot’x &#x3D; -\frac{1}{1+x^2}$</p>
<p>$\arcsin’x &#x3D; \frac{1}{\sqrt{1-x^2}}$</p>
]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>CheatSheet</tag>
        <tag>数学分析</tag>
      </tags>
  </entry>
  <entry>
    <title>数学分析 一 分析基础</title>
    <url>/Math/Mathematical_analysis_problems_1/</url>
    <content><![CDATA[<h1 id="分析基础-1"><a href="#分析基础-1" class="headerlink" title="分析基础 1"></a>分析基础 1</h1><h2 id="序列极限-1-3"><a href="#序列极限-1-3" class="headerlink" title="序列极限 1.3"></a>序列极限 1.3</h2><h3 id="题目-1-3-4"><a href="#题目-1-3-4" class="headerlink" title="题目 1.3.4"></a>题目 1.3.4</h3><p>设 $$A&gt;0,x_1&gt;0,x_{n+1}&#x3D;\frac12(x_n+\frac A{x_n}) (n&#x3D;1,2,\dots)$$</p>
<p>(1) 求证: $$x_n$$单调下降且有下界</p>
<p>(2) 求$$lim_{n-&gt;\infty}x_n$$</p>
<span id="more"></span>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>(1) 显然 $$x_n \geq \sqrt A (n\geq2)$$</p>
<p>有 $$x_{n+1}-x_n &#x3D; \frac12(\frac A{x_n}-x_n) &#x3D; \frac12 \cdot \frac {(\sqrt A - x_n)(\sqrt A + x_n)}{x_n} \leq 0 (n\geq2)$$</p>
<p>(2) 设极限为<code>a</code>,带入原式子,则 推出$$a&#x3D;\sqrt A$$</p>
<h3 id="题目-1-3-9"><a href="#题目-1-3-9" class="headerlink" title="题目 1.3.9"></a>题目 1.3.9</h3><p>求证 $$lim_{n-&gt;\infty}[\frac{(2n-1)!!}{(2n)!!}]^2\cdot\frac1{2n+1}$$极限存在</p>
<h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>$$a_n &#x3D; lim_{n-&gt;\infty}[\frac{(2n-1)!!}{(2n)!!}]^2\cdot\frac1{2n+1}  &gt; 0$$</p>
<p>$$ \frac{a_{n+1}}{a_n} &#x3D; \frac{(2n+1)^3}{(2n+2)^2\cdot (2n+3)} &lt; 1$$</p>
<p>单调递减 有下界限</p>
<p>从 $$ln a_{n+1} - ln a_n$$ 上看 说明 $$ln a_{n}$$ 趋于 $$-\infty$$ , $$a_n$$极限为$$0$$</p>
<p>总感觉有地方没有说清楚</p>
<h2 id="函数极限与连续概念-1-4"><a href="#函数极限与连续概念-1-4" class="headerlink" title="函数极限与连续概念 1.4"></a>函数极限与连续概念 1.4</h2><h3 id="题目-1-4-3"><a href="#题目-1-4-3" class="headerlink" title="题目 1.4.3"></a>题目 1.4.3</h3><p>设 $$ 0&lt;x_n&lt;+\infty $$,且满足 $$ x_n+\frac 4 {x_{n+1}^2} &lt; 3 $$, 求出此极限值。</p>
<h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>由题目显然有 $$\frac{2\sqrt3}3 &lt; x_n  &lt; 3$$</p>
<p>$$x_{n+1}-x_n &gt; \frac {x_{n+1}^3-3_{n+1}^2+4}{x_{n+1}^2} &#x3D; \frac {(x_{n+1}+1)(x_{n+1}-2)^2}{x_{n+1}^2} \ge 0 $$</p>
<p>单调递增 有上界</p>
<p>如果 $x_n &gt; 2$ 令 $x_n &#x3D; 2+y_n,1 &gt; y_n &gt; 0$ , $y_n$单调递增</p>
<p>如果 $$x_n &#x3D; 2$$ 有 $x_{n+1} &gt; 2$ 取 $ n &#x3D; n+1$</p>
<p>$$x_{n+1}-x_n &gt; \frac {(x_{n+1}+1)(x_{n+1}-2)^2}{x_{n+1}^2} &gt; \frac {(2+1)y_{n+1}^2}{3^2} $$</p>
<p>$m-n &gt; \frac{3}{y_{n+1}^2}$时, 存在 $y_m &gt; 3$</p>
<p>$$\therefore \frac{2\sqrt3}3 &lt; x_n  &lt; 2$$</p>
<p>如果 $x_n &lt; 2$ 令 $x_n &#x3D; 2-y_n,2-\frac{2\sqrt3}3 &gt; y_n &gt; 0$ , $y_n$也单调递减</p>
<p>$$(-y_{n+1}) - (-y_{n}) &gt; x_{n+1}-x_n &gt; \frac {(x_{n+1}+1)(x_{n+1}-2)^2}{x_{n+1}^2} &gt; \frac {2 y_{n+1}^2}{2^2} $$</p>
<p>$$ y_n &gt; y_{n+1} + \frac{y_{n+1}^2}{2} $$</p>
<p>$$ y_{n+1} &lt; \sqrt{2y_n+1} -1 &#x3D; \frac {2y_n}{\sqrt{2y_n+1}+1} &lt;  $$</p>
<p>然后呢????</p>
<p>还是说 简单说 所有 小于2 都不是定点都会增大,但所有增大的结果都小于2 ?,或者说 假设一个小于2的为 极致 用反证 唯一？</p>
<hr>
<p>数列有极限</p>
<p>所以 不等式也有极限 $$lim$$</p>
<h3 id="题目-1-4-12"><a href="#题目-1-4-12" class="headerlink" title="题目 1.4.12"></a>题目 1.4.12</h3><p>设序列$${x_n}$$由如下迭代产生:</p>
<p>$$x_1&#x3D;\frac12,x_{n+1} &#x3D; x_n^2 + x_n (n&#x3D;1,2,\dots)$$</p>
<p>求证 $$lim_{n-&gt;\infty}(\frac1{1+x_1}+\frac1{1+x_2}+\cdot+\frac1{1+x_n})&#x3D;2$$</p>
<h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解 ???"></a>题解 ???</h3><h2 id="比区间上连续函数的性质-1-5"><a href="#比区间上连续函数的性质-1-5" class="headerlink" title="比区间上连续函数的性质 1.5"></a>比区间上连续函数的性质 1.5</h2><h3 id="题目-1-5-3"><a href="#题目-1-5-3" class="headerlink" title="题目 1.5.3"></a>题目 1.5.3</h3><p>设 $$f_n(x)&#x3D;x^n+x$$</p>
<p>求证</p>
<p>(1) 对任意自然数 $$n&gt;1$$,方程 $$f_n(x) &#x3D; 1$$在$$(\frac12,1)$$内有且仅有一个根</p>
<p>(2) 若$$c_n \in (\frac12,1)$$是$$f_n(x)&#x3D;1$$的根,则$$lim_{n-&gt;infty}c_n$$存在，并求此极限</p>
<h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解 ???"></a>题解 ???</h3><p>(1)</p>
<p>求导$$nx^{n-1}+1&gt;0$$,严格单调</p>
<p>所以 $$ (f_n(\frac12)-1) \cdot (f_n(1)-1) &lt; 0, x \in (\frac12,1)$$ 有根,得证</p>
<p>(2) ???</p>
<p>2.6 例22?</p>
<h3 id="题目-1-5-4"><a href="#题目-1-5-4" class="headerlink" title="题目 1.5.4"></a>题目 1.5.4</h3><p>设置$$f(x)$$在 $[a,b]$ 上无界,求证: $$\exists c \in [a,b]$$,使得 $$\forall \delta &gt; 0$$ 函数 $$f(x)$$在 $$[c-\delta,c+\delta]\bigcap [a,b]$$上无界</p>
<h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解 ???"></a>题解 ???</h3><h3 id="题目-1-5-5"><a href="#题目-1-5-5" class="headerlink" title="题目 1.5.5"></a>题目 1.5.5</h3><p>设 $${x_n}$$ 为有界序列。求证: $x_n$ 以 $a$为极限的充分必要条件是: ${x_n}$的任一收敛子序列都有相同的极限值$a$.</p>
<h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解 ???"></a>题解 ???</h3><h3 id="题目-1-5-7"><a href="#题目-1-5-7" class="headerlink" title="题目 1.5.7"></a>题目 1.5.7</h3><p>设 $f(x) \in \mathbb{C}[a,b]$ 且有唯一的取到$f(x)$最大值的点$x^ * $ 又设 $x_n \in [a,b] (n&#x3D;1,2,\dots)$</p>
<p>使得$$ lim_{n-&gt;\infty} f(x_n) &#x3D; f(x^*), 求证 lim_{n-&gt;\infty} x_n &#x3D; x^*$$</p>
<h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解 ???"></a>题解 ???</h3><h3 id="题目-1-5-8"><a href="#题目-1-5-8" class="headerlink" title="题目 1.5.8"></a>题目 1.5.8</h3><p>设$$ f(x) \in \mathbb{C}[0,+\infty) $$又设对 $$\forall l \in \mathbb{R}$$ 方程 $$f(x) &#x3D; l$$在 $$[0,+\infty)$$ 上只有有限个解或无解,求证:</p>
<p>(1) 如果 $f(x)$ 在 $$[0,+\infty)$$ 上有界,则极限 $$lim_{x-&gt;+\infty}f(x)$$存在;</p>
<p>(2) 如果 $f(x)$ 在 $$[0,+\infty)$$ 上无上界,则 $$lim_{x-&gt;+\infty}f(x) &#x3D; + \infty$$</p>
<h3 id="题解-8"><a href="#题解-8" class="headerlink" title="题解 ???"></a>题解 ???</h3><h3 id="题目-1-5-10"><a href="#题目-1-5-10" class="headerlink" title="题目 1.5.10"></a>题目 1.5.10</h3><p>设$f(x)$在$[a,b]$上定义,$x_0\in [a,b]$如果对 $\forall \epsilon &gt; 0,\exists \delta &gt; 0$ 当 $|x-x_0|&lt;\delta$时, 有 $f(x) &lt; f(x_0)+\epsilon$, 那么称$f(x)$在点$x_0$处<strong>上半连续</strong>,如果$f(x)$在$[a,b]$上的没一点都上半连续,则称$f(x)$为$[a,b]$上的一个<strong>上半连续函数</strong>.求证: $[a,b]$上的<strong>上半连续函数</strong>一定有上界.</p>
<h3 id="题解-9"><a href="#题解-9" class="headerlink" title="题解 ???"></a>题解 ???</h3>]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>数学分析 二 一元函数微分学</title>
    <url>/Math/Mathematical_analysis_problems_2/</url>
    <content><![CDATA[<h1 id="一元函数微分学-2"><a href="#一元函数微分学-2" class="headerlink" title="一元函数微分学 2"></a>一元函数微分学 2</h1><h2 id="导数与微分-2-1"><a href="#导数与微分-2-1" class="headerlink" title="导数与微分 2.1"></a>导数与微分 2.1</h2><h3 id="题目-2-1-3"><a href="#题目-2-1-3" class="headerlink" title="题目 2.1.3"></a>题目 2.1.3</h3><p>设$f(x)$在点$x_0$处可导,$\alpha_n$,$\beta_n$为趋于零的正数序列，求证:</p>
<p>$\lim\limits_{\substack{n\rightarrow \infty }}\frac{f(x_0+\alpha_n)-f(x_0+\beta_n)}{\alpha_n-\beta_n} &#x3D; f’(x_0)$</p>
<span id="more"></span>

<h3 id="题目-2-1-7"><a href="#题目-2-1-7" class="headerlink" title="题目 2.1.7"></a>题目 2.1.7</h3><p>设曲线由隐式方程 $\sqrt[3]{x^2}+\sqrt[3]{y^2}&#x3D;\sqrt[3]{a^2} (a&gt;0)$给出</p>
<p>(1) 求证: 曲线的切线被坐标轴所截的长度为一常数</p>
<p>(2)写出曲线的参数形式，利用参数式求导给出上一小提的另一证法</p>
<h3 id="题目-2-1-8"><a href="#题目-2-1-8" class="headerlink" title="题目 2.1.8"></a>题目 2.1.8</h3><p>已知 参数方程 $x&#x3D;a[ln(tan\frac{t}{2})+cos(t)],y&#x3D;a\cdot sin(t) (a&gt;0,0 &lt; t &lt;\pi)$</p>
<p>求证，任意切线上，自切点至该切线与x轴交点之间的切线段为定长</p>
<h3 id="题目-2-1-13"><a href="#题目-2-1-13" class="headerlink" title="题目 2.1.13"></a>题目 2.1.13</h3><p>设 $y&#x3D;x^{n-1}ln(x)$ 求证$y^{(n)}&#x3D;\frac{(n-1)!}{x}$</p>
<h3 id="题目-2-1-14"><a href="#题目-2-1-14" class="headerlink" title="题目 2.1.14"></a>题目 2.1.14</h3><p>求证：双纽线$r^2&#x3D;a^2 cos 2\theta$的向径与切线的夹角等于极角的两倍加$\frac{\pi}{2}$</p>
<h2 id="微分中值定理-2-2"><a href="#微分中值定理-2-2" class="headerlink" title="微分中值定理 2.2"></a>微分中值定理 2.2</h2><h3 id="题目-2-2-5"><a href="#题目-2-2-5" class="headerlink" title="题目 2.2.5"></a>题目 2.2.5</h3><p>设f(x)在(a,b)内二阶可导，且$x_0 \in (a,b)$使得$f’’(x_0)\neq 0$求证:</p>
<p>(1) 如果$f’(x_0)&#x3D;0$，则存在$x_1,x_2\in(a,b)$使得$f(x_1)-f(x_2)&#x3D;0$</p>
<p>(2) 如果$f’(x_0)\neq0$，则存在$x_1,x_2\in(a,b)$，使得$\frac{f(x_1)-f(x_2)}{x_1-x_2}&#x3D;f’(x_0)$</p>
<h3 id="题目-2-2-9"><a href="#题目-2-2-9" class="headerlink" title="题目 2.2.9"></a>题目 2.2.9</h3><p>设函数f(x)在$[a,b]$上可导，且$f’(a)&#x3D;f’(b)$,求证$\exists c\in(a,b)$使得$f(c)-f(a)&#x3D;(c-a)f’(c)$</p>
<p>和例12比，把$&#x3D;0$去掉</p>
<h3 id="题目-2-2-10"><a href="#题目-2-2-10" class="headerlink" title="题目 2.2.10"></a>题目 2.2.10</h3><p>设$f(x)$在$(0,1]$上可导,且存在有限极限 $\lim\limits_{\substack{x\rightarrow 0+0 }}\sqrt xf’(x)$,求证f(x)在(0,1]上一致连续</p>
<h3 id="例17"><a href="#例17" class="headerlink" title="例17"></a>例17</h3><p>设f(x)在$[-2,2]$上连续，在(-2,2)上二阶可导，且$|f(x)|\leq 1,f’(0) &gt; 1$,求证:存在 $\epsilon \in (-2,2)$使得$f’’(\epsilon) &#x3D; 0$</p>
<h2 id="函数的升降、极值、最值问题-2-3"><a href="#函数的升降、极值、最值问题-2-3" class="headerlink" title="函数的升降、极值、最值问题 2.3"></a>函数的升降、极值、最值问题 2.3</h2><h3 id="题目-2-3-3"><a href="#题目-2-3-3" class="headerlink" title="题目 2.3.3"></a>题目 2.3.3</h3><h3 id="题目-2-3-6"><a href="#题目-2-3-6" class="headerlink" title="题目 2.3.6"></a>题目 2.3.6</h3><h3 id="题目-2-3-9"><a href="#题目-2-3-9" class="headerlink" title="题目 2.3.9"></a>题目 2.3.9</h3><h2 id="函数的图形、拐点及函数作图-2-4"><a href="#函数的图形、拐点及函数作图-2-4" class="headerlink" title="函数的图形、拐点及函数作图 2.4"></a>函数的图形、拐点及函数作图 2.4</h2><h3 id="题目-2-4-4"><a href="#题目-2-4-4" class="headerlink" title="题目 2.4.4"></a>题目 2.4.4</h3><h2 id="洛必达法则与泰勒公式-2-5"><a href="#洛必达法则与泰勒公式-2-5" class="headerlink" title="洛必达法则与泰勒公式 2.5"></a>洛必达法则与泰勒公式 2.5</h2><h3 id="题目-2-5-4"><a href="#题目-2-5-4" class="headerlink" title="题目 2.5.4"></a>题目 2.5.4</h3><h3 id="题目-2-5-7"><a href="#题目-2-5-7" class="headerlink" title="题目 2.5.7"></a>题目 2.5.7</h3><h3 id="题目-2-5-10"><a href="#题目-2-5-10" class="headerlink" title="题目 2.5.10"></a>题目 2.5.10</h3><h2 id="一元函数微分学的综合应用-2-6"><a href="#一元函数微分学的综合应用-2-6" class="headerlink" title="一元函数微分学的综合应用 2.6"></a>一元函数微分学的综合应用 2.6</h2><p>P121 132&#x2F;473</p>
<h3 id="题目-2-6-5"><a href="#题目-2-6-5" class="headerlink" title="题目 2.6.5"></a>题目 2.6.5</h3><p>$ln(2n+1)-ln(2n)+n ln(n+1) - n ln(n) &gt; 1$</p>
<p>$&#x3D; 1&#x2F;(2n+1) - 1&#x2F;(2n) + ln(n+1)-ln(n) - 1&#x2F;(n+1) &gt; 0$</p>
<p>单增</p>
<p>$1&#x2F;3 - 1&#x2F;2 + ln2 - 1&#x2F;2 &#x3D; ln2 - 2&#x2F;3 &lt; 0$</p>
<p>??</p>
<h3 id="题目-2-6-7"><a href="#题目-2-6-7" class="headerlink" title="题目 2.6.7"></a>题目 2.6.7</h3><p>$&#x3D; 2a - e^x$ 单减</p>
<p>$x&#x3D; ln(2a)$ 时 为 0</p>
<p>$&#x3D; 2ax-e^x$</p>
<p>$(0,ln(2a)) $单增 , $(ln(2a),+\infty)$ 单减</p>
<p>极大值 $2aln(2a) - 2a &#x3D; 2a(ln(2a&#x2F;e))$</p>
<p>$ax^2-e^x &#x3D; 0$</p>
<p>$x \to -\infty , +\infty$</p>
<p>$x \to +\infty , -\infty$</p>
<p>$a &lt; e&#x2F;2$ ，单减 1根</p>
<p>$a \ge e&#x2F;2$, 减 增 减??</p>
]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>数学分析 三 一元函数积分学</title>
    <url>/Math/Mathematical_analysis_problems_3/</url>
    <content><![CDATA[<h1 id="一元函数积分学-3"><a href="#一元函数积分学-3" class="headerlink" title="一元函数积分学 3"></a>一元函数积分学 3</h1><h2 id="不定积分和可积函数类-3-1"><a href="#不定积分和可积函数类-3-1" class="headerlink" title="不定积分和可积函数类 3.1"></a>不定积分和可积函数类 3.1</h2><p>5.可积函数类 P124</p>
<p>(1) 有理函数可分解成多项式和若干项最简真分式之和，因此有理函数一定可积分</p>
<p>(2) 三角函数 总可用<code>t=tan(pi/2)</code>将其化为有理函数积分</p>
<p>(3) 积分 <code>R[x, ((ax+b)/(cx+d))^(1/m)]</code>,其中 (ad-bc!&#x3D;0,m正整数)，令右侧为t可以代换化为有理函数积分</p>
<p>(4) 若 积分 <code>x^m (a+bx^n)^p</code>,只有<code>p,(m+1)/n,(m+1)/n+p</code>中有一个为整数时才可积分否则不可</p>
<p>(5) <code>R[x,sqrt(ax^2+bx+c)]</code>的代换</p>
<p><code>a&gt;0 -&gt; 右侧 = +-x+t</code></p>
<p><code>c&gt;0 -&gt; 右侧 = xt+-sqrt(c)</code></p>
<p><code>b^2-4ac&gt;0 -&gt; 右侧 = t(x-根)</code></p>
<p>例22</p>
<p><a href="https://www.wolframalpha.com/input/?i=int+sqrt(x+1/x)+dx">https://www.wolframalpha.com/input/?i=int+sqrt%28x%2B1%2Fx%29+dx</a></p>
<p>常见方法和知识点 三角函数变形吃常数字，看特征，根据上面的方法进行替换，三角函数有<code>tan(x/2)</code>可以替换</p>
<span id="more"></span>

<h3 id="题目-3-1-5-10"><a href="#题目-3-1-5-10" class="headerlink" title="题目 3.1.5 (10)"></a>题目 3.1.5 (10)</h3><h3 id="题目-3-1-8-3-4"><a href="#题目-3-1-8-3-4" class="headerlink" title="题目 3.1.8 (3,4)"></a>题目 3.1.8 (3,4)</h3><h3 id="题目-3-1-13-4-5-6"><a href="#题目-3-1-13-4-5-6" class="headerlink" title="题目 3.1.13 (4,5,6)"></a>题目 3.1.13 (4,5,6)</h3><h3 id="题目-3-1-13-3-4"><a href="#题目-3-1-13-3-4" class="headerlink" title="题目 3.1.13 (3,4)"></a>题目 3.1.13 (3,4)</h3><h2 id="定积分概念、可积条件与定积分性质-3-2"><a href="#定积分概念、可积条件与定积分性质-3-2" class="headerlink" title="定积分概念、可积条件与定积分性质 3.2"></a>定积分概念、可积条件与定积分性质 3.2</h2><p>R[a,b] 在 [a,b]上可积</p>
<p>任意划分 zhengfu 趋近0,大和 &#x3D; 小和</p>
<p>乘积可积性</p>
<p>方法: 二次不等式判别公式, 积分中值定理</p>
<h3 id="题目-3-2-10"><a href="#题目-3-2-10" class="headerlink" title="题目 3.2.10"></a>题目 3.2.10</h3><h2 id="变限定积分、微积分基本定理、定积分的换元法-3-3"><a href="#变限定积分、微积分基本定理、定积分的换元法-3-3" class="headerlink" title="变限定积分、微积分基本定理、定积分的换元法 3.3"></a>变限定积分、微积分基本定理、定积分的换元法 3.3</h2><p>P161&#x2F;473</p>
<p>连续函数一定可积,积分后一定可微</p>
<p>[a,b]上</p>
<p>f(x)可积分,F(x)连续 有限个点外 F’(x) &#x3D; f(x)</p>
<p>有 积分 &#x3D; F(b)-f(a)</p>
<p>换元积分法的前提是？？？？TODO 反函数存在? 一一映射? 导函数也存在?</p>
<p>3.3.6 带积分余项的泰勒公式</p>
<p>3.3.7 积分第二中值定理</p>
<p>例3 函数可积 并不保证 其积分的任意点可导</p>
<p>例11 绝对值积分不等式 变换 为 |(v(x)f(x))’|</p>
<p>泰勒展开 再积分 常数积分&#x3D; 常数×积分长度 和 变量式子积分相等 抵消为0,其实是靠中值展开</p>
<p>方法有 中值定理进行替换</p>
<p>假设 最值点坐标 进行推导</p>
<p>!! 注意 一定要记住一些 特殊点 端点是否可行，可能是 “错误”的证明， 能找到不符合条件的情况</p>
<p>粗略看过了 实变后, 这个例25 看着就好怪啊 这个连续性质的使用？</p>
<p>例34 证明 pi是 无理数</p>
<h3 id="题目-3-3-19"><a href="#题目-3-3-19" class="headerlink" title="题目 3.3.19"></a>题目 3.3.19</h3><h3 id="题目-3-3-20"><a href="#题目-3-3-20" class="headerlink" title="题目 3.3.20"></a>题目 3.3.20</h3><h2 id="定积分的应用-3-4"><a href="#定积分的应用-3-4" class="headerlink" title="定积分的应用 3.4"></a>定积分的应用 3.4</h2><p>面积微元,弧长微元</p>
<p>参数的面积公式为什么 1&#x2F;2 * (xdy-ydx) 表示什么</p>
<p>古鲁金 第一第二定理</p>
<p>曲率公式</p>
<p>辛卜森公式, <a href="https://en.wikipedia.org/wiki/Simpson%27s_rule">https://en.wikipedia.org/wiki/Simpson%27s_rule</a></p>
<h2 id="广义积分-3-5"><a href="#广义积分-3-5" class="headerlink" title="广义积分 3.5"></a>广义积分 3.5</h2><p>3.广义积分收敛判别法</p>
<h3 id="题目-3-5-5"><a href="#题目-3-5-5" class="headerlink" title="题目 3.5.5"></a>题目 3.5.5</h3>]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>数学分析 五 多元函数微分学</title>
    <url>/Math/Mathematical_analysis_problems_5/</url>
    <content><![CDATA[<h1 id="多元函数微分学-5"><a href="#多元函数微分学-5" class="headerlink" title="多元函数微分学 5"></a>多元函数微分学 5</h1><h2 id="欧式空间、多元函数的极限与连续"><a href="#欧式空间、多元函数的极限与连续" class="headerlink" title="欧式空间、多元函数的极限与连续"></a>欧式空间、多元函数的极限与连续</h2><p>$\bar{E} &#x3D; ((E^c)^o)^c$</p>
<p>全面极限（所有方向），累次极限（先极限一部分再极限另一部分），二重极限（同时?）</p>
<p>二重极限存在,对应的累次极限不一定存在</p>
<p>例如lim(x,y)→(0,0)(xsin(1&#x2F;y)+ysin(1&#x2F;x))&#x3D;0</p>
<p>对应的两个累次极限limx→0(limy→0(xsin(1&#x2F;y)+ysin(1&#x2F;x)))和limy→0(limx→0(xsin(1&#x2F;y)+ysin(1&#x2F;x)))都不存在</p>
<span id="more"></span>

<h3 id="题目5-1-8"><a href="#题目5-1-8" class="headerlink" title="题目5.1.8"></a>题目5.1.8</h3><p>闭包?</p>
<h3 id="题目5-1-14"><a href="#题目5-1-14" class="headerlink" title="题目5.1.14"></a>题目5.1.14</h3><p>(2)</p>
<h3 id="题目5-1-23"><a href="#题目5-1-23" class="headerlink" title="题目5.1.23"></a>题目5.1.23</h3><h3 id="题目5-1-24"><a href="#题目5-1-24" class="headerlink" title="题目5.1.24"></a>题目5.1.24</h3><h3 id="题目5-1-25"><a href="#题目5-1-25" class="headerlink" title="题目5.1.25"></a>题目5.1.25</h3><h2 id="偏导数与微分"><a href="#偏导数与微分" class="headerlink" title="偏导数与微分"></a>偏导数与微分</h2><p>多元函数泰勒公式</p>
<p>例10,例11</p>
<p>可微<code>(f(x,y)-f(x0,y0) - fx&#39; * (x-x0) - fy&#39; * (y-y0) )/sqrt&#123;(x-x0)^2+(y-y0)^2&#125; = 0</code></p>
<p>第一，偏导x&#x2F;偏导s的倒数写法要求s是x，y的函数，否则就是全导数ds&#x2F;dx。</p>
<p>第二，倒数写法存在当且仅当x（s，t），y（s，t）的反函数存在。</p>
<p>第三，反函数存在除了要求一系列的偏导数连续，还要求雅可比行列式不为0。(重要?)</p>
<p>综上，必须通过一个一般的y&#x3D;g（s，t）且满足反函数存在定理，才可以讨论 偏x&#x2F;偏s !&#x3D; 1&#x2F;(偏s&#x2F;偏x)</p>
<p><a href="https://math.stackexchange.com/questions/1090061/manipulating-partial-derivatives-of-inverse-function">https://math.stackexchange.com/questions/1090061/manipulating-partial-derivatives-of-inverse-function</a></p>
<p>1 &#x3D; dx&#x2F;dx &#x3D; 偏x&#x2F;偏x &#x3D; 偏f(s(x),t(x))&#x2F;偏x &#x3D; 偏f&#x2F;偏s \cdot ds&#x2F;dx + 偏f&#x2F;偏t \cdot dt&#x2F;dx &#x3D; 偏f&#x2F;偏s \cdot 偏s&#x2F;偏x + 偏f&#x2F;偏t \cdot 偏t&#x2F;偏x</p>
<h3 id="题目-5-2-9"><a href="#题目-5-2-9" class="headerlink" title="题目 5.2.9"></a>题目 5.2.9</h3><h3 id="题目-5-2-14-系数why"><a href="#题目-5-2-14-系数why" class="headerlink" title="题目 5.2.14 系数why"></a>题目 5.2.14 系数why</h3><h3 id="题目-5-2-15"><a href="#题目-5-2-15" class="headerlink" title="题目 5.2.15"></a>题目 5.2.15</h3><h3 id="题目-5-2-16"><a href="#题目-5-2-16" class="headerlink" title="题目 5.2.16"></a>题目 5.2.16</h3><h3 id="题目-5-2-25"><a href="#题目-5-2-25" class="headerlink" title="题目 5.2.25"></a>题目 5.2.25</h3><h3 id="题目-5-2-27"><a href="#题目-5-2-27" class="headerlink" title="题目 5.2.27"></a>题目 5.2.27</h3><h3 id="题目-5-2-28"><a href="#题目-5-2-28" class="headerlink" title="题目 5.2.28"></a>题目 5.2.28</h3><h3 id="题目-5-2-29"><a href="#题目-5-2-29" class="headerlink" title="题目 5.2.29"></a>题目 5.2.29</h3><h3 id="题目-5-2-30"><a href="#题目-5-2-30" class="headerlink" title="题目 5.2.30"></a>题目 5.2.30</h3><h3 id="题目-5-2-31"><a href="#题目-5-2-31" class="headerlink" title="题目 5.2.31"></a>题目 5.2.31</h3><h3 id="题目-5-2-32"><a href="#题目-5-2-32" class="headerlink" title="题目 5.2.32"></a>题目 5.2.32</h3><h2 id="反函数与隐函数"><a href="#反函数与隐函数" class="headerlink" title="反函数与隐函数"></a>反函数与隐函数</h2><h3 id="练习题-5-3"><a href="#练习题-5-3" class="headerlink" title="练习题 5.3"></a>练习题 5.3</h3><h2 id="切空间与极值"><a href="#切空间与极值" class="headerlink" title="切空间与极值"></a>切空间与极值</h2><h2 id="含参变量的定积分"><a href="#含参变量的定积分" class="headerlink" title="含参变量的定积分"></a>含参变量的定积分</h2><h2 id="含参变量的广义积分"><a href="#含参变量的广义积分" class="headerlink" title="含参变量的广义积分"></a>含参变量的广义积分</h2>]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>数学分析 四 级数</title>
    <url>/Math/Mathematical_analysis_problems_4/</url>
    <content><![CDATA[<h1 id="级数-4"><a href="#级数-4" class="headerlink" title="级数 4"></a>级数 4</h1><h2 id="级数敛散判别法与性质、上极限与下极限"><a href="#级数敛散判别法与性质、上极限与下极限" class="headerlink" title="级数敛散判别法与性质、上极限与下极限"></a>级数敛散判别法与性质、上极限与下极限</h2><p>-P224</p>
<p>数列和</p>
<p>绝对收敛 条件收敛</p>
<p>柯西收敛准则</p>
<p>定理3 (柯西判别法)</p>
<p>若 $lim_{n\to\infty} \sqrt[n]{a_n} &#x3D; r $, $r&lt;1$级数收敛,$r&gt;1$级数发散</p>
<p>定理4 (达朗贝尔判别法) ,比值极限和1的关系</p>
<p>级数 为单调递减(x&gt;&#x3D;1)函数上的取值点 ，与广义积分同时收敛发散</p>
<p>莱布尼茨判别法, 正负奇偶项,an单调下降趋近0 收敛</p>
<p>狄利克雷判别法 , $sum_{n&#x3D;1}^{\infty} {a_n*b_n}$ , $b_n$的级数 有界(不要求收敛) ,$a_n$单调下降收敛于0,则 乘积级数收敛</p>
<p>阿贝尔判别法, $sum_{n&#x3D;1}^{\infty} {a_n*b_n}$ , $b_n$的级数收敛, $a_n$单调有界,则乘积级数收敛</p>
<p>&#x2F;&#x2F; 这两个和上一章(广义积分)的判别中很像</p>
<p>柯西乘积:在数学上，以法国数学家奥古斯丁·路易·柯西命名的柯西乘积，是指两组数列{\displaystyle a_{n},b_{n}}的离散卷积</p>
<span id="more"></span>

<p>5 两个绝对收敛级数乘积????</p>
<p>上下极限性质，性质4 的中间 怎么证明?</p>
<p>7 为什么是 有限项不是零项</p>
<p>单调递减的等价无穷小 然后和积分同敛散</p>
<p>证明 $\frac{(2n-1)!!}{(2n)!!}$ 趋于0</p>
<p>$a_n \le \frac{1}{a_n(2n+1)}$ &#x2F;&#x2F; 各项分子分母+1</p>
<p>得到 $0 &lt; a_n \le \frac{1}{\sqrt{2n+1}} $</p>
<p>解法: <code>an/sn</code>形式的用分点,</p>
<p>直接证明不了，进行拆分，拆分成 收敛数列的和,或者收敛+发散再得出 原数列</p>
<p>绝对+绝对&#x3D;绝对</p>
<p>绝对+条件&#x3D;条件</p>
<p>重排相关: 绝对收敛-&gt;重排收敛 和相等</p>
<p>条件收敛-&gt;不改顺序,可以组合</p>
<p>发散: -&gt;重排后不一定?</p>
<p>例12 重排后级数会变!?</p>
<p>4.1.3.(3，4) 同例题找一个明确收敛的，然后做比值小于1</p>
<h3 id="题目-4-1-4-6"><a href="#题目-4-1-4-6" class="headerlink" title="题目 4.1.4 (6)"></a>题目 4.1.4 (6)</h3><p>讨论收敛性 $\sum_{n&#x3D;1}^{\infty} (sqrt[n]n-1)^p , (p&gt;0)$</p>
<h3 id="题目-4-1-10-1-2-3-4"><a href="#题目-4-1-10-1-2-3-4" class="headerlink" title="题目 4.1.10(1,2,3,4)"></a>题目 4.1.10(1,2,3,4)</h3><h3 id="题目-4-1-15"><a href="#题目-4-1-15" class="headerlink" title="题目 4.1.15"></a>题目 4.1.15</h3><h3 id="题目-4-1-16"><a href="#题目-4-1-16" class="headerlink" title="题目 4.1.16"></a>题目 4.1.16</h3><h3 id="题目-4-1-17"><a href="#题目-4-1-17" class="headerlink" title="题目 4.1.17"></a>题目 4.1.17</h3><h3 id="题目-4-1-23"><a href="#题目-4-1-23" class="headerlink" title="题目 4.1.23"></a>题目 4.1.23</h3><h3 id="题目-4-1-25-2"><a href="#题目-4-1-25-2" class="headerlink" title="题目 4.1.25(2)"></a>题目 4.1.25(2)</h3><h2 id="函数级数"><a href="#函数级数" class="headerlink" title="函数级数"></a>函数级数</h2><p>狄利克雷 在 广义积分收敛，级数收敛，一致性收敛，都是 一部分的和的极限的绝对值有界, |sum{b_n}|&lt;&#x3D;M，{a_n} 单调下降趋于0 或者 一致收敛于0,等，有结果 sum{a_n*b_n} 有满足性质</p>
<p>形式<code> |sum&#123;&#125;有界限| *单调趋近零</code></p>
<p>阿贝尔 同样在 广义积分收敛，级数收敛，一致性收敛，一部分和bn一致收敛，另一个的每一项 有界限， 则 sum{a_n*b_n}一致收敛</p>
<p>形式:<code> (sum&#123;&#125;有性质) *单调有界限</code></p>
<p>柯西条件的 p&#x3D;1时就是单项的 特例了！</p>
<h3 id="例11"><a href="#例11" class="headerlink" title="例11"></a>例11</h3><h3 id="题目4-2-2"><a href="#题目4-2-2" class="headerlink" title="题目4.2.2"></a>题目4.2.2</h3><h3 id="题目4-2-4"><a href="#题目4-2-4" class="headerlink" title="题目4.2.4"></a>题目4.2.4</h3><h3 id="题目4-2-5"><a href="#题目4-2-5" class="headerlink" title="题目4.2.5"></a>题目4.2.5</h3><p>连续 拆分点?</p>
<h3 id="题目4-2-16"><a href="#题目4-2-16" class="headerlink" title="题目4.2.16"></a>题目4.2.16</h3><h3 id="题目4-2-17"><a href="#题目4-2-17" class="headerlink" title="题目4.2.17"></a>题目4.2.17</h3><h2 id="幂级数"><a href="#幂级数" class="headerlink" title="幂级数"></a>幂级数</h2><p>阿贝尔引理</p>
<h3 id="题目4-3-1-3"><a href="#题目4-3-1-3" class="headerlink" title="题目4.3.1(3)"></a>题目4.3.1(3)</h3><h3 id="题目4-3-7"><a href="#题目4-3-7" class="headerlink" title="题目4.3.7"></a>题目4.3.7</h3><h3 id="题目4-3-8"><a href="#题目4-3-8" class="headerlink" title="题目4.3.8"></a>题目4.3.8</h3><h3 id="题目4-3-13-3"><a href="#题目4-3-13-3" class="headerlink" title="题目4.3.13(3)"></a>题目4.3.13(3)</h3><h3 id="题目4-3-14"><a href="#题目4-3-14" class="headerlink" title="题目4.3.14"></a>题目4.3.14</h3><h3 id="题目4-3-15"><a href="#题目4-3-15" class="headerlink" title="题目4.3.15"></a>题目4.3.15</h3><h3 id="题目4-3-16"><a href="#题目4-3-16" class="headerlink" title="题目4.3.16"></a>题目4.3.16</h3><h3 id="题目4-3-17"><a href="#题目4-3-17" class="headerlink" title="题目4.3.17"></a>题目4.3.17</h3><h3 id="题目4-3-18"><a href="#题目4-3-18" class="headerlink" title="题目4.3.18"></a>题目4.3.18</h3><h2 id="傅式级数的收敛性、平均收敛与一致收敛"><a href="#傅式级数的收敛性、平均收敛与一致收敛" class="headerlink" title="傅式级数的收敛性、平均收敛与一致收敛"></a>傅式级数的收敛性、平均收敛与一致收敛</h2><h3 id="题目4-4-8-4-4-19"><a href="#题目4-4-8-4-4-19" class="headerlink" title="题目4.4.8~4.4.19"></a>题目4.4.8~4.4.19</h3>]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>数学分析 六 多元函数积分学</title>
    <url>/Math/Mathematical_analysis_problems_6/</url>
    <content><![CDATA[<h1 id="多元函数积分学-6"><a href="#多元函数积分学-6" class="headerlink" title="多元函数积分学 6"></a>多元函数积分学 6</h1><h2 id="重积分的概念与性质、重积分化累次积分"><a href="#重积分的概念与性质、重积分化累次积分" class="headerlink" title="重积分的概念与性质、重积分化累次积分"></a>重积分的概念与性质、重积分化累次积分</h2><span id="more"></span>

<h2 id="重积分变换"><a href="#重积分变换" class="headerlink" title="重积分变换"></a>重积分变换</h2><h2 id="曲线积分与格林公式"><a href="#曲线积分与格林公式" class="headerlink" title="曲线积分与格林公式"></a>曲线积分与格林公式</h2><h2 id="曲面积分"><a href="#曲面积分" class="headerlink" title="曲面积分"></a>曲面积分</h2><h2 id="奥氏公式、斯托克斯公式、线积分与路径无关"><a href="#奥氏公式、斯托克斯公式、线积分与路径无关" class="headerlink" title="奥氏公式、斯托克斯公式、线积分与路径无关"></a>奥氏公式、斯托克斯公式、线积分与路径无关</h2><h2 id="场论"><a href="#场论" class="headerlink" title="场论"></a>场论</h2>]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>数学分析 七 典型例题 及 参考资料 速查表</title>
    <url>/Math/Mathematical_analysis_problems_7/</url>
    <content><![CDATA[<h1 id="典型综合题分析-7"><a href="#典型综合题分析-7" class="headerlink" title="典型综合题分析 7"></a>典型综合题分析 7</h1><h1 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h1><h2 id="康托定理"><a href="#康托定理" class="headerlink" title="康托定理"></a>康托定理</h2><p>若函数f(x)在闭区间[a,b]上连续，则它在[a,b]上一致连续。换言之，在闭区间上连续的函数在该闭区间一致连续。</p>
<p>采用反证法。</p>
<p>假设$f(x)$在$[a,b]$上非一致连续，由非一致连续定义可知存在$\epsilon_0 &gt; 0$及两点列$${x’_n}$$和$${x’’_n}$$，$$x’_n,x’’_n\in[a,b]$$，满足</p>
<p>$$$$</p>
<span id="more"></span>

<p>，且 。</p>
<p>因为有界，由Bolzano-Weierstrass定理(波尔查诺-维尔斯特拉斯定理是指有界数列必有收敛子列。从极限点的角度来叙述致密性定理，就是：有界数列必有极限点。)，存在收敛子列：</p>
<p>在点列中取子列，其下标与下标相同，则由，又得到</p>
<p>由于函数在点连续，因而有</p>
<p>于是得到：</p>
<p>但这与假设产生矛盾，从而推翻假设，得到在上的一致连续的结论。</p>
<h2 id="和差化积"><a href="#和差化积" class="headerlink" title="和差化积"></a>和差化积</h2><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>积分表&#x2F;等价无穷小 背不全</p>
<p>重要公式</p>
<p>int sin(x)^n dx x&#x3D;0..pi&#x2F;2 &#x3D; int cos(x)^n dx x&#x3D;0..pi&#x2F;2 &#x3D; (n-1)!!&#x2F;n!! * 1 (n奇数时) * pi&#x2F;2(偶数)</p>
<h1 id="参考-辅助"><a href="#参考-辅助" class="headerlink" title="参考 辅助"></a>参考 辅助</h1><p><a href="https://kapeli.com/cheat_sheets/LaTeX_Math_Symbols.docset/Contents/Resources/Documents/index">latex math symbols cheat sheet</a></p>
<h1 id="Book"><a href="#Book" class="headerlink" title="Book"></a>Book</h1><p><a href="https://book.douban.com/subject/1239173/">&lt;数学分析解题指南&gt;</a></p>
<p>ISBN:9787301065501</p>
<h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><p>matlab学习</p>
<p>一个或多个 公式cheatsheet</p>
<p>瓦里斯公式</p>
<p>贝塞尔函数相关</p>
<p>幂级数展开</p>
]]></content>
      <categories>
        <category>数学分析</category>
      </categories>
      <tags>
        <tag>数学分析</tag>
        <tag>题目</tag>
      </tags>
  </entry>
  <entry>
    <title>(p-1)!+1 = 0 (mod p) Wilson&#39;s theorem 威尔逊定理</title>
    <url>/Math/Wilson_s_theorem/</url>
    <content><![CDATA[<h1 id="威尔逊定理"><a href="#威尔逊定理" class="headerlink" title="威尔逊定理"></a>威尔逊定理</h1><p>Wilson’s theorem</p>
<h1 id="显然"><a href="#显然" class="headerlink" title="显然"></a>显然</h1><p>当然如果要</p>
<p>(x-1)!+1 是 x 的倍数,那么x一定是质数, 否则, 阶乘部分就是x的倍数</p>
<h1 id="下证-如果是质数-则成立"><a href="#下证-如果是质数-则成立" class="headerlink" title="下证 如果是质数 则成立"></a>下证 如果是质数 则成立</h1><span id="more"></span>

<p>首先 1..p-1 是 模p的所有余项</p>
<p>集合$A &#x3D; {1,2,\cdots,p-1}$</p>
<p>任意$i \in A$ 存在唯一$j \in A, i \cdot j &#x3D; 1 (\bmod p)$ ,j 是 i 的逆元 ( 通过 相同的i,不同的j的乘积不同,又乘积以后也是所有余项,可得存在唯一i的逆元)</p>
<p>令 $x &#x3D; (p-1)!$</p>
<p>那么 $x^2 &#x3D; 1(\bmod p)$</p>
<p>因为 对于任意i, 不论i的逆元是 i本身,还是与i不同,都是唯一存在的,且i不同则j不同,所以 i(1~p-1)与i的逆元两两配对</p>
<p>可得$x &#x3D; 1(\bmod p)$或 $x&#x3D;p-1 (\bmod p)$ , 可以假设 $x &#x3D; p - a$ 然后 $(p-a-1)(p-a+1) &#x3D; 0 (\bmod p)$ 得到</p>
<p>我们也能得到只有 $1^2 &#x3D; 1 (\bmod p), (p-1)^2 &#x3D; 1 (\bmod p)$</p>
<p>$(p-1)! &#x3D; 1\cdot 1 \cdot (p-1) &#x3D; p-1  &#x3D; -1 (mod p)$, 因为除了p-1, 其它的两两配对</p>
<p>得证</p>
]]></content>
      <categories>
        <category>数论</category>
      </categories>
      <tags>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title>牛顿恒等式</title>
    <url>/Math/newton_identities/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h2><p>$x&#x3D;1$</p>
<p>$x^2&#x3D;?$</p>
<p>$x^m&#x3D;?, m \ge 1, m \in \mathbb{Z}$</p>
<h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h2><p>$x+y&#x3D;1$</p>
<p>$x^2+y^2&#x3D;2$</p>
<p>$x^3+y^3&#x3D;?$</p>
<p>$x^m+y^m&#x3D;?, m \ge 2, m \in \mathbb{Z}$</p>
<h2 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h2><p>$x+y+z&#x3D;1$</p>
<p>$x^2+y^2+z^2&#x3D;2$</p>
<p>$x^3+y^3+z^3&#x3D;3$</p>
<p>$x^4+y^4+z^4&#x3D;?$</p>
<p>$x^m+y^m+z^m&#x3D;?, m \ge 3, m \in \mathbb{Z}$</p>
<h2 id="问题n"><a href="#问题n" class="headerlink" title="问题n"></a>问题n</h2><p>$\sum_{i&#x3D;0}^n x_i&#x3D;1$</p>
<p>$\sum_{i&#x3D;0}^n x_i^2&#x3D;2$</p>
<p>$\cdots$</p>
<p>$\sum_{i&#x3D;0}^n x_i^n&#x3D;n$</p>
<p>$\sum_{i&#x3D;0}^n x_i^{n+1}&#x3D;?$</p>
<p>$\sum_{i&#x3D;0}^n x_i^{m}&#x3D;?, m \ge n, m \in \mathbb{Z}$</p>
<hr>
<p>TLDR</p>
<p>例如3阶 已知</p>
<p>$S_i&#x3D;x^i+y^i+z^i$</p>
<p>$c_0&#x3D;n$</p>
<p>$\displaystyle c_k&#x3D;-\frac{\sum_{i&#x3D;1}^k S_i c_{k-i}}{k}, k\le n$</p>
<p>例如 3阶 $X&#x3D;[-\frac{c_1}{c_0},-\frac{c_2}{c_0},-\frac{c_3}{c_0};1,0,0;0,1,0]$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[V,D]=eig(X) % D是对角特征值矩阵，V是特征向量对应位置组成的矩阵</span><br></pre></td></tr></table></figure>

<p>$x^k+y^k+z^k &#x3D; S_k  &#x3D; [1;0;0] * V * D^{k-3} * V^{-1} * [3;2;1]$</p>
<span id="more"></span>

<h2 id="TLDR"><a href="#TLDR" class="headerlink" title="TLDR"></a>TLDR</h2><p><a href="https://baike.baidu.com/item/%E7%89%9B%E9%A1%BF%E6%81%92%E7%AD%89%E5%BC%8F/1285642">https://baike.baidu.com/item/%E7%89%9B%E9%A1%BF%E6%81%92%E7%AD%89%E5%BC%8F/1285642</a></p>
<p>$F(x)&#x3D;0$的$n$个根$x_1,\cdots,x_n$</p>
<p>$S_k&#x3D;\sum_{i&#x3D;1}^n x_i^k$</p>
<p>对于 $k &gt; n$, $\sum_{i&#x3D;0}^n C_iS_{k-n}&#x3D;0$ 也就是 按照幂次逐步上升的系数 是常系数</p>
<p>对于 $k\in[1,n], (\sum_{i&#x3D;0}^{k-1}C_iS_{k-i})+kC_k&#x3D;0$ 表明和上面系数对应，且如果知道所有$C_{&lt;i}$可以这样求得$C_i$</p>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>以上面的问题为例, 我们可以求得 $x+y+z,xy+yz+zx,xyz$的值</p>
<p>也就意味着$0&#x3D;(x-a)(x-b)(x-c)&#x3D;x^3-(a+b+c)x^2+(ab+bc+ca)x-abc$ 这样对应到3次方程的3个根</p>
<p>不妨写作 $C_0x^3+C_1x^2+C_2x+C_3&#x3D;0$</p>
<p>那么同时乘上$x^k$ 有 $C_0x^{3+k}+C_1x^{2+k}+C_2x^{1+k}+C_3x^k&#x3D;0$</p>
<p>$S_k&#x3D;x_0^k+x_1^k+x_2^k$ 是加和关系，所以 $S$也满足这个式子</p>
<hr>
<p>$f(x)&#x3D;\prod_{i}^n (x-a_i)&#x3D;\sum_{i&#x3D;0}^n c_ix^{n-i}$</p>
<p>$f’(x)&#x3D;\sum_i^n \frac{f(x)}{x-a_i}$ 不展开求导</p>
<p>分解 $x^{k+1}f’(x)&#x3D;(\sum_{i&#x3D;0}^k s_ix^{k-i})f(x)+g(x)$ , 这里是按 多项式除法，左边是被除，<code>f(x)</code>是除，f左边是商(系数), g(x)是余数,所以g(x)的最高幂次小于n</p>
<p>$x^{k+1}f’(x)&#x3D;x^{k+1}\sum_{i&#x3D;0}^n \frac{f(x)}{x-a_i}$</p>
<p>$\displaystyle &#x3D;\sum_{i&#x3D;0}^n \frac{x^{k+1}f(x)}{x-a_i}$</p>
<p>$\displaystyle &#x3D;\sum_{i&#x3D;0}^n \frac{x^{k+1}-a_i^{k+1}+a_i^{k+1}}{x-a_i}f(x)$</p>
<p>$\displaystyle &#x3D;\sum_{i&#x3D;0}^n \frac{x^{k+1}-a_i^{k+1}}{x-a_i}f(x)+\sum_{i&#x3D;0}^n \frac{a_i^{k+1}}{x-a_i}f(x)$  这里对应了上面的多项式除法表达式</p>
<p>对于商 $\displaystyle \sum_{i&#x3D;0}^n \frac{x^{k+1}-a_i^{k+1}}{x-a_i} &#x3D; \sum_{i&#x3D;0}^n \sum_{j&#x3D;0}^k a_i^jx^{k-j}$</p>
<p> $\displaystyle &#x3D; \sum_{j&#x3D;0}^k \sum_{i&#x3D;0}^n  a_i^jx^{k-j}$ 交换积分顺序</p>
<p> $\displaystyle &#x3D; \sum_{j&#x3D;0}^k S_j x^{k-j}$ </p>
<p>综上 $\displaystyle x^{k+1}f’(x) &#x3D; (\sum_{j&#x3D;0}^k S_j x^{k-j})f(x) + g(x)$ </p>
<hr>
<p>根据  $\displaystyle x^{k+1}f’(x) &#x3D; (\sum_{j&#x3D;0}^k S_j x^{k-j})f(x) + g(x)$ </p>
<p>研究$x^n$的系数</p>
<p>对于 $k\le n-1$, </p>
<p>左边 $x^{k+1}(c_{k}x^{n-k})’ &#x3D; (n-k)c_kx^{n}$</p>
<p>右侧 $\displaystyle &#x3D; \sum_{i&#x3D;0}^k S_i x^{k-i} c_{k-i}x^{n-(k-i)}$, $g(x)$中不含$x^n$的项</p>
<p> $\displaystyle &#x3D;\sum_{i&#x3D;0}^k S_i c_{k-i}x^{n}$</p>
<p> $\displaystyle (n-k)c_k&#x3D;\sum_{i&#x3D;0}^k S_i c_{k-i}$</p>
<p>注意到 $S_0&#x3D;\sum x_i^0 &#x3D; \sum 1&#x3D;n$,所以右侧$\displaystyle &#x3D; (\sum_{i&#x3D;1}^k S_i c_{k-i}) + nc_k$</p>
<p>综上 $\displaystyle -kc_k&#x3D;\sum_{i&#x3D;1}^k S_i c_{k-i}$</p>
<p>综上 $\displaystyle c_k&#x3D;-\frac{\sum_{i&#x3D;1}^k S_i c_{k-i}}{k}, k\le n-1$</p>
<hr>
<p>类似的$k\ge n$ 同样研究$x^n$的系数</p>
<p>左边&#x3D;0</p>
<p>右侧 $\displaystyle &#x3D; \sum_{i&#x3D;k-n}^k S_i x^{k-i} c_{k-i}x^{n-(k-i)}$, $g(x)$中不含$x^n$的项</p>
<p> $\displaystyle &#x3D;\sum_{i&#x3D;k-n}^k S_i c_{k-i}x^{n}$, 也就是上面的不变的结论</p>
<p>取$k&#x3D;n$有</p>
<p> $\displaystyle \sum_{i&#x3D;0}^n S_i c_{n-i}&#x3D;0$, </p>
<p>注意到$S_0&#x3D;n$,同样满足上面的公式，综上 $\displaystyle c_k&#x3D;-\frac{\sum_{i&#x3D;1}^k S_i c_{k-i}}{k}, k\le n$ 可以算出所有$c_{0\to n}$, (注$(c_{n-0}x^0)’&#x3D;0$ 所以也很自然)</p>
<hr>
<p>回到题目</p>
<p>$c_0&#x3D;n&#x3D;3$</p>
<p>$\displaystyle c_1&#x3D;-\frac{\sum_{i&#x3D;1}^1S_1c_{1-i}}{1}&#x3D;-\frac{1*3}{1}&#x3D;-3$</p>
<p>$\displaystyle c_2&#x3D;-\frac{\sum_{i&#x3D;1}^2S_1c_{2-i}}{2}&#x3D;-\frac{1*(-3)+2*3}{2}&#x3D;-\frac{3}{2}$</p>
<p>$\displaystyle c_3&#x3D;-\frac{\sum_{i&#x3D;1}^3S_1c_{3-i}}{3}&#x3D;-\frac{1*(-3&#x2F;2)+2*(-3)+3*3}{3}&#x3D;-\frac{1}{2}$</p>
<p>$c_0S_k+c_1S_{k-1}+c_2S_{k-2}+c_3S_{k-3}&#x3D;0$</p>
<p>$S_k&#x3D;S_{k-1}+\frac{1}{2}S_{k-2}+\frac{1}{6}S_{k-3}$</p>
<p>$x^4+y^4+z^4&#x3D;1 * 3+ \frac{1}{2} * 2 +\frac{1}{6} * 1 &#x3D; \frac{25}{6}$</p>
<p>$x^5+y^5+z^5&#x3D;1 * \frac{25}{6}+ \frac{1}{2} * 3 +\frac{1}{6} * 2 &#x3D; 6$</p>
<p>$[S_k;S_{k-1};S_{k-2}] &#x3D; [1,1&#x2F;2,1&#x2F;6;1,0,0;0,1,0] * [S_{k-1};S_{k-2};S_{k-3}]$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X=[1,1/2,1/6;1,0,0;0,1,0];</span><br><span class="line">[V,D] = eig(X)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">D =</span><br><span class="line"></span><br><span class="line">   1.4308 + 0.0000i   0.0000 + 0.0000i   0.0000 + 0.0000i</span><br><span class="line">   0.0000 + 0.0000i  -0.2154 + 0.2647i   0.0000 + 0.0000i</span><br><span class="line">   0.0000 + 0.0000i   0.0000 + 0.0000i  -0.2154 - 0.2647i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">V = 这里V不是正交矩阵，但是 是特征向量矩阵</span><br><span class="line"></span><br><span class="line">   0.7609 + 0.0000i   0.0223 + 0.1073i   0.0223 - 0.1073i</span><br><span class="line">   0.5318 + 0.0000i   0.2027 - 0.2490i   0.2027 + 0.2490i</span><br><span class="line">   0.3717 + 0.0000i  -0.9407 + 0.0000i  -0.9407 + 0.0000i</span><br><span class="line"></span><br><span class="line">[S_k;S_&#123;k-1&#125;;S_&#123;k-2&#125;]  = V * D^&#123;k-3&#125; * V^&#123;-1&#125; * [3;2;1]</span><br></pre></td></tr></table></figure>


<p>$x^k+y^k+z^k &#x3D; S_k  &#x3D; [1;0;0] * V * D^{k-3} * V^{-1} * [3;2;1]$</p>
]]></content>
      <categories>
        <category>代数</category>
      </categories>
      <tags>
        <tag>线性代数</tag>
        <tag>newton_identities</tag>
      </tags>
  </entry>
  <entry>
    <title>数论基础 一 整数的可除性</title>
    <url>/Math/number_theory_1/</url>
    <content><![CDATA[<p>ISBN 9787040364729</p>
<span id="more"></span>

<h1 id="整除，带余数除法"><a href="#整除，带余数除法" class="headerlink" title="整除，带余数除法"></a>整除，带余数除法</h1><div class="note no-icon success"><p>定义1: $a,b$是整数,$b\ne 0$, 若存在整数$c$使得$a&#x3D;bc$,则$b|a$,否则$b \nmid a$</p>
</div>

<p>性质:</p>
<ul>
<li>$b\ne 0$,$c$唯一</li>
<li>$b|a,a|e \Rightarrow b|e$</li>
<li>$b\ne 0$,所有的倍数为$0,\pm b,\pm 2b,\pm 3b,\cdots$</li>
<li>$a\ne 0,b|a \Rightarrow |b| \le |a|$</li>
<li>$b|a_1,b|a_2 \Rightarrow b|m_1a_1+m_2a_2, (\forall m_1,m_2)$</li>
</ul>
<div class="note no-icon success"><p>定义2: $p &gt; 1$且仅有$1|p,p|p$,则$p$为素数，自然数分为$1$,素数,合数</p>
</div>

<p>定理1: $p | d \Rightarrow p\le \sqrt{|d|}$</p>
<p>定理2: 素数无穷多个(反正法假设有最大,构造$\prod p_i +1$)</p>
<p>定理3: $a&gt;1$则$a$可以被表示成多个素数之积 每次最小因子必定素数，递降法</p>
<p>定理4(带余数除法): $a,b &gt;0$存在唯一一对$(q,r),r\in[0,b)$使得$a&#x3D;qb+r$, 通过对数轴$[kb,(k+1)b)$的切割</p>
<p>定理5(算术基本定理): $p|ab,p \nmid a \Rightarrow p | b$,其中$p$是质数</p>
<p>定理5.1(算术基本定理): $p|a_1a_2\cdots$其中$p$是质数,则存在某个$i$让$p | a_i$</p>
<p>定理6(算术基本定理): $n&gt;1$ $n$有素数的唯一分解(同定理3), 推论$n$的因子的对应质数的幂次不大于$n$中对应质数的幂次</p>
<h1 id="最大公约数-最小公倍数"><a href="#最大公约数-最小公倍数" class="headerlink" title="最大公约数,最小公倍数"></a>最大公约数,最小公倍数</h1><div class="note no-icon success"><p>定义3: 对于$a_1,a_2,\cdots a_k$最大的$d$,满足$\forall i, d|a_i$, $d$称作为最大公约数,记作$\gcd(a_1,a_2,\cdots,a_k) &#x3D; d$,当$d&#x3D;1$时称作互素</p>
</div>

<div class="note no-icon success"><p>定义4: 对于$a_1,a_2,\cdots a_k$最小的$l$,满足$\forall i, a_i|l$, $l$称作为最小公倍数,记作$\mathrm{lcm}(a_1,a_2,\cdots,a_k) &#x3D; l$</p>
</div>

<p>定理7: $b_1,\cdots,b_k$的任意公倍数,都是最小公倍数的倍数,(反证法 $l’&#x3D;kl+r,r\in[1,l)$ 则$r$小于$l$也是公倍数 矛盾)</p>
<p>推论3: $\mathrm{lcm}(a_1,\cdots,a_n,b_1,\cdots,b_m) &#x3D; \mathrm{lcm}(\mathrm{lcm}(a_1,\cdots,a_n),\mathrm{lcm}(b_1,\cdots,b_m))$, (通过左右互为倍数证明)</p>
<p>定理8: $a_1,\cdots,a_k$的任意公共因数一定是它们最大公因数的因数,(反证$d &lt; \mathrm{lcm}(d_1,d) | a_i$)</p>
<p>推论4: $\mathrm{gcd}(a_1,\cdots,a_n,b_1,\cdots,b_m) &#x3D; \mathrm{gcd}(\mathrm{gcd}(a_1,\cdots,a_n),\mathrm{gcd}(b_1,\cdots,b_m))$, (通过左右互为倍数证明)</p>
<p>定理9: $m &gt; 0, \mathrm{lcm}(mb_1,mb_2)&#x3D; m \cdot \mathrm{lcm}(b_1,b_2)$, 同样是左右互为倍数来证明</p>
<p>推论5: $d|b_1,d|b_2,\mathrm{lcm}(\frac{b_1}{d},\frac{b_2}{d})&#x3D;\frac{1}{d}\mathrm{lcm}(b_1,b_2)$</p>
<p>定理10: $m&gt;0,\mathrm{gcd}(mb_1,mb_2)&#x3D; m \cdot \mathrm{gcd}(b_1,b_2)$</p>
<p>推论6: $d|b_1,d|b_2,\mathrm{gcd}(\frac{b_1}{d},\frac{b_2}{d})&#x3D;\frac{1}{d}\mathrm{gcd}(b_1,b_2)$</p>
<p>定理11: $\mathrm{gcd}(a,b)\mathrm{lcm}(a,b)&#x3D;ab$, 直接拆成质数表示最好证明</p>
<p>定理12(辗转相除法的基础): $a,b,r$不全为$0$,则$a&#x3D;qb+r,r\in[0,b)$则$\mathrm{gcd}(a,b)&#x3D;\mathrm{gcd}(b,r)$, (通过任取因数左右互推证明), 推论$\mathrm{gcd}(a,b) | (ax+by)$</p>
<p>定理13: $a,b$不全为$0$, $(x_0,y_0)$让$ax+by$取到最小正整数, 则$\mathrm{gcd}(a,b) &#x3D; ax_0+by_0$, 又是两侧互为倍数的证明, </p>
<p>推论7: 上面证明了总存在$x_0,y_0$让$ax+by$取到$\mathrm{gcd}(a,b)$</p>
<p>定理14: $\mathrm{gcd}(a,c)&#x3D;1$则$\mathrm{gcd}(ab,c)&#x3D;\mathrm{gcd}(b,c)$ 把右侧最大公约数拆出来证明</p>
<p>推论8: $\mathrm{gcd}(a,b)&#x3D;1 \Rightarrow \mathrm{gcd}(ab,d)&#x3D;\mathrm{gcd}(a,d)\mathrm{gcd}(b,d)$，把右侧最大公约数拆出来证明</p>
<p>定理15: $\mathrm{gcd}(a,c)&#x3D;1,c|ab \Rightarrow c|b$, 用定理14</p>
<h1 id="辗转相除法-Euclid-算法"><a href="#辗转相除法-Euclid-算法" class="headerlink" title="辗转相除法, Euclid 算法"></a>辗转相除法, Euclid 算法</h1><p>就是基于定理12不断下降</p>
<p>$(P_1,Q_1)&#x3D;(1,q_1), P_1a-Q_1b&#x3D;(-1)^{1-1}r_1$, 已知$r_i &#x3D; q_{i+2}r_{i+1}+r_{i+2}$</p>
<p>希望有 $P_ia-Q_ib&#x3D;(-1)^{i-1}r_i$</p>
<p>直接展开</p>
<p>$P_ia-Q_ib&#x3D;(-1)^{i-1}r_i &#x3D; (-1)^{i-1} (q_{i+2}r_{i+1}+r_{i+2})$</p>
<p>$&#x3D; (-1)^{i-1} (q_{i+2}(P_{i+1}a-Q_{i+1}b)(-1)^i+(P_{i+2}a-Q_{i+2}b)(-1)^{i+1})$</p>
<p>$&#x3D; (P_{i+2}-q_{i+2}P_{i+1})a-(Q_{i+2}-q_{i+1}Q_{i+1})b$</p>
<p>所以对应相等</p>
<p>$P_i &#x3D; q_iP_{i-1}+P_{i-2}$</p>
<p>$Q_i &#x3D; q_iQ_{i-1}+Q_{i-2}$</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回的 [x,y,z] 满足 a*x+b*y=z=gcd(a,b)</span></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">array&lt;T,3&gt; <span class="title">exgcd</span><span class="params">(T a,T b)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(b==<span class="number">0</span>) <span class="keyword">return</span> &#123;<span class="number">1</span>,<span class="number">0</span>,a&#125;;</span><br><span class="line">  <span class="keyword">auto</span> [x,y,z] = <span class="built_in">exgcd</span>(b,a%b);</span><br><span class="line">  <span class="keyword">return</span> &#123;y,x-(a/b)*y,z&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="type">int</span> a=<span class="number">31</span>,b=<span class="number">7</span>;</span><br><span class="line">  <span class="keyword">auto</span> [x,y,z] = <span class="built_in">exgcd</span>(a,b);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d*%d+%d*%d=%d\n&quot;</span>,a,x,b,y,z);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注: 这里的$(x,y)$不是唯一的,因为每当$x$增加$\frac{b}{\mathrm{gcd}(a,b)}$,对应$y$同时减少$\frac{a}{\mathrm{gcd}(a,b)}$即可,等式依然成立</p>
<h1 id="一次不定方程-ax-by-x3D-c"><a href="#一次不定方程-ax-by-x3D-c" class="headerlink" title="一次不定方程 $ax+by&#x3D;c$"></a>一次不定方程 $ax+by&#x3D;c$</h1><p>定理17 $\gcd(a,b) &#x3D; c$则有解,$(x_0,y_0)$是一组解则$(x_0+\frac{b}{\mathrm{gcd}(a,b)}t,y_0-\frac{a}{\mathrm{gcd}(a,b)}t)$是所有解</p>
<p>推论9: 和$\frac{a}{\mathrm{gcd}(a,b)}x+\frac{b}{\mathrm{gcd}(a,b)}y&#x3D;\frac{c}{\mathrm{gcd}(a,b)}$ 同解</p>
<h1 id="函数-x-x"><a href="#函数-x-x" class="headerlink" title="函数[x],{x}"></a>函数<code>[x]</code>,<code>&#123;x&#125;</code></h1><p>设$x$为任意实数, $[x] \le x$表示不超过$x$的最大整数,$\lbrace x\rbrace &#x3D; x-[x]$</p>
<p>性质</p>
<ul>
<li>$x\ge y \Rightarrow [x]\ge [y]$</li>
<li>$x-1&lt;[x]\le x, 0\le \lbrace x \rbrace &lt; 1$</li>
<li>$n$为整数,$[n+x]&#x3D;n+[x],\lbrace n+x \rbrace &#x3D; \lbrace x \rbrace$</li>
</ul>
<p>引理1: 实数$x &gt; 0$,$a$正整数,$[\frac{x}{a}]$个不超过$x$且是$a$的倍数的整数, (找a的最大整数倍)</p>
<p>定理18: 在$n!$的标准分解式中,素数$p\le n$的指数$\displaystyle  &#x3D; [\frac{n}{p}]+[\frac{n}{p^2}]+\cdots&#x3D;\sum_{r&#x3D;1}^{\infty} [\frac{n}{p^r}]$</p>
<p>推论10(Legendre’s formula): $\displaystyle n!&#x3D;\prod_{p\le n} p^{\sum_{r&#x3D;1}^{\infty} [\frac{n}{p^r}]}$</p>
<p>定理19: $\prod_{i&#x3D;1}^{k} \frac{a+i}{i}$ 必定是整数, (一个是这就是$\binom{a+k}{k}$,用上面相关的就是直接讨论$\le k$质因子的幂次,$[\frac{a+k}{p^r}]\ge [\frac{a}{p^r}]+[\frac{k}{p^r}]$)</p>
<p>推论11: $n&#x3D;s_1+s_2+\cdots+s_k, \frac{n!}{s_1!s_2!\cdots s_k!}$是整数, (一样)</p>
<p>定理20: $p$为素数,则任意$x$有$p|x^p-x$, (归纳$x$,$x&#x3D;0$时成立,$(x+1)^p-(x+1) &#x3D; x^p-x + \binom{p}{\cdots}(\cdots)$</p>
<h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="8-有无穷多形如4m-3的素数，有无穷多形如6m-5的素数"><a href="#8-有无穷多形如4m-3的素数，有无穷多形如6m-5的素数" class="headerlink" title="8. 有无穷多形如4m+3的素数，有无穷多形如6m+5的素数"></a>8. 有无穷多形如4m+3的素数，有无穷多形如6m+5的素数</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>和证明素数无限多一样的想法，如果有限个则全部乘起来，</p>
<p>4m+3,讨论末尾是+3还是+1,如果是+3,则再+4,如果是+1,则再+2, 注意到得到的数是4k+3形式的,又和已知的都互质，但是如果分解不可能全分解成4k+1的，因子它会分解出一个4k+3形式的质数</p>
<p>6m+5,讨论末尾是+5还是+1,如果是+5,则再+6,如果是+1,则再+4, 一样的(6m+1)形式的乘积也得不到6m+5,</p>

</details>

<h2 id="19-2-nmid-m-Rightarrow-gcd-2-m-1-2-n-1-x3D-1"><a href="#19-2-nmid-m-Rightarrow-gcd-2-m-1-2-n-1-x3D-1" class="headerlink" title="19. $2 \nmid m \Rightarrow \gcd(2^m-1,2^n+1)&#x3D;1$"></a>19. $2 \nmid m \Rightarrow \gcd(2^m-1,2^n+1)&#x3D;1$</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>令$d &#x3D; gcd(2^m-1,2^n+1)$, 若$d \ne 1$,则$d &#x3D; 2k+1$</p>
<p>$2^m\equiv 1 \pmod d$</p>
<p>$2^n \equiv -1 \pmod d$</p>
<p>$2^{\mathrm{gcd}(m,n)} &#x3D; 2^{\mathrm{gcd}(m,2n)} &#x3D; 2^{xm+2ny} &#x3D; (2^{m})^{x}(2^{2n})^y \equiv 1^x1^y \equiv 1 \pmod d$</p>
<p>$2^n &#x3D; (2^{\mathrm{gcd}(m,n)})^{\frac{n}{\mathrm{gcd}(m,n)}} \equiv 1^{\frac{n}{\mathrm{gcd}(m,n)}}\equiv 1 \pmod d$</p>
<p>对于$d&#x3D;2k+1$矛盾</p>

</details>

<h2 id="27-证明-frac-2m-2n-m-n-m-n-是整数"><a href="#27-证明-frac-2m-2n-m-n-m-n-是整数" class="headerlink" title="27. 证明$\frac{(2m)!(2n)!}{m!n!(m+n)!}$是整数"></a>27. 证明$\frac{(2m)!(2n)!}{m!n!(m+n)!}$是整数</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>还是要用到Legendre’s formula, 也就是要证明$v_p((2m)!(2n)!)-v_p(m!n!(m+n)!)\ge 0$ for any prime $p$, </p>
<p>也就是要证明 $[2x]+[2y] \ge [x]+[y]+[x+y]$</p>
<p>$[2([x]+\lbrace x\rbrace)]+[2([y]+\lbrace y\rbrace)] \ge [[x]+\lbrace x\rbrace]+[[y]+\lbrace y\rbrace]+[[x]+\lbrace x\rbrace+[y]+\lbrace y\rbrace]$</p>
<p>$[2\lbrace x\rbrace]+[2\lbrace y\rbrace] \ge [\lbrace x\rbrace]+[\lbrace y\rbrace]+[\lbrace x\rbrace+\lbrace y\rbrace]$</p>
<p>$[2\lbrace x\rbrace]+[2\lbrace y\rbrace] \ge [\lbrace x\rbrace+\lbrace y\rbrace]$, 右侧取$0$则左侧始终成立,右侧取$1$,至少一个$\ge \frac{1}{2}$, 同样成立</p>

</details>

<h2 id="28-k-为正整数-n-可以唯一表示成-n-x3D-lm-k-其中-l-没有任何-k-次方因子"><a href="#28-k-为正整数-n-可以唯一表示成-n-x3D-lm-k-其中-l-没有任何-k-次方因子" class="headerlink" title="28. $k$为正整数,$n$可以唯一表示成$n&#x3D;lm^k$,其中$l$没有任何$k$次方因子"></a>28. $k$为正整数,$n$可以唯一表示成$n&#x3D;lm^k$,其中$l$没有任何$k$次方因子</h2><p>$p$的幂次$w$唯一表示 $w &#x3D; qk+r$</p>
<p>28.2 实数$A &gt; 0$则$\displaystyle \sum_{1\le z \le A}’ [ \sqrt[k]{\frac{A}{z}}] &#x3D; [A]$, 其中$\sum’$表示无$k$次方因子的$z$求和</p>
<details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>首先$A&#x3D;zm^k$ 才会让左侧内部 $\displaystyle \sqrt[k]{\frac{A}{z}}$为正整数, 因此$\displaystyle [\sqrt[k]{\frac{A}{z}}]&#x3D;[\sqrt[k]{\frac{[A]}{z}}]$ (A与它的整部之间不会有其它的值让整个为正整数, 或者说对于给定$k$, 它的整部不变时对应的A的区间的端点都是整数,且除了最初的$z$,后续的都是)</p>
<p>$A&#x3D;0$时显然, 所以只需要证明对于 任意正整数$A$, 有$\displaystyle \sum_{1\le z \le A}’ [ \sqrt[k]{\frac{A}{z}}] &#x3D; A$</p>
<p>对$A$进行归纳,</p>
<p>当$A &#x3D; 1$时, 左侧$&#x3D;1&#x3D;$右侧, 成立</p>
<p>若$A+1$ 的质数最高幂次 $&lt; k$, 对于$z \le A$时有$\displaystyle [\sqrt[k]{\frac{A}{z}}]&#x3D;[\sqrt[k]{\frac{A+1}{z}}]$, (和上面把有理数变整数一样的原理)</p>
<p>$\displaystyle A+1 &#x3D; \sum_{1\le z \le A}’ [ \sqrt[k]{\frac{A}{z}}] + [ \sqrt[k]{\frac{A+1}{A+1}}] &#x3D; \sum_{1\le z \le A}’ [ \sqrt[k]{\frac{A+1}{z}}] + [ \sqrt[k]{\frac{A+1}{A+1}}] &#x3D; \sum_{1\le z \le A+1}’ [ \sqrt[k]{\frac{A+1}{z}}]$</p>
<p>若$A+1$ 的质数最高幂次 $\ge k$, 则$A+1 &#x3D; z_0m^k$(唯一表示),且$z_0 &lt; A$</p>
<p>对于$z_0$有 $\displaystyle [\sqrt[k]{\frac{A}{z_0}}]+1&#x3D;[\sqrt[k]{\frac{A+1}{z_0}}]$<br>对于其它$z \ne z_0, z \le A$,有 $\displaystyle [\sqrt[k]{\frac{A}{z_0}}]&#x3D;[\sqrt[k]{\frac{A+1}{z_0}}]$</p>
<p>$\displaystyle A+1 &#x3D; \sum_{1\le z \le A, z\ne z_0}’ [ \sqrt[k]{\frac{A}{z}}] + [ \sqrt[k]{\frac{A}{z_0}}]+1 &#x3D; \sum_{1\le z \le A, z\ne z_0}’ [ \sqrt[k]{\frac{A+1}{z}}] + [ \sqrt[k]{\frac{A+1}{z_0}}] &#x3D; \sum_{1\le z \le A+1}’ [ \sqrt[k]{\frac{A+1}{z}}]$</p>

</details>

<h2 id="30-Beatty定理，1926-alpha-beta-gt-0-数列-alpha-x-alpha-y-没有公共正整数-且组成全体自然数的充要条件-alpha-beta-无理数且-frac-1-alpha-frac-1-beta-x3D-1"><a href="#30-Beatty定理，1926-alpha-beta-gt-0-数列-alpha-x-alpha-y-没有公共正整数-且组成全体自然数的充要条件-alpha-beta-无理数且-frac-1-alpha-frac-1-beta-x3D-1" class="headerlink" title="30(Beatty定理，1926). $\alpha,\beta &gt; 0$ 数列$[\alpha x],[\alpha y]$ 没有公共正整数 且组成全体自然数的充要条件$\alpha,\beta$无理数且$\frac{1}{\alpha}+\frac{1}{\beta}&#x3D;1$"></a>30(Beatty定理，1926). $\alpha,\beta &gt; 0$ 数列$[\alpha x],[\alpha y]$ 没有公共正整数 且组成全体自然数的充要条件$\alpha,\beta$无理数且$\frac{1}{\alpha}+\frac{1}{\beta}&#x3D;1$</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p><a href="https://proofwiki.org/wiki/Beatty%27s_Theorem">https://proofwiki.org/wiki/Beatty%27s_Theorem</a></p>
<p>$\Leftarrow :$</p>
<p>反正法: 若存在$k&#x3D;[\alpha x]&#x3D;[\beta y]$</p>
<p>即$k &lt; \alpha x &lt; k+1,k &lt; \beta y &lt; k+1$</p>
<p>$k&#x3D;\frac{k}{\alpha} + \frac{k}{\beta} &lt; x+y &lt; \frac{k+1}{\alpha} + \frac{k+1}{\beta} &#x3D; k+1$</p>
<p>矛盾.</p>
<p>若有$k$同时无法被表示, 找$[\alpha (x-1)] &lt; k &lt; [\alpha x]$</p>
<p>即 $\alpha x &gt; k+1,\alpha (x-1) &lt; k$</p>
<p>$\alpha (x-1) &lt; k &lt; \alpha x-1$</p>
<p>同理 $\beta (y-1) &lt; k h&lt; \beta y-1$</p>
<p>$x+y-2&#x3D;x-1+y-1 &lt; k &lt; x-\frac{1}{\alpha} + y-\frac{1}{\beta} &#x3D; x+y-1$</p>
<p>矛盾.</p>
<p>证必</p>
<p>$\Rightarrow :$</p>
<p>设$\alpha &lt; \frac{p}{q}$则,$[\alpha] &lt; [2\alpha] &lt; \cdots &lt; [q\alpha] &lt; p$ 因为要两两不等所以$[1,p-1]$ 中至少(小于关系并没有描绘精确程度)出现$q$个</p>
<p>所以$[1,p-1]$中至多有$p-1-q$个在是$[\beta y]$中,$(p-q)\beta$ 一定在$[1,p-1]$外</p>
<p>那么$(p-q)\beta \ge [(p-q)\beta] \ge p$ 即$\beta \ge \frac{p}{p-q}$</p>
<p>那么极限保号$\displaystyle \beta \ge \lim_{\frac{p}{q}\to \alpha} \frac{p}{p-q}&#x3D;\lim_{\frac{p}{q}\to \alpha} \frac{\frac{p}{q}}{\frac{p}{q}-1} &#x3D; \frac{\alpha}{\alpha-1}$<br>从另一侧$\alpha &gt; \frac{p}{q}$, 极限也会得到$\beta \le \frac{\alpha}{\alpha-1}$, 于是有$\frac{1}{\alpha}+\frac{1}{\beta}&#x3D;1$</p>
<p>证无理数: $[q\frac{p}{q}]&#x3D;p&#x3D;[(p-q)\frac{p}{p-q}]$</p>

</details>]]></content>
      <categories>
        <category>数论</category>
        <category>数论基础</category>
      </categories>
      <tags>
        <tag>数论基础</tag>
        <tag>辗转相除</tag>
        <tag>gcd</tag>
        <tag>lcm</tag>
        <tag>归纳法</tag>
        <tag>exgcd</tag>
        <tag>Beatty’s theorem</tag>
        <tag>Legendre’s formula</tag>
      </tags>
  </entry>
  <entry>
    <title>数论基础 二 数论函数</title>
    <url>/Math/number_theory_2/</url>
    <content><![CDATA[<p>ISBN 9787040364729</p>
<span id="more"></span>

<h1 id="数论函数举例"><a href="#数论函数举例" class="headerlink" title="数论函数举例"></a>数论函数举例</h1><div class="note no-icon success"><p>定义1: 在全体正整数上定义的函数是数论函数</p>
</div>

<p>$u(n)&#x3D;1 , n\ge 1$, $u\circ U &#x3D; [x]$</p>
<p>$e(n)&#x3D;n , n\ge 1$</p>
<p>$\displaystyle I(n)&#x3D;\left\lbrace \begin{array}{lc} 1, n &#x3D; 1\\ 0,n&gt;1 \end{array}\right.$,$I&#x3D;\mu * u$</p>
<p>$\displaystyle d(n)&#x3D;\sum_{d|n} 1 &#x3D;n$的质数因子的幂次+1的乘积(因子个数函数), $d&#x3D;u * u$, 也就有了$u&#x3D;d * \mu$</p>
<p>$\Omega(n) &#x3D;$质数因子幂次和(重复的统计质因子个数)</p>
<p>$\omega(n) &#x3D;$不同质数因子个数</p>
<p>$\displaystyle \sigma_\lambda(n)&#x3D;\sum_{d|n} d^\lambda$ 正除数的幂和函数$\sigma &#x3D; e * u$</p>
<p>$\displaystyle \phi(n)&#x3D;\sum_{1\le d \le n,\gcd(d,n)&#x3D;1} 1$ 所有不超过$n$和$n$互素的正整数个数,Euler函数,$\phi&#x3D;\mu * e&#x3D;n\prod_{d|n}(1-\frac{1}{p})$</p>
<p>$\mathrm{M\ddot{o}bius}$函数 $\mu(n) &#x3D;\left\lbrace \begin{array}{lc}1,&amp; n&#x3D;1 \\ (-1)^s, &amp; n&#x3D;p_1p_2\cdots p_s, p_i&lt;p_{i+1} \\ 0,&amp; \text{others}\end{array}\right.$</p>
<p>$\mathrm{Mangoldt}$函数$\Lambda(n)&#x3D;\left\lbrace\begin{array}{lc} \log p,&amp;n&#x3D;p^k,k\ge 1 \\ 0, &amp;others\end{array}\right.$</p>
<p>$\displaystyle \log n&#x3D;\sum_{d|n}\Lambda(d)$, 这样得到另一种表达方式$\displaystyle \Lambda(n)&#x3D;\sum_{d|n}\mu(d)\log{\frac{n}{d}}&#x3D;\mu * \log&#x3D;-\sum_{d|n}\mu(d)\log d$</p>
<p>$\mathrm{Liouville}$函数$\lambda(n) &#x3D; (-1)^{\Omega(n)}&#x3D; [n\text{ is square}] * \mu$</p>
<h1 id="Dirichlet-乘积-x2F-卷积"><a href="#Dirichlet-乘积-x2F-卷积" class="headerlink" title="Dirichlet 乘积 &#x2F;卷积"></a>Dirichlet 乘积 &#x2F;卷积</h1><div class="note no-icon success"><p>定义2: $f(n),g(n)$是两个数论函数,$h&#x3D;f * g$称作Dirichlet 乘积&#x2F;卷积</p>
<p>$\displaystyle h(n) &#x3D; \sum_{d|n}f(d)g(\frac{n}{d})$, 从理解上就是f和g中x相乘为n的对应y的乘积的和, 所以也可以写成$(f * g)(n) &#x3D;\sum_{ab &#x3D; n}f(a)g(b)$
  </p>
</div>

<p>定理1: Dirichlet乘积满足 交换率$f * g &#x3D; g * f$和结合率$(f * g)* h &#x3D; f * (g * h)$</p>
<p>一个重要的公式(算法竞赛里拆$\gcd(a,b)&#x3D;1$会使用) $I &#x3D; \mu * u &#x3D; \mu * 1 &#x3D; \sum_{d|n} \mu(d) &#x3D; \left\lbrace \begin{array}{lc} 1,&amp;n&#x3D;1\\ 0, &amp; n&gt;1 \end{array}\right.$<br>证明$\sum_{d|n} \mu(d) &#x3D; \mu(1)+\mu(p_1)+\cdots+\mu(p_s)+\cdots+\mu(p_1p_2)+\cdots+\mu(p_1p_2\cdots p_s)$ </p>
<p>$&#x3D; 1\binom{s}{0}+(-1)^1\binom{s}{1}+\cdots+(-1)^s\binom{s}{s} &#x3D; (1-1)^s$</p>
<div class="note no-icon success"><p>定义3: 若 $I &#x3D; f * g$ 则$f$和$g$互为Dirichlet的逆</p>
</div>

<p>定理2: $f * I &#x3D; I * f &#x3D; f$</p>
<div class="note no-icon success"><p>定义4: $F&#x3D;f*u$ 则$F$称作$f$的$\mathrm{M\ddot{o}bius}$变换, $F(n) &#x3D; \sum_{d|n} f(d)$, 如$d&#x3D;u * u, I &#x3D; \mu * u$</p>
</div>

<p>定理3(这也就是算法里常见的Mobius反演): $F&#x3D;f * u \Rightarrow f&#x3D;F * \mu$, $F(n) &#x3D; \sum_{d|n} f(d) \Rightarrow f(n)&#x3D;\sum_{d|n} F(d)\mu(\frac{n}{d})$, 反向一样的推法</p>
<p>证明$F * \mu &#x3D; (f * u) * \mu &#x3D; f * (u * \mu) &#x3D; f * I &#x3D; f$</p>
<p>例1: 证明$e &#x3D; \phi * u$, 即要证明$n&#x3D;\sum_{d|n}\phi(d)$, 因为根据定义$\phi(n)&#x3D;\sum_{d|n} \mu(d)\frac{n}{d}$即$\phi &#x3D; \mu * e$</p>
<p>例2: 证明$\log n &#x3D; \Lambda * u$, 即要证明$\log n&#x3D;\sum_{d|n}\Lambda(d)$, 展开$d$即可,这样得到另一种表达方式$\Lambda(n)&#x3D;\sum_{d|n}\mu(d)\log{\frac{n}{d}}$</p>
<h1 id="可乘函数"><a href="#可乘函数" class="headerlink" title="可乘函数"></a>可乘函数</h1><blockquote>
<p>可乘的一个好处是只需要计算$f(p^\alpha)$,以后再乘起来,证明时对于可乘函数也只需要证明质数幂次的情况<br>完全可乘的一个好处是能快速得到Dirichlet逆$f^{-1}(n)&#x3D;\mu(n)f(n)$</p>
</blockquote>
<div class="note no-icon success"><p>定义5: 定义在全体自然数上，且不恒等于零的数论函数,若$f(mn)&#x3D;f(m)f(n), \gcd(m,n)&#x3D;1$,则称它为可乘&#x2F;积性函数,若没有$\gcd$的限制，全部满足$f(mn)&#x3D;f(m)f(n)$则称作完全&#x2F;绝对 可乘函数</p>
</div>

<p>例3: $\mu(n),d(n)$为可乘函数与,$\mathrm{Liouville}$函数,$e^\lambda(n)&#x3D;n^{\lambda},I(n)$ 为完全可乘函数</p>
<p>定理4: 可乘函数$f(n)$有如下性质</p>
<ul>
<li>$f(1)&#x3D;1$</li>
<li>$f(n)&#x3D;f(p_1^{\alpha_1})f(p_2^{\alpha_2})\cdots f(p_s^{\alpha_s})$</li>
<li>$f(n)$完全可乘充要条件$\forall p,k\ge 1, f(p^k)&#x3D;f^k(p)$, 相当于解除了gcd限制</li>
<li>$f * u$($f$的Mobius变换)依然是可乘函数</li>
</ul>
<p>推论1: $f(n)$可乘, $F(n)&#x3D;\sum_{d|n} f(d) &#x3D; \prod_{p_i|n} (1+f(p_i)+\cdots+f(p_i^{\alpha_i}))$</p>
<p>又此$\sum_{d|n}\mu(d)f(d) &#x3D; \prod_{p_i|n} (1+\mu(p_i)f(p_i)+\cdots+\mu(p_i^{\alpha_i})f(p_i^{\alpha_i})) &#x3D; \prod_{p_i|n} (1-f(p_i))$</p>
<p>因此$\phi$另一个表达$\displaystyle \phi(n)&#x3D;\sum_{d|n}\mu(d)\frac{n}{d}&#x3D;n\prod_{p|n}(1-\frac{1}{p})$</p>
<p>类似的 $f(n)$完全可乘, $F(n)&#x3D;\sum_{d|n} f(d) &#x3D; \prod_{p_i|n} (1+f(p_i)+\cdots+f^{\alpha_i}(p_i))$</p>
<p>例4: $\sigma(n)&#x3D;\sum_{d|n} d&#x3D;\frac{p_1^{a_1+1}-1}{p_1-1}\frac{p_2^{a_2+1}-1}{p_2-1}\cdots \frac{p_s^{a_s+1}-1}{p_s-1}$, 也就是$\sigma &#x3D; e * u$</p>
<p>定理5: $f(n)$为可乘函数,则$f(\gcd(m,n))f(\mathrm{lcm}(m,n))&#x3D;f(m)f(n)$, 也就是不同p之间互不影响，相同p相当于min和max了</p>
<p>定理6: 若$f,g$可乘,则$f * g$可乘,若$f,f * g$可乘,则$g$可乘</p>
<p>正向的，相当于上面Mobius保持可乘性只是$g &#x3D; u$的特例， 即证明$(f * g)(mn)&#x3D;(f * g)(m)(f * g)(n), \gcd(m,n) &#x3D; 1$, 同样拆$d&#x3D;d_1d_2$即可</p>
<p>对于后面的,用反证法, 若$f$不可乘 &#x3D;&gt; 存在$f(mn)\ne f(n)f(m),\gcd(m,n)&#x3D;1$, 选最小mn, 即$&lt;mn$时还是可乘，这样同样做拆解，会唯一多出$f(mn)-f(n)f(m)$导致而不等</p>
<p>推论2: $F&#x3D;f * \mu$, 根据上面$F$可乘,则$f$也可乘</p>
<p>定理7: $f$为$f(1)\ne 0$的数论函数, 一定存在唯一的DIrichlet逆$f^{-1}$</p>
<p>并且由$f^{-1}(1) &#x3D; \frac{1}{f(1)},f^{-1}(n) &#x3D; \frac{-1}{f(1)}\sum_{d|n,d&lt;n} f(\frac{n}{d})f^{-1}(d),n &gt; 1$得出</p>
<p>也就是要证明$f * f^{-1} &#x3D; I$只有唯一解, 直接归纳从n&#x3D;1向上($1&#x3D;I(1)&#x3D;f(1)f^{-1}(1)&#x3D;1,0&#x3D;I(n)&#x3D;\sum_{d|n}f(\frac{n}{d})f^{-1}(d),n&gt;1$)</p>
<p>推论3: 可乘函数必定有Dirichlet逆存在,且也是可乘函数</p>
<p>定理8: $f(1) \ne 0,g(1)\ne 0$, $(f * g)^{-1} &#x3D; f^{-1} * g^{-1}$</p>
<p>$h &#x3D; f*g$可乘</p>
<p>$h * h^{-1} &#x3D; I$</p>
<p>$g^{-1} * f^{-1} &#x3D; h^{-1} * h * f^{-1} * g^{-1} &#x3D; h^{-1} * (g * f) * f^{-1} * g^{-1} &#x3D; h^{-1}$</p>
<p>定理9: $f$可乘, 若$f$完全可乘的充要条件是$f^{-1}(n)&#x3D;\mu(n)f(n)$</p>
<p>因为$f$可乘$f(1)&#x3D;1$</p>
<p>必要性: 若$f$完全可乘,令$g(n)&#x3D;\mu(n)f(n)$,有$(g * f)(n)&#x3D;\sum_{d|n}\mu(d)f(d)f(\frac{n}{d})&#x3D;f(n) \sum_{d|n}\mu(d)&#x3D;f(n)I(n)&#x3D;I(n)$, 即$g&#x3D;f^{-1}$ </p>
<p>充分性:若$f^{-1}(n)&#x3D;\mu(n)f(n)$, 那么要证明的就是$\forall p,\alpha, f(p^\alpha)&#x3D;f^\alpha(p)$</p>
<p>$I&#x3D;\sum_{d|n}\mu(d)f(d)f(\frac{n}{d})$</p>
<p>任取$n&#x3D;p^\alpha, \alpha &gt; 0$</p>
<p>$0&#x3D;\mu(1)f(1)f(p^\alpha)+\mu(p)f(p)f(p^{\alpha-1})$</p>
<p>即 $f(p^\alpha)&#x3D;f(p)f(p^{\alpha-1})$</p>
<p>例5: $\sigma_\lambda^{-1} &#x3D; (e^{\lambda})^{-1} * u^{-1} &#x3D; \mu e^{\lambda} * \mu$, </p>
<p>$\phi^{-1}&#x3D;\mu^{-1} * e^{-1}&#x3D;u * \mu e$</p>
<p>$d^{-1} &#x3D; u^{-1} * u^{-1} &#x3D; \mu * \mu$</p>
<p>例6: $g&#x3D;\lambda * u &#x3D;\left\lbrace \begin{array}{lc}1,&amp;n&#x3D;k^2\\ 0,&amp; others\end{array}\right.$<br>$g^{-1}&#x3D;\sum_{d|n}\mu(d)\lambda(d)\mu(\frac{n}{d})$</p>
<p>可乘函数对于每个质数因子处理后再乘起来, 可以证明1</p>
<h1 id="阶的估计"><a href="#阶的估计" class="headerlink" title="阶的估计"></a>阶的估计</h1><blockquote>
<p>有了阶的估计，可以方便于一些函数分布的研究</p>
</blockquote>
<p>$f$任意函数,$g$正值函数,若存在与$x$无关的常数$A$,使$|f(x)|\le Ag(x)$对于充分大$x$都成立,则$f(x)&#x3D;O(g(x))$或$f(x) \ll g(x)$</p>
<p>如$\sin(x)\ll 1,x\cos x\ll x^2,\sqrt{3x^2+7}\ll x$</p>
<p>定理, 对任意正整数$n$有$x^n &#x3D; O(e^x)$, 因为$x^n \le n! e^x$</p>
<p>若$\lim_{x\to +\infty} \frac{f(x)}{g(x)} &#x3D; 1$, 则称作当$x\to +\infty$时$f(x)\sim g(x)$</p>
<p>定理11: 对于任何正数$\alpha$不可能有$d(n) &#x3D; O(\log ^\alpha n)$</p>
<p>核心思想就是构建 $A\log^\alpha n &gt; d(n) &gt; c_{\alpha}\log^{&gt;\alpha} n$, 因为构建出来的话意味着右边幂次更大，随着n无限增长总会超过左边, 所以就是考虑如何造出 $d(n) &gt; c_{\alpha}\log^{&gt;\alpha} n$， 取$n&#x3D;(p_1p_2\cdots p_l)^m$</p>
<p>定理12: 对于任意$\epsilon &gt; 0$一定有$d(n) &#x3D; O(n^\epsilon)$</p>
<p>$\displaystyle \frac{d(n)}{n^{\epsilon}}&#x3D;\prod \frac{\alpha_i+1}{p^{\alpha_i\epsilon}} \le (\frac{2}{\epsilon \log 2})^{2^{\frac{1}{\epsilon}}}$, (讨论$p^\alpha$与2的关系，和个数，</p>
<p>由于数论函数数值的不规则性，我们经常去研究它的算术平均值$\displaystyle \bar{f}(n)&#x3D;\frac{\sum_{m\le n}f(m)}{n}$</p>
<p>$\bar{d}(n) &#x3D;\frac{1}{n}\sum_{m\le n} d(m) \sim \log n$, 称作$d$的平均阶为$\log n$ (稍后证明)</p>
<p>引理1: 当$x$充分大时 $\sum_{n\le x}\frac{1}{n} &#x3D; \log x + \gamma + O(\frac{1}{x})$, 其中$\gamma$是Euler常数</p>
<blockquote>
<p>这里的想法就是2次方的和是收敛的所以拆出二次方就好了</p>
</blockquote>
<p>$\displaystyle \sum_{n\le x}\frac{1}{n}&#x3D;\sum_{n\le x}\frac{\int_{n}^{n+1}dt}{n}$</p>
<p>$&#x3D;(\sum_{n\le x}\int_{n}^{n+1}(\frac{1}{n}-\frac{1}{t})dt)+\int_{1}^{[x]+1}(\frac{1}{t})dt$</p>
<p>$&#x3D;(\sum_{n\le x}\int_{n}^{n+1}(\frac{1}{n}-\frac{1}{t})dt)+\log([x]+1)$</p>
<p>$&#x3D;\gamma+O(\frac{1}{x})+\log([x]+1)$</p>
<p>当$x$充分大时</p>
<p>$\displaystyle \sum_{n\le x} d(n) &#x3D; \sum_{n\le x}\sum_{d|n} 1$</p>
<p>$\displaystyle &#x3D; \sum_{d \le x}\sum_{d|n,n\le x} 1$</p>
<p>$\displaystyle &#x3D; \sum_{d \le x}[\frac{x}{d}]$</p>
<p>$\displaystyle &#x3D; \sum_{d \le x}\frac{x}{d} - \lbrace\sum_{d \le x}\frac{x}{d}\rbrace$</p>
<p>$\displaystyle &#x3D; x\sum_{d \le x}\frac{1}{d} +O(x)$</p>
<p>$\displaystyle &#x3D; x(\log x+\gamma +O(\frac{1}{x}))+O(x)$</p>
<p>$\displaystyle &#x3D; x\log x+\gamma x+O(1)+O(x)$</p>
<p>$\displaystyle &#x3D; x\log x+O(x)$ (这里的估计还是很粗糙,见定理18)</p>
<p>因此$\bar{d}(n) \sim \log n$得证</p>
<h1 id="广义Dirichlet乘积"><a href="#广义Dirichlet乘积" class="headerlink" title="广义Dirichlet乘积"></a>广义Dirichlet乘积</h1><blockquote>
<p>看起来这里用例不少是为了简化阶的估计</p>
</blockquote>
<p>研究$\sum f(n)H(\frac{x}{n})$, 有什么不同,一个例子是上面的$f(2)$不会对$(f * g)(3)$贡献,而这里会,并且非整数的地方也有值, 记作$f \circ H$</p>
<p>$f$为数论函数,$H$为定义在$(0,+\infty)$上的函数,$H(x)&#x3D;0,x\in(0,1)$</p>
<p>$G(x) &#x3D; (f\circ H)(x) &#x3D; \sum_{n\le x} f(n)H(\frac{x}{n})$</p>
<p>若$H(x) &#x3D; 0,x$不是整数时,则</p>
<p>$(f\circ H)(x) &#x3D; \left\lbrace \begin{array}{lc}0,&amp;x\not\in \mathbb{Z}\\ (f * H)(x),&amp; x\in \mathbb{Z} \end{array}\right.$</p>
<p>$I\circ H &#x3D; H$</p>
<p>定理14: $f \circ (g\circ H) &#x3D; (f * g)\circ H$</p>
<p>取$f&#x3D;g&#x3D;u,H(x)&#x3D;U(x)&#x3D;\left\lbrace \begin{array}{lc}0,&amp; 0&lt;x&lt;1\\ 1,&amp;x\ge 1\end{array}\right.$</p>
<p>有$g \circ H &#x3D; \sum_{n\le x}1 &#x3D; [x]$</p>
<p>$f\circ(g \circ H) &#x3D; \sum_{n\le x} [\frac{x}{n}]$</p>
<p>因为$d&#x3D;u * u$, $d\circ H &#x3D; \sum_{n\le x}d(n)$</p>
<p>即$\sum_{n\le x}d(n) &#x3D; \sum_{n\le x} [\frac{x}{n}]$</p>
<p>定理15, 设f有Dirichlet逆$f^{-1}$， $G&#x3D;f\circ H$, 则$H&#x3D;f^{-1}\circ G$</p>
<p>推论4: 若$f$完全可乘,$G&#x3D;f\circ H,H&#x3D;(\mu(n)f(n))\circ G$</p>
<p>定理16: $h&#x3D;f * g, H&#x3D;h\circ U,F&#x3D;f\circ U,G&#x3D;g\circ U$, 则$H(x)&#x3D;f \circ G &#x3D; g \circ F$</p>
<p>推论5: $F&#x3D;f\circ U$,则$\displaystyle \sum_{n\le x}\sum_{d|n} f(d) &#x3D; \sum_{n\le x}F(\frac{x}{n})$, 就是$(u * f) \circ U&#x3D;u \circ ( f \circ U)$<br>例7: $\sum_{n\le x}\mu(n)[\frac{x}{n}]&#x3D;1$,即$\mu \circ(u\circ U) &#x3D; I \circ U &#x3D; U$</p>
<p>定理17(在用于估计时做区间切割很有用): 设$h&#x3D;f * g,F&#x3D;f\circ U,G&#x3D;g\circ U,H&#x3D;h\circ U$, 对任意$ab&#x3D;x$的正数$a,b$恒有</p>
<p>$H(x)&#x3D;\sum_{n\le a}f(n)G(\frac{x}{n})+\sum_{n\le b}g(n)F(\frac{x}{n})-F(a)G(b)$</p>
<p>$\displaystyle H(x)&#x3D;\sum_{n\le x}(\sum_{d_1d_2&#x3D;n}f(d_1)g(d_2))$</p>
<p>$\displaystyle &#x3D;\sum_{d_1d_2\le x} f(d_1)g(d_2)$</p>
<p>$\displaystyle &#x3D;\sum_{d_1\le a} (\sum_{d_2\le\frac{x}{d_1}} f(d_1)g(d_2)) + \sum_{d_2\le b} (\sum_{d_1\le\frac{x}{d_2}} f(d_1)g(d_2)) -\sum_{d_1\le a,d_2\le b} f(d_1)g(d_2)$, 容斥原理</p>
<p>$&#x3D;\sum_{n\le a}f(n)G(\frac{x}{n})+\sum_{n\le b}g(n)F(\frac{x}{n})-F(a)G(b)$</p>
<p>定理18: 我们可以用这个对$d(n)$重新估计</p>
<p>$f&#x3D;g&#x3D;u$因此$h&#x3D;f * g &#x3D;u * u&#x3D;d$,取$a&#x3D;b&#x3D;\sqrt{x}$</p>
<p>$\sum_{n\le x}d(n) &#x3D; H(x) &#x3D; \sum_{n\le a}f(n)G(\frac{x}{n})+\sum_{n\le b}g(n)F(\frac{x}{n})-F(a)G(b)$</p>
<p>$&#x3D;2\sum_{n\le \sqrt{x}}[\frac{x}{n}] - [\sqrt{x}]^2$</p>
<p>$&#x3D;2\sum_{n\le \sqrt{x}}(\frac{x}{n} - \lbrace \frac{x}{n} \rbrace) - (\sqrt{x}-\lbrace\sqrt{x}\rbrace)^2$</p>
<p>$&#x3D;x\log x+(2\gamma -1)x + O(\sqrt{x})$</p>
<p>定理19: $\sum_{n\le x} \sigma(n) &#x3D; \frac{\pi^2}{12} x^2 + O(x\log x)$</p>
<p>$\sigma &#x3D; e * u$</p>
<p>$\displaystyle \sigma \circ U &#x3D; u\circ(e\circ U) &#x3D;\sum_{n\le x}\sum_{m\le \frac{x}{n}} m&#x3D;\sum_{n\le x} \frac{1}{2}\lbrack \frac{x}{n}\rbrack([\frac{x}{n}]+1)$</p>
<p>$\displaystyle &#x3D;\frac{1}{2}\sum_{n\le x}(\frac{x}{n}+O(1))(\frac{x}{n}+O(1))$</p>
<p>$\displaystyle &#x3D;\frac{1}{2}\sum_{n\le x}\frac{x^2}{n^2}+O(\sum_{n\le x}\frac{x}{n})+O(x)$</p>
<p>$\displaystyle &#x3D;\frac{x^2}{2}\sum_{n}\frac{x^2}{n^2}-\frac{x^2}{2}\sum_{n &gt; x}\frac{x^2}{n^2}+O(x\log x)$</p>
<p>$&#x3D; \frac{\pi^2}{12} x^2+O(\frac{1}{[x]})+O(x\log x)$</p>
<p>$&#x3D; \frac{\pi^2}{12} x^2+O(x\log x)$</p>
<p>定理20: $\sum_{n\le x}\phi(x)&#x3D;\frac{3}{\pi^2}x^2+O(x\log x)$</p>
<p>$\phi &#x3D; \mu * e$</p>
<p>$\displaystyle \sum_{n\le x}\phi(x)&#x3D;\sum_{n\le x}\mu(n)\sum_{m\le \frac{x}{n}} m$</p>
<p>$\displaystyle &#x3D;\sum_{n\le x}\mu(n)\frac{1}{2}\lbrack \frac{x}{n}\rbrack([\frac{x}{n}]+1)$</p>
<p>$\displaystyle&#x3D;\frac{1}{2}\sum_{n\le x}\mu(n)(\frac{x}{n}+O(1))^2$</p>
<p>$\displaystyle&#x3D;\frac{x^2}{2}\sum_{n\le x}\frac{\mu(n)}{n^2}+O(x\log x)$</p>
<p>$\displaystyle&#x3D;\frac{x^2}{2}\sum_{n&#x3D;1}^\infty \frac{\mu(n)}{n^2}+O(x\log x)$</p>
<p>$\frac{\pi^2}{6}\sum_{d&#x3D;1}^\infty \frac{\mu(d)}{d^2}&#x3D;\sum_{a&#x3D;1}^\infty \frac{1}{a^2} \sum_{d&#x3D;1}^\infty \frac{\mu(d)}{d^2}&#x3D;\sum_{n&#x3D;1}^{\infty} \frac{\sum_{d|n} \mu(d)}{n^2} &#x3D;\sum_{n&#x3D;1}^{\infty} \frac{I(n)}{n^2} &#x3D; 1$, 考虑$n&#x3D;ad$</p>
<p>原式 $\displaystyle&#x3D;\frac{3}{\pi^2}x^2+O(x\log x)$</p>
<p>定理21: $Q(x)&#x3D;$不超过$x$的无平方因子的正整数的个数, $\sum_{Q(x)}&#x3D;\frac{6}{\pi^2}x+O(\sqrt x)$</p>
<p>不大于$x$且最大平方因子为$k^2$的数个数为$Q(\frac{x}{k^2})$,相当于$v &#x3D; mk^2 \le x,m$中没有平方因子,所以和求$\le \frac{x}{k^2}$的无平方因子的正整数是一样的子问题</p>
<p>$\sum_{k\le \sqrt{x}}Q(\frac{x}{k^2}) &#x3D; [x]$</p>
<p>$\displaystyle Q(x)&#x3D;\sum_{n\le \sqrt{x}}Q(\frac{x}{d^2})I(d)&#x3D;\sum_{n\le \sqrt{x}}Q(\frac{x}{d^2})\sum_{d|n}\mu(d)$</p>
<p>$\displaystyle &#x3D;\sum_{d \le \sqrt{x}}\mu(d) \sum_{d|n,n\le \sqrt{x}} Q(\frac{x}{d^2})$</p>
<p>$\displaystyle &#x3D;\sum_{d \le \sqrt{x}}\mu(d) \sum_{k\le \sqrt{\frac{x}{d^2}}} Q(\frac{x}{d^2k^2})$</p>
<p>$\displaystyle &#x3D;\sum_{d \le \sqrt{x}}\mu(d) [\frac{x}{d^2}]$</p>
<p>$\displaystyle &#x3D;\sum_{d \le \sqrt{x}}\mu(d) (\frac{x}{d^2}+O(1))$</p>
<p>$\displaystyle &#x3D;\sum_{d \le \sqrt{x}}\frac{x\mu(d)}{d^2}+O(\sqrt{x})$</p>
<p>$\displaystyle &#x3D;\frac{6}{\pi^2}x+O(\sqrt{x})$</p>
<h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="9-lambda-n-x3D-1-Omega-n-求-sum-d-n-lambda-d-d-s-的表达式-证明-sum-k-x3D-1-x-lambda-k-frac-x-k-x3D-sqrt-x"><a href="#9-lambda-n-x3D-1-Omega-n-求-sum-d-n-lambda-d-d-s-的表达式-证明-sum-k-x3D-1-x-lambda-k-frac-x-k-x3D-sqrt-x" class="headerlink" title="9. $\lambda(n)&#x3D;(-1)^{\Omega(n)}$,求$\sum_{d|n}\lambda(d)d^s$的表达式,证明$\sum_{k&#x3D;1}^{[x]}\lambda(k)[\frac{x}{k}]&#x3D;[\sqrt{x}]$"></a>9. $\lambda(n)&#x3D;(-1)^{\Omega(n)}$,求$\sum_{d|n}\lambda(d)d^s$的表达式,证明$\sum_{k&#x3D;1}^{[x]}\lambda(k)[\frac{x}{k}]&#x3D;[\sqrt{x}]$</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>$\sum_{d|n}\lambda(d)d^s &#x3D; \sum_{d|n,d&#x3D;\prod p_i^{\beta_i}} (-1)^{\sum \beta_i}(\prod {p_i}^{\beta_i})^s$</p>
<p>$&#x3D; \sum_{n&#x3D;\prod p_i^{\alpha_i},\beta_i\le \alpha_i} \prod (-p_i^s)^{\beta_i }$</p>
<p>$&#x3D; \prod_{i,n&#x3D;\prod p_i^{\alpha_i},\beta_i\le \alpha_i} \sum_{j&#x3D;0}^{\alpha_i} (-p_i^s)^{j}$</p>
<p>$&#x3D; \prod_{i,n&#x3D;\prod p_i^{\alpha_i},\beta_i\le \alpha_i} \frac{1-(-p_i^s)^{\alpha_i+1}}{1+p_i^s}$</p>
<p>$\sum_{k&#x3D;1}^{[x]}\lambda(k)[\frac{x}{k}]&#x3D;\sum_{k&#x3D;1}^{[x]}\lambda(k)[\frac{[x]}{k}] &#x3D; (\lambda \circ (u\circ U))([x])$</p>
<p>$&#x3D;((\lambda * u)\circ U)([x])$</p>
<p>$(\lambda * u)(n) &#x3D; \left\lbrace\begin{array}{lc} 1,&amp; n&#x3D;k^2 \\ 0,&amp; \text{others}\end{array}\right.$</p>

</details>

<h2 id="14-设-displaystyle-s-n-x3D-sum-j-in-1-n-gcd-j-n-x3D-1-j-2-证明-displaystyle-sum-d-n-frac-s-d-d-2-x3D-frac-1-n-2-sum-j-x3D-1-n-j-2-s-n-x3D-n-2-frac-1-3-phi-n-frac-1-2-sum-d-n-mu-d-frac-1-6n-prod-p-n-1-p"><a href="#14-设-displaystyle-s-n-x3D-sum-j-in-1-n-gcd-j-n-x3D-1-j-2-证明-displaystyle-sum-d-n-frac-s-d-d-2-x3D-frac-1-n-2-sum-j-x3D-1-n-j-2-s-n-x3D-n-2-frac-1-3-phi-n-frac-1-2-sum-d-n-mu-d-frac-1-6n-prod-p-n-1-p" class="headerlink" title="14. 设$\displaystyle s(n)&#x3D;\sum_{j\in[1,n],\gcd(j,n)&#x3D;1} j^2$证明$\displaystyle \sum_{d|n}\frac{s(d)}{d^2}&#x3D;\frac{1}{n^2}\sum_{j&#x3D;1}^n j^2$,$s(n)&#x3D;n^2(\frac{1}{3}\phi(n)+\frac{1}{2}\sum_{d|n}\mu(d)+\frac{1}{6n}\prod_{p|n}(1-p))$"></a>14. 设$\displaystyle s(n)&#x3D;\sum_{j\in[1,n],\gcd(j,n)&#x3D;1} j^2$证明$\displaystyle \sum_{d|n}\frac{s(d)}{d^2}&#x3D;\frac{1}{n^2}\sum_{j&#x3D;1}^n j^2$,$s(n)&#x3D;n^2(\frac{1}{3}\phi(n)+\frac{1}{2}\sum_{d|n}\mu(d)+\frac{1}{6n}\prod_{p|n}(1-p))$</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>通过和n的gcd来分类</p>
<p>$\frac{1}{n^2}\sum_{j&#x3D;1}^nj^2$</p>
<p>$&#x3D;\frac{1}{n^2}\sum_{d|n}\sum_{j\in[1,n],\gcd(j,n)&#x3D;d} j^2$</p>
<p>$&#x3D;\frac{1}{n^2}\sum_{d|n}\sum_{i \in[1,\frac{n}{d}],\gcd(i,\frac{n}{d})&#x3D;1} (id)^2$</p>
<p>$&#x3D;\sum_{d|n}\frac{d^2}{n^2}\sum_{i \in[1,\frac{n}{d}],\gcd(i,\frac{n}{d})&#x3D;1} i^2$</p>
<p>$&#x3D;\sum_{d|n}\frac{s(\frac{n}{d})}{(\frac{n}{d})^2}$</p>
<p>$&#x3D;\sum_{d|n}\frac{s(d)}{d^2}$</p>
<p>$s * e_2 &#x3D; \sum_{j&#x3D;1}^n j^2 &#x3D; \frac{n(n+1)(2n+1)}{6}&#x3D;\frac{n^3}{3}+\frac{n^2}{2}+\frac{n}{6}$</p>
<p>$e_2$完全可乘</p>
<p>$e_2^{-1} &#x3D; \mu e_2$</p>
<p>$s &#x3D; s * e_2 * e_2^{-1} &#x3D; (\frac{n^3}{3}+\frac{n^2}{2}+\frac{n}{6}) * (\mu e_2)$</p>
<p>$&#x3D;\sum_{d|n} (\frac{n^3}{3d^3}\mu(d)d^2+\frac{n^2}{2d^2}\mu(d)d^2+\frac{n}{6d}\mu(d)d^2)$</p>
<p>$&#x3D;\frac{n^2}{3} (\mu * e) +\frac{n^2}{2}(\sum_{d|n}\mu(d))+\frac{n}{6}\sum_{d|n}\mu(d)d$</p>

</details>

<h2 id="16-求所有使得-phi-n-x3D-24"><a href="#16-求所有使得-phi-n-x3D-24" class="headerlink" title="16. 求所有使得$\phi(n)&#x3D; 24$"></a>16. 求所有使得$\phi(n)&#x3D; 24$</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>$\phi(n)&#x3D;n\prod_{p|n}\frac{p-1}{p}$</p>
<p>所以考察所有$24$的因数+1的质因子$2,3,5,7,13$的组合情况</p>
<p>又注意到$\phi$是可乘函数$24&#x3D;2^33$</p>
<p>$\phi(2)&#x3D;1,\phi(2^2)&#x3D;2,\phi(2^3)&#x3D;4,\phi(2^4)&#x3D;8$</p>
<p>$\phi(3)&#x3D;2,\phi(3^2)&#x3D;6,\phi(3^3)&#x3D;4$</p>
<p>$\phi(5)&#x3D;4$</p>
<p>$\phi(7)&#x3D;6$</p>
<p>$\phi(13)&#x3D;12$</p>
<p>所以有$13\cdot 3,13\cdot 3\cdot 2,13\cdot 2^2\cdots$</p>

</details>

<h2 id="17-证明-n-为合数时-phi-n-le-n-sqrt-n"><a href="#17-证明-n-为合数时-phi-n-le-n-sqrt-n" class="headerlink" title="17. 证明$n$为合数时$\phi(n)\le n-\sqrt{n}$"></a>17. 证明$n$为合数时$\phi(n)\le n-\sqrt{n}$</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>$\phi(n)&#x3D;n\prod_{p|n}(1-\frac{1}{p}) \le n(1-\frac{1}{p}) \le n(1-\frac{1}{\sqrt{n}}) &#x3D; n-\sqrt{n}$</p>

</details>

<h2 id="25-d-为自然数-x-ge-1-则-displaystyle-sum-m-le-x-gcd-m-d-x3D-1-frac-mu-2-m-phi-m-ge-frac-phi-d-d-log-x-1"><a href="#25-d-为自然数-x-ge-1-则-displaystyle-sum-m-le-x-gcd-m-d-x3D-1-frac-mu-2-m-phi-m-ge-frac-phi-d-d-log-x-1" class="headerlink" title="25. $d$为自然数,$x\ge 1$,则$\displaystyle \sum_{m\le x,\gcd(m,d)&#x3D;1} \frac{\mu^2(m)}{\phi(m)}\ge \frac{\phi(d)}{d} \log([x]+1)$"></a>25. $d$为自然数,$x\ge 1$,则$\displaystyle \sum_{m\le x,\gcd(m,d)&#x3D;1} \frac{\mu^2(m)}{\phi(m)}\ge \frac{\phi(d)}{d} \log([x]+1)$</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>定义函数$\mathrm{rad}(n) &#x3D; \prod_{p|n} p$相当于$n$中所有质因子的乘积</p>
<p>$\displaystyle \sum_{m\le x,\gcd(m,d)&#x3D;1} \frac{\mu^2(m)}{\phi(m)}$</p>
<p>$\displaystyle &#x3D;\sum_{m\le x,\gcd(m,d)&#x3D;1,\mathrm{rad}(m)&#x3D;m} \prod_{p|m} \frac{1}{p-1}$, $m$中所有质数幂次不大于1</p>
<p>$\displaystyle &#x3D;\sum_{m\le x,\gcd(m,d)&#x3D;1,\mathrm{rad}(m)&#x3D;m} \prod_{p|m} \frac{\frac{1}{p}}{1-\frac{1}{p}}$, 变成等比数列和的形式</p>
<p>$\displaystyle &#x3D;\sum_{m\le x,\gcd(m,d)&#x3D;1,\mathrm{rad}(m)&#x3D;m} \prod_{p|m} \sum_{k\ge 1}\frac{1}{p^k}$, 等比数列</p>
<p>$\displaystyle &#x3D;\sum_{m\le x,\gcd(m,d)&#x3D;1,\mathrm{rad}(m)&#x3D;m} \sum_{\mathrm{rad}(n)&#x3D;m}\frac{1}{n}$, 后面的乘法展开</p>
<p>$\displaystyle \ge \sum_{m\le x,\gcd(m,d)&#x3D;1,\mathrm{rad}(m)&#x3D;m} \sum_{\mathrm{rad}(n)&#x3D;m,n\le y}\frac{1}{n}$, 控制范围, 暂时不知道$y$取多少合适</p>
<p>$\displaystyle &#x3D; \sum_{n \le y,\gcd(n,d)&#x3D;1} \frac{1}{n} \sum_{m&#x3D;\mathrm{rad}(m)&#x3D;\mathrm{rad}(n),m\le x} 1$, 交换顺序</p>
<p>$\displaystyle &#x3D; \sum_{n \le y,\gcd(n,d)&#x3D;1} \frac{1}{n}$, 右侧只有唯一$m$,这里看出需要保证$y\le x$才能保证右侧都是1</p>
<p>$\displaystyle &#x3D; \frac{\phi(d)}{d}\prod_{p|d}\frac{1}{1-\frac{1}{p}}\sum_{n \le y,\gcd(n,d)&#x3D;1} \frac{1}{n}$, 向要证明的靠拢,拆1</p>
<p>$\displaystyle &#x3D; \frac{\phi(d)}{d}(\prod_{p|d}\sum_{k\ge 0} \frac{1}{p^k})\sum_{n \le y,\gcd(n,d)&#x3D;1} \frac{1}{n}$, 同样等比数列求和</p>
<p>$\displaystyle &#x3D; \frac{\phi(d)}{d}(\sum_{\mathrm{rad}(q) | \mathrm{rad}(d) } \frac{1}{q})\sum_{n \le y,\gcd(n,d)&#x3D;1} \frac{1}{n}$, 同样等比数列求和</p>
<p>$\displaystyle &#x3D; \frac{\phi(d)}{d} \sum_{\mathrm{rad}(q) | \mathrm{rad}(d) } \sum_{n \le y,\gcd(n,d)&#x3D;1} \frac{1}{nq}$, 乘开</p>
<p>$\displaystyle \ge \frac{\phi(d)}{d} \sum_{t\le x}\frac{1}{t}$, 这里看出,任何一个$\le x$的有且只有唯一的拆解,拆解成是$d$的质因子的幂次的乘积(q贡献) 和 其余部分(n贡献), 而大于$x$的直接舍去, 所以取$y&#x3D;x$, 而上面其实需要$y\le x$所以范围还算很紧</p>
<p>$\displaystyle \ge \frac{\phi(d)}{d} \log([x]+1)$</p>

</details>]]></content>
      <categories>
        <category>数论</category>
        <category>数论基础</category>
      </categories>
      <tags>
        <tag>数论基础</tag>
        <tag>Dirichlet乘积</tag>
        <tag>Dirichlet逆</tag>
        <tag>可乘函数</tag>
        <tag>完全可乘函数</tag>
        <tag>Mobius变换</tag>
        <tag>Mobius反演</tag>
      </tags>
  </entry>
  <entry>
    <title>数论基础 三 素数分布的一些初等结果</title>
    <url>/Math/number_theory_3/</url>
    <content><![CDATA[<p>ISBN 9787040364729</p>
<span id="more"></span>

<h1 id="函数-pi-x"><a href="#函数-pi-x" class="headerlink" title="函数$\pi(x)$"></a>函数$\pi(x)$</h1><p>$\pi(x) &#x3D;$ 不超过$x$的素数的个数</p>
<p>引理1: $x &gt; 0$,$p_1,p_2,\cdots,p_s$为前$s$个素数,$\phi(x,s)$表示不超过$x$,且不被$p_i(i\in[1,s])$整除的自然数个数,则$\displaystyle \phi(x,s)&#x3D;\sum_{d|\prod_{i&#x3D;1}^s p_i} \mu(d)[\frac{x}{d}]$, 其实就是容斥原理,可以拆$I(\gcd)$来做</p>
<p>引理2: $x &gt; s$则$\displaystyle \pi(x) &lt; x\prod_{i&#x3D;1}^s(1-\frac{1}{p_i})+2^{s+1}$</p>
<p>显然$\pi(x) \le s+\phi(x,s)$</p>
<p>所以$\displaystyle \pi(x) \le s+\sum_{d|\prod_{i&#x3D;1}^s p_i} \mu(d)[\frac{x}{d}]$</p>
<p>$\displaystyle &#x3D; s+\sum_{d|\prod_{i&#x3D;1}^s p_i} \mu(d)\frac{x}{d}+\sum_{d|\prod_{i&#x3D;1}^s p_i} \mu(d)\lbrace\frac{x}{d}\rbrace$</p>
<p>$\displaystyle &lt; s+\sum_{d|\prod_{i&#x3D;1}^s p_i} \mu(d)\frac{x}{d}+\sum_{d|\prod_{i&#x3D;1}^s p_i} 1$</p>
<p>$\displaystyle &#x3D; s+x\prod_{i&#x3D;1}^{s} (1-\frac{1}{p_i}) + (1+1)^s$</p>
<p>$\displaystyle \le x\prod_{i&#x3D;1}^{s} (1-\frac{1}{p_i}) + 2^{s+1}$</p>
<p>引理3: $\prod_{p} (1-\frac{1}{p})&#x3D;0$, 正如第二章里的证明一样，拆成等比数列和的形式再展开乘法，就显然了</p>
<p>定理1: $\lim_{x\to \infty} \frac{\pi(x)}{x}&#x3D;0$</p>
<p>取$s+1&#x3D;[\frac{\log_2 x}{2}]$</p>
<p>$\displaystyle 0 &lt; \lim_{x\to \infty} \frac{\pi(x)}{x} &lt; \lim_{x\to \infty} \prod_{i&#x3D;1}^{[\frac{\log_2 x}{2}]-1} (1-\frac{1}{p_i}) + \frac{2^{[\frac{\log_2 x}{2}]}}{x}$</p>
<p>得证， 即$\pi(x) &#x3D; o(x), x\to \infty$</p>
<h1 id="Chebyshev定理"><a href="#Chebyshev定理" class="headerlink" title="Chebyshev定理"></a>Chebyshev定理</h1><p>大量的尝试,Legendre和Gauss都猜测(素数定理)$\pi(x)\sim \frac{x}{\log x}$ (第三章没有证明到系数在极限下是1，只证明了下面这个更弱的形式)</p>
<blockquote>
<p>1896年，<a href="https://baike.baidu.com/item/%E9%98%BF%E8%BE%BE%E9%A9%AC/400373?fromModule=lemma_inlink">阿达马</a>（即雅克·所罗门·阿达马，Jacques Solomon Hadamard，1865年－1963年）和德·拉·瓦莱布桑（Charles-Jean de la Vallée Poussin）按照<a href="https://baike.baidu.com/item/%E6%B3%A2%E6%81%A9%E5%93%88%E5%BE%B7%C2%B7%E9%BB%8E%E6%9B%BC/1693983?fromModule=lemma_inlink">波恩哈德·黎曼</a>（B. Riemann）的思路，各自独立地利用高深的整函数理论证明了素数定理。</p>
</blockquote>
<blockquote>
<p>1949年，塞尔伯格（即<a href="https://baike.baidu.com/item/%E9%98%BF%E7%89%B9%E5%8B%92%C2%B7%E5%A1%9E%E5%B0%94%E4%BC%AF%E6%A0%BC/9243382?fromModule=lemma_inlink">阿特勒·塞尔伯格</a>，Atle Selberg）和埃尔德什（即<a href="https://baike.baidu.com/item/%E4%BF%9D%E7%BD%97%C2%B7%E5%9F%83%E5%B0%94%E5%BE%B7%E4%BB%80/6265074?fromModule=lemma_inlink">保罗·埃尔德什</a>，Paul Erdős）分别独立地证明了素数定理。塞尔伯格由于这项成就及其他工作而获得了<a href="https://baike.baidu.com/item/%E8%8F%B2%E5%B0%94%E5%85%B9%E5%A5%96/186887?fromModule=lemma_inlink">菲尔兹奖</a>，埃尔德什则与陈省身一起获得了<a href="https://baike.baidu.com/item/%E6%B2%83%E5%B0%94%E5%A4%AB%E6%95%B0%E5%AD%A6%E5%A5%96?fromModule=lemma_inlink">沃尔夫数学奖</a>。</p>
</blockquote>
<p>Chebyshev 1850证明了存在两个正常数使得$C_1\frac{x}{\log x}&lt; \pi(x) &lt; C_2\frac{x}{\log x}$ </p>
<p>引理4(重要,这个公式用于$C_n$去转换做阶的估计很有用): 设$x &gt; 1$,$f(t)\in C’[1,x],S(x)&#x3D;\sum_{n\le x}C_n$ 则</p>
<p>$\sum_{n\le x}C_nf(n)&#x3D;S(x)f(x)-\int_1^xS(t)f’(t)dt$</p>
<blockquote>
<p>这里是$f$在$[1,x]$的积分连续</p>
</blockquote>
<p>证明: $S(x)f(x)-\sum_{n\le x}C_nf(n)&#x3D;\sum_{n\le x}C_n(f(x)-f(n))$</p>
<p>$&#x3D;\sum_{n\le x}C_n \int_{n}^x f’(t) dt$</p>
<p>$&#x3D;\sum_{n\le x}C_n \int_{1}^x [t\ge n]f’(t) dt$</p>
<p>$&#x3D;\int_{1}^x \sum_{n\le x}C_n [t\ge n]f’(t) dt$</p>
<p>$&#x3D;\int_{1}^x (\sum_{n\le x}C_n [t\ge n])f’(t) dt$</p>
<p>$&#x3D;\int_{1}^x (\sum_{n\le t}C_n)f’(t) dt$</p>
<p>$&#x3D;\int_{1}^x S(t)f’(t) dt$</p>
<p>定理2(欧拉求和公式): $a&gt;0,f(x)\in C’[a,b]$则</p>
<p>$\sum_{a&lt;n\le b}f(n)&#x3D;\int_{a}^b f(t)dt+\int_{a}^b \psi_1(t)f’(t)dt+\psi_1(a)f(a)-\psi_1(b)f(b)$ 其中$\psi_1(x)&#x3D;x-[x]-\frac{1}{2}, |\psi_1(x)|\le \frac{1}{2}$($\frac{1}{2}$到小数部分的有向距离)</p>
<p>证明: 由引理4,取$C_n&#x3D;1$,则</p>
<p>$\sum_{n\le a}f(n)&#x3D;[a]f(a)-\int_{1}^a [t]f’(t)dt$</p>
<p>$\sum_{n\le b}f(n)&#x3D;[b]f(b)-\int_{1}^b [t]f’(t)dt$</p>
<p>相减</p>
<p>$\sum_{a &lt; n\le b}f(n)&#x3D;[b]f(b)-[a]f(a)-\int_{a}^b [t]f’(t)dt$</p>
<p>$&#x3D;[b]f(b)-[a]f(a)-\int_{a}^b [t]f’(t)dt-(\int_a^b(t-\frac{1}{2})f’(t)dt-(b-\frac{1}{2})f(b)+(a-\frac{1}{2})f(a)+\int_a^bf(t)dt)$</p>
<p>得证</p>
<p>引理5: $x&gt;1$则$\sum_{n\le x}\log n&#x3D;x \log x - x + O(\log x)$</p>
<p>证明: $\sum_{n\le x} \log n&#x3D;\int_{1}^x \log t dt+\int_{1}^x \psi_1(t)\frac{1}{t} dt -\psi_1(x)\log x \le (x\log x - x)+\frac{1}{2}O(\log x)+\frac{1}{2}O(\log x)$</p>
<hr>
<p>Chebyshev在研究素数定理时,引入了两个新函数</p>
<p>first Chebyshev function $\theta(x)&#x3D;\sum_{p\le x} \log p\le x\log x$</p>
<p>second Chebyshev function $\displaystyle \psi(x) &#x3D; \Lambda \circ U&#x3D;\sum_{n\le x} \Lambda (n)$, (单调递增)</p>
<p>$&#x3D;\sum_{m&#x3D;1}^{\infty} \sum_{p,{p^m}\le x} \Lambda(p^m)$</p>
<p>$&#x3D;\sum_{m\le \log_2 x}\sum_{p\le x^{\frac{1}{m}}}\log p$</p>
<p>$&#x3D;\sum_{m\le \log_2 x}\theta(x^{\frac{1}{m}})$</p>
<p>$&#x3D;\theta(x)+\sum_{m\in[2,\log_2 x]}\theta(x^{\frac{1}{m}})$</p>
<p>$&#x3D;\theta(x) +O(x^{\frac{1}{2}}\log^2 x)$</p>
<p>定理3: 几个式子等价</p>
<p>$\pi(x) \sim \frac{x}{\log x} ,x \to \infty$</p>
<p>$\psi(x) \sim x,x \to \infty$</p>
<p>$\theta(x) \sim x,x \to \infty$</p>
<p>根据上面的结果,只需要证明 第1和第3个式子等价(即相互可以推，但是具体等不等还不知道)</p>
<p>在引理4中,取 $C_n&#x3D;\left\lbrace\begin{array}{lc}1,&amp; n \text{ is prime}\\ 0,&amp; \text{others} \end{array}\right.$,$f(n)&#x3D;\log n$</p>
<p>则$\pi(x)&#x3D;\sum_{n\le x} C_n$,$\theta(x)&#x3D;\sum_{n\le x} C_n\log n$</p>
<p>即$\theta(n)&#x3D;\pi(x)0\log x-\int_{1}^x\frac{\pi(t)}{t}dt$</p>
<p>因为$\frac{\pi(t)}{t}&#x3D;o(1),t\ge \sqrt{x}$</p>
<p>$\theta(n)&#x3D;\pi(x)\log x-\int_{1}^{\sqrt{x}}\frac{\pi(t)}{t}dt-\int_{\sqrt{x}}^x\frac{\pi(t)}{t}dt$</p>
<p>$\theta(n)&#x3D;\pi(x)\log x+O(\sqrt{x})+o(x-\sqrt{x})$</p>
<p>$\theta(n)&#x3D;\pi(x)\log x+o(x)$</p>
<p>$\frac{\theta(n)}{x}&#x3D;\frac{\pi(x)}{\frac{x}{\log x}}+o(1)$</p>
<p>等价性证明了</p>
<p>定理4: $x &gt; 1$则有$\sum_{n\le x}\psi(\frac{x}{n}) &#x3D; \sum_{n\le x}\Lambda(n)[\frac{x}{n}]&#x3D;x\log x-x+O(\log x)$</p>
<p>证: 由于$\log n &#x3D;\sum_{d|n} \Lambda(d)$</p>
<p>所以$\sum_{n\le x}\log n &#x3D; (\Lambda * u)\circ U &#x3D; \Lambda \circ ( u\circ U)&#x3D; \sum_{n\le x}\Lambda(n)[\frac{x}{n}] &#x3D; u\circ (\Lambda \circ U) &#x3D; \sum_{n\le x}\psi(\frac{x}{n})$ 由 引理5 得证</p>
<hr>
<p>$x \log 2+O(\log x)$</p>
<p>$&#x3D;\sum_{n\le x}\log n - 2\sum_{n\le \frac{x}{2}}\log n$,引理5</p>
<p>$&#x3D;\sum_{n\le x}\psi(\frac{x}{n}) - 2\sum_{n\le \frac{x}{2}} \psi(\frac{x}{2n})$,定理4</p>
<p>$&#x3D;\sum_{n\le x}(-1)^{n-1}\psi(\frac{x}{n}) &lt; \psi(x)$, 这里用到了$\psi$单调递增</p>
<p>即存在$A_1 x &lt; \psi(x)$</p>
<p>引理6: $x\ge 1$,则有 $|\sum_{n\le x}\frac{\mu(n)}{n}|\le 1$</p>
<p>证明: 因为(第二章例7) $1&#x3D;\sum_{n\le x}\mu(n)[\frac{x}{n}]&#x3D;\sum_{n\le x}\mu(n)\frac{x}{n}-\sum_{n\le x}\mu(n)\lbrace\frac{x}{n}\rbrace$</p>
<p>$|\sum_{n\le x}\frac{\mu(n)}{n}|&#x3D;\frac{1}{x}|1+\lbrace x\rbrace+\sum_{2\le n\le x}\mu(n)\lbrace\frac{x}{n}\rbrace| \le \frac{1}{x}(1+\lbrace x\rbrace+([x]-1)) &#x3D; 1$</p>
<p>引理7: $x&gt;1$则 $\sum_{n\le x}\frac{\mu(n)}{n}\log \frac{x}{n}&#x3D;O(1)$</p>
<p>证明: $\sum_{k\le \frac{x}{n}}\frac{1}{k}&#x3D;\log \frac{x}{n}+\gamma+O(\frac{n}{x})$</p>
<p>$\sum_{n\le x}\frac{\mu(n)}{n}\log \frac{x}{n}&#x3D;\sum_{n\le x}\frac{\mu(n)}{n}(\sum_{k\le \frac{x}{n}}\frac{1}{k}-\gamma+O(\frac{n}{x}))$</p>
<p>$&#x3D;\sum_{n\le x}\frac{\mu(n)}{n} \sum_{k\le \frac{x}{n}}\frac{1}{k} - \gamma \sum_{n\le x}\frac{\mu(n)}{n}+ O(\frac{1}{x})\sum_{n\le x}\mu(n)$</p>
<p>$&#x3D;\sum_{d\le x}\frac{1}{d} \sum_{n|d} \mu(n) + O(1)+O(1)$, 通过令$d&#x3D;kn$</p>
<p>$&#x3D;\sum_{d\le x}\frac{1}{d} I(d) + O(1)&#x3D;1+O(1)&#x3D;O(1)$</p>
<hr>
<p>$\displaystyle \Lambda(n)&#x3D;\sum_{d|n}\mu(d)\log \frac{n}{d}$</p>
<p>$\displaystyle \psi(x)&#x3D;\Lambda\circ U&#x3D;(\mu * \log)\circ U&#x3D;\mu \circ (\log \circ U)&#x3D;\sum_{n\le x}\mu(n)\sum_{m\le \frac{x}{n}}\log m&#x3D;\sum_{n\le [x]-1}\mu(n)\sum_{m\le \frac{x}{n}}\log m$</p>
<p>$\displaystyle&#x3D;\sum_{n\le [x]-1}\mu(n)(\frac{x}{n}\log \frac{x}{n}-\frac{x}{n}+O(\log \frac{x}{n}))$,根据引理4</p>
<p>$\displaystyle&#x3D;x\sum_{n\le [x]-1}\frac{\mu(n)}{n}\log \frac{x}{n}-x\sum_{n\le [x]-1}\frac{\mu(n)}{n}+\sum_{n\le [x]-1}\mu(n)O(\log \frac{x}{n})$<br>$&#x3D;xO(1)+xO(1)+O(\sum_{n\le x}\log \frac{x}{n}) &#x3D; O(x)$</p>
<p>即存在$A_2 x &gt; \psi(x)$</p>
<p>定理5(Chebyshev定理):  根据定理3和 $A_1x &lt; \psi(x) &lt; A_2x$最初的猜想$C_1\frac{x}{\log x}&lt; \pi(x) &lt; C_2\frac{x}{\log x}$得证</p>
<blockquote>
<p>教材的顺序并不是“正常的研究顺序”，正常的研究顺序这些之间也应该是由表达式知道需要再去求那些引理的估计，引理先行在这里不少是有点先知的感觉</p>
</blockquote>
<p>Chebyshev不等式的应用</p>
<p>定理6: 设$x&gt;1$则$\displaystyle \sum_{n\le x}\frac{\Lambda(n)}{n}&#x3D;\log x+O(1)$,$\displaystyle \sum_{p\le x}\frac{\log p}{p}&#x3D;\log x+O(1)$</p>
<p>$\displaystyle x\sum_{n\le x}\frac{\Lambda(n)}{n}-\sum_{n\le x}\Lambda(n)\lbrace\frac{x}{n}\rbrace&#x3D;\sum_{n\le x}\Lambda(n)[\frac{x}{n}]&#x3D;x\log x+O(x)$</p>
<p>即$\displaystyle \sum_{n\le x}\frac{\Lambda(n)}{n}&#x3D;\frac{1}{x}\sum_{n\le x}\Lambda(n)\lbrace\frac{x}{n}\rbrace + \log x+O(1)\le \frac{1}{x}\sum_{n\le x}\Lambda(n) + \log x+O(1)&#x3D;\log x+O(1)$</p>
<p>$\displaystyle \sum_{n\le x}\frac{\Lambda(n)}{n}&#x3D;\sum_{p\le x}\frac{\log p}{p}+\sum_{p^m\le x,m\ge 2}\frac{\log p}{p^m}$</p>
<p>$\displaystyle \sum_{p^m\le x,m\ge 2}\frac{\log p}{p^m}\le \sum_{p\le x}\log p\sum_{m\ge 2}\frac{1}{p^m}&#x3D;O(\sum_{p\le x}\frac{\log p}{p^2})&#x3D;O(1)$ 得证</p>
<p>定理7: 设$x\ge 2$则存在常数$C_3$使得$\displaystyle \sum_{p\le x}\frac{1}{p}&#x3D;\log \log x+C_3+O(\frac{1}{\log x})$</p>
<p>使用引理4，令: $C_n&#x3D;\frac{[n \text{ is prime}]\log n}{n},f(n)&#x3D;\frac{1}{\log n}$, 因此$\displaystyle S(x)&#x3D;\sum_{n\le x}C_n&#x3D;\sum_{p\le x}\frac{\log p}{p}$</p>
<p>$\displaystyle \sum_{p\le x}\frac{1}{p}&#x3D;\sum_{p\le x}\frac{\log p}{p}\frac{1}{\log p}&#x3D;\frac{S(x)}{\log x}+\int_{2}^x\frac{S(t)}{t\log^2 t}dt$</p>
<p>$&#x3D;\frac{\log x+ O(1)}{\log x}+\int_{2}^x\frac{\log t+ O(1)}{t\log^2 t}dt$</p>
<p>$&#x3D;1+O(\frac{1}{\log x})+\int_{2}^x\frac{1}{t\log  t}dt+\int_{2}^x\frac{ O(1)}{t\log^2 t}dt$</p>
<p>$&#x3D;1+O(\frac{1}{\log x})+(\log \log x - \log \log 2)+(\int_{2}^{\infty} \frac{ O(1)}{t\log^2 t}dt-\int_{x}^{\infty}\frac{ O(1)}{t\log^2 t}dt)$</p>
<p>$&#x3D;1+O(\frac{1}{\log x})+(\log \log x - \log \log 2)+(O(1)+O(\frac{1}{log x}))$</p>
<p>得证</p>
<p>定理8: $x \ge 2$ 则存在常数$C_4$使得$\prod_{p\le x}(1-\frac{1}{p})&#x3D;\frac{C_4}{\log x}+O(\frac{1}{\log ^2 x})$</p>
<p>令$y&#x3D;\prod_{p\le x}(1-\frac{1}{p})$</p>
<p>$\log y&#x3D;\log \prod_{p\le x}(1-\frac{1}{p})&#x3D;\sum_{p\le x}\log(1-\frac{1}{p})$</p>
<p>$&#x3D;\sum_{p\le x}(-\frac{1}{p})+\sum_{p\le x}(\log(1-\frac{1}{p})+\frac{1}{p})$</p>
<p>$&#x3D;-\sum_{p\le x} \frac{1}{p}+\sum_{p}(\log(1-\frac{1}{p})+\frac{1}{p})-\sum_{p &gt; x}(\log(1-\frac{1}{p})+\frac{1}{p})$</p>
<p>$&#x3D;-(\log \log x+C_3+O(\frac{1}{\log x}))+C_5+\sum_{p&gt;x}O(\frac{1}{p^2})$,这里用了$\log x &#x3D; x-\frac{1}{2}x^2+o(x^3)$</p>
<p>$y&#x3D;e^{-\log \log x+C_6+O(\frac{1}{\log x})}&#x3D;\frac{C_4}{\log x}e^{O(\frac{1}{\log x})}&#x3D;\frac{C_4}{\log x}(1+O(\frac{1}{\log x}))&#x3D;\frac{C_4}{\log x}+O(\frac{1}{\log^2 x})$</p>
<h1 id="函数-omega-n-与-Omega-n"><a href="#函数-omega-n-与-Omega-n" class="headerlink" title="函数$\omega(n)$与$\Omega(n)$"></a>函数$\omega(n)$与$\Omega(n)$</h1><p>定理9: $\displaystyle \sum_{n\le x}\omega(n)&#x3D;x\log \log x+C_7 x+O(\frac{x}{\log x})$,$\sum_{n\le x}\Omega(n)&#x3D;x\log \log x+C_8 x+O(\frac{x}{\log x})$</p>
<p>$\displaystyle \sum_{n\le x}\omega(n)&#x3D;\sum_{n\le x}\sum_{p|n}1 &#x3D;\sum_{p\le x}[\frac{x}{p}]&#x3D;x\sum_{p\le x}\frac{1}{p}+O(\pi(x))$</p>
<p>$&#x3D;x(\log \log x+C_3+O(\frac{1}{\log x}))+O(\frac{x}{log x})$</p>
<p>$&#x3D;x\log \log x+C_3x+O(\frac{x}{log x})$</p>
<p>$\displaystyle \sum_{n\le x}\Omega(n) &#x3D; \sum_{n\le x}\sum_{p^k | n}1&#x3D;\sum_{p^k\le x}&#x3D;\sum_{p\le x}[\frac{x}{p}]+\sum_{p^k\le x,k\ge 2}[\frac{x}{p^k}]&#x3D;\sum_{n\le x}\omega(n)+(\sum_{p^k\le x,k\ge 2}\frac{x}{p^k}-\sum_{p^k\le x,k\ge 2}\lbrace\frac{x}{p^k}\rbrace)$</p>
<p>$\displaystyle \sum_{p^k\le x,k\ge 2}\frac{x}{p^k} &#x3D; x\sum_{k&#x3D;2}^{\infty}\sum_{p}\frac{1}{p^k}+O(x\sum_{p&gt;\sqrt{x}}\frac{1}{p^2})&#x3D;C_9x+O(\sqrt{x})$</p>
<p>$\displaystyle \sum_{p^k\le x,k\ge 2}\lbrace\frac{x}{p^k}\rbrace\le  \sum_{p^k\le x,k\ge 2}1 \le \log x \sum_{p &lt; \sqrt{x}}1&#x3D;O(\frac{x}{\log x})$</p>
<p>得证</p>
<p>定理10: $\sum_{n\le x}\omega^2(n)&#x3D;x(\log \log x)^2+O(x\log \log x)$</p>
<p>$\sum_{n\le x}\omega^2(n)$&#x3D;$\sum_{n\le x}\omega(n)+\sum_{n\le x}\omega(n)(\omega(n)-1)$</p>
<p>$&#x3D;O(x\log \log x)+\sum_{n\le x}\sum_{p_1p_2|n,p_1\ne p_2}1$</p>
<p>$&#x3D;O(x\log \log x)+\sum_{n\le x}(\sum_{p_1p_2|n}1-\sum_{p^2|n}1)$</p>
<p>$&#x3D;O(x\log \log x)+\sum_{p_1p_2\le x}[\frac{x}{p_1p_2}]-\sum_{p^2\le x}[\frac{x}{p^2}]$</p>
<p>$&#x3D;O(x\log \log x)+(x\sum_{p_1p_2\le x}\frac{1}{p_1p_2}+O(\sum_{p_1p_2\le x}1))+O(x)$, $(\sum_{p\le \sqrt{x}}\frac{1}{p})^2 \le \sum_{p_1p_2\le x} \le (\sum_{p\le x}\frac{1}{p})^2$</p>
<p>$&#x3D;O(x\log \log x)+x(\log \log x + O(1))^2+O(\sum_{p\le x}\pi(\frac{x}{p}))+O(x)$</p>
<p>$&#x3D;O(x\log \log x)+x((\log \log x)^2 + O(\log \log x))+O(x\log \log x)+O(x)$</p>
<p>$&#x3D;x(\log \log x)^2 + O(x\log \log x)$</p>
<p>定理11(TODO): 任给$\epsilon &gt; 0$,则在区间$[1,x]$中使得$|\omega(n)-\log \log n|&gt; (\log \log n)^{\frac{1}{2}+\epsilon}$ 的个数为$o(x)$</p>
<p>$[1,x]&#x3D;[1,x^{\frac{1}{e}}]+(x^{\frac{1}{e}},x]$, 左侧显然是$o(x)$</p>
<p>$n\in(x^{\frac{1}{e}},x]$时有$\log \log x - 1 &lt; \log \log n \le \log \log x$</p>
<p>注意到$\omega(n)$是整数,所以只用证明$|\omega(n)-\log \log x| \ge (\log \log x)^{\frac{1}{2}+\epsilon}$ 的$n\le x$个数为$o(x)$即可(????$w(n)$不会有覆盖不到边界整数的情况导致n增长质数间距个吗?,但是因为$\sum_{p_i,i\le s}1 \sim \sum_{p_i,i+1\le s}1$所以不担心多一个少一个在均值下量级不变?)</p>
<p>$\sum_{n\le x}(\omega(n)-\log \log x)^2 &#x3D; \sum_{n\le x}\omega^2(n)-2\log \log x\sum_{n\le x}\omega(n)+[x](\log \log x)^2&#x3D;O(x\log \log x)$</p>
<p>若$[1,x]$有$M$个$n$让不等式成立,$M(\log \log x)^{1+2\epsilon} &lt; M(\omega(n)-\log \log x)^2 &#x3D; MO(x\log \log x)&#x3D;O(x\log \log x)$</p>
<p>$M&#x3D;O(\frac{x}{(\log \log x)^{2\epsilon}})$, 得证(??? 大小O 靠epsilon?)</p>
<p>换句话说，在区间$[1,x]$内, 对几乎所有($o(x)$)的$n$恒有$\omega&#x2F;\Omega(n)\sim \log \log n$, 因为上面公式描述的是远离的情况, 而远离的个数是$o(x)$的</p>
<h1 id="Bertrand-假设-1845提出"><a href="#Bertrand-假设-1845提出" class="headerlink" title="Bertrand 假设 (1845提出)"></a>Bertrand 假设 (1845提出)</h1><p>主要内容是$[x,2x]$之间必有素数,被Chebyshev首先证明(1850),<a href="http://math.stanford.edu/~ksound/Math155Spr12/Bertrand.pdf">最简单的证明是由Erdős在1932年发表的</a></p>
<p>引理8: 设$x\ge 2$则$\prod_{p\le x}p &lt; 4^x$</p>
<p>只需要证明$x\text{ is prime}$时成立</p>
<p>归纳法,$x&#x3D;2,3$时成立,若$x &lt; n$的所有奇数都成立</p>
<p>$K&#x3D;\frac{n\pm 1}{2}$(让$K$为奇数), 则$n-K$为偶数,且$n-K &#x3D;2K\pm 1-K \le K+1$</p>
<p>对于$p\in (K,n]$有$p|n!,p\nmid K!,p\nmid (n-K)!$即$p|\frac{n!}{K!(n-K)!}$即$\prod_{K&lt;p\le n}p\le \binom{n}{K} &#x3D; \frac{\binom{n}{K}+\binom{n}{n-K}}{2} &lt; \frac{(1+1)^n}{2} &#x3D; 2^{n-1}$</p>
<p>$\prod_{p\le x}p &#x3D;\prod_{p\le K} p\prod_{K&lt;p\le n}p &lt; 4^K2^{n-1}&#x3D;2^{n+2K-1} \le 4^n$</p>
<p>定理12: $n &gt; 1$则在$[n,2n]$中必有素数</p>
<p>对于$n\le 128$可以枚举证明,对于$n\ge 128$用反证法</p>
<p>若存在$n\ge 128$不成立,因为(Legendre’s formula)</p>
<p>$\displaystyle \binom{2n}{n}&#x3D;\frac{2n!}{n!n!}&#x3D;\prod_{p\le 2n}p^{\alpha_p&#x3D;\sum_{j\ge 1}([\frac{2n}{p^j}]-2[\frac{n}{p^j}])}&#x3D;\prod_{p\le n}p^{\alpha_p}&#x3D;\prod_{p\le \sqrt{2n}}p^{\alpha_p}\prod_{p\in (\sqrt{2n},\frac{2}{3}p]}p^{\alpha_p}\prod_{p\in (\frac{2}{3}n,n]}p^{\alpha_p}$</p>
<p>对于第一个因为$\sum_{j\ge 1}([\frac{2n}{p^j}]-2[\frac{n}{p^j}])$ 中对于每个$j$,括号内为0或1, 且$p^j\le 2n$,所以$\alpha_p\le \log_p 2n$即$\prod_{p\le \sqrt{2n}}p^{\alpha_p} \le \prod_{p\le \sqrt{2n}}2n$</p>
<p>对于第二个,$p^2\ge 2n$同理$\alpha_p \le 1$,$\prod_{p\in (\sqrt{2n},\frac{2}{3}p]}p^{\alpha_p}\le \prod_{p\in (\sqrt{2n},\frac{2}{3}p]}p$</p>
<p>对于第三部分$p^2&gt;2n,1\ &lt; \frac{n}{p} &lt; \frac{3}{2}, 2\le \frac{2n}{p} &lt; 3$同理$\alpha_p&#x3D;[\frac{2n}{p}]-2[\frac{n}{p}]&#x3D;0$</p>
<p>$n\ge 128$时$\sqrt{2n} \ge 16$, 所以有$\pi(\sqrt{2n}) &lt;$ 奇数个数-(9和15) $&#x3D;\frac{\sqrt{2n}+2}{2}-2$</p>
<p>由上$\displaystyle \binom{2n}{n}\le\prod_{p\le \sqrt{2n}}2n\prod_{\sqrt{2n} &lt; p\le\frac{2}{3}n} p &lt; \prod_{p\le \sqrt{2n}}2n\prod_{ &lt; p\le\frac{2}{3}n} p &lt; (2n)^{\sqrt{\frac{n}{2}}-1}4^{\frac{2n}{3}}$<br>又$\binom{2n}{n}$是$(1+1)^{2n}$展开的$2n+1$系数中最大的(注意首尾都是1),因此$2n\binom{2n}{n} &gt; (1+1)^{2n}$</p>
<p>由此有$\frac{2^{2n}}{2n} &lt; \binom{2n}{n} &lt; (2n)^{\sqrt{\frac{n}{2}}-1}4^{\frac{2n}{3}}$, 感觉顺序上是前面的导致了后面的拆分的想法,比如这里的<code>-1</code>什么的</p>
<p>即$2^{\frac{2}{3}n} &lt; (2n)^{\sqrt{\frac{n}{2}}}$</p>
<p>直接取对数建立函数 求导 可证矛盾,得证</p>
<h1 id="函数-M-x-x3D-mu-circ-U"><a href="#函数-M-x-x3D-mu-circ-U" class="headerlink" title="函数$M(x)&#x3D;\mu \circ U$"></a>函数$M(x)&#x3D;\mu \circ U$</h1><p>$M(x)&#x3D;\sum_{n\le x}\mu(n)$, Mertens function</p>
<p>本节主要证明的是$\lim_{x\to\infty}\frac{M(x)}{x}&#x3D;0$ 与$\lim_{x\to \infty}\frac{\pi(x)}{\frac{x}{\log x}}&#x3D;1$ 等价</p>
<p>定理13: $\lim_{x\to\infty}\frac{M(x)}{x}&#x3D;0$ 与$\lim_{x\to \infty}\frac{\sum_{n\le x}\mu(n)\log n}{x\log x}&#x3D;0$ 等价</p>
<p>根据引理4,令$C_n&#x3D;\mu(n),f(n)&#x3D;\log n$, 有</p>
<p>$\displaystyle \sum_{n\le x}\mu(n)\log n &#x3D; M(x)\log x-\int_{1}^x\frac{M(t)}{t}dt&#x3D;M(x)\log x + O(x)$</p>
<p>同时除以$x\log x$即$\frac{M(x)}{x} -\frac{\sum_{n\le x}\mu(n)\log n}{x\log x}&#x3D;O(\frac{1}{\log x})$得证</p>
<p>定理14: 若$\psi(x)\sim x,x\to \infty$则$M(x) &#x3D; o(x),x \to \infty$</p>
<p>因为 $\Lambda(n)&#x3D;-\sum_{d|n}\mu(d)\log d$所以 $-\mu(n)\log n&#x3D;\sum_{d|n}\mu(d)\Lambda(\frac{n}{d})&#x3D;\mu * \Lambda$</p>
<p>根据 二章的 定理17: $-\sum_{n\le x}\mu(n)\log n&#x3D;\sum_{n\le a}\mu(n)\psi(\frac{x}{n})+\sum_{n\le b}\Lambda(n)M(\frac{x}{n})-M(a)\psi(b)$</p>
<p>取$a&#x3D;xe^{-\sqrt{\log x}},b&#x3D;e^{\sqrt{\log x}}$</p>
<p>$n\le a,x\to \infty$时有$\psi(\frac{x}{n})&#x3D;\frac{x}{n}+o(\frac{x}{n})$</p>
<p>$\sum_{n\le a}\mu(n)\psi(\frac{x}{n})&#x3D;x\sum_{x\le a}\frac{\mu(n)}{n}+o(x\sum_{n\le x}\frac{1}{n})&#x3D;O(x)+o(x\log x)&#x3D;o(x\log x)$</p>
<p>$\sum_{n\le b}\Lambda(n)M(\frac{x}{n})&#x3D;O(x\sum_{n\le b}\frac{\Lambda(n)}{n})&#x3D;O(x\log b)+O(x)$ &#x3D;$O(x\sqrt{\log x})+O(x)&#x3D;o(x\log x)$</p>
<p>$M(a)\psi(b)&#x3D;O(a)O(b)&#x3D;O(ab)&#x3D;O(x)&#x3D;o(x\log x)$</p>
<p>即$\psi \sim x\Rightarrow \sum_{n\le x}\mu(n)\log n &#x3D; o(x\log x)\Rightarrow M(x)&#x3D;o(x)$</p>
<p>得证</p>
<p>定理15: $M(x)&#x3D;o(x),x\to \infty$ 包含$\psi(x)\sim x,x\to \infty$, </p>
<blockquote>
<p>这里后面的是上面我们和素数定理等价的定理，上面并没有证明其正确性（上面只有等价关系），这里要证明的是$M(x)&#x3D;o(x)$和素数定理之间的等价关系，所以就要证明互相可以推</p>
</blockquote>
<p>先证明 $\psi(x)&#x3D;x-\sum_{lk\le x}\mu(l)f(k)+O(1)$, 其中$f(n)&#x3D;d(n)-\log n-2\gamma$</p>
<p>首先 $[x]&#x3D;u\circ U,\psi&#x3D;\Lambda \circ U,1&#x3D;I\circ U$,$d(n)&#x3D;\sum_{l|n}1&#x3D;1 * u$,$1&#x3D;\mu * d$,$\Lambda &#x3D; \mu * \log$,$I&#x3D;\mu * u$</p>
<p>$[x]-\psi(x)-2\gamma&#x3D;\sum_{n\le x}(1-\Lambda(n)-2\gamma I(n))$</p>
<p>$&#x3D;\sum_{n\le x} \sum_{l|n} \mu(l)(d(\frac{n}{l})-\log \frac{n}{l}-2\gamma)$</p>
<p>$&#x3D;\sum_{lk\le x}\mu(l)(d(k)-\log k - 2\gamma)$</p>
<p>第一部分得证, 那么剩下的就是要证明$\sum_{lk \le x}\mu(l)f(k) &#x3D; o(x),x\to \infty$</p>
<p>再用第二章定理17:$\sum_{lk \le x}\mu(l)f(k)&#x3D;\sum_{n\le a}\mu(n)F(\frac{x}{n})+\sum_{n\le b}f(n)M(\frac{x}{n})-M(a)F(b)$,其中$F&#x3D;f\circ U,ab&#x3D;x,a&gt;0$</p>
<p>$\forall \epsilon &gt; 0$存在$x_0&#x3D;x_0(\epsilon)$,使$x&gt;x_0$时$|\sum_{lk\le x}\mu(l)f(k)|&lt;\epsilon x$</p>
<p>$F(x)&#x3D;\sum_{n\le x}d(n)-\sum_{n\le x}\log n-2\gamma\sum_{n\le x}1$</p>
<p>$&#x3D;(x\log x+(2\gamma -1)x + O(\sqrt{x}))-(x \log x - x + O(\log x))-2\gamma x&#x3D;O(\sqrt{x})$, (二章定理18+本章引理5)</p>
<p>$\sum_{n\le a}\mu(n)F(\frac{x}{n})\le \sum_{n\le a} 1\cdot (A\sqrt{\frac{x}{n}})\le 2A\sqrt{xa}&#x3D;\frac{2Ax}{\sqrt{b}}$</p>
<p>因为存在常数$B$,$|f(n)|\le B \sqrt{n}$,$M(x)&#x3D;o(x)$存在$x_1&#x3D;x_1(\epsilon)$,当$x&gt;x_1$时$|M(x)|\le \frac{1}{36AB}\epsilon^2 x$</p>
<p>取$a&#x3D;\frac{x}{b},b&#x3D;\frac{36A^2}{\epsilon^2},x_0&#x3D;x_1b$,$x&gt;x_0$时</p>
<p>$|\sum_{n\le b}f(n)M(\frac{x}{n})|\le \sum_{n\le b} |f(n)||M(\frac{x}{n})|$</p>
<p>$\le \frac{\epsilon^2}{36AB}x\sum_{n\le b}\frac{|f(n)|}{n}$</p>
<p>$\le \frac{\epsilon^2}{36A}x\sum_{n\le b}\frac{1}{\sqrt{n}}$</p>
<p>$\le \frac{\epsilon^2}{36A}x\cdot 2\sqrt{b}&#x3D;\frac{\epsilon }{3}x$</p>
<p>综上$|\sum_{lk\le x}\mu(l)f(k)|&lt; \frac{2Ax}{\sqrt{b}} + \frac{\epsilon}{3} x+aA\sqrt{b}&#x3D;\frac{\epsilon}{3} x+\frac{\epsilon}{3} x+\frac{\epsilon}{6} x$得证</p>
<h1 id="函数-L-x-x3D-lambda-circ-U"><a href="#函数-L-x-x3D-lambda-circ-U" class="headerlink" title="函数$L(x)&#x3D;\lambda \circ U$"></a>函数$L(x)&#x3D;\lambda \circ U$</h1><p>定理16: $L(x)&#x3D;\sum_{n\le x}\lambda(n)&#x3D;o(x)$ 与$\sum_{n\le x}\mu(n)&#x3D;o(x)$等价</p>
<p>$\Leftarrow :$</p>
<p>继续第二章定理17:因为$\lambda &#x3D; \mu *[n\text{ is square}]$,令$g(n)&#x3D;n\text{ is square},G&#x3D;g\circ U$</p>
<p>$\displaystyle \sum_{n\le x}\lambda(n)&#x3D;\sum_{n\le x^{\frac{2}{3}}}g(n)M(\frac{x}{n})+\sum_{n\le x^{\frac{1}{3}}}\mu(n)G(\frac{x}{n})-G(x^{\frac{2}{3}})M(x^{\frac{1}{3}})$</p>
<p>$\displaystyle &#x3D;o(x\sum_{n\le x^{\frac{2}{3}}}\frac{g(n)}{n})+O(\sum_{n\le x^{\frac{1}{3}}}G(\frac{x}{n}))+o(x)$</p>
<p>$\displaystyle &#x3D;o(x\sum_{n&#x3D;1}^{\infty} \frac{1}{n^2})+O(\sqrt{x}\sum_{n\le x^{\frac{1}{3}}}\frac{1}{\sqrt{n}})+o(x) &#x3D; o(x)$</p>
<p>$\Rightarrow :$</p>
<p>(二章习题6:) 因为$\mu(n)&#x3D;\sum_{d^2|n}\mu(d)\lambda(\frac{n}{d^2})&#x3D;\sum_{n&#x3D;d^2k}\mu(d)\lambda(k)$</p>
<p>$\displaystyle \sum_{n\le x}\mu(n)&#x3D;\sum_{n\le x}\sum_{n&#x3D;d^2k}\mu(d)\lambda(k)&#x3D;\sum_{d^2k\le x}\mu(d)\lambda(k)&#x3D;\sum_{d\le \sqrt{x}}\mu(d)\sum_{k\le\frac{x}{d^2}}\lambda(k)$</p>
<p>$\displaystyle &#x3D;\sum_{d\le x^{\frac{1}{3}}}\mu(d)\sum_{k\le \frac{x}{d^2}}\lambda(k)+O(\sum_{k\le x^{\frac{1}{3}}}\sum_{d\le \sqrt{\frac{x}{k}}}1)&#x3D;o(x)+o(x)&#x3D;o(x)$</p>
<h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="2-sum-p-frac-1-p-发散"><a href="#2-sum-p-frac-1-p-发散" class="headerlink" title="2. $\sum_{p} \frac{1}{p}$发散"></a>2. $\sum_{p} \frac{1}{p}$发散</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>我想的通过足够大$x$,$C_1\frac{x}{\log x}&lt;\pi(x)&lt;C_2\frac{x}{\log x}$</p>
<p>去考虑足够大$M$对应$\displaystyle \sum_{t&#x3D;1}^{\infty} \sum_{x\in[M(\frac{4C_2}{C_1})^t,M(\frac{4C_2}{C_1})^{t+1}],x\text{ is prime}} \frac{1}{x} \ge$ 分母等差数列求和</p>
<hr>
<p>另一个方法: Cauchy准则 尾段和$s&#x3D;\sum_{p_i,i\ge t}\le \frac{1}{2}$</p>
<p>与前面互质的等差和$\displaystyle \sum_{t&#x3D;1}^{\infty} \frac{1}{1+\prod_{p_i,i&lt;t}} \le$乘法表示$\sum_{t&#x3D;1}^{\infty}s^t\le\sum_{t&#x3D;1}^{\infty} (\frac{1}{2})^t&#x3D;1$ 矛盾</p>

</details>

<h2 id="4-f-x-为整系数多项式-lbrace-f-n-rbrace-有无限个素因子"><a href="#4-f-x-为整系数多项式-lbrace-f-n-rbrace-有无限个素因子" class="headerlink" title="4. $f(x)$为整系数多项式,$\lbrace f(n)\rbrace$有无限个素因子"></a>4. $f(x)$为整系数多项式,$\lbrace f(n)\rbrace$有无限个素因子</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>若$a_0&#x3D;0,p|f(p)$</p>
<p>若$a_0\ne 0$,反证法,若有限$f(a_0\prod_{p_i})&#x3D;a_0(k\prod_{p_i}+1)$, 右侧会出现新质因子</p>

</details>

<h2 id="8-x-ge-2-证-sum-d-le-x-d-2-n-x3D-O-x-log-3-x"><a href="#8-x-ge-2-证-sum-d-le-x-d-2-n-x3D-O-x-log-3-x" class="headerlink" title="8. $x\ge 2$证$\sum_{d\le x} d^2(n)&#x3D;O(x\log^3 x)$"></a>8. $x\ge 2$证$\sum_{d\le x} d^2(n)&#x3D;O(x\log^3 x)$</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>因为$\alpha_1+\alpha_2+1 \le (\alpha_1+1)(\alpha_2+1)$,所以$d(a)d(b) \ge d(ab)$</p>
<p>$\displaystyle \sum_{d\le x}d^2(n)&#x3D;\sum_{d\le x}d(n)\sum_{u|d}1$</p>
<p>$\displaystyle &#x3D;\sum_{u\le x}\sum_{l\le\frac{x}{u}}d(ul)$</p>
<p>$\displaystyle \le \sum_{u\le x}\sum_{l\le\frac{x}{u}}d(u)d(l)$</p>
<p>$\displaystyle &#x3D; \sum_{u\le x}d(u)\sum_{l\le\frac{x}{u}}d(l)$</p>
<p>$\displaystyle &#x3D; O(\sum_{u\le x}d(u)\frac{x}{u}\log \frac{x}{u})$</p>
<p>$\displaystyle &#x3D; O(x\log x)O(\sum_{u\le x}\frac{d(u)}{u})$,习题7证明了后面一半是$O(\frac{1}{2}\log^2 x)$</p>

</details>

<h2 id="9-x-ge-1-则-sum-n-le-x-frac-phi-n-n-x3D-frac-6-pi-2-x-O-log-x"><a href="#9-x-ge-1-则-sum-n-le-x-frac-phi-n-n-x3D-frac-6-pi-2-x-O-log-x" class="headerlink" title="9. $x\ge 1$则$\sum_{n\le x}\frac{\phi(n)}{n}&#x3D;\frac{6}{\pi^2}x+O(\log x)$"></a>9. $x\ge 1$则$\sum_{n\le x}\frac{\phi(n)}{n}&#x3D;\frac{6}{\pi^2}x+O(\log x)$</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>直接上引理4,但是得到的是$\frac{6}{\pi^2}x+O((\log x)^2)$,大了 也就是$\phi(n)$的估计到这里还不够紧凑</p>
<p>$\sum_{n\le x}\frac{\phi(n)}{n}&#x3D;\sum_{n\le x}\frac{1}{n}\sum_{d|n}\mu(d)\frac{n}{d}$, 因为$\phi &#x3D;\mu * e$</p>
<p>$&#x3D;\sum_{n\le x}\sum_{d|n}\frac{\mu(d)}{d}$</p>
<p>$&#x3D;\sum_{d\le x}\frac{\mu(d)}{d} [\frac{x}{d}]$</p>
<p>$&#x3D;\sum_{d\le x}\frac{\mu(d)}{d} \frac{x}{d}-\sum_{d\le x}\frac{\mu(d)}{d}\lbrace \frac{x}{d}\rbrace$</p>
<p>$&#x3D;x\sum_{d\le x}\frac{\mu(d)}{d^2}+O(\sum_{d\le x}\frac{1}{d})$</p>
<p>$&#x3D;\frac{6}{\pi^2}x+O(\log x)$</p>

</details>

<h2 id="10-使用-frac-n-phi-n-x3D-prod-p-n-1-frac-1-p-1-x3D-sum-d-n-frac-mu-2-d-phi-d-1-证明-sum-n-le-x-frac-n-phi-n-x3D-O-x-sum-n-le-x-frac-1-phi-n-x3D-O-log-x"><a href="#10-使用-frac-n-phi-n-x3D-prod-p-n-1-frac-1-p-1-x3D-sum-d-n-frac-mu-2-d-phi-d-1-证明-sum-n-le-x-frac-n-phi-n-x3D-O-x-sum-n-le-x-frac-1-phi-n-x3D-O-log-x" class="headerlink" title="10. 使用$\frac{n}{\phi(n)}&#x3D;\prod_{p|n}(1-\frac{1}{p})^{-1}&#x3D;(\sum_{d|n}\frac{\mu^2(d)}{\phi(d)})^{-1}$,证明$\sum_{n\le x} \frac{n}{\phi(n)}&#x3D;O(x)$,$\sum_{n\le x}\frac{1}{\phi(n)}&#x3D;O(\log x)$"></a>10. 使用$\frac{n}{\phi(n)}&#x3D;\prod_{p|n}(1-\frac{1}{p})^{-1}&#x3D;(\sum_{d|n}\frac{\mu^2(d)}{\phi(d)})^{-1}$,证明$\sum_{n\le x} \frac{n}{\phi(n)}&#x3D;O(x)$,$\sum_{n\le x}\frac{1}{\phi(n)}&#x3D;O(\log x)$</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>$\displaystyle \frac{n}{\phi(n)}&#x3D;\prod_{p|n}(1-\frac{1}{p})^{-1}&#x3D;\prod_{p|n}(\frac{p}{p-1})&#x3D;\prod_{p|n}(\frac{p^{\alpha_p+1}-1}{p-1}\frac{p^{\alpha_p+1}}{p^{\alpha_p+1}-1}\frac{1}{p^{\alpha_p}})$</p>
<p>$\displaystyle &#x3D;\sigma(n) (\prod_{p|n}\frac{1}{1-\frac{1}{p^{\alpha_p+1}}}) \frac{1}{n}$</p>
<p>$\displaystyle \le \frac{\sigma(n)}{n} (\prod_{p|n}\sum_{i&#x3D;0}^{\infty} \frac{1}{p^{2i}})$</p>
<p>$\displaystyle \le \frac{\sigma(n)}{n} (\sum_{j&#x3D;1}^{\infty}  \frac{1}{p^{2j}}) &#x3D; \frac{\pi^2}{6}\frac{\sigma(n)}{n}$</p>
<p>$\displaystyle \sum_{n\le x}\frac{n}{\phi(n)}\le \frac{\pi^2}{6} \sum_{n\le x}\frac{\sigma(n)}{n}$</p>
<p>$\displaystyle \sum_{n\le x}\frac{\sigma(n)}{n}&#x3D;\frac{1}{x}(\frac{\pi^2}{12} x^2 + O(x\log x))+\int_{1}^{x}\frac{\frac{\pi^2}{12} t^2 + O(t\log t)}{t^2}dt$, (第二章定理19)</p>
<p>$&#x3D;O(x)$</p>
<p>后面直接同样 引理4就好了</p>

</details>

<h2 id="15-sum-p-x-frac-log-p-p-x3D-O-log-log-x"><a href="#15-sum-p-x-frac-log-p-p-x3D-O-log-log-x" class="headerlink" title="15. $\sum_{p|x}\frac{\log p}{p}&#x3D;O(\log \log x)$"></a>15. $\sum_{p|x}\frac{\log p}{p}&#x3D;O(\log \log x)$</h2><blockquote>
<p>教材这里写错了,同时用了n和x</p>
</blockquote>
<details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>$\sum_{p|x}\frac{\log p}{p} &#x3D; \sum_{p|x,p \le \log x}\frac{\log p}{p} + \sum_{p|x,p &gt; \log x}\frac{\log p}{p}$</p>
<p>$\le \sum_{p \le \log x}\frac{\log p}{p} + \sum_{p|x,p &gt; \log x}\frac{\log \log x}{\log x}$, 用到$\frac{\log x}{x}$的增减区间,上面也是根据增减区间切割的</p>
<p>$\le (\log \log x+O(1))+\log_{\log x} x\cdot \frac{\log \log x}{\log x}$,定理6</p>
<p>$&#x3D;O(\log \log x)$</p>

</details>

<h2 id="16-n-ge-3-sum-d-n-frac-mu-d-log-d-d-x3D-O-log-log-n"><a href="#16-n-ge-3-sum-d-n-frac-mu-d-log-d-d-x3D-O-log-log-n" class="headerlink" title="16. $n\ge 3$,$\sum_{d|n}\frac{\mu(d)\log d}{d}&#x3D;O(\log \log n)$"></a>16. $n\ge 3$,$\sum_{d|n}\frac{\mu(d)\log d}{d}&#x3D;O(\log \log n)$</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>$\displaystyle \sum_{d|n}\frac{\mu(d)\log d}{d}&#x3D;\sum_{d|n}\frac{\mu(d)}{d}\sum_{p|d}\log p$</p>
<p>$\displaystyle &#x3D;\sum_{p|n} \log p \sum_{p|d,d|n}\frac{\mu(d)}{d}$</p>
<p>$\displaystyle &#x3D;\sum_{p|n} \frac{\log p}{p} (-\sum_{t|\frac{n}{p^{\alpha_p}}}\frac{\mu(t)}{t})$</p>
<p>$\displaystyle &#x3D;O(\sum_{p|n} \frac{\log p}{p})$, 因为$\displaystyle \sum_{t|n}\frac{\mu(t)}{t} &#x3D; \frac{1}{n}\sum_{t|n}\mu(t)\frac{n}{t}&#x3D;\frac{(\mu * e)(n)}{n}&#x3D;\frac{\phi(n)}{n} \le 1$</p>
<p>由题目15可证</p>
<blockquote>
<p>还是觉得好怪啊, 这样看的话，当给定了$p$的集合以后 左边因为$\mu(d)$ 只有一次方以内的组合才不是$0$,就是一个定值了,而$\log \log n$是无限增长的,不过一个无限增长的当然是可以框住有限的,但实际上是从n的增长来看的,那么左侧就会忽大忽小</p>
</blockquote>

</details>

<h2 id="17-试证存在常数-C-n-ge-3-时-phi-n-gt-C-frac-n-log-log-n"><a href="#17-试证存在常数-C-n-ge-3-时-phi-n-gt-C-frac-n-log-log-n" class="headerlink" title="17. 试证存在常数$C$,$n\ge 3$时$\phi(n)&gt;C\frac{n}{\log \log n}$"></a>17. 试证存在常数$C$,$n\ge 3$时$\phi(n)&gt;C\frac{n}{\log \log n}$</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>取$q&#x3D;A\omega(n)\log(3\omega(n))$<br>$\pi(q)\ge C_1\frac{q}{\log q}&#x3D;C_1\frac{A\omega(n)\log(3\omega(n))}{\log (A\omega(n)\log(3\omega(n)))}&#x3D;\omega(n) \frac{AC_1}{\frac{\log (A\omega(n))}{\log(3\omega(n))}+\frac{\log\log(3\omega(n))}{\log(3\omega(n))}}$<br>分母大于 1+0, 所以A取足够大时, 右边有正的下界</p>
<p>$\pi(q) \ge \omega(n)$</p>
<p>$q&#x3D;A\omega(n)\log 3\omega(n)\le A\log_2n\log(3\log_2n)\le C_2\log n\log \log n$</p>
<p>$\frac{\phi(n)}{n}&#x3D;\prod_{p|n}(1-\frac{1}{p})\ge\prod_{p\le q}(1-\frac{1}{p})$</p>
<p>$&#x3D;\frac{C_4}{\log q}+O(\frac{1}{\log^2 q})$, 根据定理8</p>
<p>$\ge \frac{C_5}{\log q}$</p>
<p>$\ge \frac{C_6}{\log(C_2\log n\log \log n)}$</p>
<p>$\ge \frac{C_7}{\log\log n}$</p>

</details>

<h2 id="18-displaystyle-sum-n-x3D-1-infty-frac-mu-n-n-s-x3D-frac-1-zeta-s-displaystyle-sum-n-x3D-1-infty-frac-d-n-n-s-x3D-zeta-2-s-displaystyle-sum-n-x3D-1-infty-frac-Lambda-n-n-s-x3D-frac-zeta’-s-zeta-s"><a href="#18-displaystyle-sum-n-x3D-1-infty-frac-mu-n-n-s-x3D-frac-1-zeta-s-displaystyle-sum-n-x3D-1-infty-frac-d-n-n-s-x3D-zeta-2-s-displaystyle-sum-n-x3D-1-infty-frac-Lambda-n-n-s-x3D-frac-zeta’-s-zeta-s" class="headerlink" title="18.  $\displaystyle \sum_{n&#x3D;1}^{\infty}\frac{\mu(n)}{n^s}&#x3D;\frac{1}{\zeta(s)}$ ,$\displaystyle \sum_{n&#x3D;1}^{\infty}\frac{d(n)}{n^s}&#x3D;\zeta^2(s)$, $\displaystyle \sum_{n&#x3D;1}^{\infty}\frac{\Lambda(n)}{n^s}&#x3D;-\frac{\zeta’ (s)}{\zeta(s)}$"></a>18.  $\displaystyle \sum_{n&#x3D;1}^{\infty}\frac{\mu(n)}{n^s}&#x3D;\frac{1}{\zeta(s)}$ ,$\displaystyle \sum_{n&#x3D;1}^{\infty}\frac{d(n)}{n^s}&#x3D;\zeta^2(s)$, $\displaystyle \sum_{n&#x3D;1}^{\infty}\frac{\Lambda(n)}{n^s}&#x3D;-\frac{\zeta’ (s)}{\zeta(s)}$</h2><p>$\zeta(s)&#x3D;\sum_{n&#x3D;1}^{\infty} \frac{1}{x^s}$ Riemann函数</p>
<details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>(1) $\displaystyle &#x3D;\frac{1}{\prod_{p}\sum_{j&#x3D;0}^{\infty} \frac{1}{p^{sj}}}&#x3D;$</p>
<p>(2) $\displaystyle &#x3D;\prod_{p}\sum_{i&#x3D;0}^{\infty}\frac{i+1}{(p^s)^i}&#x3D;$</p>
<p>(3) $\displaystyle &#x3D;\sum_{p}\log p\sum_{i&#x3D;1}^{\infty}\frac{1}{(p^s)^i}&#x3D;\sum_{p}\log p\frac{\frac{1}{p^s}}{1-\frac{1}{p^s}}$</p>
<p>$&#x3D;(\int_{0}^s \sum_{p}\log p\frac{\frac{1}{p^t}}{1-\frac{1}{p^t}} dt)’$</p>
<p>$&#x3D;(\sum_{p} \int_{0}^s \frac{d(1-\frac{1}{p^t})}{1-\frac{1}{p^t}})’$</p>
<p>$&#x3D;(\sum_{p} \log (1-\frac{1}{p^s}))’$</p>
<p>$&#x3D;(-\sum_{p} \log \frac{1}{1-\frac{1}{p^s}})’$</p>
<p>$&#x3D;(-\zeta(s))’$</p>
<p>得证</p>

</details>

<h2 id="19-sum-n-x3D-1-infty-frac-mu-n-n-x3D-0-与-M-x-x3D-o-x-等价"><a href="#19-sum-n-x3D-1-infty-frac-mu-n-n-x3D-0-与-M-x-x3D-o-x-等价" class="headerlink" title="19. $\sum_{n&#x3D;1}^{\infty} \frac{\mu(n)}{n}&#x3D;0$ 与$M(x)&#x3D;o(x)$等价"></a>19. $\sum_{n&#x3D;1}^{\infty} \frac{\mu(n)}{n}&#x3D;0$ 与$M(x)&#x3D;o(x)$等价</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>$\Rightarrow$:</p>
<p>$M(x)&#x3D;\sum_{n\le x}\mu(n)$</p>
<p>$&#x3D;\sum_{n\le x}\frac{\mu(n)}{n}n$</p>
<p>$&#x3D;x o(1)-\int_{1}^{x} o(1) dt &#x3D;o(x)$</p>
<p>$\Leftarrow$ :</p>
<blockquote>
<p>$\sum_{n&#x3D;1}^{\infty}\mu(n)\frac{1}{n}&#x3D;\frac{1}{x} o(x)+\int_{1}^{x}\frac{o(t)}{t^2}dt$ 太大不行</p>
</blockquote>
<p>TODO</p>

</details>

<h2 id="20-sum-n-le-x-frac-1-Lambda-n-n-x3D-2-gamma-o-1-和素数定理等价"><a href="#20-sum-n-le-x-frac-1-Lambda-n-n-x3D-2-gamma-o-1-和素数定理等价" class="headerlink" title="20. $\sum_{n\le x}\frac{1-\Lambda(n)}{n}&#x3D;2\gamma +o(1)$和素数定理等价"></a>20. $\sum_{n\le x}\frac{1-\Lambda(n)}{n}&#x3D;2\gamma +o(1)$和素数定理等价</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>
<p>$\Rightarrow$: $\sum_{n\le x}\frac{1}{n}&#x3D;\log x+\gamma+O(\frac{1}{x})$ 和 定理4 有$\psi(x)&#x3D;x+o(x)$</p>
<p>$\Leftarrow$:</p>
<p>TODO</p>

</details>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本章的核心是 Cheybyshev定理 存在两个正常数使得$C_1\frac{x}{\log x}&lt; \pi(x) &lt; C_2\frac{x}{\log x}$  , 以及围绕着 素数定理 $\pi(x) \sim \frac{x}{\log x} ,x \to \infty$ 有关的几个等价的定理 </p>
<p>first Chebyshev function: $\theta(x) &#x3D;\sum_{p\le x} \log p\sim x,x \to \infty$ </p>
<p>second Chebyshev function: $\displaystyle \psi(x) &#x3D; \Lambda \circ U \sim x,x\to \infty$,</p>
<p>Mertens function:$M(x)&#x3D; \mu \circ U&#x3D;o(x),x\to \infty$ </p>
<p>$L(x)&#x3D;\lambda \circ U&#x3D;o(x),x\to \infty$</p>
<p>以及</p>
<p>定理9: $\displaystyle \sum_{n\le x}\omega(n)&#x3D;x\log \log x+C_7 x+O(\frac{x}{\log x})$,$\sum_{n\le x}\Omega(n)&#x3D;x\log \log x+C_8 x+O(\frac{x}{\log x})$</p>
<p>Bertrand假设: 主要内容是$[x,2x]$之间必有素数</p>
]]></content>
      <categories>
        <category>数论</category>
        <category>数论基础</category>
      </categories>
      <tags>
        <tag>数论基础</tag>
        <tag>$\pi(x)$</tag>
        <tag>Chebyshev定理</tag>
        <tag>$\Omega(n)$</tag>
        <tag>$\omega(n)$</tag>
        <tag>Bertrand 假设</tag>
        <tag>M(x)</tag>
        <tag>L(x)</tag>
      </tags>
  </entry>
  <entry>
    <title>数论基础 四 同余</title>
    <url>/Math/number_theory_4/</url>
    <content><![CDATA[<p>ISBN 9787040364729</p>
<span id="more"></span>

<h1 id="1-概念及基本性质"><a href="#1-概念及基本性质" class="headerlink" title="1.概念及基本性质"></a>1.概念及基本性质</h1><p>定义1: 正整数$m$称为模,$a,b$为任意两个整数, 若它们被$m$除后所得余数相同,则称作同余,记作$a\equiv b\pmod m$,否则$a\not \equiv b\pmod p$</p>
<p>定理1: 上式等价于$m|(a-b)$, 根据第一章除法性质唯一余数</p>
<p>基本性质:</p>
<ul>
<li>$a\equiv a\pmod m$</li>
<li>$a\equiv b\pmod m \Leftrightarrow b\equiv a\pmod m$</li>
<li>$a\equiv b\pmod m,b\equiv c\pmod m\Rightarrow a\equiv c\pmod m$</li>
<li>$a_i\equiv b_i\pmod m \Rightarrow \sum {a_i}\equiv \sum b_i\pmod m$</li>
<li>$a_i\equiv b_i\pmod m \Rightarrow \prod {a_i}\equiv \prod b_i\pmod m$</li>
<li>$ab\equiv bd\pmod m,c\equiv d\pmod m,\gcd(c,m)&#x3D;1 \Rightarrow a\equiv b\pmod m$</li>
</ul>
<p>定理2: $A_{\alpha_1,\alpha_2,\cdots,\alpha_k}\equiv B_{\alpha_1,\alpha_2,\cdots,\alpha_k}\pmod m,x_i\equiv y_i\pmod m\Rightarrow \sum A_{\alpha_1,\alpha_2,\cdots,\alpha_k}\prod x_i^{\alpha_i}\equiv B_{\alpha_1,\alpha_2,\cdots,\alpha_k}\prod y_i^{\alpha_i}\pmod m$<br>例1: $K$为正整数, 试着求为9的整除判别法</p>
<p>$K&#x3D;\sum_{i\in[0,l]}10^i a_i,10^i\equiv 1 \pmod 9$</p>
<p>由定理2: $K &#x3D; \sum_{i\in [0,l]}a_i\pmod 9$</p>
<p>定理3: $K\ne 0$, $a\equiv b\pmod m \Leftrightarrow aK\equiv bK \pmod {Km}$</p>
<p>定理4: 社$aC\equiv bC \pmod m, d&#x3D;\gcd(m,C)$则 $a\equiv b \pmod{\frac{m}{d}}$ </p>
<p>$m|C(a-b) \Rightarrow \frac{m}{d} | \frac{C}{d}(a-b) \Rightarrow \frac{m}{d}|(a-b)$</p>
<p>定理5: $d\ne 0, d|m , a\equiv b\pmod m \Rightarrow a\equiv b \pmod d$</p>
<p>定理6: $a\equiv b\pmod {m_1},a\equiv b\pmod {m_2} \Leftrightarrow a\equiv b \pmod{\mathrm{lcm}(m_1,m_2)}$</p>
<p>定理7: $a\equiv b\pmod m \Rightarrow \gcd(a,m)&#x3D;\gcd(b,m)$</p>
<h1 id="2-剩余类及剩余系"><a href="#2-剩余类及剩余系" class="headerlink" title="2.剩余类及剩余系"></a>2.剩余类及剩余系</h1><p>定义2: 对$m$同余的整数的集合 剩余类（同余类）,（如果和$m$互素,则互素剩余类）, 可以分成$m$个剩余类</p>
<p>定义3: 每个剩余类中任取一个数,组成的叫做模$m$的完全剩余系, (在每个和$m$互素的剩余类中任取一个,叫做简化(互素)剩余系)</p>
<p>$0,1,\cdots,m-1$称作模$m$的最小非负完全剩余系</p>
<p>把大于$\frac{m}{2}$的变成负的，则称作模$m$的绝对最小完全系</p>
<p>素数的常用简化系$1,2,\cdots,p-1$</p>
<p>定理8: $m$个整数组成模$m$的一个完全系的充要条件是这$m$个数两两对模$m$不同余</p>
<p>定理9: $\phi(m)$个整数组成模$m$的一个简化系的充要条件是,这些数与$m$互素,且它们对模$m$两两不同余</p>
<p>定理10: $m$自然数,$K,l$为任意整数,$\gcd(K,m)&#x3D;1$,则当$x$通过$m$的完全系时,$Kx+l$也通过$m$的完全系, (通过$x$不同余得到$Kx+l$不同余可证明</p>
<p>定理11: $m$为自然数,$K,l$为任意整数,$\gcd(K,m)&#x3D;1$,则当$x$通过$m$的简化系时,$Kx+lm$也通过$m$的简化系,(同样，多证明一个和$m$的$\gcd$即可)</p>
<p>定理12: $m_1,m_2$为自然数$(m_1,m_2)&#x3D;1$,当$x,y$分别通过模$m_1,m_2$的完全(简化)系时,$m_2x+m_1y$通过模$m&#x3D;m_1m_2$的完全(简化)系</p>
<p>定理13(Euler): 设$m &gt; 1,\gcd(a,m)&#x3D;1$则$a^{\phi(m)}\equiv 1\pmod m$</p>
<p>证明:</p>
<p>$x_1,x_2,\cdots,x_{\phi(m)}$为一个简化系, </p>
<p>$ax_1,ax_2,\cdots,ax_{\phi(m)}$为一个简化系, 定理11</p>
<p>$\prod x_i\equiv \prod ax_i \pmod m$</p>
<p>$\prod x_i\equiv a^{\phi(m)}\prod x_i \pmod m$</p>
<p>$1 \equiv a^{\phi(m)} \pmod m$</p>
<p>定理14(Fermat): 若$m&#x3D;p$为素数,则$a^{p-1}\equiv 1 \pmod p$</p>
<p>重要应用, $f(n)$为模$m$为周期的数论函数</p>
<p>$\displaystyle F(m)&#x3D;\sum_{x\pmod m} f(x)$ 表示对模$m$的一个完全系求和</p>
<p>$\displaystyle G(m)&#x3D;\sum_{x\pmod m}’ f(x)$ 表示对模$m$的一个简化系求和</p>
<p>定理15: $\displaystyle \sum_{x\pmod m} f(x)&#x3D;\sum_{x\pmod m} f(Kx+l),\gcd(K,m)&#x3D;1$,$\displaystyle \sum_{x\pmod m}’ f(x)&#x3D;\sum_{x\pmod m}’ f(Kx+l),\gcd(K,m)&#x3D;1$</p>
<p>定理16: 设$f(n)&#x3D;e^{2\pi i\frac{n}{m}}$,则$F(m),G(m)$均为可乘函数</p>
<h1 id="3-同余方程的一般概念，一次同余方程"><a href="#3-同余方程的一般概念，一次同余方程" class="headerlink" title="3. 同余方程的一般概念，一次同余方程"></a>3. 同余方程的一般概念，一次同余方程</h1><h1 id="4-孙子定理"><a href="#4-孙子定理" class="headerlink" title="4. 孙子定理"></a>4. 孙子定理</h1><h1 id="5-多项式的恒等同余"><a href="#5-多项式的恒等同余" class="headerlink" title="5. 多项式的恒等同余"></a>5. 多项式的恒等同余</h1><h1 id="6-模p的高次同余方程"><a href="#6-模p的高次同余方程" class="headerlink" title="6. 模p的高次同余方程"></a>6. 模p的高次同余方程</h1><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="2-xxxx"><a href="#2-xxxx" class="headerlink" title="2. xxxx"></a>2. xxxx</h2><details class="note info no-icon"><summary><p>Proof</p>
</summary>

</details>]]></content>
      <categories>
        <category>数论</category>
        <category>数论基础</category>
      </categories>
      <tags>
        <tag>数论基础</tag>
        <tag>欧拉定理</tag>
        <tag>费马小定理</tag>
      </tags>
  </entry>
  <entry>
    <title>魔方</title>
    <url>/Math/rubicks_cube/</url>
    <content><![CDATA[<h1 id="魔方"><a href="#魔方" class="headerlink" title="魔方"></a>魔方</h1><p>不知道魔方公式的情况下,用数学解决魔方</p>
<span id="more"></span>
<h2 id="3阶"><a href="#3阶" class="headerlink" title="3阶"></a>3阶</h2><p>建模, 颜色映射成0-5</p>
<p>方法1: 6 * 9&#x3D;54个面 一维向量, 对于每个操作建立一个54x54转移矩阵</p>
<p>方法2: 直接54个面的中心的三维坐标, 用旋转矩阵</p>
<p>方法3: 直接9个块,每次操作是对给定块的旋转变化</p>
<hr>
<p>核心逻辑</p>
<ul>
<li>状态输入</li>
<li>建模</li>
<li>多阶段目标的逐级加深的深搜</li>
</ul>
<p>多阶段目标可以自由选取,这里先采用常用公式的目标:</p>
<ul>
<li>单层</li>
<li>双层</li>
<li>顶十字</li>
<li>顶面</li>
<li>顶角</li>
<li>顶棱</li>
</ul>
<p>然而作为多阶段实现,这里其实还可以更细</p>
<ul>
<li>底部棱个数 1-&gt;4</li>
<li>底部棱完成,角1-&gt;4</li>
<li>第二层完成个数1-&gt;4</li>
<li>顶十字1-&gt;4</li>
<li>顶面角颜色1-&gt;4</li>
<li>顶角交换1-&gt;4</li>
<li>顶棱1-&gt;4</li>
</ul>
<p>注意的是,这里可能有些情况是不存在的,但是这里主要是对当前魔方姿态 给一个进度评价,不存在的状态永远不会作为入参而已</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="版本0-支持初始状态-和-命令行展示当前状态"><a href="#版本0-支持初始状态-和-命令行展示当前状态" class="headerlink" title="版本0: 支持初始状态 和 命令行展示当前状态"></a>版本0: 支持初始状态 和 命令行展示当前状态</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"><span class="keyword">from</span> colorama <span class="keyword">import</span> Fore, Style</span><br><span class="line"></span><br><span class="line"><span class="comment">#  U</span></span><br><span class="line"><span class="comment"># LFRB</span></span><br><span class="line"><span class="comment">#  D</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  0</span></span><br><span class="line"><span class="comment"># 1234</span></span><br><span class="line"><span class="comment">#  5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   黄</span></span><br><span class="line"><span class="comment"># 蓝红绿橙</span></span><br><span class="line"><span class="comment">#   白</span></span><br><span class="line">YELLOW = <span class="number">0</span></span><br><span class="line">BLUE = <span class="number">1</span></span><br><span class="line">RED = <span class="number">2</span></span><br><span class="line">GREEN = <span class="number">3</span></span><br><span class="line">ORANGE = <span class="number">4</span></span><br><span class="line">WHITE = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">CUBE = <span class="type">List</span>[<span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]]  <span class="comment"># ULFRBD</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid</span>(<span class="params">cube</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">len</span>(cube) == <span class="number">6</span></span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> face <span class="keyword">in</span> cube:</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(face) == n</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> face:</span><br><span class="line">      <span class="keyword">assert</span> <span class="built_in">len</span>(row) == n</span><br><span class="line">      <span class="keyword">for</span> v <span class="keyword">in</span> row:</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">0</span> &lt;= v <span class="keyword">and</span> v &lt; <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">color_print</span>(<span class="params">v: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  v2c = &#123;</span><br><span class="line">      YELLOW: Fore.YELLOW,</span><br><span class="line">      BLUE: Fore.BLUE,</span><br><span class="line">      RED: Fore.RED,</span><br><span class="line">      GREEN: Fore.GREEN,</span><br><span class="line">      ORANGE: Fore.MAGENTA,  <span class="comment"># 紫色, 品红</span></span><br><span class="line">      WHITE: Fore.WHITE,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;v2c[v]&#125;</span>o<span class="subst">&#123;Style.RESET_ALL&#125;</span>&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_arr</span>(<span class="params">cube: CUBE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  valid(cube)</span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="comment"># UP</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      color_print(cube[<span class="number">0</span>][i][j])</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">  <span class="comment"># LFRB</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">5</span>):</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        color_print(cube[k][i][j])</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># DOWN</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      color_print(cube[<span class="number">5</span>][i][j])</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">cube: CUBE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  valid(cube)</span><br><span class="line">  show_arr(cube)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">solve([</span><br><span class="line">    [  <span class="comment"># UP</span></span><br><span class="line">        [RED, ORANGE, GREEN], [YELLOW, YELLOW, ORANGE], [BLUE, WHITE, ORANGE]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 左</span></span><br><span class="line">        [BLUE, GREEN, YELLOW], [RED, BLUE, YELLOW], [WHITE, ORANGE, RED]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 前</span></span><br><span class="line">        [ORANGE, RED, WHITE], [RED, RED, YELLOW], [YELLOW, WHITE, RED]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 右</span></span><br><span class="line">        [BLUE, GREEN, WHITE], [BLUE, GREEN, BLUE], [WHITE, BLUE, YELLOW]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 后</span></span><br><span class="line">        [ORANGE, YELLOW, YELLOW], [RED, ORANGE, GREEN], [ORANGE, BLUE, GREEN]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 下</span></span><br><span class="line">        [GREEN, GREEN, BLUE], [WHITE, WHITE, ORANGE], [RED, WHITE, GREEN]</span><br><span class="line">    ],</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<h4 id="版本1-初始化-到3维坐标的映射-旋转矩阵-3d展示"><a href="#版本1-初始化-到3维坐标的映射-旋转矩阵-3d展示" class="headerlink" title="版本1: 初始化 到3维坐标的映射,旋转矩阵,3d展示"></a>版本1: 初始化 到3维坐标的映射,旋转矩阵,3d展示</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span>, <span class="type">List</span>, <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#  U</span></span><br><span class="line"><span class="comment"># LFRB</span></span><br><span class="line"><span class="comment">#  D</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  0</span></span><br><span class="line"><span class="comment"># 1234</span></span><br><span class="line"><span class="comment">#  5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   黄</span></span><br><span class="line"><span class="comment"># 蓝红绿橙</span></span><br><span class="line"><span class="comment">#   白</span></span><br><span class="line">YELLOW = <span class="number">0</span></span><br><span class="line">BLUE = <span class="number">1</span></span><br><span class="line">RED = <span class="number">2</span></span><br><span class="line">GREEN = <span class="number">3</span></span><br><span class="line">ORANGE = <span class="number">4</span></span><br><span class="line">WHITE = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">CUBE = <span class="type">List</span>[<span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]]  <span class="comment"># ULFRBD</span></span><br><span class="line"><span class="comment"># [x][y][z] =&gt; (color,xyz扩展方向)</span></span><br><span class="line">CUBE3D = <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="type">List</span>[<span class="built_in">int</span>]]]]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid</span>(<span class="params">cube</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">len</span>(cube) == <span class="number">6</span></span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> face <span class="keyword">in</span> cube:</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(face) == n</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> face:</span><br><span class="line">      <span class="keyword">assert</span> <span class="built_in">len</span>(row) == n</span><br><span class="line">      <span class="keyword">for</span> v <span class="keyword">in</span> row:</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">0</span> &lt;= v <span class="keyword">and</span> v &lt; <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_3ds</span>(<span class="params">cube_3ds: <span class="type">List</span>[CUBE3D]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  cnt = <span class="built_in">len</span>(cube_3ds)</span><br><span class="line">  fig = plt.figure()</span><br><span class="line">  colors = [<span class="string">&#x27;#FFFF00&#x27;</span>, <span class="string">&#x27;#0000FF&#x27;</span>, <span class="string">&#x27;#FF0000&#x27;</span>, <span class="string">&#x27;#00FF00&#x27;</span>, <span class="string">&#x27;#FF681F&#x27;</span>, <span class="string">&#x27;#FFFFFF&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt):</span><br><span class="line">    cube_3d = cube_3ds[i]</span><br><span class="line">    ax = fig.add_subplot(<span class="number">1</span>, cnt, i+<span class="number">1</span>, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x, yzv <span class="keyword">in</span> cube_3d.items():</span><br><span class="line">      <span class="keyword">for</span> y, zv <span class="keyword">in</span> yzv.items():</span><br><span class="line">        <span class="keyword">for</span> z, v <span class="keyword">in</span> zv.items():</span><br><span class="line">          c, dxyz = v</span><br><span class="line">          dx, dy, dz = dxyz</span><br><span class="line">          <span class="keyword">if</span> dx == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x, x], [x, x]])</span><br><span class="line">            Y = np.array([[y-<span class="number">1</span>, y+<span class="number">1</span>], [y-<span class="number">1</span>, y+<span class="number">1</span>]])</span><br><span class="line">            Z = np.array([[z-<span class="number">1</span>, z-<span class="number">1</span>], [z+<span class="number">1</span>, z+<span class="number">1</span>]])</span><br><span class="line">          <span class="keyword">elif</span> dy == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x-<span class="number">1</span>, x+<span class="number">1</span>], [x-<span class="number">1</span>, x+<span class="number">1</span>]])</span><br><span class="line">            Y = np.array([[y, y], [y, y]])</span><br><span class="line">            Z = np.array([[z-<span class="number">1</span>, z-<span class="number">1</span>], [z+<span class="number">1</span>, z+<span class="number">1</span>]])</span><br><span class="line">          <span class="keyword">elif</span> dz == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x-<span class="number">1</span>, x+<span class="number">1</span>], [x-<span class="number">1</span>, x+<span class="number">1</span>]])</span><br><span class="line">            Y = np.array([[y-<span class="number">1</span>, y-<span class="number">1</span>], [y+<span class="number">1</span>, y+<span class="number">1</span>]])</span><br><span class="line">            Z = np.array([[z, z], [z, z]])</span><br><span class="line">          ax.plot_surface(</span><br><span class="line">              X, Y, Z, color=colors[c])</span><br><span class="line"></span><br><span class="line">  plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_res</span>(<span class="params">res: CUBE3D, x: <span class="built_in">int</span>, y: <span class="built_in">int</span>, z: <span class="built_in">int</span>, v: <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">    res[x] = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> y <span class="keyword">not</span> <span class="keyword">in</span> res[x]:</span><br><span class="line">    res[x][y] = &#123;&#125;</span><br><span class="line">  res[x][y][z] = v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">arr_to_3d</span>(<span class="params">cube: CUBE</span>) -&gt; CUBE3D:</span><br><span class="line">  res: CUBE3D = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      set_res(res, <span class="number">2</span> * i - (n - <span class="number">1</span>), <span class="number">2</span> * j - (n - <span class="number">1</span>), +</span><br><span class="line">              n, (cube[<span class="number">0</span>][i][j], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]))  <span class="comment"># UP</span></span><br><span class="line">      set_res(res, <span class="number">2</span> * j - (n - <span class="number">1</span>), -n, (n - <span class="number">1</span>) - <span class="number">2</span> * i,</span><br><span class="line">              (cube[<span class="number">1</span>][i][j], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]))  <span class="comment"># LEFT</span></span><br><span class="line">      set_res(res, +n, <span class="number">2</span> * j - (n - <span class="number">1</span>), (n - <span class="number">1</span>) - <span class="number">2</span> * i,</span><br><span class="line">              (cube[<span class="number">2</span>][i][j], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]))  <span class="comment"># FRONT</span></span><br><span class="line">      set_res(res, (n - <span class="number">1</span>) - <span class="number">2</span> * j, +n, (n - <span class="number">1</span>) - <span class="number">2</span> * i,</span><br><span class="line">              (cube[<span class="number">3</span>][i][j], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]))  <span class="comment"># RIGHT</span></span><br><span class="line">      set_res(res, -n, (n - <span class="number">1</span>) - <span class="number">2</span> * j, (n - <span class="number">1</span>) - <span class="number">2</span> * i,</span><br><span class="line">              (cube[<span class="number">4</span>][i][j], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]))  <span class="comment"># BACK</span></span><br><span class="line">      set_res(res, (n - <span class="number">1</span>) - <span class="number">2</span> * i, <span class="number">2</span> * j - (n - <span class="number">1</span>), -</span><br><span class="line">              n, (cube[<span class="number">5</span>][i][j], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]))  <span class="comment"># DOWN</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateX</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着X轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateY</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着Y轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateZ</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着Z轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateFilter</span>(<span class="params">cube3d: CUBE3D, <span class="built_in">filter</span>, rotateFn</span>) -&gt; CUBE3D:</span><br><span class="line">  res = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> x, yzv <span class="keyword">in</span> cube3d.items():</span><br><span class="line">    <span class="keyword">for</span> y, zv <span class="keyword">in</span> yzv.items():</span><br><span class="line">      <span class="keyword">for</span> z, v <span class="keyword">in</span> zv.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">filter</span>(x, y, z):  <span class="comment"># need rotate</span></span><br><span class="line">          nx, ny, nz = rotateFn([x, y, z])</span><br><span class="line">          set_res(res, nx, ny, nz, [v[<span class="number">0</span>], rotateFn(v[<span class="number">1</span>])])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">          set_res(res, x, y, z, v)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateFront</span>(<span class="params">cube3d: CUBE3D</span>) -&gt; CUBE3D:</span><br><span class="line">  <span class="keyword">return</span> rotateFilter(cube3d, <span class="keyword">lambda</span> x, y, z: x &gt; <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateBack</span>(<span class="params">cube3d: CUBE3D</span>) -&gt; CUBE3D:</span><br><span class="line">  <span class="keyword">return</span> rotateFilter(cube3d, <span class="keyword">lambda</span> x, y, z: x &lt; <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateLeft</span>(<span class="params">cube3d: CUBE3D</span>) -&gt; CUBE3D:</span><br><span class="line">  <span class="keyword">return</span> rotateFilter(cube3d, <span class="keyword">lambda</span> x, y, z: y &lt; <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateRight</span>(<span class="params">cube3d: CUBE3D</span>) -&gt; CUBE3D:</span><br><span class="line">  <span class="keyword">return</span> rotateFilter(cube3d, <span class="keyword">lambda</span> x, y, z: y &gt; <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateUp</span>(<span class="params">cube3d: CUBE3D</span>) -&gt; CUBE3D:</span><br><span class="line">  <span class="keyword">return</span> rotateFilter(cube3d, <span class="keyword">lambda</span> x, y, z: z &gt; <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateDown</span>(<span class="params">cube3d: CUBE3D</span>) -&gt; CUBE3D:</span><br><span class="line">  <span class="keyword">return</span> rotateFilter(cube3d, <span class="keyword">lambda</span> x, y, z: z &lt; <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">cube: CUBE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  valid(cube)</span><br><span class="line">  cube3d = arr_to_3d(cube)</span><br><span class="line">  show_3ds([cube3d, rotateFront(cube3d), rotateBack(cube3d), rotateLeft(</span><br><span class="line">      cube3d), rotateRight(cube3d), rotateUp(cube3d), rotateDown(cube3d)])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">solve([</span><br><span class="line">    [  <span class="comment"># UP</span></span><br><span class="line">        [RED, ORANGE, GREEN], [YELLOW, YELLOW, ORANGE], [BLUE, WHITE, ORANGE]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 左</span></span><br><span class="line">        [BLUE, GREEN, YELLOW], [RED, BLUE, YELLOW], [WHITE, ORANGE, RED]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 前</span></span><br><span class="line">        [ORANGE, RED, WHITE], [RED, RED, YELLOW], [YELLOW, WHITE, RED]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 右</span></span><br><span class="line">        [BLUE, GREEN, WHITE], [BLUE, GREEN, BLUE], [WHITE, BLUE, YELLOW]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 后</span></span><br><span class="line">        [ORANGE, YELLOW, YELLOW], [RED, ORANGE, GREEN], [ORANGE, BLUE, GREEN]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 下</span></span><br><span class="line">        [GREEN, GREEN, BLUE], [WHITE, WHITE, ORANGE], [RED, WHITE, GREEN]</span><br><span class="line">    ],</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<hr>
<p>这里可以先预处理,计算映射关系,简化成 $6n^2$ 的状态和 稀疏转移矩阵</p>
<h4 id="版本2-实现-迭代加深dfs-完成底面-与-阶段性展示"><a href="#版本2-实现-迭代加深dfs-完成底面-与-阶段性展示" class="headerlink" title="版本2: 实现 迭代加深dfs,完成底面 与 阶段性展示"></a>版本2: 实现 迭代加深dfs,完成底面 与 阶段性展示</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span>, <span class="type">List</span>, <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#  U</span></span><br><span class="line"><span class="comment"># LFRB</span></span><br><span class="line"><span class="comment">#  D</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  0</span></span><br><span class="line"><span class="comment"># 1234</span></span><br><span class="line"><span class="comment">#  5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   黄</span></span><br><span class="line"><span class="comment"># 蓝红绿橙</span></span><br><span class="line"><span class="comment">#   白</span></span><br><span class="line">YELLOW = <span class="number">0</span></span><br><span class="line">BLUE = <span class="number">1</span></span><br><span class="line">RED = <span class="number">2</span></span><br><span class="line">GREEN = <span class="number">3</span></span><br><span class="line">ORANGE = <span class="number">4</span></span><br><span class="line">WHITE = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">CUBE = <span class="type">List</span>[<span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]]  <span class="comment"># ULFRBD</span></span><br><span class="line"><span class="comment"># [x][y][z] =&gt; (color,xyz扩展方向)</span></span><br><span class="line">CUBE3D = <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="type">List</span>[<span class="built_in">int</span>]]]]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid</span>(<span class="params">cube</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">len</span>(cube) == <span class="number">6</span></span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> face <span class="keyword">in</span> cube:</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(face) == n</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> face:</span><br><span class="line">      <span class="keyword">assert</span> <span class="built_in">len</span>(row) == n</span><br><span class="line">      <span class="keyword">for</span> v <span class="keyword">in</span> row:</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">0</span> &lt;= v <span class="keyword">and</span> v &lt; <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_3ds</span>(<span class="params">cube_3ds: <span class="type">List</span>[CUBE3D]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  cnt = <span class="built_in">len</span>(cube_3ds)</span><br><span class="line">  row = <span class="built_in">max</span>(<span class="built_in">int</span>(cnt**<span class="number">0.5</span>), <span class="number">1</span>)</span><br><span class="line">  col = cnt//row + <span class="built_in">int</span>((cnt % row) != <span class="number">0</span>)</span><br><span class="line">  fig = plt.figure()</span><br><span class="line">  colors = [<span class="string">&#x27;#FFFF00&#x27;</span>, <span class="string">&#x27;#0000FF&#x27;</span>, <span class="string">&#x27;#FF0000&#x27;</span>, <span class="string">&#x27;#00FF00&#x27;</span>, <span class="string">&#x27;#FF681F&#x27;</span>, <span class="string">&#x27;#FFFFFF&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt):</span><br><span class="line">    cube_3d = cube_3ds[i]</span><br><span class="line">    ax = fig.add_subplot(row, col, i+<span class="number">1</span>, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x, yzv <span class="keyword">in</span> cube_3d.items():</span><br><span class="line">      <span class="keyword">for</span> y, zv <span class="keyword">in</span> yzv.items():</span><br><span class="line">        <span class="keyword">for</span> z, v <span class="keyword">in</span> zv.items():</span><br><span class="line">          c, dxyz = v</span><br><span class="line">          dx, dy, dz = dxyz</span><br><span class="line">          <span class="keyword">if</span> dx == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x, x], [x, x]])</span><br><span class="line">            Y = np.array([[y-<span class="number">1</span>, y+<span class="number">1</span>], [y-<span class="number">1</span>, y+<span class="number">1</span>]])</span><br><span class="line">            Z = np.array([[z-<span class="number">1</span>, z-<span class="number">1</span>], [z+<span class="number">1</span>, z+<span class="number">1</span>]])</span><br><span class="line">          <span class="keyword">elif</span> dy == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x-<span class="number">1</span>, x+<span class="number">1</span>], [x-<span class="number">1</span>, x+<span class="number">1</span>]])</span><br><span class="line">            Y = np.array([[y, y], [y, y]])</span><br><span class="line">            Z = np.array([[z-<span class="number">1</span>, z-<span class="number">1</span>], [z+<span class="number">1</span>, z+<span class="number">1</span>]])</span><br><span class="line">          <span class="keyword">elif</span> dz == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x-<span class="number">1</span>, x+<span class="number">1</span>], [x-<span class="number">1</span>, x+<span class="number">1</span>]])</span><br><span class="line">            Y = np.array([[y-<span class="number">1</span>, y-<span class="number">1</span>], [y+<span class="number">1</span>, y+<span class="number">1</span>]])</span><br><span class="line">            Z = np.array([[z, z], [z, z]])</span><br><span class="line">          ax.plot_surface(</span><br><span class="line">              X, Y, Z, color=colors[c])</span><br><span class="line"></span><br><span class="line">  plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_cube</span>(<span class="params">res: CUBE3D, xyz: <span class="type">List</span>[<span class="built_in">int</span>], v: <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  x, y, z = xyz</span><br><span class="line">  <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">    res[x] = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> y <span class="keyword">not</span> <span class="keyword">in</span> res[x]:</span><br><span class="line">    res[x][y] = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  res[x][y][z] = v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_up</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">2</span> * i - (n - <span class="number">1</span>), <span class="number">2</span> * j - (n - <span class="number">1</span>), + n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_left</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">2</span> * j - (n - <span class="number">1</span>), -n, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_front</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [+n, <span class="number">2</span> * j - (n - <span class="number">1</span>), (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_right</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [(n - <span class="number">1</span>) - <span class="number">2</span> * j, +n, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_back</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [-n, (n - <span class="number">1</span>) - <span class="number">2</span> * j, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_down</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [(n - <span class="number">1</span>) - <span class="number">2</span> * i, <span class="number">2</span> * j - (n - <span class="number">1</span>), - n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">arr_to_3d</span>(<span class="params">cube: CUBE</span>) -&gt; CUBE3D:</span><br><span class="line">  res: CUBE3D = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      set_cube(res, _up(i, j, n), [cube[<span class="number">0</span>][i][j], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]])  <span class="comment"># UP</span></span><br><span class="line">      set_cube(res, _left(i, j, n), [cube[<span class="number">1</span>][i][j], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]])  <span class="comment"># LEFT</span></span><br><span class="line">      set_cube(res, _front(i, j, n), [cube[<span class="number">2</span>][i][j], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]])  <span class="comment"># FRONT</span></span><br><span class="line">      set_cube(res, _right(i, j, n), [cube[<span class="number">3</span>][i][j], [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]])  <span class="comment"># RIGHT</span></span><br><span class="line">      set_cube(res, _back(i, j, n), [cube[<span class="number">4</span>][i][j], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]])  <span class="comment"># BACK</span></span><br><span class="line">      set_cube(res, _down(i, j, n), [cube[<span class="number">5</span>][i][j], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>]])  <span class="comment"># DOWN</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateX</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着X轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateY</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着Y轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateZ</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着Z轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateFilter</span>(<span class="params">cube3d: CUBE3D, <span class="built_in">filter</span>, rotateFn</span>) -&gt; CUBE3D:</span><br><span class="line">  res = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> x, yzv <span class="keyword">in</span> cube3d.items():</span><br><span class="line">    <span class="keyword">for</span> y, zv <span class="keyword">in</span> yzv.items():</span><br><span class="line">      <span class="keyword">for</span> z, v <span class="keyword">in</span> zv.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">filter</span>(x, y, z):  <span class="comment"># need rotate</span></span><br><span class="line">          set_cube(res, rotateFn([x, y, z]), [v[<span class="number">0</span>], rotateFn(v[<span class="number">1</span>])])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">          set_cube(res, [x, y, z], v)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateFront</span>(<span class="params">cube3d: CUBE3D</span>) -&gt; CUBE3D:</span><br><span class="line">  <span class="keyword">return</span> rotateFilter(cube3d, <span class="keyword">lambda</span> x, y, z: x &gt; <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateBack</span>(<span class="params">cube3d: CUBE3D</span>) -&gt; CUBE3D:</span><br><span class="line">  <span class="keyword">return</span> rotateFilter(cube3d, <span class="keyword">lambda</span> x, y, z: x &lt; <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateLeft</span>(<span class="params">cube3d: CUBE3D</span>) -&gt; CUBE3D:</span><br><span class="line">  <span class="keyword">return</span> rotateFilter(cube3d, <span class="keyword">lambda</span> x, y, z: y &lt; <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateRight</span>(<span class="params">cube3d: CUBE3D</span>) -&gt; CUBE3D:</span><br><span class="line">  <span class="keyword">return</span> rotateFilter(cube3d, <span class="keyword">lambda</span> x, y, z: y &gt; <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateUp</span>(<span class="params">cube3d: CUBE3D</span>) -&gt; CUBE3D:</span><br><span class="line">  <span class="keyword">return</span> rotateFilter(cube3d, <span class="keyword">lambda</span> x, y, z: z &gt; <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateDown</span>(<span class="params">cube3d: CUBE3D</span>) -&gt; CUBE3D:</span><br><span class="line">  <span class="keyword">return</span> rotateFilter(cube3d, <span class="keyword">lambda</span> x, y, z: z &lt; <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">progress</span>(<span class="params">cube3d: CUBE3D</span>) -&gt; <span class="built_in">int</span>:  <span class="comment"># 只针对3阶魔方</span></span><br><span class="line">  p = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">c</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    x, y, z = xyz</span><br><span class="line">    <span class="keyword">return</span> cube3d[x][y][z][<span class="number">0</span>]</span><br><span class="line">  <span class="comment"># 底面 十字</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">2</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">1</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">2</span>, <span class="number">1</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">1</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">2</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">1</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">2</span>, <span class="number">1</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">1</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 底面4角</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">2</span>, <span class="number">2</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_front(<span class="number">2</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">2</span>, <span class="number">2</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_right(<span class="number">2</span>, <span class="number">0</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">2</span>, <span class="number">2</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_back(<span class="number">2</span>, <span class="number">0</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">2</span>, <span class="number">2</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_left(<span class="number">2</span>, <span class="number">0</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">4</span>*<span class="number">2</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">res: <span class="type">List</span>[CUBE3D], remain: <span class="built_in">int</span>, stop: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">  <span class="keyword">if</span> progress(res[-<span class="number">1</span>]) &gt;= stop:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">  <span class="keyword">if</span> remain &lt;= <span class="number">0</span>:  <span class="comment"># 迭代加深</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  ops = [</span><br><span class="line">      rotateUp, <span class="keyword">lambda</span> x:rotateUp(</span><br><span class="line">          rotateUp(x)), <span class="keyword">lambda</span> x:rotateUp(rotateUp(rotateUp(x))),</span><br><span class="line">      rotateLeft, <span class="keyword">lambda</span> x:rotateLeft(rotateLeft(</span><br><span class="line">          x)), <span class="keyword">lambda</span> x:rotateLeft(rotateLeft(rotateLeft(x))),</span><br><span class="line">      rotateFront, <span class="keyword">lambda</span> x:rotateFront(rotateFront(</span><br><span class="line">          x)), <span class="keyword">lambda</span> x:rotateFront(rotateFront(rotateFront(x))),</span><br><span class="line">      rotateRight, <span class="keyword">lambda</span> x:rotateRight(rotateRight(</span><br><span class="line">          x)), <span class="keyword">lambda</span> x:rotateRight(rotateRight(rotateRight(x))),</span><br><span class="line">      rotateBack, <span class="keyword">lambda</span> x:rotateBack(rotateBack(</span><br><span class="line">          x)), <span class="keyword">lambda</span> x:rotateBack(rotateBack(rotateBack(x))),</span><br><span class="line">      rotateDown, <span class="keyword">lambda</span> x:rotateDown(rotateDown(</span><br><span class="line">          x)), <span class="keyword">lambda</span> x:rotateDown(rotateDown(rotateDown(x))),</span><br><span class="line">  ]</span><br><span class="line">  <span class="keyword">for</span> op <span class="keyword">in</span> ops:</span><br><span class="line">    res.append(op(res[-<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">if</span> dfs(res, remain-<span class="number">1</span>, stop):</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    res.pop()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">steps</span>(<span class="params">cube3d: CUBE3D, stop: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[CUBE3D]:</span><br><span class="line">  res = [cube3d]</span><br><span class="line">  dep = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">not</span> dfs(res, dep, stop):</span><br><span class="line">    dep += <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump3d</span>(<span class="params">cube3d: CUBE3D, n=<span class="number">3</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  res = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">dump_face</span>(<span class="params">fn</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    face = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      row = []</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        x, y, z = fn(i, j)</span><br><span class="line">        row.append(cube3d[x][y][z][<span class="number">0</span>])</span><br><span class="line">      face.append(row)</span><br><span class="line">    res.append(face)</span><br><span class="line"></span><br><span class="line">  dump_face(_up)</span><br><span class="line">  dump_face(_left)</span><br><span class="line">  dump_face(_front)</span><br><span class="line">  dump_face(_right)</span><br><span class="line">  dump_face(_back)</span><br><span class="line">  dump_face(_down)</span><br><span class="line">  <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">cube: CUBE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  valid(cube)</span><br><span class="line">  cube3d = arr_to_3d(cube)</span><br><span class="line"></span><br><span class="line">  steplist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">  ans = [cube3d]</span><br><span class="line">  <span class="keyword">for</span> dst_step <span class="keyword">in</span> steplist:</span><br><span class="line">    moves = steps(ans[-<span class="number">1</span>], dst_step)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;step <span class="subst">&#123;dst_step&#125;</span> solved with ops = <span class="subst">&#123;<span class="built_in">len</span>(moves)-<span class="number">1</span>&#125;</span>&#x27;</span>)</span><br><span class="line">    ans = ans + moves[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">  show_3ds(ans)</span><br><span class="line">  dump3d(ans[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">solve([</span><br><span class="line">    [  <span class="comment"># UP</span></span><br><span class="line">        [RED, ORANGE, GREEN], [YELLOW, YELLOW, ORANGE], [BLUE, WHITE, ORANGE]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 左</span></span><br><span class="line">        [BLUE, GREEN, YELLOW], [RED, BLUE, YELLOW], [WHITE, ORANGE, RED]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 前</span></span><br><span class="line">        [ORANGE, RED, WHITE], [RED, RED, YELLOW], [YELLOW, WHITE, RED]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 右</span></span><br><span class="line">        [BLUE, GREEN, WHITE], [BLUE, GREEN, BLUE], [WHITE, BLUE, YELLOW]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 后</span></span><br><span class="line">        [ORANGE, YELLOW, YELLOW], [RED, ORANGE, GREEN], [ORANGE, BLUE, GREEN]</span><br><span class="line">    ],</span><br><span class="line">    [  <span class="comment"># 下</span></span><br><span class="line">        [GREEN, GREEN, BLUE], [WHITE, WHITE, ORANGE], [RED, WHITE, GREEN]</span><br><span class="line">    ],</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p>在这里, 似乎把 旋转180看作一个操作比 把180度看作2个操作 更容易搜出来, 可能虽然每层更多了,但是总步数更少了,从而更好</p>
<h4 id="版本3-第二层-剪枝-优化效率"><a href="#版本3-第二层-剪枝-优化效率" class="headerlink" title="版本3 第二层,剪枝,优化效率"></a>版本3 第二层,剪枝,优化效率</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span>, <span class="type">Dict</span>, <span class="type">List</span>, <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#  U</span></span><br><span class="line"><span class="comment"># LFRB</span></span><br><span class="line"><span class="comment">#  D</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  0</span></span><br><span class="line"><span class="comment"># 1234</span></span><br><span class="line"><span class="comment">#  5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   黄</span></span><br><span class="line"><span class="comment"># 蓝红绿橙</span></span><br><span class="line"><span class="comment">#   白</span></span><br><span class="line">YELLOW = <span class="number">0</span></span><br><span class="line">BLUE = <span class="number">1</span></span><br><span class="line">RED = <span class="number">2</span></span><br><span class="line">GREEN = <span class="number">3</span></span><br><span class="line">ORANGE = <span class="number">4</span></span><br><span class="line">WHITE = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">CUBE = <span class="type">List</span>[<span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]]  <span class="comment"># ULFRBD</span></span><br><span class="line"><span class="comment"># [x][y][z] =&gt; (color,xyz扩展方向)</span></span><br><span class="line">CUBE3DCOLOR = <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]]]</span><br><span class="line">CUBE3DSURFACE = <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">List</span>[<span class="built_in">int</span>]]]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid</span>(<span class="params">cube</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">len</span>(cube) == <span class="number">6</span></span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> face <span class="keyword">in</span> cube:</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(face) == n</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> face:</span><br><span class="line">      <span class="keyword">assert</span> <span class="built_in">len</span>(row) == n</span><br><span class="line">      <span class="keyword">for</span> v <span class="keyword">in</span> row:</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">0</span> &lt;= v <span class="keyword">and</span> v &lt; <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_3ds</span>(<span class="params">cube_3ds: <span class="type">List</span>[CUBE3DCOLOR], cube_3d_surface: CUBE3DSURFACE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  cnt = <span class="built_in">len</span>(cube_3ds)</span><br><span class="line">  row = <span class="built_in">max</span>(<span class="built_in">int</span>(cnt**<span class="number">0.5</span>), <span class="number">1</span>)</span><br><span class="line">  col = cnt//row + <span class="built_in">int</span>((cnt % row) != <span class="number">0</span>)</span><br><span class="line">  fig = plt.figure()</span><br><span class="line">  colors = [<span class="string">&#x27;#FFFF00&#x27;</span>, <span class="string">&#x27;#0000FF&#x27;</span>, <span class="string">&#x27;#FF0000&#x27;</span>, <span class="string">&#x27;#00FF00&#x27;</span>, <span class="string">&#x27;#FF681F&#x27;</span>, <span class="string">&#x27;#FFFFFF&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt):</span><br><span class="line">    cube_3d = cube_3ds[i]</span><br><span class="line">    ax = fig.add_subplot(row, col, i+<span class="number">1</span>, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x, yzv <span class="keyword">in</span> cube_3d.items():</span><br><span class="line">      <span class="keyword">for</span> y, zv <span class="keyword">in</span> yzv.items():</span><br><span class="line">        <span class="keyword">for</span> z, c <span class="keyword">in</span> zv.items():</span><br><span class="line">          dx, dy, dz = cube_3d_surface[x][y][z]</span><br><span class="line">          <span class="keyword">if</span> dx == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x, x], [x, x]])</span><br><span class="line">            Y = np.array([[y-<span class="number">1</span>, y+<span class="number">1</span>], [y-<span class="number">1</span>, y+<span class="number">1</span>]])</span><br><span class="line">            Z = np.array([[z-<span class="number">1</span>, z-<span class="number">1</span>], [z+<span class="number">1</span>, z+<span class="number">1</span>]])</span><br><span class="line">          <span class="keyword">elif</span> dy == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x-<span class="number">1</span>, x+<span class="number">1</span>], [x-<span class="number">1</span>, x+<span class="number">1</span>]])</span><br><span class="line">            Y = np.array([[y, y], [y, y]])</span><br><span class="line">            Z = np.array([[z-<span class="number">1</span>, z-<span class="number">1</span>], [z+<span class="number">1</span>, z+<span class="number">1</span>]])</span><br><span class="line">          <span class="keyword">elif</span> dz == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x-<span class="number">1</span>, x+<span class="number">1</span>], [x-<span class="number">1</span>, x+<span class="number">1</span>]])</span><br><span class="line">            Y = np.array([[y-<span class="number">1</span>, y-<span class="number">1</span>], [y+<span class="number">1</span>, y+<span class="number">1</span>]])</span><br><span class="line">            Z = np.array([[z, z], [z, z]])</span><br><span class="line">          ax.plot_surface(</span><br><span class="line">              X, Y, Z, color=colors[c])</span><br><span class="line"></span><br><span class="line">  plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_cube</span>(<span class="params">res: CUBE3DSURFACE | CUBE3DCOLOR, xyz: <span class="type">List</span>[<span class="built_in">int</span>], v: <span class="type">Any</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  x, y, z = xyz</span><br><span class="line">  <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">    res[x] = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> y <span class="keyword">not</span> <span class="keyword">in</span> res[x]:</span><br><span class="line">    res[x][y] = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  res[x][y][z] = v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_up</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">2</span> * i - (n - <span class="number">1</span>), <span class="number">2</span> * j - (n - <span class="number">1</span>), + n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_left</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">2</span> * j - (n - <span class="number">1</span>), -n, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_front</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [+n, <span class="number">2</span> * j - (n - <span class="number">1</span>), (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_right</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [(n - <span class="number">1</span>) - <span class="number">2</span> * j, +n, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_back</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [-n, (n - <span class="number">1</span>) - <span class="number">2</span> * j, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_down</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [(n - <span class="number">1</span>) - <span class="number">2</span> * i, <span class="number">2</span> * j - (n - <span class="number">1</span>), - n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">arr_to_3d</span>(<span class="params">cube: CUBE</span>) -&gt; CUBE3DCOLOR:</span><br><span class="line">  res: CUBE3DCOLOR = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      set_cube(res, _up(i, j, n), cube[<span class="number">0</span>][i][j])  <span class="comment"># UP</span></span><br><span class="line">      set_cube(res, _left(i, j, n), cube[<span class="number">1</span>][i][j])  <span class="comment"># LEFT</span></span><br><span class="line">      set_cube(res, _front(i, j, n), cube[<span class="number">2</span>][i][j])  <span class="comment"># FRONT</span></span><br><span class="line">      set_cube(res, _right(i, j, n), cube[<span class="number">3</span>][i][j])  <span class="comment"># RIGHT</span></span><br><span class="line">      set_cube(res, _back(i, j, n), cube[<span class="number">4</span>][i][j])  <span class="comment"># BACK</span></span><br><span class="line">      set_cube(res, _down(i, j, n), cube[<span class="number">5</span>][i][j])  <span class="comment"># DOWN</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateX</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着X轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateY</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着Y轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateZ</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着Z轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateFilter</span>(<span class="params">cube3d: CUBE3DCOLOR, <span class="built_in">filter</span>, rotateFn</span>) -&gt; CUBE3DCOLOR:</span><br><span class="line">  res = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> x, yzv <span class="keyword">in</span> cube3d.items():</span><br><span class="line">    <span class="keyword">for</span> y, zv <span class="keyword">in</span> yzv.items():</span><br><span class="line">      <span class="keyword">for</span> z, v <span class="keyword">in</span> zv.items():</span><br><span class="line">        <span class="comment"># filter() return &#x27;need rotate&#x27;</span></span><br><span class="line">        set_cube(res, rotateFn([x, y, z]) <span class="keyword">if</span> <span class="built_in">filter</span>(x, y, z) <span class="keyword">else</span> [x, y, z], v)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateFront</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: x &gt; <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateBack</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(cube, <span class="keyword">lambda</span> x, y, z: x &lt; <span class="number">0</span>, rotateX)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateLeft</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(cube, <span class="keyword">lambda</span> x, y, z: y &lt; <span class="number">0</span>, rotateY)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateRight</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: y &gt; <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateUp</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(cube, <span class="keyword">lambda</span> x, y, z: z &gt; <span class="number">0</span>, rotateZ)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateDown</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(cube, <span class="keyword">lambda</span> x, y, z: z &lt; <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">progress</span>(<span class="params">cube3d: CUBE3DCOLOR</span>) -&gt; <span class="built_in">int</span>:  <span class="comment"># 只针对3阶魔方</span></span><br><span class="line">  p = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">c</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    x, y, z = xyz</span><br><span class="line">    <span class="keyword">return</span> cube3d[x][y][z]</span><br><span class="line">  <span class="comment"># 底面 十字</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">2</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">1</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">2</span>, <span class="number">1</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">1</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">2</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">1</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">2</span>, <span class="number">1</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">1</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 底面4角</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">2</span>, <span class="number">2</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_front(<span class="number">2</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">2</span>, <span class="number">2</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_right(<span class="number">2</span>, <span class="number">0</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">2</span>, <span class="number">2</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_back(<span class="number">2</span>, <span class="number">0</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">2</span>, <span class="number">2</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_left(<span class="number">2</span>, <span class="number">0</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">8</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 第二层4个棱, 这里通过5 &gt; 1+1+1+1 保证了 完成的棱 大于 所有的半步状态</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">1</span>, <span class="number">2</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_front(<span class="number">1</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">1</span>, <span class="number">2</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_right(<span class="number">1</span>, <span class="number">0</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">1</span>, <span class="number">2</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_back(<span class="number">1</span>, <span class="number">0</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">1</span>, <span class="number">2</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_left(<span class="number">1</span>, <span class="number">0</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 第二层 中间半步状态</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">0</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">1</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">0</span>, <span class="number">1</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">2</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">0</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">1</span>, <span class="number">2</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">0</span>, <span class="number">1</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">0</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">28</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateMidX</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: x == <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateMidY</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: y == <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateMidZ</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: z == <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">two</span>(<span class="params">fn</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">lambda</span> x: fn(fn(x))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">three</span>(<span class="params">fn</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">lambda</span> x: fn(fn(fn(x)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ops = [</span><br><span class="line">    rotateUp, two(rotateUp), three(rotateUp),</span><br><span class="line">    rotateDown, two(rotateDown), three(rotateDown),</span><br><span class="line">    <span class="comment"># rotateMidZ, two(rotateMidZ), three(rotateMidZ),</span></span><br><span class="line"></span><br><span class="line">    rotateLeft, two(rotateLeft), three(rotateLeft),</span><br><span class="line">    rotateRight, two(rotateRight), three(rotateRight),</span><br><span class="line">    <span class="comment"># rotateMidY, two(rotateMidY), three(rotateMidY),</span></span><br><span class="line"></span><br><span class="line">    rotateFront, two(rotateFront), three(rotateFront),</span><br><span class="line">    rotateBack, two(rotateBack), three(rotateBack),</span><br><span class="line">    <span class="comment"># rotateMidX, two(rotateMidX), three(rotateMidX),</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">res: <span class="type">List</span>[CUBE3DCOLOR], opidxs: <span class="type">List</span>[<span class="built_in">int</span>], remain: <span class="built_in">int</span>, stop: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">  <span class="keyword">if</span> progress(res[-<span class="number">1</span>]) &gt;= stop:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">  <span class="keyword">if</span> remain &lt;= <span class="number">0</span>:  <span class="comment"># 迭代加深</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ops)):</span><br><span class="line">    <span class="comment"># 剪枝</span></span><br><span class="line">    <span class="keyword">if</span> idx // <span class="number">3</span> == opidxs[-<span class="number">1</span>] // <span class="number">3</span>:  <span class="comment"># 不要连续旋转同一个面</span></span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> idx // <span class="number">6</span> == opidxs[-<span class="number">1</span>] // <span class="number">6</span>:  <span class="comment"># 如果 连续 沿着同轴旋转 两个面</span></span><br><span class="line">      <span class="keyword">if</span> idx &gt; opidxs[-<span class="number">1</span>]:  <span class="comment"># 保证 序号小的先旋转</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    op = ops[idx]</span><br><span class="line">    res.append(op(res[-<span class="number">1</span>]))</span><br><span class="line">    opidxs.append(idx)</span><br><span class="line">    <span class="keyword">if</span> dfs(res, opidxs, remain-<span class="number">1</span>, stop):</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    res.pop()</span><br><span class="line">    opidxs.pop()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">steps</span>(<span class="params">cube3d: CUBE3DCOLOR, stop: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[CUBE3DCOLOR]:</span><br><span class="line">  res = [cube3d]</span><br><span class="line">  opsidxs = [-<span class="number">1</span>]</span><br><span class="line">  dep = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">not</span> dfs(res, opsidxs, dep, stop):</span><br><span class="line">    dep += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;dep = &#x27;</span>, dep)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump3d</span>(<span class="params">cube3d: CUBE3DCOLOR, n=<span class="number">3</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  res = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">dump_face</span>(<span class="params">fn</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    face = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      row = []</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        x, y, z = fn(i, j)</span><br><span class="line">        row.append(cube3d[x][y][z])</span><br><span class="line">      face.append(row)</span><br><span class="line">    res.append(face)</span><br><span class="line"></span><br><span class="line">  dump_face(_up)</span><br><span class="line">  dump_face(_left)</span><br><span class="line">  dump_face(_front)</span><br><span class="line">  dump_face(_right)</span><br><span class="line">  dump_face(_back)</span><br><span class="line">  dump_face(_down)</span><br><span class="line">  <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">transfroms = [_up, _left, _front, _right, _back, _down]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">cube: CUBE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  valid(cube)</span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  cube3d = arr_to_3d(cube)</span><br><span class="line"></span><br><span class="line">  cube3dsurface = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      set_cube(cube3dsurface, _up(i, j, n),  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>])  <span class="comment"># UP</span></span><br><span class="line">      set_cube(cube3dsurface, _left(i, j, n),  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])  <span class="comment"># LEFT</span></span><br><span class="line">      set_cube(cube3dsurface, _front(i, j, n),  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>])  <span class="comment"># FRONT</span></span><br><span class="line">      set_cube(cube3dsurface, _right(i, j, n),  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])  <span class="comment"># RIGHT</span></span><br><span class="line">      set_cube(cube3dsurface, _back(i, j, n),  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>])  <span class="comment"># BACK</span></span><br><span class="line">      set_cube(cube3dsurface, _down(i, j, n),  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>])  <span class="comment"># DOWN</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">two</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: fn(fn(x))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">three</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: fn(fn(fn(x)))</span><br><span class="line"></span><br><span class="line">  ops = [</span><br><span class="line">      rotateUp, two(rotateUp), three(rotateUp),</span><br><span class="line">      rotateDown, two(rotateDown), three(rotateDown),</span><br><span class="line">      <span class="comment"># rotateMidZ, two(rotateMidZ), three(rotateMidZ),</span></span><br><span class="line"></span><br><span class="line">      rotateLeft, two(rotateLeft), three(rotateLeft),</span><br><span class="line">      rotateRight, two(rotateRight), three(rotateRight),</span><br><span class="line">      <span class="comment"># rotateMidY, two(rotateMidY), three(rotateMidY),</span></span><br><span class="line"></span><br><span class="line">      rotateFront, two(rotateFront), three(rotateFront),</span><br><span class="line">      rotateBack, two(rotateBack), three(rotateBack),</span><br><span class="line">      <span class="comment"># rotateMidX, two(rotateMidX), three(rotateMidX),</span></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  steplist = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">28</span>+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">cube3dsolver</span>():</span><br><span class="line">    ans = [cube3d]</span><br><span class="line">    <span class="keyword">for</span> dst_step <span class="keyword">in</span> steplist:</span><br><span class="line">      moves = steps(ans[-<span class="number">1</span>], dst_step)</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">f&#x27;step <span class="subst">&#123;dst_step&#125;</span> solved with ops = <span class="subst">&#123;<span class="built_in">len</span>(moves)-<span class="number">1</span>&#125;</span>&#x27;</span>)</span><br><span class="line">      ans = ans + moves[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">  ans = cube3dsolver()</span><br><span class="line">  show_3ds(ans, cube3dsurface)</span><br><span class="line">  dump3d(ans[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">solve([[[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">4</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>]], [[<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]], [[<span class="number">3</span>, <span class="number">3</span>, <span class="number">0</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]], [</span><br><span class="line">      [<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>]], [[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>], [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>]], [[<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>], [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>], [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]]])</span><br></pre></td></tr></table></figure>

<p>然而这里直接 每个棱 让进度+&#x3D;1, 并不理想,其实可以看到:</p>
<p>当要解决最后一块第二层的时候,就需要把一个在上层的移动进第二层,而不影响其它低二层以下的,假设这样的操作步骤是X,(<del>当然 在没有理论知识下,可能也是同时做好两&#x2F;三个棱,</del>)</p>
<p>而如果是可行的,则可能当前 最后一个位置,正好反着放在了目标位置中,那么 至少需要2X步骤,甚至是2X+1</p>
<p>对于深度搜索来说, 增加2倍的步骤, 意味着数量级的幂次增加了两倍</p>
<hr>
<p>实际跑下来,单次用了多达7步,而剪枝优化了每轮可选的操作在 <code>12~15</code>, 而$12^6\cdot 18&#x3D;5374,7712$,$15^6\cdot 18&#x3D;2,0503,1250$</p>
<p>光是次数都很大,更不要说常数还不小</p>
<h4 id="版本4-顶面-全黄"><a href="#版本4-顶面-全黄" class="headerlink" title="版本4 顶面 全黄"></a>版本4 顶面 全黄</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span>, <span class="type">Dict</span>, <span class="type">List</span>, <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#  U</span></span><br><span class="line"><span class="comment"># LFRB</span></span><br><span class="line"><span class="comment">#  D</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  0</span></span><br><span class="line"><span class="comment"># 1234</span></span><br><span class="line"><span class="comment">#  5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   黄</span></span><br><span class="line"><span class="comment"># 蓝红绿橙</span></span><br><span class="line"><span class="comment">#   白</span></span><br><span class="line">YELLOW = <span class="number">0</span></span><br><span class="line">BLUE = <span class="number">1</span></span><br><span class="line">RED = <span class="number">2</span></span><br><span class="line">GREEN = <span class="number">3</span></span><br><span class="line">ORANGE = <span class="number">4</span></span><br><span class="line">WHITE = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">CUBE = <span class="type">List</span>[<span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]]  <span class="comment"># ULFRBD</span></span><br><span class="line"><span class="comment"># [x][y][z] =&gt; (color,xyz扩展方向)</span></span><br><span class="line">CUBE3DCOLOR = <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]]]</span><br><span class="line">CUBE3DSURFACE = <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">List</span>[<span class="built_in">int</span>]]]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid</span>(<span class="params">cube</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">len</span>(cube) == <span class="number">6</span></span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> face <span class="keyword">in</span> cube:</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(face) == n</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> face:</span><br><span class="line">      <span class="keyword">assert</span> <span class="built_in">len</span>(row) == n</span><br><span class="line">      <span class="keyword">for</span> v <span class="keyword">in</span> row:</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">0</span> &lt;= v <span class="keyword">and</span> v &lt; <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_3ds</span>(<span class="params">cube_3ds: <span class="type">List</span>[CUBE3DCOLOR], cube_3d_surface: CUBE3DSURFACE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  cnt = <span class="built_in">len</span>(cube_3ds)</span><br><span class="line">  row = <span class="built_in">max</span>(<span class="built_in">int</span>(cnt**<span class="number">0.5</span>), <span class="number">1</span>)</span><br><span class="line">  col = cnt//row + <span class="built_in">int</span>((cnt % row) != <span class="number">0</span>)</span><br><span class="line">  fig = plt.figure()</span><br><span class="line">  colors = [<span class="string">&#x27;#FFFF00&#x27;</span>, <span class="string">&#x27;#0000FF&#x27;</span>, <span class="string">&#x27;#FF0000&#x27;</span>, <span class="string">&#x27;#00FF00&#x27;</span>, <span class="string">&#x27;#FF681F&#x27;</span>, <span class="string">&#x27;#FFFFFF&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt):</span><br><span class="line">    cube_3d = cube_3ds[i]</span><br><span class="line">    ax = fig.add_subplot(row, col, i+<span class="number">1</span>, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x, yzv <span class="keyword">in</span> cube_3d.items():</span><br><span class="line">      <span class="keyword">for</span> y, zv <span class="keyword">in</span> yzv.items():</span><br><span class="line">        <span class="keyword">for</span> z, c <span class="keyword">in</span> zv.items():</span><br><span class="line">          dx, dy, dz = cube_3d_surface[x][y][z]</span><br><span class="line">          <span class="keyword">if</span> dx == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x, x], [x, x]])</span><br><span class="line">            Y = np.array([[y-<span class="number">1</span>, y+<span class="number">1</span>], [y-<span class="number">1</span>, y+<span class="number">1</span>]])</span><br><span class="line">            Z = np.array([[z-<span class="number">1</span>, z-<span class="number">1</span>], [z+<span class="number">1</span>, z+<span class="number">1</span>]])</span><br><span class="line">          <span class="keyword">elif</span> dy == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x-<span class="number">1</span>, x+<span class="number">1</span>], [x-<span class="number">1</span>, x+<span class="number">1</span>]])</span><br><span class="line">            Y = np.array([[y, y], [y, y]])</span><br><span class="line">            Z = np.array([[z-<span class="number">1</span>, z-<span class="number">1</span>], [z+<span class="number">1</span>, z+<span class="number">1</span>]])</span><br><span class="line">          <span class="keyword">elif</span> dz == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x-<span class="number">1</span>, x+<span class="number">1</span>], [x-<span class="number">1</span>, x+<span class="number">1</span>]])</span><br><span class="line">            Y = np.array([[y-<span class="number">1</span>, y-<span class="number">1</span>], [y+<span class="number">1</span>, y+<span class="number">1</span>]])</span><br><span class="line">            Z = np.array([[z, z], [z, z]])</span><br><span class="line">          ax.plot_surface(</span><br><span class="line">              X, Y, Z, color=colors[c])</span><br><span class="line"></span><br><span class="line">  plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_cube</span>(<span class="params">res: CUBE3DSURFACE | CUBE3DCOLOR, xyz: <span class="type">List</span>[<span class="built_in">int</span>], v: <span class="type">Any</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  x, y, z = xyz</span><br><span class="line">  <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">    res[x] = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> y <span class="keyword">not</span> <span class="keyword">in</span> res[x]:</span><br><span class="line">    res[x][y] = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  res[x][y][z] = v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_up</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">2</span> * i - (n - <span class="number">1</span>), <span class="number">2</span> * j - (n - <span class="number">1</span>), + n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_left</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">2</span> * j - (n - <span class="number">1</span>), -n, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_front</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [+n, <span class="number">2</span> * j - (n - <span class="number">1</span>), (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_right</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [(n - <span class="number">1</span>) - <span class="number">2</span> * j, +n, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_back</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [-n, (n - <span class="number">1</span>) - <span class="number">2</span> * j, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_down</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [(n - <span class="number">1</span>) - <span class="number">2</span> * i, <span class="number">2</span> * j - (n - <span class="number">1</span>), - n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">arr_to_3d</span>(<span class="params">cube: CUBE</span>) -&gt; CUBE3DCOLOR:</span><br><span class="line">  res: CUBE3DCOLOR = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      set_cube(res, _up(i, j, n), cube[<span class="number">0</span>][i][j])  <span class="comment"># UP</span></span><br><span class="line">      set_cube(res, _left(i, j, n), cube[<span class="number">1</span>][i][j])  <span class="comment"># LEFT</span></span><br><span class="line">      set_cube(res, _front(i, j, n), cube[<span class="number">2</span>][i][j])  <span class="comment"># FRONT</span></span><br><span class="line">      set_cube(res, _right(i, j, n), cube[<span class="number">3</span>][i][j])  <span class="comment"># RIGHT</span></span><br><span class="line">      set_cube(res, _back(i, j, n), cube[<span class="number">4</span>][i][j])  <span class="comment"># BACK</span></span><br><span class="line">      set_cube(res, _down(i, j, n), cube[<span class="number">5</span>][i][j])  <span class="comment"># DOWN</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateX</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着X轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateY</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着Y轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateZ</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着Z轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateFilter</span>(<span class="params">cube3d: CUBE3DCOLOR, <span class="built_in">filter</span>, rotateFn</span>) -&gt; CUBE3DCOLOR:</span><br><span class="line">  res = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> x, yzv <span class="keyword">in</span> cube3d.items():</span><br><span class="line">    <span class="keyword">for</span> y, zv <span class="keyword">in</span> yzv.items():</span><br><span class="line">      <span class="keyword">for</span> z, v <span class="keyword">in</span> zv.items():</span><br><span class="line">        <span class="comment"># filter() return &#x27;need rotate&#x27;</span></span><br><span class="line">        set_cube(res, rotateFn([x, y, z]) <span class="keyword">if</span> <span class="built_in">filter</span>(x, y, z) <span class="keyword">else</span> [x, y, z], v)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateFront</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: x &gt; <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateBack</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(cube, <span class="keyword">lambda</span> x, y, z: x &lt; <span class="number">0</span>, rotateX)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateLeft</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(cube, <span class="keyword">lambda</span> x, y, z: y &lt; <span class="number">0</span>, rotateY)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateRight</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: y &gt; <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateUp</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(cube, <span class="keyword">lambda</span> x, y, z: z &gt; <span class="number">0</span>, rotateZ)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateDown</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(cube, <span class="keyword">lambda</span> x, y, z: z &lt; <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">progress</span>(<span class="params">cube3d: CUBE3DCOLOR</span>) -&gt; <span class="built_in">int</span>:  <span class="comment"># 只针对3阶魔方</span></span><br><span class="line">  p = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">c</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    x, y, z = xyz</span><br><span class="line">    <span class="keyword">return</span> cube3d[x][y][z]</span><br><span class="line">  <span class="comment"># 底面 十字</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">2</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">1</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">2</span>, <span class="number">1</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">1</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">2</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">1</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">2</span>, <span class="number">1</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">1</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 底面4角</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">2</span>, <span class="number">2</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_front(<span class="number">2</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">2</span>, <span class="number">2</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_right(<span class="number">2</span>, <span class="number">0</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">2</span>, <span class="number">2</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_back(<span class="number">2</span>, <span class="number">0</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">2</span>, <span class="number">2</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_left(<span class="number">2</span>, <span class="number">0</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">8</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 第二层4个棱, 这里通过5 &gt; 1+1+1+1 保证了 完成的棱 大于 所有的半步状态</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">1</span>, <span class="number">2</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_front(<span class="number">1</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">1</span>, <span class="number">2</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_right(<span class="number">1</span>, <span class="number">0</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">1</span>, <span class="number">2</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_back(<span class="number">1</span>, <span class="number">0</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">1</span>, <span class="number">2</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_left(<span class="number">1</span>, <span class="number">0</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 第二层 中间半步状态</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">0</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">1</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">0</span>, <span class="number">1</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">2</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">0</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">1</span>, <span class="number">2</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">0</span>, <span class="number">1</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">0</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">28</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 顶十字</span></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">0</span>, <span class="number">1</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">1</span>, <span class="number">0</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">1</span>, <span class="number">2</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">2</span>, <span class="number">1</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">32</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 顶面</span></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">0</span>, <span class="number">0</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">0</span>, <span class="number">2</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">2</span>, <span class="number">0</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">2</span>, <span class="number">2</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">36</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateMidX</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: x == <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateMidY</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: y == <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateMidZ</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: z == <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">two</span>(<span class="params">fn</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">lambda</span> x: fn(fn(x))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">three</span>(<span class="params">fn</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">lambda</span> x: fn(fn(fn(x)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ops = [</span><br><span class="line">    rotateUp, two(rotateUp), three(rotateUp),</span><br><span class="line">    rotateDown, two(rotateDown), three(rotateDown),</span><br><span class="line">    <span class="comment"># rotateMidZ, two(rotateMidZ), three(rotateMidZ),</span></span><br><span class="line"></span><br><span class="line">    rotateLeft, two(rotateLeft), three(rotateLeft),</span><br><span class="line">    rotateRight, two(rotateRight), three(rotateRight),</span><br><span class="line">    <span class="comment"># rotateMidY, two(rotateMidY), three(rotateMidY),</span></span><br><span class="line"></span><br><span class="line">    rotateFront, two(rotateFront), three(rotateFront),</span><br><span class="line">    rotateBack, two(rotateBack), three(rotateBack),</span><br><span class="line">    <span class="comment"># rotateMidX, two(rotateMidX), three(rotateMidX),</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">res: <span class="type">List</span>[CUBE3DCOLOR], opidxs: <span class="type">List</span>[<span class="built_in">int</span>], remain: <span class="built_in">int</span>, stop: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">  <span class="keyword">if</span> progress(res[-<span class="number">1</span>]) &gt;= stop:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">  <span class="keyword">if</span> remain &lt;= <span class="number">0</span>:  <span class="comment"># 迭代加深</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ops)):</span><br><span class="line">    <span class="comment"># 剪枝</span></span><br><span class="line">    <span class="keyword">if</span> idx // <span class="number">3</span> == opidxs[-<span class="number">1</span>] // <span class="number">3</span>:  <span class="comment"># 不要连续旋转同一个面</span></span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> idx // <span class="number">6</span> == opidxs[-<span class="number">1</span>] // <span class="number">6</span>:  <span class="comment"># 如果 连续 沿着同轴旋转 两个面</span></span><br><span class="line">      <span class="keyword">if</span> idx &gt; opidxs[-<span class="number">1</span>]:  <span class="comment"># 保证 序号小的先旋转</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    op = ops[idx]</span><br><span class="line">    res.append(op(res[-<span class="number">1</span>]))</span><br><span class="line">    opidxs.append(idx)</span><br><span class="line">    <span class="keyword">if</span> dfs(res, opidxs, remain-<span class="number">1</span>, stop):</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    res.pop()</span><br><span class="line">    opidxs.pop()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">steps</span>(<span class="params">cube3d: CUBE3DCOLOR, stop: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[CUBE3DCOLOR]:</span><br><span class="line">  res = [cube3d]</span><br><span class="line">  opsidxs = [-<span class="number">1</span>]</span><br><span class="line">  dep = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">not</span> dfs(res, opsidxs, dep, stop):</span><br><span class="line">    dep += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;dep = &#x27;</span>, dep)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump3d</span>(<span class="params">cube3d: CUBE3DCOLOR, n=<span class="number">3</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  res = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">dump_face</span>(<span class="params">fn</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    face = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      row = []</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        x, y, z = fn(i, j)</span><br><span class="line">        row.append(cube3d[x][y][z])</span><br><span class="line">      face.append(row)</span><br><span class="line">    res.append(face)</span><br><span class="line"></span><br><span class="line">  dump_face(_up)</span><br><span class="line">  dump_face(_left)</span><br><span class="line">  dump_face(_front)</span><br><span class="line">  dump_face(_right)</span><br><span class="line">  dump_face(_back)</span><br><span class="line">  dump_face(_down)</span><br><span class="line">  <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">transfroms = [_up, _left, _front, _right, _back, _down]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">cube: CUBE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  valid(cube)</span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  cube3d = arr_to_3d(cube)</span><br><span class="line"></span><br><span class="line">  cube3dsurface = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      set_cube(cube3dsurface, _up(i, j, n),  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>])  <span class="comment"># UP</span></span><br><span class="line">      set_cube(cube3dsurface, _left(i, j, n),  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])  <span class="comment"># LEFT</span></span><br><span class="line">      set_cube(cube3dsurface, _front(i, j, n),  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>])  <span class="comment"># FRONT</span></span><br><span class="line">      set_cube(cube3dsurface, _right(i, j, n),  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])  <span class="comment"># RIGHT</span></span><br><span class="line">      set_cube(cube3dsurface, _back(i, j, n),  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>])  <span class="comment"># BACK</span></span><br><span class="line">      set_cube(cube3dsurface, _down(i, j, n),  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>])  <span class="comment"># DOWN</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">two</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: fn(fn(x))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">three</span>(<span class="params">fn</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: fn(fn(fn(x)))</span><br><span class="line"></span><br><span class="line">  ops = [</span><br><span class="line">      rotateUp, two(rotateUp), three(rotateUp),</span><br><span class="line">      rotateDown, two(rotateDown), three(rotateDown),</span><br><span class="line">      <span class="comment"># rotateMidZ, two(rotateMidZ), three(rotateMidZ),</span></span><br><span class="line"></span><br><span class="line">      rotateLeft, two(rotateLeft), three(rotateLeft),</span><br><span class="line">      rotateRight, two(rotateRight), three(rotateRight),</span><br><span class="line">      <span class="comment"># rotateMidY, two(rotateMidY), three(rotateMidY),</span></span><br><span class="line"></span><br><span class="line">      rotateFront, two(rotateFront), three(rotateFront),</span><br><span class="line">      rotateBack, two(rotateBack), three(rotateBack),</span><br><span class="line">      <span class="comment"># rotateMidX, two(rotateMidX), three(rotateMidX),</span></span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line">  steplist = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">36</span>+<span class="number">1</span>)]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">cube3dsolver</span>():</span><br><span class="line">    ans = [cube3d]</span><br><span class="line">    <span class="keyword">for</span> dst_step <span class="keyword">in</span> steplist:</span><br><span class="line">      moves = steps(ans[-<span class="number">1</span>], dst_step)</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">f&#x27;step <span class="subst">&#123;dst_step&#125;</span> solved with ops = <span class="subst">&#123;<span class="built_in">len</span>(moves)-<span class="number">1</span>&#125;</span>&#x27;</span>)</span><br><span class="line">      ans = ans + moves[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">  ans = cube3dsolver()</span><br><span class="line">  show_3ds(ans, cube3dsurface)</span><br><span class="line">  dump3d(ans[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">solve([[[<span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">4</span>, <span class="number">2</span>, <span class="number">4</span>]], [[<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]], [[<span class="number">3</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]], [</span><br><span class="line">      [<span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>]], [[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>]], [[<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>], [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>], [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]]])</span><br></pre></td></tr></table></figure>

<p>从代码上讲,改动很小,就是 增加了顶面 十字 和 顶面 全黄的描述, 但是实际运行的时候, 单次迈进最多的还是7步</p>
<h4 id="版本5-回退一点-顶面十字-棱-meet-in-middle"><a href="#版本5-回退一点-顶面十字-棱-meet-in-middle" class="headerlink" title="版本5 回退一点,顶面十字+棱,meet-in-middle"></a>版本5 回退一点,顶面十字+棱,meet-in-middle</h4><p>如果按照 十字&#x3D;&gt; 顶面 &#x3D;&gt; 顶角 &#x3D;&gt; 顶棱,, “从预知的知识”来看, 单个步骤太长, 对于暴力搜的方案来说,不可行</p>
<p>这里换了一个进度表示: 顶面十字 &#x3D;&gt; 十字棱 &#x3D;&gt; 角在对应位置 &#x3D;&gt; 完成</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span>, <span class="type">Dict</span>, <span class="type">List</span>, <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#  U</span></span><br><span class="line"><span class="comment"># LFRB</span></span><br><span class="line"><span class="comment">#  D</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  0</span></span><br><span class="line"><span class="comment"># 1234</span></span><br><span class="line"><span class="comment">#  5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   黄</span></span><br><span class="line"><span class="comment"># 蓝红绿橙</span></span><br><span class="line"><span class="comment">#   白</span></span><br><span class="line">YELLOW = <span class="number">0</span></span><br><span class="line">BLUE = <span class="number">1</span></span><br><span class="line">RED = <span class="number">2</span></span><br><span class="line">GREEN = <span class="number">3</span></span><br><span class="line">ORANGE = <span class="number">4</span></span><br><span class="line">WHITE = <span class="number">5</span></span><br><span class="line">BLACK = <span class="number">6</span>  <span class="comment"># 用于简化状态</span></span><br><span class="line"></span><br><span class="line">CUBE = <span class="type">List</span>[<span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]]  <span class="comment"># ULFRBD</span></span><br><span class="line"><span class="comment"># [x][y][z] =&gt; (color,xyz扩展方向)</span></span><br><span class="line">CUBE3DCOLOR = <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]]]</span><br><span class="line">CUBE3DSURFACE = <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">List</span>[<span class="built_in">int</span>]]]]</span><br><span class="line">cube3dsurface = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid</span>(<span class="params">cube</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">len</span>(cube) == <span class="number">6</span></span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> face <span class="keyword">in</span> cube:</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(face) == n</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> face:</span><br><span class="line">      <span class="keyword">assert</span> <span class="built_in">len</span>(row) == n</span><br><span class="line">      <span class="keyword">for</span> v <span class="keyword">in</span> row:</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">0</span> &lt;= v <span class="keyword">and</span> v &lt; <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_3ds</span>(<span class="params">cube_3ds: <span class="type">List</span>[CUBE3DCOLOR], cube_3d_surface: CUBE3DSURFACE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  cnt = <span class="built_in">len</span>(cube_3ds)</span><br><span class="line">  row = <span class="built_in">max</span>(<span class="built_in">int</span>(cnt**<span class="number">0.5</span>), <span class="number">1</span>)</span><br><span class="line">  col = cnt//row + <span class="built_in">int</span>((cnt % row) != <span class="number">0</span>)</span><br><span class="line">  fig = plt.figure()</span><br><span class="line">  colors = [<span class="string">&#x27;#FFFF00&#x27;</span>, <span class="string">&#x27;#0000FF&#x27;</span>, <span class="string">&#x27;#FF0000&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;#00FF00&#x27;</span>, <span class="string">&#x27;#FF681F&#x27;</span>, <span class="string">&#x27;#FFFFFF&#x27;</span>, <span class="string">&#x27;#000000&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt):</span><br><span class="line">    cube_3d = cube_3ds[i]</span><br><span class="line">    ax = fig.add_subplot(row, col, i+<span class="number">1</span>, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x, yzv <span class="keyword">in</span> cube_3d.items():</span><br><span class="line">      <span class="keyword">for</span> y, zv <span class="keyword">in</span> yzv.items():</span><br><span class="line">        <span class="keyword">for</span> z, c <span class="keyword">in</span> zv.items():</span><br><span class="line">          dx, dy, dz = cube_3d_surface[x][y][z]</span><br><span class="line">          <span class="keyword">if</span> dx == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x, x], [x, x]])</span><br><span class="line">            Y = np.array([[y-<span class="number">1</span>, y+<span class="number">1</span>], [y-<span class="number">1</span>, y+<span class="number">1</span>]])</span><br><span class="line">            Z = np.array([[z-<span class="number">1</span>, z-<span class="number">1</span>], [z+<span class="number">1</span>, z+<span class="number">1</span>]])</span><br><span class="line">          <span class="keyword">elif</span> dy == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x-<span class="number">1</span>, x+<span class="number">1</span>], [x-<span class="number">1</span>, x+<span class="number">1</span>]])</span><br><span class="line">            Y = np.array([[y, y], [y, y]])</span><br><span class="line">            Z = np.array([[z-<span class="number">1</span>, z-<span class="number">1</span>], [z+<span class="number">1</span>, z+<span class="number">1</span>]])</span><br><span class="line">          <span class="keyword">elif</span> dz == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x-<span class="number">1</span>, x+<span class="number">1</span>], [x-<span class="number">1</span>, x+<span class="number">1</span>]])</span><br><span class="line">            Y = np.array([[y-<span class="number">1</span>, y-<span class="number">1</span>], [y+<span class="number">1</span>, y+<span class="number">1</span>]])</span><br><span class="line">            Z = np.array([[z, z], [z, z]])</span><br><span class="line">          ax.plot_surface(</span><br><span class="line">              X, Y, Z, color=colors[c])</span><br><span class="line"></span><br><span class="line">  plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_cube</span>(<span class="params">res: CUBE3DSURFACE | CUBE3DCOLOR, xyz: <span class="type">List</span>[<span class="built_in">int</span>], v: <span class="type">Any</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  x, y, z = xyz</span><br><span class="line">  <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">    res[x] = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> y <span class="keyword">not</span> <span class="keyword">in</span> res[x]:</span><br><span class="line">    res[x][y] = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  res[x][y][z] = v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_up</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">2</span> * i - (n - <span class="number">1</span>), <span class="number">2</span> * j - (n - <span class="number">1</span>), + n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_left</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">2</span> * j - (n - <span class="number">1</span>), -n, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_front</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [+n, <span class="number">2</span> * j - (n - <span class="number">1</span>), (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_right</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [(n - <span class="number">1</span>) - <span class="number">2</span> * j, +n, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_back</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [-n, (n - <span class="number">1</span>) - <span class="number">2</span> * j, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_down</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [(n - <span class="number">1</span>) - <span class="number">2</span> * i, <span class="number">2</span> * j - (n - <span class="number">1</span>), - n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">transfroms = [_up, _left, _front, _right, _back, _down]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">arr_to_3d</span>(<span class="params">cube: CUBE</span>) -&gt; CUBE3DCOLOR:</span><br><span class="line">  res: CUBE3DCOLOR = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      set_cube(res, _up(i, j, n), cube[<span class="number">0</span>][i][j])  <span class="comment"># UP</span></span><br><span class="line">      set_cube(res, _left(i, j, n), cube[<span class="number">1</span>][i][j])  <span class="comment"># LEFT</span></span><br><span class="line">      set_cube(res, _front(i, j, n), cube[<span class="number">2</span>][i][j])  <span class="comment"># FRONT</span></span><br><span class="line">      set_cube(res, _right(i, j, n), cube[<span class="number">3</span>][i][j])  <span class="comment"># RIGHT</span></span><br><span class="line">      set_cube(res, _back(i, j, n), cube[<span class="number">4</span>][i][j])  <span class="comment"># BACK</span></span><br><span class="line">      set_cube(res, _down(i, j, n), cube[<span class="number">5</span>][i][j])  <span class="comment"># DOWN</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateX</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着X轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateY</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着Y轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateZ</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着Z轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateFilter</span>(<span class="params">cube3d: CUBE3DCOLOR, <span class="built_in">filter</span>, rotateFn</span>) -&gt; CUBE3DCOLOR:</span><br><span class="line">  res = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> x, yzv <span class="keyword">in</span> cube3d.items():</span><br><span class="line">    <span class="keyword">for</span> y, zv <span class="keyword">in</span> yzv.items():</span><br><span class="line">      <span class="keyword">for</span> z, v <span class="keyword">in</span> zv.items():</span><br><span class="line">        <span class="comment"># filter() return &#x27;need rotate&#x27;</span></span><br><span class="line">        set_cube(res, rotateFn([x, y, z]) <span class="keyword">if</span> <span class="built_in">filter</span>(x, y, z) <span class="keyword">else</span> [x, y, z], v)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">copy</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: <span class="literal">False</span>, <span class="keyword">lambda</span> o: o)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateFront</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: x &gt; <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateBack</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: x &lt; <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateLeft</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: y &lt; <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateRight</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: y &gt; <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateUp</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: z &gt; <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateDown</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: z &lt; <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">progress</span>(<span class="params">cube3d: CUBE3DCOLOR</span>) -&gt; <span class="built_in">int</span>:  <span class="comment"># 只针对3阶魔方</span></span><br><span class="line">  p = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">c</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    x, y, z = xyz</span><br><span class="line">    <span class="keyword">return</span> cube3d[x][y][z]</span><br><span class="line">  <span class="comment"># 底面 十字</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">2</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">1</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">2</span>, <span class="number">1</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">1</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">2</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">1</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">2</span>, <span class="number">1</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">1</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 底面4角</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">2</span>, <span class="number">2</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_front(<span class="number">2</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">2</span>, <span class="number">2</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_right(<span class="number">2</span>, <span class="number">0</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">2</span>, <span class="number">2</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_back(<span class="number">2</span>, <span class="number">0</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">2</span>, <span class="number">2</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_left(<span class="number">2</span>, <span class="number">0</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">8</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 第二层4个棱, 这里通过5 &gt; 1+1+1+1 保证了 完成的棱 大于 所有的半步状态</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">1</span>, <span class="number">2</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_front(<span class="number">1</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">1</span>, <span class="number">2</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_right(<span class="number">1</span>, <span class="number">0</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">1</span>, <span class="number">2</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_back(<span class="number">1</span>, <span class="number">0</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">1</span>, <span class="number">2</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_left(<span class="number">1</span>, <span class="number">0</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 第二层 中间半步状态</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">0</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">1</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">0</span>, <span class="number">1</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">2</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">0</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">1</span>, <span class="number">2</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">0</span>, <span class="number">1</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">0</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">28</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 顶十字</span></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">0</span>, <span class="number">1</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">1</span>, <span class="number">0</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">1</span>, <span class="number">2</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">2</span>, <span class="number">1</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">32</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 顶十字的棱</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">0</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">0</span>, <span class="number">1</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">0</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">0</span>, <span class="number">1</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">36</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 顶四角 在对应的位置</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">sorted</span>([c(_up(<span class="number">2</span>, <span class="number">0</span>)), c(_left(<span class="number">0</span>, <span class="number">2</span>)), c(_front(<span class="number">0</span>, <span class="number">0</span>))]) == <span class="built_in">sorted</span>([c(_up(<span class="number">1</span>, <span class="number">1</span>)), c(_left(<span class="number">1</span>, <span class="number">1</span>)), c(_front(<span class="number">1</span>, <span class="number">1</span>))]):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">sorted</span>([c(_up(<span class="number">2</span>, <span class="number">2</span>)), c(_front(<span class="number">0</span>, <span class="number">2</span>)), c(_right(<span class="number">0</span>, <span class="number">0</span>))]) == <span class="built_in">sorted</span>([c(_up(<span class="number">1</span>, <span class="number">1</span>)), c(_front(<span class="number">1</span>, <span class="number">1</span>)), c(_right(<span class="number">1</span>, <span class="number">1</span>))]):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">sorted</span>([c(_up(<span class="number">0</span>, <span class="number">2</span>)), c(_right(<span class="number">0</span>, <span class="number">2</span>)), c(_back(<span class="number">0</span>, <span class="number">0</span>))]) == <span class="built_in">sorted</span>([c(_up(<span class="number">1</span>, <span class="number">1</span>)), c(_right(<span class="number">1</span>, <span class="number">1</span>)), c(_back(<span class="number">1</span>, <span class="number">1</span>))]):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">sorted</span>([c(_up(<span class="number">0</span>, <span class="number">0</span>)), c(_back(<span class="number">0</span>, <span class="number">2</span>)), c(_left(<span class="number">0</span>, <span class="number">0</span>))]) == <span class="built_in">sorted</span>([c(_up(<span class="number">1</span>, <span class="number">1</span>)), c(_back(<span class="number">1</span>, <span class="number">1</span>)), c(_left(<span class="number">1</span>, <span class="number">1</span>))]):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">40</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 终止状态</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">0</span>, <span class="number">0</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">0</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">0</span>, <span class="number">0</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">0</span>, <span class="number">0</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">44</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateMidX</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: x == <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateMidY</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: y == <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateMidZ</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: z == <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">two</span>(<span class="params">fn</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">lambda</span> x: fn(fn(x))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">three</span>(<span class="params">fn</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">lambda</span> x: fn(fn(fn(x)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ops = [</span><br><span class="line">    rotateUp, two(rotateUp), three(rotateUp),</span><br><span class="line">    rotateDown, two(rotateDown), three(rotateDown),</span><br><span class="line">    <span class="comment"># rotateMidZ, two(rotateMidZ), three(rotateMidZ),</span></span><br><span class="line"></span><br><span class="line">    rotateLeft, two(rotateLeft), three(rotateLeft),</span><br><span class="line">    rotateRight, two(rotateRight), three(rotateRight),</span><br><span class="line">    <span class="comment"># rotateMidY, two(rotateMidY), three(rotateMidY),</span></span><br><span class="line"></span><br><span class="line">    rotateFront, two(rotateFront), three(rotateFront),</span><br><span class="line">    rotateBack, two(rotateBack), three(rotateBack),</span><br><span class="line">    <span class="comment"># rotateMidX, two(rotateMidX), three(rotateMidX),</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">res: <span class="type">List</span>[CUBE3DCOLOR], opidxs: <span class="type">List</span>[<span class="built_in">int</span>], remain: <span class="built_in">int</span>, stop: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">  <span class="keyword">if</span> progress(res[-<span class="number">1</span>]) &gt;= stop:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">  <span class="keyword">if</span> remain &lt;= <span class="number">0</span>:  <span class="comment"># 迭代加深</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ops)):</span><br><span class="line">    <span class="comment"># 剪枝</span></span><br><span class="line">    <span class="keyword">if</span> idx // <span class="number">3</span> == opidxs[-<span class="number">1</span>] // <span class="number">3</span>:  <span class="comment"># 不要连续旋转同一个面</span></span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> idx // <span class="number">6</span> == opidxs[-<span class="number">1</span>] // <span class="number">6</span>:  <span class="comment"># 如果 连续 沿着同轴旋转 两个面</span></span><br><span class="line">      <span class="keyword">if</span> idx &gt; opidxs[-<span class="number">1</span>]:  <span class="comment"># 保证 序号小的先旋转</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    op = ops[idx]</span><br><span class="line">    res.append(op(res[-<span class="number">1</span>]))</span><br><span class="line">    opidxs.append(idx)</span><br><span class="line">    <span class="keyword">if</span> dfs(res, opidxs, remain-<span class="number">1</span>, stop):</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    res.pop()</span><br><span class="line">    opidxs.pop()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">steps</span>(<span class="params">cube3d: CUBE3DCOLOR, stop: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[CUBE3DCOLOR]:</span><br><span class="line">  res = [cube3d]</span><br><span class="line">  opsidxs = [-<span class="number">1</span>]</span><br><span class="line">  dep = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">not</span> dfs(res, opsidxs, dep, stop):</span><br><span class="line">    dep += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;dep = &#x27;</span>, dep)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">black_up_十棱</span>(<span class="params">cube3d: CUBE3DCOLOR</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># return opidxs</span></span><br><span class="line">  <span class="comment"># meet in middle</span></span><br><span class="line">  <span class="keyword">assert</span> progress(cube3d) &gt;= <span class="number">32</span></span><br><span class="line">  S = &#123;&#125;</span><br><span class="line">  STATE_TYPE = <span class="type">List</span>[<span class="built_in">int</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">c</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    x, y, z = xyz</span><br><span class="line">    <span class="keyword">return</span> cube3d[x][y][z]</span><br><span class="line"></span><br><span class="line">  <span class="comment">#  [state] =&gt; STATE_TYPE &#123;正向/逆向,操作idxs arr&#125;</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">get_state</span>(<span class="params">state: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">bool</span>, STATE_TYPE]:</span><br><span class="line">    ref = S</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> state:</span><br><span class="line">      <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> ref:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line">      ref = ref[v]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span>, ref</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">set_state</span>(<span class="params">state: <span class="type">List</span>[<span class="built_in">int</span>], val: STATE_TYPE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    ref = S</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(state)-<span class="number">1</span>):</span><br><span class="line">      <span class="keyword">if</span> state[i] <span class="keyword">not</span> <span class="keyword">in</span> ref:</span><br><span class="line">        ref[state[i]] = &#123;&#125;</span><br><span class="line">      ref = ref[state[i]]</span><br><span class="line">    ref[state[-<span class="number">1</span>]] = val</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">flat_cube</span>(<span class="params">cur: CUBE3DCOLOR, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    res = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>*n*n)]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">          x, y, z = transfroms[_](i, j)</span><br><span class="line">          res[j+n*(i+n*_)] = cur[x][y][z]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">rev</span>(<span class="params">opidxs: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    ret = []</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> opidxs[::-<span class="number">1</span>]:</span><br><span class="line">      <span class="keyword">if</span> v == -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      ret.append((v//<span class="number">3</span>)*<span class="number">3</span> + (<span class="number">2</span>-v % <span class="number">3</span>))</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 正向 build</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">cur: CUBE3DCOLOR, opidxs: <span class="type">List</span>[<span class="built_in">int</span>], remain: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    flat_state = flat_cube(cur)</span><br><span class="line">    exist, state = get_state(flat_state)</span><br><span class="line">    <span class="keyword">if</span> exist <span class="keyword">and</span> <span class="built_in">len</span>(state) &lt;= <span class="built_in">len</span>(opidxs):  <span class="comment"># 更快的步骤, 由状态剪枝</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    set_state(flat_state, opidxs)</span><br><span class="line">    <span class="keyword">if</span> remain == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ops)):</span><br><span class="line">      build(ops[idx](cur), opidxs+[idx], remain-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 逆向 query</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">cur: CUBE3DCOLOR, opidxs: <span class="type">List</span>[<span class="built_in">int</span>], remain: <span class="built_in">int</span></span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">bool</span>, <span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">    flat_state = flat_cube(cur)</span><br><span class="line">    exist, value = get_state(flat_state)</span><br><span class="line">    <span class="keyword">if</span> exist:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">True</span>, value + rev(opidxs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> remain == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span>, []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ops)):</span><br><span class="line">      <span class="comment"># 剪枝</span></span><br><span class="line">      <span class="comment"># if idx // 3 == opidxs[-1] // 3:  # 不要连续旋转同一个面</span></span><br><span class="line">      <span class="comment">#   continue</span></span><br><span class="line">      <span class="comment"># if idx // 6 == opidxs[-1] // 6:  # 如果 连续 沿着同轴旋转 两个面</span></span><br><span class="line">      <span class="comment">#   if idx &gt; opidxs[-1]:  # 保证 序号小的先旋转</span></span><br><span class="line">      <span class="comment">#     continue</span></span><br><span class="line">      ok, ret = query(ops[idx](cur), opidxs+[idx], remain-<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">if</span> ok:</span><br><span class="line">        <span class="keyword">return</span> ok, ret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>, []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">black_start</span>() -&gt; CUBE3DCOLOR:</span><br><span class="line">    res = copy(cube3d)</span><br><span class="line">    set_cube(res, _up(<span class="number">0</span>, <span class="number">0</span>), BLACK)</span><br><span class="line">    set_cube(res, _up(<span class="number">0</span>, <span class="number">2</span>), BLACK)</span><br><span class="line">    set_cube(res, _up(<span class="number">2</span>, <span class="number">0</span>), BLACK)</span><br><span class="line">    set_cube(res, _up(<span class="number">2</span>, <span class="number">2</span>), BLACK)</span><br><span class="line"></span><br><span class="line">    set_cube(res, _left(<span class="number">0</span>, <span class="number">0</span>), BLACK)</span><br><span class="line">    set_cube(res, _left(<span class="number">0</span>, <span class="number">2</span>), BLACK)</span><br><span class="line"></span><br><span class="line">    set_cube(res, _front(<span class="number">0</span>, <span class="number">0</span>), BLACK)</span><br><span class="line">    set_cube(res, _front(<span class="number">0</span>, <span class="number">2</span>), BLACK)</span><br><span class="line"></span><br><span class="line">    set_cube(res, _right(<span class="number">0</span>, <span class="number">0</span>), BLACK)</span><br><span class="line">    set_cube(res, _right(<span class="number">0</span>, <span class="number">2</span>), BLACK)</span><br><span class="line"></span><br><span class="line">    set_cube(res, _back(<span class="number">0</span>, <span class="number">0</span>), BLACK)</span><br><span class="line">    set_cube(res, _back(<span class="number">0</span>, <span class="number">2</span>), BLACK)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">black_dst</span>() -&gt; CUBE3DCOLOR:</span><br><span class="line">    res = black_start()</span><br><span class="line">    set_cube(res, _up(<span class="number">0</span>, <span class="number">1</span>), c(_up(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    set_cube(res, _up(<span class="number">1</span>, <span class="number">0</span>), c(_up(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    set_cube(res, _up(<span class="number">1</span>, <span class="number">2</span>), c(_up(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    set_cube(res, _up(<span class="number">2</span>, <span class="number">1</span>), c(_up(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">    set_cube(res, _left(<span class="number">0</span>, <span class="number">1</span>), c(_left(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    set_cube(res, _front(<span class="number">0</span>, <span class="number">1</span>), c(_front(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    set_cube(res, _right(<span class="number">0</span>, <span class="number">1</span>), c(_right(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    set_cube(res, _back(<span class="number">0</span>, <span class="number">1</span>), c(_back(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  st = black_start()</span><br><span class="line">  build(st, [-<span class="number">1</span>], <span class="number">4</span>)</span><br><span class="line">  st = rotateUp(st)</span><br><span class="line">  build(st, [-<span class="number">1</span>, <span class="number">0</span>], <span class="number">4</span>)</span><br><span class="line">  st = rotateUp(st)</span><br><span class="line">  build(st, [-<span class="number">1</span>, <span class="number">1</span>], <span class="number">4</span>)</span><br><span class="line">  st = rotateUp(st)</span><br><span class="line">  build(st, [-<span class="number">1</span>, <span class="number">2</span>], <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;build finish&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  dst = black_dst()</span><br><span class="line">  <span class="keyword">for</span> op <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">1</span>, <span class="number">3</span>):  <span class="comment"># -1,0,1,2</span></span><br><span class="line">    ok, idxs = query(dst, [op], <span class="number">4</span>)  <span class="comment"># 注意过滤</span></span><br><span class="line">    <span class="keyword">if</span> ok:</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> o: o != -<span class="number">1</span>, idxs))</span><br><span class="line">    dst = rotateUp(dst)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">assert</span> <span class="literal">False</span></span><br><span class="line">  <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump3d</span>(<span class="params">cube3d: CUBE3DCOLOR, n=<span class="number">3</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  res = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">dump_face</span>(<span class="params">fn</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    face = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      row = []</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        x, y, z = fn(i, j)</span><br><span class="line">        row.append(cube3d[x][y][z])</span><br><span class="line">      face.append(row)</span><br><span class="line">    res.append(face)</span><br><span class="line"></span><br><span class="line">  dump_face(_up)</span><br><span class="line">  dump_face(_left)</span><br><span class="line">  dump_face(_front)</span><br><span class="line">  dump_face(_right)</span><br><span class="line">  dump_face(_back)</span><br><span class="line">  dump_face(_down)</span><br><span class="line">  <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">cube: CUBE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  valid(cube)</span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  cube3d = arr_to_3d(cube)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      set_cube(cube3dsurface, _up(i, j, n),  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>])  <span class="comment"># UP</span></span><br><span class="line">      set_cube(cube3dsurface, _left(i, j, n),  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])  <span class="comment"># LEFT</span></span><br><span class="line">      set_cube(cube3dsurface, _front(i, j, n),  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>])  <span class="comment"># FRONT</span></span><br><span class="line">      set_cube(cube3dsurface, _right(i, j, n),  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])  <span class="comment"># RIGHT</span></span><br><span class="line">      set_cube(cube3dsurface, _back(i, j, n),  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>])  <span class="comment"># BACK</span></span><br><span class="line">      set_cube(cube3dsurface, _down(i, j, n),  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>])  <span class="comment"># DOWN</span></span><br><span class="line"></span><br><span class="line">  steplist = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">32</span>+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">cube3dsolver</span>():</span><br><span class="line">    ans = [cube3d]</span><br><span class="line">    <span class="keyword">for</span> dst_step <span class="keyword">in</span> steplist:</span><br><span class="line">      moves = steps(ans[-<span class="number">1</span>], dst_step)</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">f&#x27;step <span class="subst">&#123;dst_step&#125;</span> solved with ops = <span class="subst">&#123;<span class="built_in">len</span>(moves)-<span class="number">1</span>&#125;</span>&#x27;</span>)</span><br><span class="line">      ans = ans + moves[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    opidxs = black_up_十棱(ans[-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> opidxs:</span><br><span class="line">      ans.append(ops[idx](ans[-<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">  ans = cube3dsolver()</span><br><span class="line">  show_3ds(ans, cube3dsurface)</span><br><span class="line">  dump3d(ans[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">solve([[[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]], [[<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]], [[<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]], [</span><br><span class="line">      [<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>]], [[<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>]], [[<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>], [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>], [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]]])</span><br></pre></td></tr></table></figure>


<h4 id="版本6-优化棱进度-与-顶面十字"><a href="#版本6-优化棱进度-与-顶面十字" class="headerlink" title="版本6 优化棱进度 与 顶面十字"></a>版本6 优化棱进度 与 顶面十字</h4><p>TODO……….. 搜索量太大没跑出来,还需要优化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span>, <span class="type">Dict</span>, <span class="type">List</span>, <span class="type">Tuple</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">#  U</span></span><br><span class="line"><span class="comment"># LFRB</span></span><br><span class="line"><span class="comment">#  D</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  0</span></span><br><span class="line"><span class="comment"># 1234</span></span><br><span class="line"><span class="comment">#  5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   黄</span></span><br><span class="line"><span class="comment"># 蓝红绿橙</span></span><br><span class="line"><span class="comment">#   白</span></span><br><span class="line">YELLOW = <span class="number">0</span></span><br><span class="line">BLUE = <span class="number">1</span></span><br><span class="line">RED = <span class="number">2</span></span><br><span class="line">GREEN = <span class="number">3</span></span><br><span class="line">ORANGE = <span class="number">4</span></span><br><span class="line">WHITE = <span class="number">5</span></span><br><span class="line">BLACK = <span class="number">6</span>  <span class="comment"># 用于简化状态</span></span><br><span class="line"></span><br><span class="line">CUBE = <span class="type">List</span>[<span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]]  <span class="comment"># ULFRBD</span></span><br><span class="line"><span class="comment"># [x][y][z] =&gt; (color,xyz扩展方向)</span></span><br><span class="line">CUBE3DCOLOR = <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]]]</span><br><span class="line">CUBE3DSURFACE = <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">Dict</span>[<span class="built_in">int</span>, <span class="type">List</span>[<span class="built_in">int</span>]]]]</span><br><span class="line">cube3dsurface = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">valid</span>(<span class="params">cube</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  <span class="keyword">assert</span> <span class="built_in">len</span>(cube) == <span class="number">6</span></span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> face <span class="keyword">in</span> cube:</span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(face) == n</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> face:</span><br><span class="line">      <span class="keyword">assert</span> <span class="built_in">len</span>(row) == n</span><br><span class="line">      <span class="keyword">for</span> v <span class="keyword">in</span> row:</span><br><span class="line">        <span class="keyword">assert</span> <span class="number">0</span> &lt;= v <span class="keyword">and</span> v &lt; <span class="number">6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_3ds</span>(<span class="params">cube_3ds: <span class="type">List</span>[CUBE3DCOLOR], cube_3d_surface: CUBE3DSURFACE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  cnt = <span class="built_in">len</span>(cube_3ds)</span><br><span class="line">  row = <span class="built_in">max</span>(<span class="built_in">int</span>(cnt**<span class="number">0.5</span>), <span class="number">1</span>)</span><br><span class="line">  col = cnt//row + <span class="built_in">int</span>((cnt % row) != <span class="number">0</span>)</span><br><span class="line">  fig = plt.figure()</span><br><span class="line">  colors = [<span class="string">&#x27;#FFFF00&#x27;</span>, <span class="string">&#x27;#0000FF&#x27;</span>, <span class="string">&#x27;#FF0000&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;#00FF00&#x27;</span>, <span class="string">&#x27;#FF681F&#x27;</span>, <span class="string">&#x27;#FFFFFF&#x27;</span>, <span class="string">&#x27;#000000&#x27;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cnt):</span><br><span class="line">    cube_3d = cube_3ds[i]</span><br><span class="line">    ax = fig.add_subplot(row, col, i+<span class="number">1</span>, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x, yzv <span class="keyword">in</span> cube_3d.items():</span><br><span class="line">      <span class="keyword">for</span> y, zv <span class="keyword">in</span> yzv.items():</span><br><span class="line">        <span class="keyword">for</span> z, c <span class="keyword">in</span> zv.items():</span><br><span class="line">          dx, dy, dz = cube_3d_surface[x][y][z]</span><br><span class="line">          <span class="keyword">if</span> dx == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x, x], [x, x]])</span><br><span class="line">            Y = np.array([[y-<span class="number">1</span>, y+<span class="number">1</span>], [y-<span class="number">1</span>, y+<span class="number">1</span>]])</span><br><span class="line">            Z = np.array([[z-<span class="number">1</span>, z-<span class="number">1</span>], [z+<span class="number">1</span>, z+<span class="number">1</span>]])</span><br><span class="line">          <span class="keyword">elif</span> dy == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x-<span class="number">1</span>, x+<span class="number">1</span>], [x-<span class="number">1</span>, x+<span class="number">1</span>]])</span><br><span class="line">            Y = np.array([[y, y], [y, y]])</span><br><span class="line">            Z = np.array([[z-<span class="number">1</span>, z-<span class="number">1</span>], [z+<span class="number">1</span>, z+<span class="number">1</span>]])</span><br><span class="line">          <span class="keyword">elif</span> dz == <span class="number">0</span>:</span><br><span class="line">            X = np.array([[x-<span class="number">1</span>, x+<span class="number">1</span>], [x-<span class="number">1</span>, x+<span class="number">1</span>]])</span><br><span class="line">            Y = np.array([[y-<span class="number">1</span>, y-<span class="number">1</span>], [y+<span class="number">1</span>, y+<span class="number">1</span>]])</span><br><span class="line">            Z = np.array([[z, z], [z, z]])</span><br><span class="line">          ax.plot_surface(</span><br><span class="line">              X, Y, Z, color=colors[c])</span><br><span class="line"></span><br><span class="line">  plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_cube</span>(<span class="params">res: CUBE3DSURFACE | CUBE3DCOLOR, xyz: <span class="type">List</span>[<span class="built_in">int</span>], v: <span class="type">Any</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  x, y, z = xyz</span><br><span class="line">  <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">    res[x] = &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> y <span class="keyword">not</span> <span class="keyword">in</span> res[x]:</span><br><span class="line">    res[x][y] = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  res[x][y][z] = v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cube</span>(<span class="params">res: CUBE3DSURFACE | CUBE3DCOLOR, xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">  x, y, z = xyz</span><br><span class="line">  <span class="keyword">return</span> res[x][y][z]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_up</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">2</span> * i - (n - <span class="number">1</span>), <span class="number">2</span> * j - (n - <span class="number">1</span>), + n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_left</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">2</span> * j - (n - <span class="number">1</span>), -n, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_front</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [+n, <span class="number">2</span> * j - (n - <span class="number">1</span>), (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_right</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [(n - <span class="number">1</span>) - <span class="number">2</span> * j, +n, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_back</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [-n, (n - <span class="number">1</span>) - <span class="number">2</span> * j, (n - <span class="number">1</span>) - <span class="number">2</span> * i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_down</span>(<span class="params">i, j, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  <span class="keyword">return</span> [(n - <span class="number">1</span>) - <span class="number">2</span> * i, <span class="number">2</span> * j - (n - <span class="number">1</span>), - n]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">transfroms = [_up, _left, _front, _right, _back, _down]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">arr_to_3d</span>(<span class="params">cube: CUBE</span>) -&gt; CUBE3DCOLOR:</span><br><span class="line">  res: CUBE3DCOLOR = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      set_cube(res, _up(i, j, n), cube[<span class="number">0</span>][i][j])  <span class="comment"># UP</span></span><br><span class="line">      set_cube(res, _left(i, j, n), cube[<span class="number">1</span>][i][j])  <span class="comment"># LEFT</span></span><br><span class="line">      set_cube(res, _front(i, j, n), cube[<span class="number">2</span>][i][j])  <span class="comment"># FRONT</span></span><br><span class="line">      set_cube(res, _right(i, j, n), cube[<span class="number">3</span>][i][j])  <span class="comment"># RIGHT</span></span><br><span class="line">      set_cube(res, _back(i, j, n), cube[<span class="number">4</span>][i][j])  <span class="comment"># BACK</span></span><br><span class="line">      set_cube(res, _down(i, j, n), cube[<span class="number">5</span>][i][j])  <span class="comment"># DOWN</span></span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateX</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着X轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateY</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着Y轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateZ</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># 绕着Z轴转</span></span><br><span class="line">  <span class="keyword">return</span> np.matmul(np.array([xyz]), np.array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]]))[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateFilter</span>(<span class="params">cube3d: CUBE3DCOLOR, <span class="built_in">filter</span>, rotateFn</span>) -&gt; CUBE3DCOLOR:</span><br><span class="line">  res = &#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> x, yzv <span class="keyword">in</span> cube3d.items():</span><br><span class="line">    <span class="keyword">for</span> y, zv <span class="keyword">in</span> yzv.items():</span><br><span class="line">      <span class="keyword">for</span> z, v <span class="keyword">in</span> zv.items():</span><br><span class="line">        <span class="comment"># filter() return &#x27;need rotate&#x27;</span></span><br><span class="line">        set_cube(res, rotateFn([x, y, z]) <span class="keyword">if</span> <span class="built_in">filter</span>(x, y, z) <span class="keyword">else</span> [x, y, z], v)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">copy</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: <span class="literal">False</span>, <span class="keyword">lambda</span> o: o)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateFront</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: x &gt; <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateBack</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: x &lt; <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateLeft</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: y &lt; <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateRight</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: y &gt; <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateUp</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: z &gt; <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateDown</span>(<span class="params">cube: CUBE3DCOLOR</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: z &lt; <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">progress</span>(<span class="params">cube3d: CUBE3DCOLOR</span>) -&gt; <span class="built_in">int</span>:  <span class="comment"># 只针对3阶魔方</span></span><br><span class="line">  p = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">c</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    x, y, z = xyz</span><br><span class="line">    <span class="keyword">return</span> cube3d[x][y][z]</span><br><span class="line">  <span class="comment"># 底面 十字</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">2</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">1</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">2</span>, <span class="number">1</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">1</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">2</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">1</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">2</span>, <span class="number">1</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">1</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 底面4角</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">2</span>, <span class="number">2</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_front(<span class="number">2</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">2</span>, <span class="number">2</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_right(<span class="number">2</span>, <span class="number">0</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">0</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">2</span>, <span class="number">2</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_back(<span class="number">2</span>, <span class="number">0</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">2</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">2</span>, <span class="number">2</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_left(<span class="number">2</span>, <span class="number">0</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_down(<span class="number">2</span>, <span class="number">0</span>)) == c(_down(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">8</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 第二层4个棱, 这里通过5 &gt; 1+1+1+1 保证了 完成的棱 大于 所有的半步状态</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">1</span>, <span class="number">2</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_front(<span class="number">1</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">1</span>, <span class="number">2</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_right(<span class="number">1</span>, <span class="number">0</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">1</span>, <span class="number">2</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_back(<span class="number">1</span>, <span class="number">0</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">1</span>, <span class="number">2</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_left(<span class="number">1</span>, <span class="number">0</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">5</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 第二层 中间半步状态</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">0</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">1</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">0</span>, <span class="number">1</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">2</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">0</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">1</span>, <span class="number">2</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">0</span>, <span class="number">1</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">and</span> c(_up(<span class="number">0</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">28</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 顶十字</span></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">0</span>, <span class="number">1</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">1</span>, <span class="number">0</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">1</span>, <span class="number">2</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_up(<span class="number">2</span>, <span class="number">1</span>)) == c(_up(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">32</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 顶十字的棱</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">0</span>, <span class="number">1</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">0</span>, <span class="number">1</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">0</span>, <span class="number">1</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">0</span>, <span class="number">1</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">36</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 顶四角 在对应的位置</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">sorted</span>([c(_up(<span class="number">2</span>, <span class="number">0</span>)), c(_left(<span class="number">0</span>, <span class="number">2</span>)), c(_front(<span class="number">0</span>, <span class="number">0</span>))]) == <span class="built_in">sorted</span>([c(_up(<span class="number">1</span>, <span class="number">1</span>)), c(_left(<span class="number">1</span>, <span class="number">1</span>)), c(_front(<span class="number">1</span>, <span class="number">1</span>))]):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">sorted</span>([c(_up(<span class="number">2</span>, <span class="number">2</span>)), c(_front(<span class="number">0</span>, <span class="number">2</span>)), c(_right(<span class="number">0</span>, <span class="number">0</span>))]) == <span class="built_in">sorted</span>([c(_up(<span class="number">1</span>, <span class="number">1</span>)), c(_front(<span class="number">1</span>, <span class="number">1</span>)), c(_right(<span class="number">1</span>, <span class="number">1</span>))]):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">sorted</span>([c(_up(<span class="number">0</span>, <span class="number">2</span>)), c(_right(<span class="number">0</span>, <span class="number">2</span>)), c(_back(<span class="number">0</span>, <span class="number">0</span>))]) == <span class="built_in">sorted</span>([c(_up(<span class="number">1</span>, <span class="number">1</span>)), c(_right(<span class="number">1</span>, <span class="number">1</span>)), c(_back(<span class="number">1</span>, <span class="number">1</span>))]):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">sorted</span>([c(_up(<span class="number">0</span>, <span class="number">0</span>)), c(_back(<span class="number">0</span>, <span class="number">2</span>)), c(_left(<span class="number">0</span>, <span class="number">0</span>))]) == <span class="built_in">sorted</span>([c(_up(<span class="number">1</span>, <span class="number">1</span>)), c(_back(<span class="number">1</span>, <span class="number">1</span>)), c(_left(<span class="number">1</span>, <span class="number">1</span>))]):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">40</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 终止状态</span></span><br><span class="line">  <span class="keyword">if</span> c(_left(<span class="number">0</span>, <span class="number">0</span>)) == c(_left(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_front(<span class="number">0</span>, <span class="number">0</span>)) == c(_front(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_right(<span class="number">0</span>, <span class="number">0</span>)) == c(_right(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> c(_back(<span class="number">0</span>, <span class="number">0</span>)) == c(_back(<span class="number">1</span>, <span class="number">1</span>)):</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> p != <span class="number">44</span>:</span><br><span class="line">    <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateMidX</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: x == <span class="number">0</span>, rotateX)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateMidY</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: y == <span class="number">0</span>, rotateY)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rotateMidZ</span>(<span class="params">cube</span>): <span class="keyword">return</span> rotateFilter(</span><br><span class="line">    cube, <span class="keyword">lambda</span> x, y, z: z == <span class="number">0</span>, rotateZ)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">two</span>(<span class="params">fn</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">lambda</span> x: fn(fn(x))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">three</span>(<span class="params">fn</span>):</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">lambda</span> x: fn(fn(fn(x)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ops = [</span><br><span class="line">    rotateUp, two(rotateUp), three(rotateUp),</span><br><span class="line">    rotateDown, two(rotateDown), three(rotateDown),</span><br><span class="line">    <span class="comment"># rotateMidZ, two(rotateMidZ), three(rotateMidZ),</span></span><br><span class="line"></span><br><span class="line">    rotateLeft, two(rotateLeft), three(rotateLeft),</span><br><span class="line">    rotateRight, two(rotateRight), three(rotateRight),</span><br><span class="line">    <span class="comment"># rotateMidY, two(rotateMidY), three(rotateMidY),</span></span><br><span class="line"></span><br><span class="line">    rotateFront, two(rotateFront), three(rotateFront),</span><br><span class="line">    rotateBack, two(rotateBack), three(rotateBack),</span><br><span class="line">    <span class="comment"># rotateMidX, two(rotateMidX), three(rotateMidX),</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">res: <span class="type">List</span>[CUBE3DCOLOR], opidxs: <span class="type">List</span>[<span class="built_in">int</span>], remain: <span class="built_in">int</span>, stop: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">  <span class="keyword">if</span> progress(res[-<span class="number">1</span>]) &gt;= stop:</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">  <span class="keyword">if</span> remain &lt;= <span class="number">0</span>:  <span class="comment"># 迭代加深</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ops)):</span><br><span class="line">    <span class="comment"># 剪枝</span></span><br><span class="line">    <span class="keyword">if</span> idx // <span class="number">3</span> == opidxs[-<span class="number">1</span>] // <span class="number">3</span>:  <span class="comment"># 不要连续旋转同一个面</span></span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> idx // <span class="number">6</span> == opidxs[-<span class="number">1</span>] // <span class="number">6</span>:  <span class="comment"># 如果 连续 沿着同轴旋转 两个面</span></span><br><span class="line">      <span class="keyword">if</span> idx &gt; opidxs[-<span class="number">1</span>]:  <span class="comment"># 保证 序号小的先旋转</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    op = ops[idx]</span><br><span class="line">    res.append(op(res[-<span class="number">1</span>]))</span><br><span class="line">    opidxs.append(idx)</span><br><span class="line">    <span class="keyword">if</span> dfs(res, opidxs, remain-<span class="number">1</span>, stop):</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    res.pop()</span><br><span class="line">    opidxs.pop()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">steps</span>(<span class="params">cube3d: CUBE3DCOLOR, stop: <span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[CUBE3DCOLOR]:</span><br><span class="line">  res = [cube3d]</span><br><span class="line">  opsidxs = [-<span class="number">1</span>]</span><br><span class="line">  dep = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> <span class="keyword">not</span> dfs(res, opsidxs, dep, stop):</span><br><span class="line">    dep += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;dep = &#x27;</span>, dep)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># return opidxs</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">meet_in_middle_hanlder</span>(<span class="params">handler</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">  S = &#123;&#125;</span><br><span class="line">  STATE_TYPE = <span class="type">List</span>[<span class="built_in">int</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment">#  [state] =&gt; STATE_TYPE &#123;正向/逆向,操作idxs arr&#125;</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">get_state</span>(<span class="params">state: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">bool</span>, STATE_TYPE]:</span><br><span class="line">    ref = S</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> state:</span><br><span class="line">      <span class="keyword">if</span> v <span class="keyword">not</span> <span class="keyword">in</span> ref:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span>, <span class="literal">None</span></span><br><span class="line">      ref = ref[v]</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span>, ref</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">set_state</span>(<span class="params">state: <span class="type">List</span>[<span class="built_in">int</span>], val: STATE_TYPE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    ref = S</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(state)-<span class="number">1</span>):</span><br><span class="line">      <span class="keyword">if</span> state[i] <span class="keyword">not</span> <span class="keyword">in</span> ref:</span><br><span class="line">        ref[state[i]] = &#123;&#125;</span><br><span class="line">      ref = ref[state[i]]</span><br><span class="line">    ref[state[-<span class="number">1</span>]] = val</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">flat_cube</span>(<span class="params">cur: CUBE3DCOLOR, n=<span class="number">3</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    res = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>*n*n)]</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">          x, y, z = transfroms[_](i, j)</span><br><span class="line">          res[j+n*(i+n*_)] = cur[x][y][z]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">rev</span>(<span class="params">opidxs: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">    ret = []</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> opidxs[::-<span class="number">1</span>]:</span><br><span class="line">      <span class="keyword">if</span> v == -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      ret.append((v//<span class="number">3</span>)*<span class="number">3</span> + (<span class="number">2</span>-v % <span class="number">3</span>))</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 正向 build</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">build</span>(<span class="params">cur: CUBE3DCOLOR, opidxs: <span class="type">List</span>[<span class="built_in">int</span>], remain: <span class="built_in">int</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    flat_state = flat_cube(cur)</span><br><span class="line">    exist, state = get_state(flat_state)</span><br><span class="line">    <span class="keyword">if</span> exist <span class="keyword">and</span> <span class="built_in">len</span>(state) &lt;= <span class="built_in">len</span>(opidxs):  <span class="comment"># 更快的步骤, 由状态剪枝</span></span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    set_state(flat_state, opidxs)</span><br><span class="line">    <span class="keyword">if</span> remain == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ops)):</span><br><span class="line">      build(ops[idx](cur), opidxs+[idx], remain-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 逆向 query</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">cur: CUBE3DCOLOR, opidxs: <span class="type">List</span>[<span class="built_in">int</span>], remain: <span class="built_in">int</span></span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">bool</span>, <span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">    flat_state = flat_cube(cur)</span><br><span class="line">    exist, value = get_state(flat_state)</span><br><span class="line">    <span class="keyword">if</span> exist:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">True</span>, value + rev(opidxs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> remain == <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">False</span>, []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ops)):</span><br><span class="line">      <span class="comment"># 剪枝</span></span><br><span class="line">      <span class="keyword">if</span> idx // <span class="number">3</span> == opidxs[-<span class="number">1</span>] // <span class="number">3</span>:  <span class="comment"># 不要连续旋转同一个面</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">if</span> idx // <span class="number">6</span> == opidxs[-<span class="number">1</span>] // <span class="number">6</span>:  <span class="comment"># 如果 连续 沿着同轴旋转 两个面</span></span><br><span class="line">        <span class="keyword">if</span> idx &gt; opidxs[-<span class="number">1</span>]:  <span class="comment"># 保证 序号小的先旋转</span></span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">      ok, ret = query(ops[idx](cur), opidxs+[idx], remain-<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">if</span> ok:</span><br><span class="line">        <span class="keyword">return</span> ok, ret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span>, []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> handler(build, query)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">black_up_十棱</span>(<span class="params">cube3d: CUBE3DCOLOR</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># return opidxs</span></span><br><span class="line">  <span class="comment"># meet in middle</span></span><br><span class="line">  <span class="keyword">if</span> progress(cube3d) &gt;= <span class="number">36</span>:</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line">  <span class="keyword">assert</span> progress(cube3d) &gt;= <span class="number">32</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">c</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    x, y, z = xyz</span><br><span class="line">    <span class="keyword">return</span> cube3d[x][y][z]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">black_start</span>() -&gt; CUBE3DCOLOR:</span><br><span class="line">    res = copy(cube3d)</span><br><span class="line">    set_cube(res, _up(<span class="number">0</span>, <span class="number">0</span>), BLACK)</span><br><span class="line">    set_cube(res, _up(<span class="number">0</span>, <span class="number">2</span>), BLACK)</span><br><span class="line">    set_cube(res, _up(<span class="number">2</span>, <span class="number">0</span>), BLACK)</span><br><span class="line">    set_cube(res, _up(<span class="number">2</span>, <span class="number">2</span>), BLACK)</span><br><span class="line"></span><br><span class="line">    set_cube(res, _left(<span class="number">0</span>, <span class="number">0</span>), BLACK)</span><br><span class="line">    set_cube(res, _left(<span class="number">0</span>, <span class="number">2</span>), BLACK)</span><br><span class="line"></span><br><span class="line">    set_cube(res, _front(<span class="number">0</span>, <span class="number">0</span>), BLACK)</span><br><span class="line">    set_cube(res, _front(<span class="number">0</span>, <span class="number">2</span>), BLACK)</span><br><span class="line"></span><br><span class="line">    set_cube(res, _right(<span class="number">0</span>, <span class="number">0</span>), BLACK)</span><br><span class="line">    set_cube(res, _right(<span class="number">0</span>, <span class="number">2</span>), BLACK)</span><br><span class="line"></span><br><span class="line">    set_cube(res, _back(<span class="number">0</span>, <span class="number">0</span>), BLACK)</span><br><span class="line">    set_cube(res, _back(<span class="number">0</span>, <span class="number">2</span>), BLACK)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">black_dst</span>() -&gt; CUBE3DCOLOR:</span><br><span class="line">    res = black_start()</span><br><span class="line">    set_cube(res, _up(<span class="number">0</span>, <span class="number">1</span>), c(_up(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    set_cube(res, _up(<span class="number">1</span>, <span class="number">0</span>), c(_up(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    set_cube(res, _up(<span class="number">1</span>, <span class="number">2</span>), c(_up(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    set_cube(res, _up(<span class="number">2</span>, <span class="number">1</span>), c(_up(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">    set_cube(res, _left(<span class="number">0</span>, <span class="number">1</span>), c(_left(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    set_cube(res, _front(<span class="number">0</span>, <span class="number">1</span>), c(_front(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    set_cube(res, _right(<span class="number">0</span>, <span class="number">1</span>), c(_right(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    set_cube(res, _back(<span class="number">0</span>, <span class="number">1</span>), c(_back(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">handler</span>(<span class="params">build_fn, query_fn</span>):</span><br><span class="line">    st = black_start()</span><br><span class="line">    build_fn(st, [-<span class="number">1</span>], <span class="number">4</span>)</span><br><span class="line">    st = rotateUp(st)</span><br><span class="line">    build_fn(st, [-<span class="number">1</span>, <span class="number">0</span>], <span class="number">4</span>)</span><br><span class="line">    st = rotateUp(st)</span><br><span class="line">    build_fn(st, [-<span class="number">1</span>, <span class="number">1</span>], <span class="number">4</span>)</span><br><span class="line">    st = rotateUp(st)</span><br><span class="line">    build_fn(st, [-<span class="number">1</span>, <span class="number">2</span>], <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">    dst = black_dst()</span><br><span class="line">    <span class="keyword">for</span> op <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">1</span>, <span class="number">3</span>):  <span class="comment"># -1,0,1,2</span></span><br><span class="line">      ok, idxs = query_fn(dst, [op], <span class="number">4</span>)  <span class="comment"># 注意过滤</span></span><br><span class="line">      <span class="keyword">if</span> ok:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> o: o != -<span class="number">1</span>, idxs))</span><br><span class="line">      dst = rotateUp(dst)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> meet_in_middle_hanlder(handler)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">black_up_顶角</span>(<span class="params">cube3d: CUBE3DCOLOR</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:  <span class="comment"># return opidxs</span></span><br><span class="line">  <span class="comment"># meet in middle</span></span><br><span class="line">  <span class="keyword">if</span> progress(cube3d) &gt;= <span class="number">40</span>:</span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line">  <span class="keyword">assert</span> progress(cube3d) &gt;= <span class="number">36</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">c</span>(<span class="params">xyz: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    x, y, z = xyz</span><br><span class="line">    <span class="keyword">return</span> cube3d[x][y][z]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">black_start</span>() -&gt; CUBE3DCOLOR:</span><br><span class="line">    <span class="keyword">return</span> copy(cube3d)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">black_dsts</span>() -&gt; CUBE3DCOLOR:</span><br><span class="line">    n = <span class="number">3</span></span><br><span class="line">    finish = copy(cube3d)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        set_cube(finish, _up(i, j), c(_up(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      set_cube(finish, _left(<span class="number">0</span>, j), c(_left(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">      set_cube(finish, _front(<span class="number">0</span>, j), c(_front(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">      set_cube(finish, _right(<span class="number">0</span>, j), c(_right(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line">      set_cube(finish, _back(<span class="number">0</span>, j), c(_back(<span class="number">1</span>, <span class="number">1</span>)))</span><br><span class="line"></span><br><span class="line">    l = []</span><br><span class="line">    group: <span class="type">List</span>[<span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]] = [</span><br><span class="line">        [_up(<span class="number">2</span>, <span class="number">0</span>), _left(<span class="number">0</span>, <span class="number">2</span>), _front(<span class="number">0</span>, <span class="number">0</span>)],</span><br><span class="line">        [_up(<span class="number">2</span>, <span class="number">2</span>), _front(<span class="number">0</span>, <span class="number">2</span>), _right(<span class="number">0</span>, <span class="number">0</span>)],</span><br><span class="line">        [_up(<span class="number">0</span>, <span class="number">2</span>), _right(<span class="number">0</span>, <span class="number">2</span>), _back(<span class="number">0</span>, <span class="number">0</span>)],</span><br><span class="line">        [_up(<span class="number">0</span>, <span class="number">0</span>), _back(<span class="number">0</span>, <span class="number">2</span>), _left(<span class="number">0</span>, <span class="number">0</span>)],</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> mask <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>**<span class="number">4</span>):</span><br><span class="line">      rotate = [mask % <span class="number">3</span>, (mask//<span class="number">3</span>) % <span class="number">3</span>, (mask//<span class="number">3</span>//<span class="number">3</span>) % <span class="number">3</span>, (mask//<span class="number">3</span>//<span class="number">3</span>//<span class="number">3</span>) % <span class="number">3</span>]</span><br><span class="line">      dst = copy(finish)</span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        g = group[i]</span><br><span class="line">        color = [get_cube(finish, g[<span class="number">0</span>]), get_cube(</span><br><span class="line">            finish, g[<span class="number">1</span>]), get_cube(finish, g[<span class="number">2</span>])]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">          set_cube(dst, g[(j+rotate[i]) % <span class="number">3</span>], color[j])</span><br><span class="line"></span><br><span class="line">      l.append(dst)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">handler</span>(<span class="params">build_fn, query_fn</span>):</span><br><span class="line">    st = black_start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;start build ....&#x27;</span>)</span><br><span class="line">    build_fn(st, [-<span class="number">1</span>], <span class="number">4</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;start build Done&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    dsts = black_dsts()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(dsts)):</span><br><span class="line">      dst = dsts[i]</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">f&#x27;顶角 进度 <span class="subst">&#123;i+<span class="number">1</span>&#125;</span>/<span class="subst">&#123;<span class="built_in">len</span>(dsts)&#125;</span>&#x27;</span>)</span><br><span class="line">      ok, idxs = query_fn(dst, [-<span class="number">1</span>], <span class="number">4</span>)  <span class="comment"># 注意过滤</span></span><br><span class="line">      <span class="keyword">if</span> ok:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> o: o != -<span class="number">1</span>, idxs))</span><br><span class="line">      dst = rotateUp(dst)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">assert</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> meet_in_middle_hanlder(handler)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dump3d</span>(<span class="params">cube3d: CUBE3DCOLOR, n=<span class="number">3</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  res = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">dump_face</span>(<span class="params">fn</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    face = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      row = []</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        x, y, z = fn(i, j)</span><br><span class="line">        row.append(cube3d[x][y][z])</span><br><span class="line">      face.append(row)</span><br><span class="line">    res.append(face)</span><br><span class="line"></span><br><span class="line">  dump_face(_up)</span><br><span class="line">  dump_face(_left)</span><br><span class="line">  dump_face(_front)</span><br><span class="line">  dump_face(_right)</span><br><span class="line">  dump_face(_back)</span><br><span class="line">  dump_face(_down)</span><br><span class="line">  <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">cube: CUBE</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">  valid(cube)</span><br><span class="line">  n = <span class="built_in">len</span>(cube[<span class="number">0</span>])</span><br><span class="line">  cube3d = arr_to_3d(cube)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">      set_cube(cube3dsurface, _up(i, j, n),  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>])  <span class="comment"># UP</span></span><br><span class="line">      set_cube(cube3dsurface, _left(i, j, n),  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])  <span class="comment"># LEFT</span></span><br><span class="line">      set_cube(cube3dsurface, _front(i, j, n),  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>])  <span class="comment"># FRONT</span></span><br><span class="line">      set_cube(cube3dsurface, _right(i, j, n),  [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])  <span class="comment"># RIGHT</span></span><br><span class="line">      set_cube(cube3dsurface, _back(i, j, n),  [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>])  <span class="comment"># BACK</span></span><br><span class="line">      set_cube(cube3dsurface, _down(i, j, n),  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>])  <span class="comment"># DOWN</span></span><br><span class="line"></span><br><span class="line">  steplist = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">32</span>+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">cube3dsolver</span>():</span><br><span class="line">    ans = [cube3d]</span><br><span class="line">    <span class="keyword">for</span> dst_step <span class="keyword">in</span> steplist:</span><br><span class="line">      moves = steps(ans[-<span class="number">1</span>], dst_step)</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">f&#x27;step <span class="subst">&#123;dst_step&#125;</span> solved with ops = <span class="subst">&#123;<span class="built_in">len</span>(moves)-<span class="number">1</span>&#125;</span>&#x27;</span>)</span><br><span class="line">      ans = ans + moves[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">    opidxs = black_up_十棱(ans[-<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> opidxs:</span><br><span class="line">      ans.append(ops[idx](ans[-<span class="number">1</span>]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;顶十棱 Done!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> dst_step <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>, <span class="number">40</span>+<span class="number">1</span>):</span><br><span class="line">      moves = steps(ans[-<span class="number">1</span>], dst_step)</span><br><span class="line">      <span class="built_in">print</span>(<span class="string">f&#x27;step <span class="subst">&#123;dst_step&#125;</span> solved with ops = <span class="subst">&#123;<span class="built_in">len</span>(moves)-<span class="number">1</span>&#125;</span>&#x27;</span>)</span><br><span class="line">      ans = ans + moves[<span class="number">1</span>:]</span><br><span class="line">    <span class="comment"># opidxs = black_up_顶角(ans[-1])</span></span><br><span class="line">    <span class="comment"># for idx in opidxs:</span></span><br><span class="line">    <span class="comment">#   ans.append(ops[idx](ans[-1]))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(&#x27;顶角 Done!&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">  ans = cube3dsolver()</span><br><span class="line">  show_3ds(ans, cube3dsurface)</span><br><span class="line">  dump3d(ans[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">solve([[[<span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>]], [[<span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]], [[<span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>]], [</span><br><span class="line">      [<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>], [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>]], [[<span class="number">0</span>, <span class="number">4</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>]], [[<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>], [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>], [<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>]]])</span><br></pre></td></tr></table></figure>

<h3 id="7步公式"><a href="#7步公式" class="headerlink" title="7步公式"></a>7步公式</h3><p>底层: 感觉基本逻辑就够了,没有什么”公式”</p>
<p>中层:</p>
<ul>
<li>要把 左侧(0,1)移动到(1,2): 右手: 左上右下 + 背后90度 + 右上左下</li>
<li>要把 右侧(0,1)移动到(1,0): 左手: 右上左下 + 背后90度 + 左上右下</li>
</ul>
<p>顶面十字:</p>
<ul>
<li>前顺时针+左上右下+前逆时针</li>
</ul>
<p>十字棱:</p>
<ul>
<li>右手: 上 左 下 左 上 左2 下 左</li>
</ul>
<p>顶角位置:</p>
<ul>
<li>(顶顺)(右上)(顶逆)(左上) (顶顺)(右下)(顶逆)(左下)</li>
</ul>
<p>完成:</p>
<ul>
<li>右下,底顺,右上,底逆</li>
</ul>
<h2 id="4-阶"><a href="#4-阶" class="headerlink" title="4+阶"></a>4+阶</h2><p>从3阶提取, 逻辑意义</p>
<p>TODO</p>
<h3 id="Korf’s-algorithm"><a href="#Korf’s-algorithm" class="headerlink" title="Korf’s algorithm"></a>Korf’s algorithm</h3><p>TODO</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当然, 上面的问题在于 实际上还是借鉴了现有公式(7步还原魔方)的”过程”, 因为在无知识的情况下, 其实无法知道去做阶段性是否是可行的</p>
<p>另外,作为程序搜索,如果有办法提出更好的渐进的方案而不是上面的渐进方案,过着在搜索中能有优先级,就更好了(<a href="https://zhuanlan.zhihu.com/p/57816260">https://zhuanlan.zhihu.com/p/57816260</a> 里讲到了多个步骤)</p>
<p>既然上面最多单次步数是7步, 有没有办法是,从两头向中间搜索(meet-in-middle),这样先把不关心的颜色 全部置为第7种颜色,这样最大步数是4步, $18 * 15^3 &#x3D; 60750$ 非常小, 稍微的问题是目前实现是靠估价函数实现的, 所以其实并不能准确的知道目标状态, 所以其实有可能$2^4$种左右的目标状态,但这也不大</p>
<p>然而上面的 7步还原魔方, 所用的公式,有不少在7,8步, 最后的还是9步</p>
<p>而作为速拧用的cfop(Fridrich Method), 则是相当于暴力分情况(119 条公式)讨论, 而单次的步数都更长, 对于暴力搜索更不可取了</p>
<h2 id="Ref"><a href="#Ref" class="headerlink" title="Ref"></a>Ref</h2><p><a href="https://en.wikipedia.org/wiki/Optimal_solutions_for_the_Rubik%27s_Cube#Korf&#39;s_algorithm">https://en.wikipedia.org/wiki/Optimal_solutions_for_the_Rubik%27s_Cube#Korf&#39;s_algorithm</a></p>
<p><a href="https://www.youtube.com/watch?v=ZtlMkzix7Bw">https://www.youtube.com/watch?v=ZtlMkzix7Bw</a></p>
<p><a href="https://stackoverflow.com/questions/58860280/how-to-create-a-pattern-database-for-solving-rubiks-cube">https://stackoverflow.com/questions/58860280/how-to-create-a-pattern-database-for-solving-rubiks-cube</a></p>
<p><a href="https://www.cs.princeton.edu/courses/archive/fall06/cos402/papers/korfrubik.pdf">https://www.cs.princeton.edu/courses/archive/fall06/cos402/papers/korfrubik.pdf</a></p>
<p><a href="https://en.wikipedia.org/wiki/Optimal_solutions_for_the_Rubik%27s_Cube#Korf&#39;s_algorithm">https://en.wikipedia.org/wiki/Optimal_solutions_for_the_Rubik%27s_Cube#Korf&#39;s_algorithm</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/41464087">https://zhuanlan.zhihu.com/p/41464087</a></p>
<p><a href="https://arxiv.org/pdf/1805.07470.pdf">https://arxiv.org/pdf/1805.07470.pdf</a></p>
]]></content>
      <categories>
        <category>魔方</category>
      </categories>
      <tags>
        <tag>魔方</tag>
      </tags>
  </entry>
</search>
